import{_ as i}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as n,b as a,o as e}from"./app-CU_36ULm.js";const l={};function t(p,s){return e(),n("div",null,s[0]||(s[0]=[a(`<h1 id="后端快速上手" tabindex="-1"><a class="header-anchor" href="#后端快速上手"><span>后端快速上手</span></a></h1><p>本小节我们将在 lin-cms 的基础上开发一个简单的图书管理 demo,帮助大家来熟悉和入门 lin-cms。</p><p>lin-cms 是一个 lin 团队经数打磨的模板项目，本人是 c#的开发者，为 lin-cms <a href="http://xn--30r01bk4g.net" target="_blank" rel="noopener noreferrer">完善在.net</a> 下的生态，是基于 asp.netcore 的基础上，沉淀下来的一套实践， 帮助开发者节约时间。</p><blockquote><p>注意：本小节建立在你有一定的 <a href="http://asp.net" target="_blank" rel="noopener noreferrer">asp.net</a> mvc，freesql，.net core 的基础上。</p></blockquote><h2 id="数据层" tabindex="-1"><a class="header-anchor" href="#数据层"><span>数据层</span></a></h2><p><a href="http://xn--6kqui483ct5rgbx9m.net" target="_blank" rel="noopener noreferrer">由于我们用的.net</a> core 中优秀的开源项目 FreeSql,codefirst 模式，他能根据类生成表结构。所以，不需要我们手动创建表结构。</p><h3 id="book-书" tabindex="-1"><a class="header-anchor" href="#book-书"><span>book 书</span></a></h3><table><thead><tr><th>字段</th><th>类型</th><th>备注</th></tr></thead><tbody><tr><td>id</td><td>bigint</td><td>主键 Id</td></tr><tr><td>author</td><td>varchar</td><td>作者</td></tr><tr><td>image</td><td>varchar</td><td>图片</td></tr><tr><td>summary</td><td>varchar</td><td>简介</td></tr><tr><td>title</td><td>varchar</td><td>标题</td></tr></tbody></table><p>可增加一些审计字段，如</p><table><thead><tr><th>字段</th><th>类型</th><th>备注</th></tr></thead><tbody><tr><td>create_time</td><td>datetime</td><td>创建时间</td></tr><tr><td>create_user_id</td><td>datetime</td><td>创建者 ID</td></tr><tr><td>update_time</td><td>datetime</td><td>修改时间</td></tr><tr><td>update_user_id</td><td>datetime</td><td>最后修改人 Id</td></tr><tr><td>delete_time</td><td>datetime</td><td>删除时间</td></tr><tr><td>delete_user_id</td><td>datetime</td><td>删除人 id</td></tr><tr><td>is_deleted</td><td>datetime</td><td>是否删除</td></tr></tbody></table><p>审计字段可通过继承父类<strong>FullAuditEntity</strong>即可,当然，也可只有创建时间，创建人二个字段，继承<strong>ICreateAuditEntity</strong>接口，实现二个字段即可。如果不想要这些记录，只需要继承<strong>Entity</strong>类，仅有一个 ID 字段，支持泛型。</p><p><strong>is_deleted</strong>字段本身没有什么稀奇的，但我们可以配合 FreeSql 实现逻辑删除（软删除），在 <a href="http://LinCms.Web/Configs/DependencyInjectionExtensions.cs" target="_blank" rel="noopener noreferrer">LinCms.Web/Configs/DependencyInjectionExtensions.cs</a> 文件中。配置 了如下内容，如果我们筛选数据时，会全局启用 <a href="https://github.com/dotnetcore/FreeSql/wiki/%E8%BF%87%E6%BB%A4%E5%99%A8" target="_blank" rel="noopener noreferrer">过滤器</a>。像创建时间，创建人。这些字段都不需要我们赋值，如果我们全部使用仓储<strong>IAuditBaseRepository</strong>访问数据库，这些字段会自动赋值。</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span>fsql.GlobalFilter.Apply&lt;IDeleteAuditEntity&gt;(&quot;IsDeleted&quot;, a =&gt; a.IsDeleted == false);</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h2 id="模型层" tabindex="-1"><a class="header-anchor" href="#模型层"><span>模型层</span></a></h2><p>我们建立单纯的实体类（Entities)，在路径<strong>lin-cms-dotnetcore\\src\\LinCms.Core\\Entities</strong>,名为 Book.cs 的实体类</p><div class="language-csharp line-numbers-mode" data-highlighter="shiki" data-ext="csharp" data-title="csharp" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">using</span><span style="--shiki-light:#6F42C1;--shiki-dark:#E5C07B;"> FreeSql</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#E5C07B;">DataAnnotations</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">namespace</span><span style="--shiki-light:#6F42C1;--shiki-dark:#E5C07B;"> LinCms</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#E5C07B;">Core</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#E5C07B;">Entities</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">{</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">    [</span><span style="--shiki-light:#6F42C1;--shiki-dark:#E5C07B;">Table</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#ABB2BF;">Name</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> &quot;book&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">)]</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">    public</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#E5C07B;"> Book</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> : </span><span style="--shiki-light:#6F42C1;--shiki-dark:#E5C07B;">FullAuditEntity</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">    {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">        [</span><span style="--shiki-light:#6F42C1;--shiki-dark:#E5C07B;">Column</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#ABB2BF;">DbType</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> &quot;varchar(30)&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">)]</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">        public</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;"> string</span><span style="--shiki-light:#6F42C1;--shiki-dark:#ABB2BF;"> Author</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> { </span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">get</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">; </span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">set</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">; } </span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;"> string</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;">Empty</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">        [</span><span style="--shiki-light:#6F42C1;--shiki-dark:#E5C07B;">Column</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#ABB2BF;">DbType</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> &quot;varchar(50)&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">)]</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">        public</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;"> string</span><span style="--shiki-light:#6F42C1;--shiki-dark:#ABB2BF;"> Image</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> { </span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">get</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">; </span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">set</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">; } </span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;"> string</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;">Empty</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">        [</span><span style="--shiki-light:#6F42C1;--shiki-dark:#E5C07B;">Column</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#ABB2BF;">DbType</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> &quot;varchar(1000)&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">)]</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">        public</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;"> string</span><span style="--shiki-light:#6F42C1;--shiki-dark:#ABB2BF;"> Summary</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> { </span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">get</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">; </span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">set</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">; } </span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;"> string</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;">Empty</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">        [</span><span style="--shiki-light:#6F42C1;--shiki-dark:#E5C07B;">Column</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#ABB2BF;">DbType</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> &quot;varchar(50)&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">)]</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">        public</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;"> string</span><span style="--shiki-light:#6F42C1;--shiki-dark:#ABB2BF;"> Title</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> { </span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">get</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">; </span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">set</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">; } </span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;"> string</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;">Empty</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>更多特性标签支持情况，请查看<a href="https://github.com/dotnetcore/FreeSql/wiki/%E5%AE%9E%E4%BD%93%E7%89%B9%E6%80%A7" target="_blank" rel="noopener noreferrer">FreeSql 官方文档实体特性</a>。</p><p>由于默认 FreeSql,只有访问到这个类时才会生成表，但我们可以手动扫描所有带有 Table 特性标签的类，同步表结构。仅建议开发时启动表结构全部同步。</p><p><a href="http://LinCms.Web/Configs/DependencyInjectionExtensions.cs" target="_blank" rel="noopener noreferrer">LinCms.Web/Configs/DependencyInjectionExtensions.cs</a><br> 中的 AddContext 配置项中.</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span>//在运行时直接生成表结构</span></span>
<span class="line"><span>fsql.CodeFirst.SyncStructure(ReflexHelper.GetEntityTypes(typeof(IEntity)));</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="业务层" tabindex="-1"><a class="header-anchor" href="#业务层"><span>业务层</span></a></h2><p>有了实体类，我们创建 IBookRepository<code>&lt;Book,long&gt;</code>，也可以不创建，直接使用 IAuditBaseRepository<code>&lt;Book&gt;</code>在 Service 层写相应的业务。这里我们就不创建仓储服务了，框架中携带的仓储已经满足我们的要求。</p><p>仓储是什么呢。在这里我们可以理解 DAL,也理解为仓库，他提供了对单个表的 CURD 操作方法，有了一个统一的规范。</p><p>作用即数据的持久化，应用服务通过仓储对数据进行操作，让开发者不用关注仓储内部的实现。</p><p>业务层 Services，我们直接使用仓储访问数据库。</p><p>在 LinCms.Application.Contracts 项目中，在 v1 文件夹新建一个 Books 的文件夹,用于存放书的相关接口，创建 IBookService 的接口</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span>using System.Threading.Tasks;</span></span>
<span class="line"><span>using LinCms.Application.Contracts.v1.Books.Dtos;</span></span>
<span class="line"><span>using LinCms.Core.Data;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>namespace LinCms.Application.Contracts.v1.Books</span></span>
<span class="line"><span>{</span></span>
<span class="line"><span>    public interface IBookService</span></span>
<span class="line"><span>    {</span></span>
<span class="line"><span>        Task&lt;BookDto&gt; GetAsync(long id);</span></span>
<span class="line"><span>    }</span></span>
<span class="line"><span>}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>新建一个 Dtos 文件夹，用于存放业务传输的数据对象，再创建一个 BookDto，仅包含必要的字段，而非全部。该类以 Dto 结尾，代表数据传输对象。</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span>using System;</span></span>
<span class="line"><span>using LinCms.Core.Entities;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>namespace LinCms.Application.Contracts.v1.Books.Dtos</span></span>
<span class="line"><span>{</span></span>
<span class="line"><span>    public class BookDto:EntityDto</span></span>
<span class="line"><span>    {</span></span>
<span class="line"><span>        public string Author { get; set; }</span></span>
<span class="line"><span>        public string Image { get; set; }</span></span>
<span class="line"><span>        public string Summary { get; set; }</span></span>
<span class="line"><span>        public string Title { get; set; }</span></span>
<span class="line"><span>        public DateTime CreateTime { get; set; }</span></span>
<span class="line"><span>        public DateTime UpdateTime { get; set; }</span></span>
<span class="line"><span>    }</span></span>
<span class="line"><span>}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在 BookService 实现如下，在这里我们注入 IAuditBaseRepository，通过 调用 <strong>_bookRepository.Select.Where(a =&gt; <a href="http://a.Id" target="_blank" rel="noopener noreferrer">a.Id</a> == id).ToOneAsync();</strong> ,根据 id 得到书的实体对象。然后使用 AutoMappeer,将 Book 类转换成 BookDto 类，然后返回。<br> 至于为什么 这里我们可以注入 IAuditBaseRepository，IMapper 类，后面我们会讲到。</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span>using System.Collections.Generic;</span></span>
<span class="line"><span>using System.Linq;</span></span>
<span class="line"><span>using System.Threading.Tasks;</span></span>
<span class="line"><span>using AutoMapper;</span></span>
<span class="line"><span>using LinCms.Application.Contracts.v1.Books;</span></span>
<span class="line"><span>using LinCms.Application.Contracts.v1.Books.Dtos;</span></span>
<span class="line"><span>using LinCms.Core.Data;</span></span>
<span class="line"><span>using LinCms.Core.Entities;</span></span>
<span class="line"><span>using LinCms.Core.Exceptions;</span></span>
<span class="line"><span>using LinCms.Core.Extensions;</span></span>
<span class="line"><span>using LinCms.Core.IRepositories;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>namespace LinCms.Application.v1.Books</span></span>
<span class="line"><span>{</span></span>
<span class="line"><span>    public class BookService : IBookService</span></span>
<span class="line"><span>    {</span></span>
<span class="line"><span>        private readonly IAuditBaseRepository&lt;Book&gt; _bookRepository;</span></span>
<span class="line"><span>        private readonly IMapper _mapper;</span></span>
<span class="line"><span>        public BookService(IAuditBaseRepository&lt;Book&gt; bookRepository, IMapper mapper)</span></span>
<span class="line"><span>        {</span></span>
<span class="line"><span>            _bookRepository = bookRepository;</span></span>
<span class="line"><span>            _mapper = mapper;</span></span>
<span class="line"><span>        }</span></span>
<span class="line"><span></span></span>
<span class="line"><span></span></span>
<span class="line"><span>        public async Task&lt;BookDto&gt; GetAsync(long id)</span></span>
<span class="line"><span>        {</span></span>
<span class="line"><span>            Book book = await _bookRepository.Select.Where(a =&gt; a.Id == id).ToOneAsync();</span></span>
<span class="line"><span>            return _mapper.Map&lt;BookDto&gt;(book);</span></span>
<span class="line"><span>        }</span></span>
<span class="line"><span>    }</span></span>
<span class="line"><span>}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>因为使用 AutoMapper 简化二个对象的映射，我们在同一目录下，创建一个继承 Profile 类的配置项。在构造函数中，我们配置了调用 CreateMap 方法，代表，从 Book-&gt;BookDto 的映射关系。</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span>using AutoMapper;</span></span>
<span class="line"><span>using LinCms.Application.Contracts.v1.Books.Dtos;</span></span>
<span class="line"><span>using LinCms.Core.Entities;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>namespace LinCms.Application.v1.Books</span></span>
<span class="line"><span>{</span></span>
<span class="line"><span>    public class BookProfile:Profile</span></span>
<span class="line"><span>    {</span></span>
<span class="line"><span>        public BookProfile()</span></span>
<span class="line"><span>        {</span></span>
<span class="line"><span>            CreateMap&lt;Book, BookDto&gt;();</span></span>
<span class="line"><span>        }</span></span>
<span class="line"><span>    }</span></span>
<span class="line"><span>}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在 <a href="http://ASP.NET" target="_blank" rel="noopener noreferrer">ASP.NET</a> Core 中，我们会扫描该程序集（LinCms.Applicaiton）中所有继承了 Profile 类的子类，在 <a href="http://LinCms.Web" target="_blank" rel="noopener noreferrer">LinCms.Web</a> 中 ConfiguartionService 配置如下，</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span>services.AddAutoMapper(typeof(BookProfile).Assembly);</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>一个项目即一个程序集(生成一个 dll)，仅配置一次。</p><p>我们完善一下控制器的代码。</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span>using System.Threading.Tasks;</span></span>
<span class="line"><span>using AutoMapper;</span></span>
<span class="line"><span>using LinCms.Application.Contracts.v1.Books;</span></span>
<span class="line"><span>using LinCms.Application.Contracts.v1.Books.Dtos;</span></span>
<span class="line"><span>using LinCms.Core.Aop;</span></span>
<span class="line"><span>using LinCms.Core.Aop.Filter;</span></span>
<span class="line"><span>using LinCms.Core.Data;</span></span>
<span class="line"><span>using LinCms.Core.Entities;</span></span>
<span class="line"><span>using LinCms.Core.Exceptions;</span></span>
<span class="line"><span>using LinCms.Core.Extensions;</span></span>
<span class="line"><span>using LinCms.Core.IRepositories;</span></span>
<span class="line"><span>using LinCms.Web.Data.Authorization;</span></span>
<span class="line"><span>using Microsoft.AspNetCore.Authorization;</span></span>
<span class="line"><span>using Microsoft.AspNetCore.Mvc;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>namespace LinCms.Web.Controllers.v1</span></span>
<span class="line"><span>{</span></span>
<span class="line"><span>    [Route(&quot;v1/book&quot;)]</span></span>
<span class="line"><span>    [ApiController]</span></span>
<span class="line"><span>    [Authorize]</span></span>
<span class="line"><span>    public class BookController : ControllerBase</span></span>
<span class="line"><span>    {</span></span>
<span class="line"><span>        private readonly IBookService _bookService;</span></span>
<span class="line"><span>        public BookController(IBookService bookService)</span></span>
<span class="line"><span>        {</span></span>
<span class="line"><span>            _bookService = bookService;</span></span>
<span class="line"><span>        }</span></span>
<span class="line"><span></span></span>
<span class="line"><span>        [HttpGet(&quot;{id}&quot;)]</span></span>
<span class="line"><span>        public async Task&lt;BookDto&gt; GetAsync(int id)</span></span>
<span class="line"><span>        {</span></span>
<span class="line"><span>            return await _bookService.GetAsync(id);</span></span>
<span class="line"><span>        }</span></span>
<span class="line"><span>    }</span></span>
<span class="line"><span>}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在 <a href="http://LinCms.Web/Controllers/v1" target="_blank" rel="noopener noreferrer">LinCms.Web/Controllers/v1</a> 文件夹，创建我们的 Book 控制器。<br> 我们依旧通过构造函数注入服务<strong>IBookService</strong>,这里用到的是 async await 方法，与同步方法执行顺序一致，仅多二个关键字，并使用 Task&lt;返回值&gt;来返回数据，通常我们使用 Async 标识异步方法。</p><p>启动项目，可通过 Visual Studio 点击上方的运行即可。</p><p>还可通过终端运行项目</p><p>先 cd 到目录 lin-cms-dotnetcore/src/LinCms.Web</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span>dotnet run</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>打开浏览器，<a href="https://localhost:5001/swagger/index.html%EF%BC%8C" target="_blank" rel="noopener noreferrer">https://localhost:5001/swagger/index.html，</a> ctrl+f 搜索，book，找到 GET /v1/book/{id}，点击 try it out,输入 id，点击 Execute。</p><p>因为我们没登录登录，在 BookController 上写了特性标签 <strong>[Authorize]</strong> ，所以会返回</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span>{</span></span>
<span class="line"><span>  &quot;code&quot;: 10000,</span></span>
<span class="line"><span>  &quot;message&quot;: &quot;请先登录&quot;,</span></span>
<span class="line"><span>  &quot;request&quot;: &quot;GET /v1/book/131&quot;</span></span>
<span class="line"><span>}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>我们可以先去掉这个特性标签，也可以走登录浏览，把 Token 放到 Header 中的 Authoriaztion 中。。</p><p>这里我们先去掉这行特性标签。去掉后，需要 ctrl+c，即出运行状态，如果感觉麻烦，可以使用 <strong>dotnet run watch</strong> 命令，修改后，自动重启，不需要手动重启。。</p><p>这里我们重新测试，手动给数据库加一些数据，记得 is_deleted 要是 false，然后输入对应的 id，会得到对应的值</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span>{</span></span>
<span class="line"><span>  &quot;author&quot;: &quot;891dc185-2&quot;,</span></span>
<span class="line"><span>  &quot;image&quot;: &quot;f6d0c1e9-fcb2-446a-9093-d773e6515579&quot;,</span></span>
<span class="line"><span>  &quot;summary&quot;: &quot;8aea38f8-a6e0-4053-bd7a-ae4476432bdd&quot;,</span></span>
<span class="line"><span>  &quot;title&quot;: &quot;2d0c2e44-ee02-4d40-b4b7-eed03bb48aa4&quot;,</span></span>
<span class="line"><span>  &quot;create_time&quot;: 1588485910430,</span></span>
<span class="line"><span>  &quot;update_time&quot;: 1588485910430,</span></span>
<span class="line"><span>  &quot;id&quot;: 139</span></span>
<span class="line"><span>}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,50)]))}const c=i(l,[["render",t],["__file","cms-start.html.vue"]]),h=JSON.parse('{"path":"/dotnetcore/lin-cms/cms-start.html","title":"后端快速上手","lang":"zh-CN","frontmatter":{"description":"后端快速上手 本小节我们将在 lin-cms 的基础上开发一个简单的图书管理 demo,帮助大家来熟悉和入门 lin-cms。 lin-cms 是一个 lin 团队经数打磨的模板项目，本人是 c#的开发者，为 lin-cms 完善在.net 下的生态，是基于 asp.netcore 的基础上，沉淀下来的一套实践， 帮助开发者节约时间。 注意：本小节建立...","head":[["meta",{"property":"og:url","content":"https://igeekfan.cn/igeekfan-docs/dotnetcore/lin-cms/cms-start.html"}],["meta",{"property":"og:site_name","content":".NET 开发者指北"}],["meta",{"property":"og:title","content":"后端快速上手"}],["meta",{"property":"og:description","content":"后端快速上手 本小节我们将在 lin-cms 的基础上开发一个简单的图书管理 demo,帮助大家来熟悉和入门 lin-cms。 lin-cms 是一个 lin 团队经数打磨的模板项目，本人是 c#的开发者，为 lin-cms 完善在.net 下的生态，是基于 asp.netcore 的基础上，沉淀下来的一套实践， 帮助开发者节约时间。 注意：本小节建立..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2022-07-30T11:18:46.000Z"}],["meta",{"property":"article:modified_time","content":"2022-07-30T11:18:46.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"后端快速上手\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2022-07-30T11:18:46.000Z\\",\\"author\\":[]}"],["link",{"rel":"alternate","type":"application/atom+xml","href":"https://igeekfan.cn/igeekfan-docs/atom.xml","title":".NET 开发者指北 Atom Feed"}],["link",{"rel":"alternate","type":"application/json","href":"https://igeekfan.cn/igeekfan-docs/feed.json","title":".NET 开发者指北 JSON Feed"}],["link",{"rel":"alternate","type":"application/rss+xml","href":"https://igeekfan.cn/igeekfan-docs/rss.xml","title":".NET 开发者指北 RSS Feed"}]]},"headers":[{"level":2,"title":"数据层","slug":"数据层","link":"#数据层","children":[{"level":3,"title":"book 书","slug":"book-书","link":"#book-书","children":[]}]},{"level":2,"title":"模型层","slug":"模型层","link":"#模型层","children":[]},{"level":2,"title":"业务层","slug":"业务层","link":"#业务层","children":[]}],"git":{"createdTime":1595610608000,"updatedTime":1659179926000,"contributors":[{"name":"igeekfan","email":"luoyunchong@foxmail.com","commits":2},{"name":"luoyunchong","email":"luoyunchong@foxmail.com","commits":1}]},"readingTime":{"minutes":5.5,"words":1650},"filePathRelative":"dotnetcore/lin-cms/cms-start.md","localizedDate":"2020年7月24日","autoDesc":true}');export{c as comp,h as data};
