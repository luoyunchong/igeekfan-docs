import{_ as s}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as a,b as e,o as i}from"./app-BGgbFL2G.js";const l={};function p(c,n){return i(),a("div",null,[...n[0]||(n[0]=[e(`<h1 id="项目结构" tabindex="-1"><a class="header-anchor" href="#项目结构"><span>项目结构</span></a></h1><p>本文档介绍 <a href="http://LinCMS.NET" target="_blank" rel="noopener noreferrer">LinCMS.NET</a> Core (后端) 和 LinCMS Vue 2 (前端) 的项目结构。</p><h2 id="后端-lin-cms-dotnetcore" tabindex="-1"><a class="header-anchor" href="#后端-lin-cms-dotnetcore"><span>后端 (lin-cms-dotnetcore)</span></a></h2><p>后端项目遵循领域驱动设计 (DDD) 的分层思想，但进行了简化以适应 Web API 开发。</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span>lin-cms-dotnetcore/</span></span>
<span class="line"><span>├── src/</span></span>
<span class="line"><span>│   ├── LinCms.Application/             # 应用服务层 (Application Layer)</span></span>
<span class="line"><span>│   │   ├── v1/                         # API 版本 v1</span></span>
<span class="line"><span>│   │   │   ├── Books/                  # 示例：图书管理服务实现</span></span>
<span class="line"><span>│   │   │   ├── Files/                  # 文件服务实现</span></span>
<span class="line"><span>│   │   │   ├── Logs/                   # 日志服务实现</span></span>
<span class="line"><span>│   │   │   └── ...                     # 其他业务模块</span></span>
<span class="line"><span>│   │   ├── AutoMapper/                 # AutoMapper 配置</span></span>
<span class="line"><span>│   │   ├── Base/                       # 应用层基类 (如 CrudAppService)</span></span>
<span class="line"><span>│   │   └── LinCmsAppModule.cs          # 应用层模块定义 (Autofac)</span></span>
<span class="line"><span>│   │</span></span>
<span class="line"><span>│   ├── LinCms.Application.Contracts/   # 应用服务接口与DTO层 (Contracts Layer)</span></span>
<span class="line"><span>│   │   ├── v1/                         # API 版本 v1</span></span>
<span class="line"><span>│   │   │   ├── Books/                  # 示例：图书管理 DTO 和服务接口</span></span>
<span class="line"><span>│   │   │   └── ...                     # 其他业务模块接口和 DTO</span></span>
<span class="line"><span>│   │   ├── Base/                       # 基础 DTO 和接口 (分页, 结果等)</span></span>
<span class="line"><span>│   │   └── LinCmsApplicationContractsModule.cs # 契约层模块定义</span></span>
<span class="line"><span>│   │</span></span>
<span class="line"><span>│   ├── LinCms.Core/                    # 核心层 (Domain Layer)</span></span>
<span class="line"><span>│   │   ├── Aop/                        # AOP 相关 (如权限、日志切面)</span></span>
<span class="line"><span>│   │   ├── Common/                     # 通用常量、枚举等</span></span>
<span class="line"><span>│   │   ├── Entities/                   # 数据库实体定义</span></span>
<span class="line"><span>│   │   │   ├── Base/                   # 基础实体 (审计字段等)</span></span>
<span class="line"><span>│   │   │   └── ...                     # 各模块实体</span></span>
<span class="line"><span>│   │   ├── Exceptions/                 # 自定义异常</span></span>
<span class="line"><span>│   │   ├── Extensions/                 # 扩展方法</span></span>
<span class="line"><span>│   │   ├── IRenderers/                 # (特定功能，如模板渲染)</span></span>
<span class="line"><span>│   │   ├── IRepositories/              # 仓储接口定义</span></span>
<span class="line"><span>│   │   ├── Security/                   # 安全相关 (如 CurrentUser)</span></span>
<span class="line"><span>│   │   └── LinCmsCoreModule.cs         # 核心层模块定义</span></span>
<span class="line"><span>│   │</span></span>
<span class="line"><span>│   ├── LinCms.Infrastructure/          # 基础设施层 (Infrastructure Layer)</span></span>
<span class="line"><span>│   │   ├── Data/                       # FreeSql 配置、种子数据等</span></span>
<span class="line"><span>│   │   ├── Middleware/                 # 中间件</span></span>
<span class="line"><span>│   │   ├── Repositories/               # 仓储实现 (基于 FreeSql)</span></span>
<span class="line"><span>│   │   │   └── Base/                   # 基础仓储实现</span></span>
<span class="line"><span>│   │   └── LinCmsInfrastructureModule.cs # 基础设施层模块定义</span></span>
<span class="line"><span>│   │</span></span>
<span class="line"><span>│   ├── LinCms.Web/                     # Web API 层 (Presentation Layer)</span></span>
<span class="line"><span>│   │   ├── Controllers/                # API 控制器</span></span>
<span class="line"><span>│   │   │   ├── cms/                    # CMS 管理相关 API</span></span>
<span class="line"><span>│   │   │   └── v1/                     # 业务 API (版本 v1)</span></span>
<span class="line"><span>│   │   ├── Filter/                     # Web API 过滤器</span></span>
<span class="line"><span>│   │   ├── Middleware/                 # Web 中间件</span></span>
<span class="line"><span>│   │   ├── Models/                     # Web 层特定模型</span></span>
<span class="line"><span>│   │   ├── Services/                   # Web 层特定服务 (如启动配置)</span></span>
<span class="line"><span>│   │   ├── appsettings.json            # 配置文件</span></span>
<span class="line"><span>│   │   ├── lin-cms.db                  # Sqlite 数据库文件 (默认)</span></span>
<span class="line"><span>│   │   ├── Program.cs                  # 应用启动入口 (.NET 9+)</span></span>
<span class="line"><span>│   │   └── LinCmsWebModule.cs          # Web 层模块定义</span></span>
<span class="line"><span>│   │</span></span>
<span class="line"><span>│   └── LinCms.WorkerService/           # (可选) 后台任务服务</span></span>
<span class="line"><span>│</span></span>
<span class="line"><span>├── test/                               # 测试项目</span></span>
<span class="line"><span>│   └── LinCms.Test/                    # 单元测试/集成测试</span></span>
<span class="line"><span>│</span></span>
<span class="line"><span>└── lin-cms-dotnetcore.sln              # 解决方案文件</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>分层职责:</strong></p><ul><li><strong>Core</strong>: 定义核心业务规则、实体、仓储接口和领域事件。不依赖其他层。</li><li><strong>Application.Contracts</strong>: 定义应用服务的接口 (Interface) 和数据传输对象 (DTO)。用于层间解耦。</li><li><strong>Application</strong>: 实现应用服务接口，编排领域逻辑，处理 DTO 与实体的转换。依赖 Core 和 Contracts。</li><li><strong>Infrastructure</strong>: 提供具体的技术实现，如数据库访问 (仓储实现)、缓存、消息队列、第三方服务集成等。依赖 Core。</li><li><strong>Web</strong>: 处理 HTTP 请求，调用应用服务，处理用户认证授权，配置 API 路由和过滤器。依赖 Application, Application.Contracts, Infrastructure。</li></ul><h2 id="前端-lin-cms-vue" tabindex="-1"><a class="header-anchor" href="#前端-lin-cms-vue"><span>前端 (lin-cms-vue)</span></a></h2><p>前端项目使用 Vite 构建，基于 Vue 2 和 Element Plus。</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span>lin-cms-vue/</span></span>
<span class="line"><span>├── public/</span></span>
<span class="line"><span>│   └── favicon.ico             # 网站图标</span></span>
<span class="line"><span>├── src/</span></span>
<span class="line"><span>│   ├── api/                    # API 请求模块 (按业务划分)</span></span>
<span class="line"><span>│   ├── assets/                 # 静态资源 (图片, 字体等)</span></span>
<span class="line"><span>│   ├── components/             # 全局/可复用 UI 组件</span></span>
<span class="line"><span>│   │   ├── Lin/                # Lin CMS 风格的基础组件</span></span>
<span class="line"><span>│   │   └── ...</span></span>
<span class="line"><span>│   ├── config/                 # 项目配置 (网站设置, 路由白名单等)</span></span>
<span class="line"><span>│   ├── directive/              # 自定义 Vue 指令</span></span>
<span class="line"><span>│   ├── hooks/                  # Composition API Hooks</span></span>
<span class="line"><span>│   ├── layout/                 # 布局组件 (基础布局, 页面容器)</span></span>
<span class="line"><span>│   ├── plugins/                # Vue 插件 (Element Plus, Pinia 等)</span></span>
<span class="line"><span>│   ├── router/                 # Vue Router 配置 (路由表, 导航守卫)</span></span>
<span class="line"><span>│   ├── store/                  # Pinia 状态管理 (按模块划分)</span></span>
<span class="line"><span>│   ├── styles/                 # 全局样式, SCSS 变量, Mixins</span></span>
<span class="line"><span>│   ├── utils/                  # 工具函数 (请求封装, 日期处理等)</span></span>
<span class="line"><span>│   ├── views/                  # 页面级组件 (按路由/功能划分)</span></span>
<span class="line"><span>│   │   ├── about/</span></span>
<span class="line"><span>│   │   ├── admin/</span></span>
<span class="line"><span>│   │   ├── book/</span></span>
<span class="line"><span>│   │   └── ...</span></span>
<span class="line"><span>│   ├── App.vue                 # 根组件</span></span>
<span class="line"><span>│   ├── main.ts                 # 应用入口文件 (初始化 Vue, Router, Pinia)</span></span>
<span class="line"><span>│   └── vite-env.d.ts           # Vite 环境变量类型定义</span></span>
<span class="line"><span>├── tests/                    # 测试目录 (单元测试, E2E 测试)</span></span>
<span class="line"><span>├── .env                      # 基础环境变量</span></span>
<span class="line"><span>├── .env.development          # 开发环境变量</span></span>
<span class="line"><span>├── .env.production           # 生产环境变量</span></span>
<span class="line"><span>├── .eslintrc.js              # ESLint 配置</span></span>
<span class="line"><span>├── .gitignore                # Git 忽略配置</span></span>
<span class="line"><span>├── .prettierrc.js            # Prettier 配置</span></span>
<span class="line"><span>├── index.html                # HTML 入口文件</span></span>
<span class="line"><span>├── package.json              # 项目依赖和脚本</span></span>
<span class="line"><span>├── pnpm-lock.yaml            # pnpm 锁定文件</span></span>
<span class="line"><span>├── tsconfig.json             # TypeScript 配置</span></span>
<span class="line"><span>└── vite.config.ts            # Vite 配置文件 (构建, 代理, 插件)</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>主要目录职责:</strong></p><ul><li><strong><code>src/api</code></strong>: 封装对后端接口的调用。</li><li><strong><code>src/components</code></strong>: 存放可以在多个页面复用的 UI 组件。</li><li><strong><code>src/layout</code></strong>: 定义应用的基本页面结构，如包含导航栏、侧边栏的布局。</li><li><strong><code>src/router</code></strong>: 配置页面路由和访问权限控制。</li><li><strong><code>src/store</code></strong>: 使用 Pinia 管理全局或模块化的状态。</li><li><strong><code>src/views</code></strong>: 存放与特定路由对应的页面组件。</li><li><strong><code>src/styles</code></strong>: 定义全局 CSS 样式、变量和主题。</li><li><strong><code>src/utils</code></strong>: 存放通用的辅助函数。</li><li><strong><code>vite.config.ts</code></strong>: 配置开发服务器、构建选项、代理等。</li><li><strong><code>.env*</code></strong>: 配置不同环境下的环境变量，如 API 地址。</li></ul>`,12)])])}const d=s(l,[["render",p],["__file","project-structure.html.vue"]]),o=JSON.parse('{"path":"/dotnetcore/lin-cms/project-structure.html","title":"项目结构","lang":"zh-CN","frontmatter":{"description":"项目结构 本文档介绍 LinCMS.NET Core (后端) 和 LinCMS Vue 2 (前端) 的项目结构。 后端 (lin-cms-dotnetcore) 后端项目遵循领域驱动设计 (DDD) 的分层思想，但进行了简化以适应 Web API 开发。 分层职责: Core: 定义核心业务规则、实体、仓储接口和领域事件。不依赖其他层。 Appli...","head":[["meta",{"property":"og:url","content":"https://igeekfan.cn/igeekfan-docs/dotnetcore/lin-cms/project-structure.html"}],["meta",{"property":"og:site_name","content":".NET 开发者指北"}],["meta",{"property":"og:title","content":"项目结构"}],["meta",{"property":"og:description","content":"项目结构 本文档介绍 LinCMS.NET Core (后端) 和 LinCMS Vue 2 (前端) 的项目结构。 后端 (lin-cms-dotnetcore) 后端项目遵循领域驱动设计 (DDD) 的分层思想，但进行了简化以适应 Web API 开发。 分层职责: Core: 定义核心业务规则、实体、仓储接口和领域事件。不依赖其他层。 Appli..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-04-28T17:01:11.000Z"}],["meta",{"property":"article:modified_time","content":"2025-04-28T17:01:11.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"项目结构\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2025-04-28T17:01:11.000Z\\",\\"author\\":[]}"],["link",{"rel":"alternate","type":"application/atom+xml","href":"https://igeekfan.cn/igeekfan-docs/atom.xml","title":".NET 开发者指北 Atom Feed"}],["link",{"rel":"alternate","type":"application/json","href":"https://igeekfan.cn/igeekfan-docs/feed.json","title":".NET 开发者指北 JSON Feed"}],["link",{"rel":"alternate","type":"application/rss+xml","href":"https://igeekfan.cn/igeekfan-docs/rss.xml","title":".NET 开发者指北 RSS Feed"}]]},"headers":[{"level":2,"title":"后端 (lin-cms-dotnetcore)","slug":"后端-lin-cms-dotnetcore","link":"#后端-lin-cms-dotnetcore","children":[]},{"level":2,"title":"前端 (lin-cms-vue)","slug":"前端-lin-cms-vue","link":"#前端-lin-cms-vue","children":[]}],"git":{"createdTime":1745859603000,"updatedTime":1745859671000,"contributors":[{"name":"igeekfan","email":"igeekfan@foxmail.com","commits":2}]},"readingTime":{"minutes":3.52,"words":1055},"filePathRelative":"dotnetcore/lin-cms/project-structure.md","localizedDate":"2025年4月28日","autoDesc":true}');export{d as comp,o as data};
