import{_ as i}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as n,b as a,o as e}from"./app-BGgbFL2G.js";const t={};function l(p,s){return e(),n("div",null,[...s[0]||(s[0]=[a(`<h1 id="qq第三方授权登录" tabindex="-1"><a class="header-anchor" href="#qq第三方授权登录"><span>QQ第三方授权登录</span></a></h1><h2 id="安装包" tabindex="-1"><a class="header-anchor" href="#安装包"><span>安装包</span></a></h2><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span>dotnet add package AspNet.Security.OAuth.QQ</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><ul><li><a href="https://luoyunchong.github.io/igeekfan-docs/dotnetcore/lin-cms/spa-github-login.html" target="_blank" rel="noopener noreferrer">接上文GitHub第三方授权登录</a></li></ul><p>申请过程不介绍了，<a href="https://wiki.connect.qq.com/%E5%87%86%E5%A4%87%E5%B7%A5%E4%BD%9C_oauth2-0" target="_blank" rel="noopener noreferrer">申请者资料</a>,个人也是可以申请成功的。</p><p>这时候有二个参数就是clientid clientsecret</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span>APP ID：xxxx</span></span>
<span class="line"><span>APP Key：xxxxxx</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>其中<strong>平台信息</strong>，这个申请审核通过后，<strong>不要修改，千万不要随便修改</strong>，一修改就要重新审核。</p><p>网站回调域:可以随便修改，并且可以写多个，中间用英文逗号分隔即可。<br> 比如，网站地址填的：<a href="https://api.igeekfan.cn%EF%BC%8C%E4%B8%8B%E9%9D%A2%E5%A6%82%E6%9E%9C%E6%98%AFlocalhost%EF%BC%8C%E6%98%AF%E5%8F%AF%E4%BB%A5%E7%9A%84%EF%BC%8C%E4%BD%86%E5%A6%82%E6%9E%9C%E6%98%AF%E5%9F%9F%E5%90%8D,%E4%BE%BF%E5%8F%AA%E8%83%BD%E6%98%AFhttps://api.igeekfan.cn" target="_blank" rel="noopener noreferrer">https://api.igeekfan.cn，下面如果是localhost，是可以的，但如果是域名,便只能是https://api.igeekfan.cn</a>这个域名下的路径。</p><p>网站回调域配置,后台是运行在<a href="https://localhost:5001" target="_blank" rel="noopener noreferrer">https://localhost:5001</a>端口上。</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span>https://api.igeekfan.cn/signin-qq;https://localhost:5001/signin-qq</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h2 id="接口介绍" tabindex="-1"><a class="header-anchor" href="#接口介绍"><span>接口介绍</span></a></h2><p>server-side模式，是OAuth2.0认证的一种模式，又称Web Server Flow；</p><p><img src="http://qzonestyle.gtimg.cn/qzone/vas/opensns/res/img/OAuth_guide_V2_1.png" alt="image"></p><p>获取Authorization Code<br><a href="https://graph.qq.com/oauth2.0/authorize" target="_blank" rel="noopener noreferrer">https://graph.qq.com/oauth2.0/authorize</a></p><p>通过Authorization Code获取Access Token<br><a href="https://graph.qq.com/oauth2.0/token" target="_blank" rel="noopener noreferrer">https://graph.qq.com/oauth2.0/token</a></p><p>获取用户OpenID_OAuth2.0<br><a href="https://graph.qq.com/oauth2.0/me" target="_blank" rel="noopener noreferrer">https://graph.qq.com/oauth2.0/me</a></p><p>获取用户个人信息<br><a href="https://graph.qq.com/user/get_user_info" target="_blank" rel="noopener noreferrer">https://graph.qq.com/user/get_user_info</a></p><h2 id="使用authorization-code获取access-token" tabindex="-1"><a class="header-anchor" href="#使用authorization-code获取access-token"><span><a href="https://wiki.connect.qq.com/%E4%BD%BF%E7%94%A8authorization_code%E8%8E%B7%E5%8F%96access_token" target="_blank" rel="noopener noreferrer">使用Authorization_Code获取Access_Token</a></span></a></h2><p>接入流程如下：</p><ol><li>先获取Authorization Code；</li><li>通过Authorization Code获取Access Token</li></ol><p>1.Step1：获取Authorization Code</p><p>GET</p><p><a href="https://graph.qq.com/oauth2.0/authorize?response_type=code&amp;client_id=client_id&amp;redirect_uri=https://localhost:5001/signin-qq&amp;state=123abc" target="_blank" rel="noopener noreferrer">https://graph.qq.com/oauth2.0/authorize?response_type=code&amp;client_id=client_id&amp;redirect_uri=https://localhost:5001/signin-qq&amp;state=123abc</a></p><p>具体参数可查看官网。</p><p>state由用户自己创建一个随机数，以防止CSRF攻击。</p><p>如果用户成功登录并授权，则会跳转到指定的回调地址，并在redirect_uri地址后带上Authorization Code和原始的state值。如：</p><p><a href="https://localhost:5001/signin-qq?code=B6D497755EACE4635115FC82BE24F280&amp;state=123abc" target="_blank" rel="noopener noreferrer">https://localhost:5001/signin-qq?code=B6D497755EACE4635115FC82BE24F280&amp;state=123abc</a></p><p>后台先根据state验证是自己发出的请求，判断是否相同，不相同，则代表非本项目发出的授权登录请求。</p><ol start="2"><li>根据code获取access_token</li></ol><p>GET</p><p><a href="https://graph.qq.com/oauth2.0/token?grant_type=authorization_code&amp;client_id=client_id&amp;client_secret=client_secret&amp;code=B6D497755EACE4635115FC82BE24F280&amp;redirect_uri=https://localhost:5001/signin-qq" target="_blank" rel="noopener noreferrer">https://graph.qq.com/oauth2.0/token?grant_type=authorization_code&amp;client_id=client_id&amp;client_secret=client_secret&amp;code=B6D497755EACE4635115FC82BE24F280&amp;redirect_uri=https://localhost:5001/signin-qq</a></p><p>这时候你会得到</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span>access_token=1B6E45FA99BA3D6B347713440C9BCEFE&amp;expires_in=7776000&amp;refresh_token=8DB1D48D95C85D3EF593936B8ACE5EE0</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h2 id="获取用户openid-oauth2-0" tabindex="-1"><a class="header-anchor" href="#获取用户openid-oauth2-0"><span>获取用户OpenID_OAuth2.0</span></a></h2><p>GET</p><p><a href="https://graph.qq.com/oauth2.0/me?access_token=1B6E45FA99BA3D6B347713440C9BCEFE" target="_blank" rel="noopener noreferrer">https://graph.qq.com/oauth2.0/me?access_token=1B6E45FA99BA3D6B347713440C9BCEFE</a></p><p>openid是此网站上唯一对应用户身份的标识</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span>callback( {&quot;client_id&quot;:&quot;101867513&quot;,&quot;openid&quot;:&quot;951560F5C7A5AA9E5E599CF9B4ECFFB2&quot;} );</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h2 id="获取用户的其他信息" tabindex="-1"><a class="header-anchor" href="#获取用户的其他信息"><span>获取用户的其他信息</span></a></h2><p>用户信息</p><p><a href="https://graph.qq.com/user/get_user_info?access_token=1B6E45FA99BA3D6B347713440C9BCEFE&amp;oauth_consumer_key=YOUR_APP_ID&amp;openid=951560F5C7A5AA9E5E599CF9B4ECFFB2" target="_blank" rel="noopener noreferrer">https://graph.qq.com/user/get_user_info?access_token=1B6E45FA99BA3D6B347713440C9BCEFE&amp;oauth_consumer_key=YOUR_APP_ID&amp;openid=951560F5C7A5AA9E5E599CF9B4ECFFB2</a></p><div class="language-json line-numbers-mode" data-highlighter="shiki" data-ext="json" data-title="json" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">{</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#E06C75;">&quot;ret&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">, </span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#E06C75;">&quot;msg&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">&quot;&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">, </span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#E06C75;">&quot;is_lost&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">, </span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#E06C75;">&quot;nickname&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">&quot;、天上有木月OvO&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">, </span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#E06C75;">&quot;gender&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">&quot;xxx&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">, </span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#E06C75;">&quot;gender_type&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">, </span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#E06C75;">&quot;province&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">&quot;xxx&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">, </span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#E06C75;">&quot;city&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">&quot;xxx&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">, </span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#E06C75;">&quot;year&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">&quot;2019&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">, </span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#E06C75;">&quot;constellation&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">&quot;&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">, </span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#E06C75;">&quot;figureurl&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">&quot;http:</span><span style="--shiki-light:#005CC5;--shiki-dark:#56B6C2;">\\/\\/</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">qzapp.qlogo.cn</span><span style="--shiki-light:#005CC5;--shiki-dark:#56B6C2;">\\/</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">qzapp</span><span style="--shiki-light:#005CC5;--shiki-dark:#56B6C2;">\\/</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">101867513</span><span style="--shiki-light:#005CC5;--shiki-dark:#56B6C2;">\\/</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">951560F5C7A5AA9E5E599CF9B4ECFFB2</span><span style="--shiki-light:#005CC5;--shiki-dark:#56B6C2;">\\/</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">30&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">, </span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#E06C75;">&quot;figureurl_1&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">&quot;http:</span><span style="--shiki-light:#005CC5;--shiki-dark:#56B6C2;">\\/\\/</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">qzapp.qlogo.cn</span><span style="--shiki-light:#005CC5;--shiki-dark:#56B6C2;">\\/</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">qzapp</span><span style="--shiki-light:#005CC5;--shiki-dark:#56B6C2;">\\/</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">101867513</span><span style="--shiki-light:#005CC5;--shiki-dark:#56B6C2;">\\/</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">951560F5C7A5AA9E5E599CF9B4ECFFB2</span><span style="--shiki-light:#005CC5;--shiki-dark:#56B6C2;">\\/</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">50&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">, </span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#E06C75;">&quot;figureurl_2&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">&quot;http:</span><span style="--shiki-light:#005CC5;--shiki-dark:#56B6C2;">\\/\\/</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">qzapp.qlogo.cn</span><span style="--shiki-light:#005CC5;--shiki-dark:#56B6C2;">\\/</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">qzapp</span><span style="--shiki-light:#005CC5;--shiki-dark:#56B6C2;">\\/</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">101867513</span><span style="--shiki-light:#005CC5;--shiki-dark:#56B6C2;">\\/</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">951560F5C7A5AA9E5E599CF9B4ECFFB2</span><span style="--shiki-light:#005CC5;--shiki-dark:#56B6C2;">\\/</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">100&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">, </span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#E06C75;">&quot;figureurl_qq_1&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">&quot;http://thirdqq.qlogo.cn/g?b=oidb&amp;k=bjXoWmdlu8fk1m80MCkibMg&amp;s=40&amp;t=1559108425&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">, </span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#E06C75;">&quot;figureurl_qq_2&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">&quot;http://thirdqq.qlogo.cn/g?b=oidb&amp;k=bjXoWmdlu8fk1m80MCkibMg&amp;s=100&amp;t=1559108425&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#E06C75;">&quot;figureurl_qq&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">&quot;http://thirdqq.qlogo.cn/g?b=oidb&amp;k=bjXoWmdlu8fk1m80MCkibMg&amp;s=640&amp;t=1559108425&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="代码" tabindex="-1"><a class="header-anchor" href="#代码"><span>代码</span></a></h2><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span>services.AddAuthentication(xxx)</span></span>
<span class="line"><span>.AddGitHub(xxx)</span></span>
<span class="line"><span>加上AddQQ的配置项</span></span>
<span class="line"><span>.AddQQ(options =&gt;</span></span>
<span class="line"><span>{</span></span>
<span class="line"><span>   options.ClientId = Configuration[&quot;Authentication:QQ:ClientId&quot;];</span></span>
<span class="line"><span>   options.ClientSecret = Configuration[&quot;Authentication:QQ:ClientSecret&quot;];</span></span>
<span class="line"><span>})</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>appsettings.json中配置项</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span>  &quot;Authentication&quot;: {</span></span>
<span class="line"><span>   //下面为新增项</span></span>
<span class="line"><span>   &quot;QQ&quot;: {</span></span>
<span class="line"><span>     &quot;ClientId&quot;: &quot;xx&quot;,</span></span>
<span class="line"><span>     &quot;ClientSecret&quot;: &quot;xxx&quot;</span></span>
<span class="line"><span>   }</span></span>
<span class="line"><span> }</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>对，没错，QQ登录，已经结束了。接下来就是把这些用户的信息保存到数据库，生成token的过程。</p><p>这里</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span>[HttpGet(&quot;signin-callback&quot;)]</span></span>
<span class="line"><span>public async Task&lt;IActionResult&gt; Home(string provider, string redirectUrl = &quot;&quot;)</span></span>
<span class="line"><span>{</span></span>
<span class="line"><span></span></span>
<span class="line"><span>   AuthenticateResult authenticateResult = await _contextAccessor.HttpContext.AuthenticateAsync(provider);</span></span>
<span class="line"><span>   if (!authenticateResult.Succeeded) return Redirect(redirectUrl);</span></span>
<span class="line"><span>   var openIdClaim = authenticateResult.Principal.FindFirst(ClaimTypes.NameIdentifier);</span></span>
<span class="line"><span>   if (openIdClaim == null || string.IsNullOrWhiteSpace(openIdClaim.Value))</span></span>
<span class="line"><span>       return Redirect(redirectUrl);</span></span>
<span class="line"><span>       </span></span>
<span class="line"><span>       </span></span>
<span class="line"><span>   ClaimsPrincipal principal=authenticateResult.Principal;</span></span>
<span class="line"><span>   //根据provider，处理用户的基础信息，</span></span>
<span class="line"><span>   </span></span>
<span class="line"><span>   long id =SaveQQAsync(principal, openIdClaim.Value)</span></span>
<span class="line"><span>   </span></span>
<span class="line"><span>   //xxx</span></span>
<span class="line"><span>   </span></span>
<span class="line"><span>}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>openIdClaimopenIdClaim是唯一值</p><h3 id="lin-user表" tabindex="-1"><a class="header-anchor" href="#lin-user表"><span>lin_user表</span></a></h3><table><thead><tr><th>字段</th><th>类型</th><th>备注</th></tr></thead><tbody><tr><td>Id</td><td>long</td><td>主键</td></tr><tr><td>Username</td><td>varchar(50)</td><td>用户名</td></tr><tr><td>Avatar</td><td>varchar(50)</td><td>头像</td></tr></tbody></table><h3 id="lin-user-identity表" tabindex="-1"><a class="header-anchor" href="#lin-user-identity表"><span>lin_user_identity表</span></a></h3><p>用户授权信息表，用于存储不同登录类型的用户信息，如手机号、邮件、用户名、第三方应用（微信、QQ、GitHub）的登录</p><table><thead><tr><th>字段</th><th>类型</th><th>备注</th></tr></thead><tbody><tr><td>Id</td><td>long</td><td>主键</td></tr><tr><td>IdentityType</td><td>varchar(50)</td><td>认证类型，如 Password，GitHub、QQ、WeiXin等</td></tr><tr><td>Identifier</td><td>varchar(24)</td><td>认证者，例如 用户名（PassWord认证类型）,授权得到的昵称(QQ),授权得到的用户名（唯一，GitHub)</td></tr><tr><td>Credential</td><td>varchar(50)</td><td>凭证，例如 密码,存OpenId、Id，同一IdentityType的OpenId的值是唯一的</td></tr><tr><td>CreateUserId</td><td>long</td><td>绑定的用户Id</td></tr></tbody></table><p>根据openId,判断lin_user_identity表中是否存在这一第三方授权信息，如果存在，则返回当前用户lin_user表中的id，如果不存在，则创建一个新的用户信息，插入lin_user、lin_user_identity表中。</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span></span></span>
<span class="line"><span>public async Task&lt;long&gt; SaveQQAsync(ClaimsPrincipal principal, string openId)</span></span>
<span class="line"><span>{</span></span>
<span class="line"><span>   string nickname = principal.FindFirst(ClaimTypes.Name)?.Value;</span></span>
<span class="line"><span>   string gender = principal.FindFirst(ClaimTypes.Gender)?.Value;</span></span>
<span class="line"><span>   string picture = principal.FindFirst(QQAuthenticationConstants.Claims.PictureUrl)?.Value;</span></span>
<span class="line"><span>   string picture_medium = principal.FindFirst(QQAuthenticationConstants.Claims.PictureMediumUrl)?.Value;</span></span>
<span class="line"><span>   string picture_full = principal.FindFirst(QQAuthenticationConstants.Claims.PictureFullUrl)?.Value;</span></span>
<span class="line"><span>   string avatar = principal.FindFirst(QQAuthenticationConstants.Claims.AvatarUrl)?.Value;</span></span>
<span class="line"><span>   string avatar_full = principal.FindFirst(QQAuthenticationConstants.Claims.AvatarFullUrl)?.Value;</span></span>
<span class="line"><span>   </span></span>
<span class="line"><span>    Expression&lt;Func&lt;LinUserIdentity, bool&gt;&gt; expression = r =&gt; </span></span>
<span class="line"><span>               r.IdentityType == LinUserIdentity.QQ&amp;&amp; r.Credential == openId;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>   LinUserIdentity linUserIdentity =await _userIdentityRepository.Where(expression).FirstAsync();</span></span>
<span class="line"><span></span></span>
<span class="line"><span>   long userId = 0;</span></span>
<span class="line"><span>   if (linUserIdentity == null)</span></span>
<span class="line"><span>   {</span></span>
<span class="line"><span>       LinUser user = new LinUser</span></span>
<span class="line"><span>       {</span></span>
<span class="line"><span>           Avatar = avatar_full,</span></span>
<span class="line"><span>           Nickname = nickname,</span></span>
<span class="line"><span>           Username = &quot;&quot;,</span></span>
<span class="line"><span>           LinUserIdentitys = new List&lt;LinUserIdentity&gt;()</span></span>
<span class="line"><span>           {</span></span>
<span class="line"><span>               new LinUserIdentity</span></span>
<span class="line"><span>               {</span></span>
<span class="line"><span>                   CreateTime = DateTime.Now,</span></span>
<span class="line"><span>                   Credential = openId,</span></span>
<span class="line"><span>                   IdentityType = LinUserIdentity.GitHub,</span></span>
<span class="line"><span>                   Identifier = nickname,</span></span>
<span class="line"><span>               }</span></span>
<span class="line"><span>           }</span></span>
<span class="line"><span>       };</span></span>
<span class="line"><span>       await _userRepository.InsertAsync(user);</span></span>
<span class="line"><span>       userId = user.Id;</span></span>
<span class="line"><span>   }</span></span>
<span class="line"><span>   else</span></span>
<span class="line"><span>   {</span></span>
<span class="line"><span>       userId = linUserIdentity.CreateUserId;</span></span>
<span class="line"><span>   }</span></span>
<span class="line"><span>   return userId;</span></span>
<span class="line"><span>}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上文中的CreateToken，直接将 authenticateResult.Principal.Claims.ToList()，生成token值，会缺少一些系统需要的值，比如键为ClaimTypes.NameIdentifier，应为用户的id，用户的其他信息，如角色/分组，昵称。不同平台的授权登录，键有所不同，所以这里需要二次处理。</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span>[HttpGet(&quot;signin-callback&quot;)]</span></span>
<span class="line"><span>public async Task&lt;IActionResult&gt; Home(string provider, string redirectUrl = &quot;&quot;)</span></span>
<span class="line"><span>{</span></span>
<span class="line"><span> </span></span>
<span class="line"><span>    //xxx</span></span>
<span class="line"><span>        </span></span>
<span class="line"><span>        </span></span>
<span class="line"><span>    ClaimsPrincipal principal=authenticateResult.Principal;</span></span>
<span class="line"><span>    </span></span>
<span class="line"><span>    List&lt;Claim&gt; authClaims = principal.Claims.ToList();</span></span>
<span class="line"><span>    </span></span>
<span class="line"><span>    long id =SaveQQAsync(principal, openIdClaim.Value)</span></span>
<span class="line"><span>    </span></span>
<span class="line"><span>    LinUser user =await _userRepository.Select.IncludeMany(r =&gt; r.LinGroups)</span></span>
<span class="line"><span>        .WhereCascade(r =&gt; r.IsDeleted == false).Where(r =&gt; r.Id == id).FirstAsync();</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    List&lt;Claim&gt; claims = new List&lt;Claim&gt;()</span></span>
<span class="line"><span>    {</span></span>
<span class="line"><span>        new Claim(ClaimTypes.NameIdentifier,user.Id.ToString()),</span></span>
<span class="line"><span>        new Claim(ClaimTypes.GivenName,user.Nickname??&quot;&quot;),</span></span>
<span class="line"><span>        new Claim(ClaimTypes.Name,user.Username??&quot;&quot;),</span></span>
<span class="line"><span>    };</span></span>
<span class="line"><span>        </span></span>
<span class="line"><span>    user.LinGroups?.ForEach(r =&gt;</span></span>
<span class="line"><span>    {</span></span>
<span class="line"><span>        claims.Add(new Claim(LinCmsClaimTypes.Groups, r.Id.ToString()));</span></span>
<span class="line"><span>    });</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    claims.AddRange(authClaims);</span></span>
<span class="line"><span>    string token = this.CreateToken(claims);</span></span>
<span class="line"><span>    return Redirect($&quot;{redirectUrl}?token={token}#login-result&quot;);</span></span>
<span class="line"><span> }</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>前台login-result路由，解析到token值，并保存起来，与用户密码登录后的流程相同。</p><h2 id="项目源码" tabindex="-1"><a class="header-anchor" href="#项目源码"><span><a href="https://github.com/luoyunchong/lin-cms-dotnetcore/blob/master/src/LinCms.Web/Controllers/Cms/Oauth2Controller.cs" target="_blank" rel="noopener noreferrer">项目源码</a></span></a></h2>`,62)])])}const h=i(t,[["render",l],["__file","qq-login.html.vue"]]),c=JSON.parse('{"path":"/dotnetcore/lin-cms/qq-login.html","title":"QQ第三方授权登录","lang":"zh-CN","frontmatter":{"description":"QQ第三方授权登录 安装包 接上文GitHub第三方授权登录 申请过程不介绍了，申请者资料,个人也是可以申请成功的。 这时候有二个参数就是clientid clientsecret 其中平台信息，这个申请审核通过后，不要修改，千万不要随便修改，一修改就要重新审核。 网站回调域:可以随便修改，并且可以写多个，中间用英文逗号分隔即可。 比如，网站地址填的：...","head":[["meta",{"property":"og:url","content":"https://igeekfan.cn/igeekfan-docs/dotnetcore/lin-cms/qq-login.html"}],["meta",{"property":"og:site_name","content":".NET 开发者指北"}],["meta",{"property":"og:title","content":"QQ第三方授权登录"}],["meta",{"property":"og:description","content":"QQ第三方授权登录 安装包 接上文GitHub第三方授权登录 申请过程不介绍了，申请者资料,个人也是可以申请成功的。 这时候有二个参数就是clientid clientsecret 其中平台信息，这个申请审核通过后，不要修改，千万不要随便修改，一修改就要重新审核。 网站回调域:可以随便修改，并且可以写多个，中间用英文逗号分隔即可。 比如，网站地址填的：..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"http://qzonestyle.gtimg.cn/qzone/vas/opensns/res/img/OAuth_guide_V2_1.png"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2023-03-12T13:50:00.000Z"}],["meta",{"property":"article:modified_time","content":"2023-03-12T13:50:00.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"QQ第三方授权登录\\",\\"image\\":[\\"http://qzonestyle.gtimg.cn/qzone/vas/opensns/res/img/OAuth_guide_V2_1.png\\"],\\"dateModified\\":\\"2023-03-12T13:50:00.000Z\\",\\"author\\":[]}"],["link",{"rel":"alternate","type":"application/atom+xml","href":"https://igeekfan.cn/igeekfan-docs/atom.xml","title":".NET 开发者指北 Atom Feed"}],["link",{"rel":"alternate","type":"application/json","href":"https://igeekfan.cn/igeekfan-docs/feed.json","title":".NET 开发者指北 JSON Feed"}],["link",{"rel":"alternate","type":"application/rss+xml","href":"https://igeekfan.cn/igeekfan-docs/rss.xml","title":".NET 开发者指北 RSS Feed"}]]},"headers":[{"level":2,"title":"安装包","slug":"安装包","link":"#安装包","children":[]},{"level":2,"title":"接口介绍","slug":"接口介绍","link":"#接口介绍","children":[]},{"level":2,"title":"使用Authorization_Code获取Access_Token","slug":"使用authorization-code获取access-token","link":"#使用authorization-code获取access-token","children":[]},{"level":2,"title":"获取用户OpenID_OAuth2.0","slug":"获取用户openid-oauth2-0","link":"#获取用户openid-oauth2-0","children":[]},{"level":2,"title":"获取用户的其他信息","slug":"获取用户的其他信息","link":"#获取用户的其他信息","children":[]},{"level":2,"title":"代码","slug":"代码","link":"#代码","children":[{"level":3,"title":"lin_user表","slug":"lin-user表","link":"#lin-user表","children":[]},{"level":3,"title":"lin_user_identity表","slug":"lin-user-identity表","link":"#lin-user-identity表","children":[]}]},{"level":2,"title":"项目源码","slug":"项目源码","link":"#项目源码","children":[]}],"git":{"createdTime":1589368688000,"updatedTime":1678629000000,"contributors":[{"name":"igeekfan","email":"luoyunchong@foxmail.com","commits":2},{"name":"luoyunchong","email":"luoyunchong@foxmail.com","commits":1}]},"readingTime":{"minutes":4.24,"words":1272},"filePathRelative":"dotnetcore/lin-cms/qq-login.md","localizedDate":"2020年5月13日","autoDesc":true}');export{h as comp,c as data};
