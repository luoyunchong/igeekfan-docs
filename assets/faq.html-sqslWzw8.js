import{_ as l}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as a,b as e,a as s,d as n,e as p,w as h,r,o}from"./app-BRBKyLnU.js";const k={};function d(c,i){const t=r("RouteLink");return o(),a("div",null,[i[10]||(i[10]=e('<h1 id="常见问题解答-faq" tabindex="-1"><a class="header-anchor" href="#常见问题解答-faq"><span>常见问题解答 (FAQ)</span></a></h1><h2 id="后端-lincms-net-core" tabindex="-1"><a class="header-anchor" href="#后端-lincms-net-core"><span>后端 (<a href="http://LinCMS.NET" target="_blank" rel="noopener noreferrer">LinCMS.NET</a> Core)</span></a></h2><p><strong>Q1: 如何切换数据库类型？</strong></p><p>A1: 修改 <code>src/LinCms.Web/appsettings.json</code> (或 <code>appsettings.Production.json</code>) 中的 <code>ConnectionStrings</code> 和 <code>DbType</code> 节点。例如，要切换到 MySQL，你需要：</p>',4)),s("ol",null,[i[9]||(i[9]=s("li",null,"提供 MySQL 的连接字符串。",-1)),s("li",null,[i[1]||(i[1]=n("将 ")),i[2]||(i[2]=s("code",null,"DbType",-1)),i[3]||(i[3]=n(" 的值改为 ")),i[4]||(i[4]=s("code",null,"MySql",-1)),i[5]||(i[5]=n("。")),i[6]||(i[6]=s("br",null,null,-1)),i[7]||(i[7]=n(" 详细配置请参考 ")),p(t,{to:"/dotnetcore/lin-cms/backend-quickstart.html#%E6%95%B0%E6%8D%AE%E5%BA%93%E9%85%8D%E7%BD%AE"},{default:h(()=>i[0]||(i[0]=[n("后端快速入门 - 数据库配置")])),_:1,__:[0]}),i[8]||(i[8]=n("。"))])]),i[11]||(i[11]=e(`<p>**Q2: 运行 <code>dotnet run</code></p><p>A2:</p><ul><li>确保 <code>src/LinCms.Web</code> 是当前的启动项目。</li><li>检查 <code>appsettings.json</code> 中的数据库连接字符串和 <code>DbType</code> 是否正确配置。</li><li>确保数据库服务正在运行，并且网络连接正常。</li><li>检查数据库用户是否具有创建/修改表结构以及插入数据的权限。</li><li>查看控制台输出的详细错误信息，根据具体错误进行排查。</li></ul><p><strong>Q3: API 返回 401 Unauthorized？</strong></p><p>A3:</p><ul><li>确认请求的 Header 中是否包含了有效的 <code>Authorization: Bearer &lt;your_token&gt;</code>。</li><li>检查 Token 是否过期。</li><li>确认 <code>appsettings.json</code> 中的 <code>Jwt:SecretKey</code> 配置与生成 Token 时使用的密钥一致。</li><li>确认 <code>Jwt:Issuer</code> 和 <code>Jwt:Audience</code> 配置是否正确 (如果启用了验证)。</li></ul><p><strong>Q4: API 返回 403 Forbidden？</strong></p><p>A4:</p><ul><li>表示用户已认证但没有访问该接口所需的权限。</li><li>登录前端管理界面，检查当前用户所属的分组是否已被分配了访问该接口所需的权限。</li><li>检查后端 Controller Action 上的 <code>[LinCmsAuthorize]</code> 特性定义的权限是否正确。</li></ul><p><strong>Q5: 如何添加新的权限？</strong></p><p>A5:</p><ol><li>在需要权限控制的 Controller 或 Action 方法上添加 <code>[LinCmsAuthorize(&quot;模块名&quot;, &quot;权限名&quot;)]</code> 特性。</li><li>重新启动后端服务，系统会自动扫描并注册新的权限。</li><li>登录前端管理界面，在 &quot;管理员&quot; -&gt; &quot;权限管理&quot; 中可以看到新权限。</li><li>在 &quot;管理员&quot; -&gt; &quot;分组管理&quot; 中，为相应的分组分配新权限。</li></ol><p><strong>Q6: 文件上传失败？</strong></p><p>A6:</p><ul><li>检查 <code>appsettings.json</code> 中的 <code>File</code> 配置节点，特别是 <code>StoreDir</code> (存储目录) 是否存在且具有写入权限。</li><li>检查 <code>SingleLimit</code> (单个文件大小限制) 和 <code>TotalLimit</code> (总大小限制) 是否足够。</li><li>检查 Nginx 或其他反向代理是否配置了 <code>client_max_body_size</code> 以允许足够大的请求体。</li></ul><h2 id="前端-lincms-vue-2" tabindex="-1"><a class="header-anchor" href="#前端-lincms-vue-2"><span>前端 (LinCMS Vue 2)</span></a></h2><p><strong>Q1: 运行 <code>pnpm run serve</code> 后无法访问页面？</strong></p><p>A1:</p><ul><li>检查控制台输出，确认 Vite 开发服务器是否成功启动，并查看监听的端口号 (默认为 8080)。</li><li>确保没有其他程序占用了该端口。</li><li>检查防火墙设置是否允许访问该端口。</li><li>清除浏览器缓存或尝试使用无痕模式访问。</li></ul><p><strong>Q2: 页面显示空白或报错？</strong></p><p>A2:</p><ul><li>打开浏览器开发者工具 (按 F12)，查看控制台 (Console) 和网络 (Network) 选项卡。</li><li><strong>控制台错误</strong>: 查看是否有 JavaScript 运行时错误，根据错误信息定位问题。</li><li><strong>网络错误</strong>: 检查 API 请求是否成功 (状态码 2xx)。 <ul><li>如果 API 请求失败 (4xx, 5xx)，检查后端服务是否正常运行，API 地址 (<code>.env</code> 文件中的 <code>VITE_APP_BASE_URL</code>) 是否配置正确。</li><li>如果 API 请求出现跨域错误 (CORS)，检查后端是否正确配置了跨域策略，或者在 <code>vite.config.ts</code> 中配置 <code>server.proxy</code> 进行开发环境代理。</li></ul></li></ul><p><strong>Q3: 登录失败？</strong></p><p>A3:</p><ul><li>确认输入的用户名和密码是否正确 (默认管理员：super / 123456)。</li><li>打开浏览器开发者工具，检查登录接口 (<code>/cms/user/login</code>) 的请求和响应。</li><li>确认后端服务运行正常且前端配置的 API 地址正确。</li></ul><p><strong>Q4: 如何修改前端访问端口？</strong></p><p>A4: 修改 <code>vite.config.ts</code> 文件中的 <code>server.port</code> 配置项。</p><div class="language-typescript line-numbers-mode" data-highlighter="shiki" data-ext="typescript" data-title="typescript" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-light-font-style:inherit;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// vite.config.ts</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> { </span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">defineConfig</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> } </span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> &#39;vite&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">export</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;"> default</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;"> defineConfig</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">({</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-light-font-style:inherit;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">  // ... 其他配置</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">  server</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">: {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">    host</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">&#39;0.0.0.0&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#6A737D;--shiki-light-font-style:inherit;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// 允许外部访问</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">    port</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;">8081</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#6A737D;--shiki-light-font-style:inherit;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// 修改为你想要的端口</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-light-font-style:inherit;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    // proxy: { ... } // 代理配置</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">  },</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">})</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>Q5: 如何配置开发环境的 API 代理以解决跨域问题？</strong></p><p>A5: 修改 <code>vite.config.ts</code> 文件，配置 <code>server.proxy</code>。</p><div class="language-typescript line-numbers-mode" data-highlighter="shiki" data-ext="typescript" data-title="typescript" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-light-font-style:inherit;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// vite.config.ts</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> { </span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">defineConfig</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> } </span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> &#39;vite&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">export</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;"> default</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;"> defineConfig</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">({</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-light-font-style:inherit;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">  // ... 其他配置</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">  server</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">: {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-light-font-style:inherit;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    // ... 其他 server 配置</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">    proxy</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">: {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-light-font-style:inherit;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">      // 字符串简写写法</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-light-font-style:inherit;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">      // &#39;/foo&#39;: &#39;http://localhost:4567/foo&#39;,</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-light-font-style:inherit;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">      // 带选项写法：/api/user -&gt; http://localhost:5000/user</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">      &#39;/api&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">: {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">        target</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">&#39;http://localhost:5000&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#6A737D;--shiki-light-font-style:inherit;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// 你的后端 API 地址</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">        changeOrigin</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;">true</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">,</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">        rewrite</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">: (</span><span style="--shiki-light:#E36209;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;">path</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;"> path</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">replace</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#E06C75;">/</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">^</span><span style="--shiki-light:#22863A;--shiki-light-font-weight:bold;--shiki-dark:#56B6C2;--shiki-dark-font-weight:inherit;">\\/</span><span style="--shiki-light:#032F62;--shiki-dark:#E06C75;">api/</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">&#39;&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">) </span><span style="--shiki-light:#6A737D;--shiki-light-font-style:inherit;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// 可选：如果后端 API 没有 /api 前缀</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">      },</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-light-font-style:inherit;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">      // ... 可以配置多个代理</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">  },</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">})</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>配置代理后，前端代码中请求 API 时，可以直接写代理路径，例如请求 <code>/api/cms/user/info</code>，Vite 会将其代理到 <code>http://localhost:5000/cms/user/info</code>。</p>`,32))])}const u=l(k,[["render",d],["__file","faq.html.vue"]]),m=JSON.parse('{"path":"/dotnetcore/lin-cms/faq.html","title":"常见问题解答 (FAQ)","lang":"zh-CN","frontmatter":{"description":"常见问题解答 (FAQ) 后端 (LinCMS.NET Core) Q1: 如何切换数据库类型？ A1: 修改 src/LinCms.Web/appsettings.json (或 appsettings.Production.json) 中的 ConnectionStrings 和 DbType 节点。例如，要切换到 MySQL，你需要： 提供 My...","head":[["meta",{"property":"og:url","content":"https://igeekfan.cn/igeekfan-docs/dotnetcore/lin-cms/faq.html"}],["meta",{"property":"og:site_name","content":".NET 开发者指北"}],["meta",{"property":"og:title","content":"常见问题解答 (FAQ)"}],["meta",{"property":"og:description","content":"常见问题解答 (FAQ) 后端 (LinCMS.NET Core) Q1: 如何切换数据库类型？ A1: 修改 src/LinCms.Web/appsettings.json (或 appsettings.Production.json) 中的 ConnectionStrings 和 DbType 节点。例如，要切换到 MySQL，你需要： 提供 My..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-04-28T17:00:03.000Z"}],["meta",{"property":"article:modified_time","content":"2025-04-28T17:00:03.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"常见问题解答 (FAQ)\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2025-04-28T17:00:03.000Z\\",\\"author\\":[]}"],["link",{"rel":"alternate","type":"application/atom+xml","href":"https://igeekfan.cn/igeekfan-docs/atom.xml","title":".NET 开发者指北 Atom Feed"}],["link",{"rel":"alternate","type":"application/json","href":"https://igeekfan.cn/igeekfan-docs/feed.json","title":".NET 开发者指北 JSON Feed"}],["link",{"rel":"alternate","type":"application/rss+xml","href":"https://igeekfan.cn/igeekfan-docs/rss.xml","title":".NET 开发者指北 RSS Feed"}]]},"headers":[{"level":2,"title":"后端 (LinCMS.NET Core)","slug":"后端-lincms-net-core","link":"#后端-lincms-net-core","children":[]},{"level":2,"title":"前端 (LinCMS Vue 2)","slug":"前端-lincms-vue-2","link":"#前端-lincms-vue-2","children":[]}],"git":{"createdTime":1745859603000,"updatedTime":1745859603000,"contributors":[{"name":"igeekfan","email":"igeekfan@foxmail.com","commits":1}]},"readingTime":{"minutes":3.67,"words":1101},"filePathRelative":"dotnetcore/lin-cms/faq.md","localizedDate":"2025年4月28日","autoDesc":true}');export{u as comp,m as data};
