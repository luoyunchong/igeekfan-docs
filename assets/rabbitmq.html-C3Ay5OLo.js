import{_ as a}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as i,b as n,o as s}from"./app-83qHolCv.js";const t={};function l(r,e){return s(),i("div",null,[...e[0]||(e[0]=[n(`<h1 id="cap实现eventbus" tabindex="-1"><a class="header-anchor" href="#cap实现eventbus"><span>CAP实现EventBus</span></a></h1><p>分布式事务一致性，使用的是 <a href="https://github.com/dotnetcore/cap" target="_blank" rel="noopener noreferrer">CAP</a>，那么我们在什么情况下使用它呢。</p><p>EventBus:事件总线，是一个基于观察者模块的事件发布/订阅框架，可以将一些复杂的，重复的操作，异步的操作，交给系统去处理，当前系统直接返回成功的操作。</p><p>简单的说就是解耦，</p><p>比如用户发布文章后，需要将消息推送给关注的用户，这时候，推送会浪费许多时间，本来这个操作与当前登录的用户没有关系，用户也只关注文章发布是否成功，。后续，将推送等操作，交给另一件事件去处理，这样速度更快，屏蔽了一些细节。就类似一种消息通知，我不关心后续是什么操作，只将自己的一些状态传递过去。</p><p>我们先来了解一下CAP中的EventBus，主要特点是发布订阅模式，内部使用RabbitMQ实现异构系统的消息同步，通过本地消息表对信息持久化，保证由EventBus发出的消息是可靠的，即高可用。</p><p>如果系统启动后在log/log200xxx.txt日志错误原因，RabbitMQ</p><div class="language-txt line-numbers-mode" data-highlighter="shiki" data-ext="txt" data-title="txt" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span>DotNetCore.CAP.BrokerConnectionException: Broker Unreachable</span></span>
<span class="line"><span> ---&gt; RabbitMQ.Client.Exceptions.BrokerUnreachableException: None of the specified endpoints were reachable</span></span>
<span class="line"><span> ---&gt; RabbitMQ.Client.Exceptions.OperationInterruptedException: The AMQP operation was interrupted: AMQP close-reason, initiated by Peer, code=530, text=&quot;- to NOT_ALLOWED access vhost &#39;/admin&#39; refused for user &#39;admin&#39;&quot;, classId=10, methodId=40, cause=</span></span>
<span class="line"><span>   at RabbitMQ.Client.Impl.SimpleBlockingRpcContinuation.GetReply(TimeSpan timeout)</span></span>
<span class="line"><span>   at RabbitMQ.Client.Impl.ModelBase.ConnectionOpen(String virtualHost, String capabilities, Boolean insist)</span></span>
<span class="line"><span>   at RabbitMQ.Client.Framing.Impl.Connection.Open(Boolean insist)</span></span>
<span class="line"><span>   at RabbitMQ.Client.Framing.Impl.Connection..ctor(IConnectionFactory factory, Boolean insist, IFrameHandler frameHandler, String clientProvidedName)</span></span>
<span class="line"><span>   at RabbitMQ.Client.Framing.Impl.AutorecoveringConnection.Init(IFrameHandler fh)</span></span>
<span class="line"><span>   at RabbitMQ.Client.Framing.Impl.AutorecoveringConnection.Init(IEndpointResolver endpoints)</span></span>
<span class="line"><span>   at RabbitMQ.Client.ConnectionFactory.CreateConnection(IEndpointResolver endpointResolver, String clientProvidedName)</span></span>
<span class="line"><span>   --- End of inner exception stack trace ---</span></span>
<span class="line"><span>   at RabbitMQ.Client.ConnectionFactory.CreateConnection(IEndpointResolver endpointResolver, String clientProvidedName)</span></span>
<span class="line"><span>   at RabbitMQ.Client.ConnectionFactory.CreateConnection(String clientProvidedName)</span></span>
<span class="line"><span>   at DotNetCore.CAP.RabbitMQ.ConnectionChannelPool.&lt;&gt;c__DisplayClass19_0.&lt;CreateConnection&gt;b__1()</span></span>
<span class="line"><span>   at DotNetCore.CAP.RabbitMQ.ConnectionChannelPool.GetConnection()</span></span>
<span class="line"><span>   at DotNetCore.CAP.RabbitMQ.RabbitMQConsumerClient.Connect()</span></span>
<span class="line"><span>   at DotNetCore.CAP.RabbitMQ.RabbitMQConsumerClientFactory.Create(String groupId)</span></span>
<span class="line"><span>   --- End of inner exception stack trace ---</span></span>
<span class="line"><span>   at DotNetCore.CAP.RabbitMQ.RabbitMQConsumerClientFactory.Create(String groupId)</span></span>
<span class="line"><span>   at DotNetCore.CAP.Internal.ConsumerRegister.&lt;&gt;c__DisplayClass17_0.&lt;Start&gt;b__0()</span></span>
<span class="line"><span>2020-04-26 15:59:54.280 +08:00 [DBG] Transport connection checking...</span></span>
<span class="line"><span>2020-04-26 15:59:54.281 +08:00 [WRN] Transport connection is unhealthy, reconnection...</span></span>
<span class="line"><span>2020-04-26 15:59:54.467 +08:00 [ERR] Broker Unreachable</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="安装下载" tabindex="-1"><a class="header-anchor" href="#安装下载"><span>安装下载</span></a></h2><p>我们就需要安装rabbitmq了后，配置好用户，密码，virtual_hosts，因为rabbimq是erlang写的，所以<br> 前提要安装erlang,官网下载比百度网盘还慢，也可自行去官网下载。</p><p>erlang 安装包 链接：<a href="https://pan.baidu.com/s/1T1_dI7iPMpEgiP8QC5tlaw" target="_blank" rel="noopener noreferrer">https://pan.baidu.com/s/1T1_dI7iPMpEgiP8QC5tlaw</a><br> 提取码：86jm</p><p>rabbitmq 安装包 链接：<a href="https://pan.baidu.com/s/1wD22_gKFX2LW9oOx69rnCA" target="_blank" rel="noopener noreferrer">https://pan.baidu.com/s/1wD22_gKFX2LW9oOx69rnCA</a><br> 提取码：ohea</p><h2 id="配置rabbitmq" tabindex="-1"><a class="header-anchor" href="#配置rabbitmq"><span>配置RabbitMQ</span></a></h2><blockquote><p>服务开启后，管理地址：<a href="http://localhost:15672/" target="_blank" rel="noopener noreferrer">http://localhost:15672/</a></p></blockquote><ul><li>帐号：guest 密码 : guest</li></ul><p>如果遇到RabbitmMQ安装后，web管理端口<a href="http://localhost:15672/" target="_blank" rel="noopener noreferrer">http://localhost:15672/</a> 无法访问的解决</p><p>先进入rabbitMQ安装目录下的sbin目录,在目录下shift+右键打开命令行</p><p>使用rabbitmq-plugins.bat enable rabbitmq_management开启网页管理界面,然后重启rabbitMQ</p><p>1.<a href="https://blog.csdn.net/sxf359/article/details/78239382" target="_blank" rel="noopener noreferrer">https://blog.csdn.net/sxf359/article/details/78239382</a></p><p>2.<img src="https://note.youdao.com/yws/api/personal/file/7FA20220D5454DF9B0788B33E3A41FED?method=download&amp;shareKey=c2e5f279b574304e3bd777a75a4e3045" alt="示例"></p><ol start="3"><li>此命令执行要先定位到rabbitmq的安装目录下的sbin文件夹下。</li></ol><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span> rabbitmq-plugins enable rabbitmq_management</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h2 id="docker下安装rabbitmq" tabindex="-1"><a class="header-anchor" href="#docker下安装rabbitmq"><span>docker下安装rabbitmq</span></a></h2><p>通过docker来安装rabbitmq,并启动<br> 1.拉取镜像</p><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" data-title="bash" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">docker</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> pull</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> rabbitmq:3.7.7-management</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>2.创建和启动容器</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span>docker run -d --name rabbitmq3.7.7 -p 5672:5672 -p 15672:15672 -v \`pwd\`/data:/var/lib/rabbitmq --hostname myRabbit -e RABBITMQ_DEFAULT_VHOST=my_vhost  -e RABBITMQ_DEFAULT_USER=admin -e RABBITMQ_DEFAULT_PASS=admin df80af9ca0c9</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>说明：</p><p>-d 后台运行容器；</p><p>--name 指定容器名；</p><p>-p 指定服务运行的端口（5672：应用访问端口；15672：控制台Web端口号）；</p><p>-v 映射目录或文件；</p><p>--hostname 主机名（RabbitMQ的一个重要注意事项是它根据所谓的 “节点名称” 存储数据，默认为主机名）；</p><p>-e 指定环境变量；（RABBITMQ_DEFAULT_VHOST：默认虚拟机名；RABBITMQ_DEFAULT_USER：默认的用户名；RABBITMQ_DEFAULT_PASS：默认用户名的密码）</p><p>其他，可查看正在运行的容器</p><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" data-title="bash" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">docker</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> ps</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>打开浏览器，进入web管理端:<a href="http://Server-IP:15672%EF%BC%8C%E7%94%A8%E6%88%B7%E5%90%8D%E5%AF%86%E7%A0%81%E9%83%BD%E6%98%AFadmin" target="_blank" rel="noopener noreferrer">http://Server-IP:15672，用户名密码都是admin</a></p><h2 id="开发配置项" tabindex="-1"><a class="header-anchor" href="#开发配置项"><span>开发配置项</span></a></h2><p>lin-cms-dotnetcore 中 appsettings.json中配置如下，默认guest,不太安全，所以需要我们稍微学习一下rabbitmq的工具的使用。</p><div class="language-json line-numbers-mode" data-highlighter="shiki" data-ext="json" data-title="json" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> &quot;RabbitMQ&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">: {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#E06C75;">    &quot;HostName&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">&quot;localhost&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#E06C75;">    &quot;UserName&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">&quot;admin&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#E06C75;">    &quot;Password&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">&quot;123456&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#E06C75;">    &quot;Port&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;">5672</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#E06C75;">    &quot;VirtualHost&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">&quot;/admin&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">  }</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol><li><p>新增一个admin用户，配置这个账号的密码是123455(好像也不安全)，配置tag,这里我们选择management<br><img src="https://pic.downk.cc/item/5ea54319c2a9a83be5d27c56.png" alt=""></p></li><li><p>新建一个virtual hosts，啥意思就不BB了。<br><img src="https://pic.downk.cc/item/5ea54392c2a9a83be5d2f596.png" alt=""></p></li></ol><p>3.给admin这个用户配置virtual hosts</p><p>先选择第一个图中的admin用户。<br><img src="https://pic.downk.cc/item/5ea5446ac2a9a83be5d3ab26.jpg" alt=""></p><p>然后set permission选择virtual hosts /admin 点击set permission，万事大吉<br><img src="https://pic.downk.cc/item/5ea5449bc2a9a83be5d3d674.jpg" alt=""></p><p>重新启动项目，日志不会显示错误。</p><p><img src="https://pic.downk.cc/item/5ea545d8c2a9a83be5d4e4e4.jpg" alt=""></p>`,46)])])}const d=a(t,[["render",l],["__file","rabbitmq.html.vue"]]),c=JSON.parse('{"path":"/dotnetcore/lin-cms/rabbitmq.html","title":"CAP实现EventBus","lang":"zh-CN","frontmatter":{"description":"CAP实现EventBus 分布式事务一致性，使用的是 CAP，那么我们在什么情况下使用它呢。 EventBus:事件总线，是一个基于观察者模块的事件发布/订阅框架，可以将一些复杂的，重复的操作，异步的操作，交给系统去处理，当前系统直接返回成功的操作。 简单的说就是解耦， 比如用户发布文章后，需要将消息推送给关注的用户，这时候，推送会浪费许多时间，本来...","head":[["meta",{"property":"og:url","content":"https://igeekfan.cn/igeekfan-docs/dotnetcore/lin-cms/rabbitmq.html"}],["meta",{"property":"og:site_name","content":".NET 开发者指北"}],["meta",{"property":"og:title","content":"CAP实现EventBus"}],["meta",{"property":"og:description","content":"CAP实现EventBus 分布式事务一致性，使用的是 CAP，那么我们在什么情况下使用它呢。 EventBus:事件总线，是一个基于观察者模块的事件发布/订阅框架，可以将一些复杂的，重复的操作，异步的操作，交给系统去处理，当前系统直接返回成功的操作。 简单的说就是解耦， 比如用户发布文章后，需要将消息推送给关注的用户，这时候，推送会浪费许多时间，本来..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://note.youdao.com/yws/api/personal/file/7FA20220D5454DF9B0788B33E3A41FED?method=download&shareKey=c2e5f279b574304e3bd777a75a4e3045"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2022-10-20T16:01:01.000Z"}],["meta",{"property":"article:modified_time","content":"2022-10-20T16:01:01.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"CAP实现EventBus\\",\\"image\\":[\\"https://note.youdao.com/yws/api/personal/file/7FA20220D5454DF9B0788B33E3A41FED?method=download&shareKey=c2e5f279b574304e3bd777a75a4e3045\\",\\"https://pic.downk.cc/item/5ea54319c2a9a83be5d27c56.png\\",\\"https://pic.downk.cc/item/5ea54392c2a9a83be5d2f596.png\\",\\"https://pic.downk.cc/item/5ea5446ac2a9a83be5d3ab26.jpg\\",\\"https://pic.downk.cc/item/5ea5449bc2a9a83be5d3d674.jpg\\",\\"https://pic.downk.cc/item/5ea545d8c2a9a83be5d4e4e4.jpg\\"],\\"dateModified\\":\\"2022-10-20T16:01:01.000Z\\",\\"author\\":[]}"],["link",{"rel":"alternate","type":"application/atom+xml","href":"https://igeekfan.cn/igeekfan-docs/atom.xml","title":".NET 开发者指北 Atom Feed"}],["link",{"rel":"alternate","type":"application/json","href":"https://igeekfan.cn/igeekfan-docs/feed.json","title":".NET 开发者指北 JSON Feed"}],["link",{"rel":"alternate","type":"application/rss+xml","href":"https://igeekfan.cn/igeekfan-docs/rss.xml","title":".NET 开发者指北 RSS Feed"}]]},"headers":[{"level":2,"title":"安装下载","slug":"安装下载","link":"#安装下载","children":[]},{"level":2,"title":"配置RabbitMQ","slug":"配置rabbitmq","link":"#配置rabbitmq","children":[]},{"level":2,"title":"docker下安装rabbitmq","slug":"docker下安装rabbitmq","link":"#docker下安装rabbitmq","children":[]},{"level":2,"title":"开发配置项","slug":"开发配置项","link":"#开发配置项","children":[]}],"git":{"createdTime":1588950060000,"updatedTime":1666281661000,"contributors":[{"name":"igeekfan","email":"luoyunchong@foxmail.com","commits":2},{"name":"igeekfan","email":"igeekfan@foxmail.com","commits":1},{"name":"luoyunchong","email":"luoyunchong@foxmail.com","commits":1}]},"readingTime":{"minutes":3.57,"words":1070},"filePathRelative":"dotnetcore/lin-cms/rabbitmq.md","localizedDate":"2020年5月8日","autoDesc":true}');export{d as comp,c as data};
