import{_ as s}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as i,b as a,o as n}from"./app-CsMb1ovl.js";const l={};function t(o,e){return n(),i("div",null,e[0]||(e[0]=[a(`<h1 id="serilog指北" tabindex="-1"><a class="header-anchor" href="#serilog指北"><span>Serilog指北</span></a></h1><ul><li>原文：<a href="https://blog.datalust.co/serilog-tutorial/#3eventsandlevels" target="_blank" rel="noopener noreferrer">https://blog.datalust.co/serilog-tutorial/#3eventsandlevels</a></li><li>github: <a href="https://github.com/serilog/serilog" target="_blank" rel="noopener noreferrer">https://github.com/serilog/serilog</a></li></ul><h3 id="_1-概述" tabindex="-1"><a class="header-anchor" href="#_1-概述"><span>1.概述</span></a></h3><p>serilog是一个完全结构化事件的简单.NET日志记录</p><p><code>fully-structured</code>,结构化</p><ul><li>支持多种Provider，可将日志推送到不同的中间件，如文件，数据库(mysql,sql server,mariadb等)</li></ul><h3 id="_2-hello-serilog" tabindex="-1"><a class="header-anchor" href="#_2-hello-serilog"><span>2. Hello, Serilog!</span></a></h3><p>让我们从最简单的开始，跟随以下教程，你需要创建一个Console项目，<a href="http://xn--6kqx45gg2r.NET" target="_blank" rel="noopener noreferrer">适用于.NET</a> FrameWork <a href="http://xn--0tr.NET" target="_blank" rel="noopener noreferrer">和.NET</a> Core。</p><p><code>Serilog</code> 通过 <code>NuGet</code> 分发包. 该项目以Serilog包为核心组织，配合许多 <code>sinks</code>（接收器） (超过上百!), 用于将事件写入终端,文件，数据库，日志服务器的插件中。</p><p>我们从 <code>Serilog</code> 和 <code>Serilog.Sinks.Console</code>开始, 稍后再讨论其他选项:</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span>Install-Package Serilog</span></span>
<span class="line"><span>Install-Package Serilog.Sinks.Console</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>以下是世界上最简单的 Serilog 配置：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span>using Serilog;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>class Program</span></span>
<span class="line"><span>{</span></span>
<span class="line"><span>    public static void Main(string[] args)</span></span>
<span class="line"><span>    {</span></span>
<span class="line"><span>        using (var log = new LoggerConfiguration()</span></span>
<span class="line"><span>            .WriteTo.Console()</span></span>
<span class="line"><span>            .CreateLogger())</span></span>
<span class="line"><span>        {</span></span>
<span class="line"><span>            log.Information(&quot;Hello, Serilog!&quot;);</span></span>
<span class="line"><span>            log.Warning(&quot;Goodbye, Serilog.&quot;);</span></span>
<span class="line"><span>        }</span></span>
<span class="line"><span>    }</span></span>
<span class="line"><span>}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>明确以下几点</p><ul><li><code>LoggerConfiguration</code> 类提供 了一个fluent 接口 构建一个日志管道</li><li><code>WriteTo.Console() </code> 将一个控制台接收器 添加到管道中</li><li><code>CreateLogger()</code> 集合构建后会 返回一个 <code>Logger</code> 对象, 他实现了 <code>ILogger</code>的接口</li><li><code>Logger</code> 接口继承 <code>IDisposable</code>, 所以我们使用 <code>using</code> 块</li><li>最后, <code>log.Information()</code> 和 <code>log.Warning()</code> 通过logger记录所有的发出的事件</li></ul><p>运行程序</p><p><img src="https://note.youdao.com/yws/api/personal/file/261B46CA8E7E474D889CC2D6312BA39E?method=download&amp;shareKey=b47ca475a270339f81b8af4ba28a1954" alt="image"></p><p>现在最迫切的问题是: 在我们的应用程序中，其他类如何得到这个Log对象? 除了通过参数进行传递, 有两种可能性</p><ul><li>如果您使用的是 <code>IoC</code> 容器, 你 可以使用组件接收<code>ILogger</code>对象，即通过 <code>dependency injection</code>(依赖注入)<code> ILogger</code>的方式使用. 像集成 <a href="https://github.com/nblumhardt/autofac-serilog-integration" target="_blank" rel="noopener noreferrer">AutofacSerilogIntegration</a>等包即可。</li></ul><p>或者,你可以把Logger存储到一个已知的位置中;为此 <code>Serilog</code>有一个静态日志类</p><div class="language-csharp line-numbers-mode" data-highlighter="shiki" data-ext="csharp" data-title="csharp" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;">Log</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;">Logger</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#ABB2BF;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#E5C07B;"> LoggerConfiguration</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">    .</span><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;">WriteTo</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">Console</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">    .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">CreateLogger</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">();</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;">Log</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">Information</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">&quot;Hello again, Serilog!&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;">Log</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">CloseAndFlush</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">();</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>Log</code> 类提供了与<code>ILogger</code>接口相同的所有方法.用于替换使用using 块,我们可以调用 <code>Log.CloseAndFlush()</code>，重置<code>Serilog.Log.Logger</code>,并释放原有的资源</p><blockquote><p>你可能选择基于<code>ILogger</code>的注入方式使用，或使用静态Log类 -这种选择是基于个人口味和爱好的问题. 为了保持简单 我们将在此教程中使用静态日志类。</p></blockquote><h3 id="_3-事件和级别" tabindex="-1"><a class="header-anchor" href="#_3-事件和级别"><span>3. 事件和级别</span></a></h3><p>如果使用过<code>log4net</code>等较旧的库，在使<code>Serilog</code>时，您需要在思维方式上做的最大改变是从日志事件而不是日志消息的角度来思考。活动由以下部分组成：</p><ul><li>记录事件发生时的时间戳</li><li>描述何时应捕获事件的级别</li><li>记录事件所代表内容的消息</li><li>描述事件的命名属性</li><li>可能是一个异常对象</li></ul><p>您可以将日志事件格式化为控制台的可读文本，正如我们在第一个示例中看到的：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span>11:33:01 [INF] Hello, Serilog!</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>或者，您可以将同一事件格式化为JSON，并将其发送到远程日志服务器：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span>{&quot;@t&quot;:&quot;2017-11-20T11:33:01.22138&quot;,&quot;@m&quot;:&quot;Hello, Serilog!&quot;}\`</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>在幕后，应用程序中的日志语句创建LogEvent对象，而连接到管道的接收器则确定如何记录它们。</p><h3 id="logging-levels" tabindex="-1"><a class="header-anchor" href="#logging-levels"><span>Logging levels</span></a></h3><p><code>Serilog</code>速度很快，但始终构造和记录详细的日志事件可能会浪费CPU、磁盘和网络资源。为了管理这一点，<code>Serilog</code>事件被分配了调试、信息、警告和错误等级别。每个支持的级别都有一个<code>Log.*（）</code>方法。</p><p>在开发过程中，可能会打开调试级别事件：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span>Log.Logger = new LoggerConfiguration()</span></span>
<span class="line"><span>    .MinimumLevel.Debug() // &lt;- Set the minimum level</span></span>
<span class="line"><span>    .WriteTo.Console()</span></span>
<span class="line"><span>    .CreateLogger();</span></span>
<span class="line"><span></span></span>
<span class="line"><span>// In a tight loop...</span></span>
<span class="line"><span>Log.Debug(&quot;Processing item {ItemNumber} of {ItemCount}&quot;, itemNumber, itemCount);</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在生产中，通常关闭调试事件并将最低级别设置为信息，以便只记录重要事件。阅读文档中有关<code>Serilog</code>级别的<a href="https://github.com/serilog/serilog/wiki/Writing-Log-Events#log-event-levels" target="_blank" rel="noopener noreferrer">更多信息</a>。</p><h3 id="_4-发送和收集结构化数据" tabindex="-1"><a class="header-anchor" href="#_4-发送和收集结构化数据"><span>4. 发送和收集结构化数据</span></a></h3><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span>var itemNumber = 10;</span></span>
<span class="line"><span>var itemCount = 999;</span></span>
<span class="line"><span>Log.Debug(&quot;Processing item {ItemNumber} of {ItemCount}&quot;, itemNumber, itemCount);</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>您注意到日志消息中的<code>{ItemNumber}</code>之类的命名占位符了吗？这不是C#插值字符串：Log.*（）方法接受消息模板，这是.NET格式字符串的一种变体，除了通常的{0}位置字符串外，还支持{Named}占位符。</p><p>这似乎有点奇怪，直到您意识到，通过这样做，<code>Serilog</code>可以将消息的一部分作为一级属性与人性化文本一起捕获：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span>{</span></span>
<span class="line"><span>    &quot;@t&quot;: &quot;2017-11-20T11:33:01.22138&quot;,</span></span>
<span class="line"><span>    &quot;@l&quot;: &quot;Debug&quot;,</span></span>
<span class="line"><span>    &quot;@m&quot;: &quot;Processing item 10 of 999&quot;,</span></span>
<span class="line"><span>    &quot;ItemNumber&quot;: 10,</span></span>
<span class="line"><span>    &quot;ItemCount&quot;: 999</span></span>
<span class="line"><span>}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>我们为什么要这样做？由于日志事件附带了一些有趣的字段作为属性，因此我们可以立即使用简单的过滤器（如<code>ItemNumber&gt;900</code>）来查找事件，而不必通过正则表达式从消息中提取信息。</p><p>更进一步，我们可以使用<code>@structure</code>捕获操作符不仅获取平面属性值，还获取完整的对象：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span>var user = new { Name = &quot;Nick&quot;, Id = &quot;nblumhardt&quot; };</span></span>
<span class="line"><span>Log.Information(&quot;Logged on user {@User}&quot;, user);</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>在这里，用户对象被捕获到生成的JSON中，因此我们可以使用诸如<code>user.Id=&#39;nblumhardt&#39;</code>之类的查询来查找事件：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span>{</span></span>
<span class="line"><span>    &quot;@t&quot;: &quot;2017-11-20T11:33:01.22138&quot;,</span></span>
<span class="line"><span>    &quot;@m&quot;: &quot;Logged on user {\\&quot;Name\\&quot;: \\&quot;Nick\\&quot;, \\&quot;Id\\&quot;: \\&quot;nblumhardt\\&quot;}&quot;,</span></span>
<span class="line"><span>    &quot;User&quot;: {&quot;Name&quot;: &quot;Nick&quot;, &quot;Id&quot;: &quot;nblumhardt&quot;}</span></span>
<span class="line"><span>}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>生产监控和调试已经是一项艰巨、耗时且经常充满压力的任务：通常这些相关数据触手可及，<code>Serilog</code>消除了与操作相关 活动中最大的分歧之一。</p><blockquote><p>提示：从<code>VisualStudioMarketplace</code>安装了不起的<a href="https://marketplace.visualstudio.com/items?itemName=Suchiman.SerilogAnalyzer" target="_blank" rel="noopener noreferrer">Serilog分析器</a>，以便在键入时检查消息模板语法</p></blockquote><p>这实际上会产生多大的差异，很大程度上取决于您如何从<code>Serilog</code>收集事件。传统上，日志事件进入文本文件并使用<code>grep</code>进行搜索。<code>Serilog</code>也可以记录文本文件，但您不能在记事本中执行<code>ItemNumber&gt;900</code>，因此您需要评估更强大的工具来实现这一点。</p><h2 id="将事件写入json日志文件" tabindex="-1"><a class="header-anchor" href="#将事件写入json日志文件"><span>将事件写入JSON日志文件</span></a></h2><p>如果您的需求很简单，可以将<code>JSON</code>写入日志文件，并使用<code>JSON</code>感知工具直接查询文件。<code>Serilog</code>的文件接收器和紧凑的<code>JSON</code>格式化程序使第一部分变得简单。让我们尝试另一个安装了以下软件包的小型控制台应用程序：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span>Install-Package Serilog;</span></span>
<span class="line"><span>Install-Package Serilog.Sinks.File</span></span>
<span class="line"><span>Install-Package Serilog.Formatting.Compact</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在Main（）方法中：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span>Log.Logger = new LoggerConfiguration()</span></span>
<span class="line"><span>    .MinimumLevel.Debug()</span></span>
<span class="line"><span>    .WriteTo.File(new CompactJsonFormatter(), &quot;log.clef&quot;)</span></span>
<span class="line"><span>    .CreateLogger();</span></span>
<span class="line"><span></span></span>
<span class="line"><span>var itemCount = 99;</span></span>
<span class="line"><span>for (var itemNumber = 0; itemNumber &lt; itemCount; ++itemNumber)</span></span>
<span class="line"><span>    Log.Debug(&quot;Processing item {ItemNumber} of {ItemCount}&quot;, itemNumber, itemCount);</span></span>
<span class="line"><span></span></span>
<span class="line"><span>Log.CloseAndFlush();</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>运行此应用程序将使用<code>Serilog</code>的压缩日志事件格式在<code>log.clef</code>中生成一个<a href="https://en.wikipedia.org/wiki/JSON_streaming" target="_blank" rel="noopener noreferrer">新行分隔的<code>JSON</code>流</a>。（如果没有<code>CompactJsonFormatter</code>，我们将创建一个简单的平面日志文件。）</p><p>如果在文本编辑器中打开该文件，您将看到JSON事件，如我们上面使用的示例。</p><h3 id="将事件写入日志服务器" tabindex="-1"><a class="header-anchor" href="#将事件写入日志服务器"><span>将事件写入日志服务器</span></a></h3><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span>Install-Package Serilog.Sinks.Seq</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span>Log.Logger = new LoggerConfiguration()</span></span>
<span class="line"><span>    .MinimumLevel.Debug()</span></span>
<span class="line"><span>    .WriteTo.Seq(&quot;http://localhost:5341&quot;)</span></span>
<span class="line"><span>    .CreateLogger();</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_5-标记用于筛选和关联的事件" tabindex="-1"><a class="header-anchor" href="#_5-标记用于筛选和关联的事件"><span>5.标记用于筛选和关联的事件</span></a></h3><h4 id="增加固定属性" tabindex="-1"><a class="header-anchor" href="#增加固定属性"><span>增加固定属性</span></a></h4><p>最简单的充实方法是向源自日志管道的所有事件添加固定属性值。这是使用记录器配置中的<code>Enrich.WithProperty()</code>完成的：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span>Log.Logger = new LoggerConfiguration()</span></span>
<span class="line"><span>    .Enrich.WithProperty(&quot;Application&quot;, &quot;Demo&quot;)</span></span>
<span class="line"><span>    .WriteTo.Seq(&quot;http://localhost:5341&quot;)</span></span>
<span class="line"><span>    .CreateLogger();</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在<code>LogEvents</code>上，通过扩展添加的属性与源自消息模板的属性相同：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span>{</span></span>
<span class="line"><span>    &quot;@t&quot;: &quot;2017-11-20T11:33:01.22138&quot;,</span></span>
<span class="line"><span>    &quot;@l&quot;: &quot;Debug&quot;,</span></span>
<span class="line"><span>    &quot;@m&quot;: &quot;Processing item 10 of 999&quot;,</span></span>
<span class="line"><span>    &quot;ItemNumber&quot;: 10,</span></span>
<span class="line"><span>    &quot;ItemCount&quot;: 999,</span></span>
<span class="line"><span>    &quot;Application&quot;: &quot;Demo&quot;</span></span>
<span class="line"><span>}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这种策略有助于放大集中日志流中的特定日志源；以这种方式添加的属性包括应用程序、环境和版本等内容。</p><h2 id="增加事件或记录器特定属性" tabindex="-1"><a class="header-anchor" href="#增加事件或记录器特定属性"><span>增加事件或记录器特定属性</span></a></h2><p>通过创建和使用上下文记录器，可以将属性添加到一个或几个相关事件中，而不是使用相同的值丰富所有事件：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span>var orderLog = Log.ForContext(&quot;OrderId&quot;, order.Id);</span></span>
<span class="line"><span>orderLog.Information(&quot;Looking up product codes&quot;);</span></span>
<span class="line"><span>// ...</span></span>
<span class="line"><span>orderLog.Information(&quot;Product lookup took {Elapsed} ms&quot;, elapsed.TotalMilliseconds);</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在这里，通过<code>orderLog</code>发出的两个事件都将附加<code>OrderId</code>属性。</p><p>扩展是可添加的：如果<code>Application</code>属性设置在管道级别，则上面的第二个事件将携带经过（来自消息）、<code>OrderId</code>（来自上下文记录器）和<code>Application</code>（来自日志管道）。</p><h3 id="丰富源类型信息" tabindex="-1"><a class="header-anchor" href="#丰富源类型信息"><span>丰富源类型信息</span></a></h3><p>特定于记录器的充实的一个特例是如何用创建事件的类标记事件。</p><p>在名为<code>HomeController</code>的类中，使用以下方法创建特定于类型的记录器：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span>private readonly ILogger _log = Log.ForContext&lt;HomeController&gt;();</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>通过<code>_log</code>发出的事件将携带值为<code>MyApp.Controller.HomeController</code>的<code>SourceContext</code>属性。</p><h3 id="丰富环境语境" tabindex="-1"><a class="header-anchor" href="#丰富环境语境"><span>丰富环境语境</span></a></h3><p>为了丰富工作单元中引发的所有事件，<code>Serilog</code>提供了<code>LogContext</code>。首先需要在<code>LoggerConfiguration</code>级别使用<code>Enrich.FromLogContext()</code>启用此功能：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span>Log.Logger = new LoggerConfiguraition()</span></span>
<span class="line"><span>     .Enrich.FromLogContext()</span></span>
<span class="line"><span>     // ...</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>LogContext</code>可以看作是（键、值）对的堆栈；当从日志上下文中丰富事件时，这些事件将作为属性添加到事件中。</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span>using (LogContext.PushProperty(&quot;MessageId&quot;, message.Id))</span></span>
<span class="line"><span>{</span></span>
<span class="line"><span>    Log.Debug(&quot;Dispatching message of type {MessageType}&quot;, message.GetType());</span></span>
<span class="line"><span>    await handler.HandleAsync(message);</span></span>
<span class="line"><span>}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>LogContext</code>的有趣之处在于不需要传递任何信息。在示例代码中，<code>HandleAsync()</code>的实现以及它调用的任何其他方法都可以直接使用<code>Log</code>和<code>ILogger</code>、 <code>MessageId</code>属性将被提取并添加到后台。</p><blockquote><p>提示：<code>LogContext</code>是一个堆栈；推送到堆栈上的属性必须通过处理从<code>PushProperty()</code>返回的对象再次弹出-必须使用块。</p></blockquote>`,83)]))}const p=s(l,[["render",t],["__file","serilog-tutorial.html.vue"]]),c=JSON.parse('{"path":"/dotnetcore/examples/serilog-tutorial.html","title":"Serilog指北","lang":"zh-CN","frontmatter":{"description":"Serilog指北 原文：https://blog.datalust.co/serilog-tutorial/#3eventsandlevels github: https://github.com/serilog/serilog 1.概述 serilog是一个完全结构化事件的简单.NET日志记录 fully-structured,结构化 支持多种Pr...","head":[["meta",{"property":"og:url","content":"https://igeekfan.cn/igeekfan-docs/dotnetcore/examples/serilog-tutorial.html"}],["meta",{"property":"og:site_name","content":".NET 开发者指北"}],["meta",{"property":"og:title","content":"Serilog指北"}],["meta",{"property":"og:description","content":"Serilog指北 原文：https://blog.datalust.co/serilog-tutorial/#3eventsandlevels github: https://github.com/serilog/serilog 1.概述 serilog是一个完全结构化事件的简单.NET日志记录 fully-structured,结构化 支持多种Pr..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://note.youdao.com/yws/api/personal/file/261B46CA8E7E474D889CC2D6312BA39E?method=download&shareKey=b47ca475a270339f81b8af4ba28a1954"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2022-08-15T16:21:26.000Z"}],["meta",{"property":"article:modified_time","content":"2022-08-15T16:21:26.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Serilog指北\\",\\"image\\":[\\"https://note.youdao.com/yws/api/personal/file/261B46CA8E7E474D889CC2D6312BA39E?method=download&shareKey=b47ca475a270339f81b8af4ba28a1954\\"],\\"dateModified\\":\\"2022-08-15T16:21:26.000Z\\",\\"author\\":[]}"],["link",{"rel":"alternate","type":"application/atom+xml","href":"https://igeekfan.cn/igeekfan-docs/atom.xml","title":".NET 开发者指北 Atom Feed"}],["link",{"rel":"alternate","type":"application/json","href":"https://igeekfan.cn/igeekfan-docs/feed.json","title":".NET 开发者指北 JSON Feed"}],["link",{"rel":"alternate","type":"application/rss+xml","href":"https://igeekfan.cn/igeekfan-docs/rss.xml","title":".NET 开发者指北 RSS Feed"}]]},"headers":[{"level":3,"title":"1.概述","slug":"_1-概述","link":"#_1-概述","children":[]},{"level":3,"title":"2. Hello, Serilog!","slug":"_2-hello-serilog","link":"#_2-hello-serilog","children":[]},{"level":3,"title":"3. 事件和级别","slug":"_3-事件和级别","link":"#_3-事件和级别","children":[]},{"level":3,"title":"Logging levels","slug":"logging-levels","link":"#logging-levels","children":[]},{"level":3,"title":"4. 发送和收集结构化数据","slug":"_4-发送和收集结构化数据","link":"#_4-发送和收集结构化数据","children":[]},{"level":2,"title":"将事件写入JSON日志文件","slug":"将事件写入json日志文件","link":"#将事件写入json日志文件","children":[{"level":3,"title":"将事件写入日志服务器","slug":"将事件写入日志服务器","link":"#将事件写入日志服务器","children":[]},{"level":3,"title":"5.标记用于筛选和关联的事件","slug":"_5-标记用于筛选和关联的事件","link":"#_5-标记用于筛选和关联的事件","children":[]}]},{"level":2,"title":"增加事件或记录器特定属性","slug":"增加事件或记录器特定属性","link":"#增加事件或记录器特定属性","children":[{"level":3,"title":"丰富源类型信息","slug":"丰富源类型信息","link":"#丰富源类型信息","children":[]},{"level":3,"title":"丰富环境语境","slug":"丰富环境语境","link":"#丰富环境语境","children":[]}]}],"git":{"createdTime":1641550035000,"updatedTime":1660580486000,"contributors":[{"name":"igeekfan","email":"luoyunchong@foxmail.com","commits":1},{"name":"luoyunchong","email":"luoyunchong@foxmail.com","commits":1}]},"readingTime":{"minutes":7.77,"words":2330},"filePathRelative":"dotnetcore/examples/serilog-tutorial.md","localizedDate":"2022年1月7日","autoDesc":true}');export{p as comp,c as data};
