import{_ as n}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as e,b as a,o as i}from"./app-OEpYmDMf.js";const l={};function t(p,s){return i(),e("div",null,s[0]||(s[0]=[a(`<h1 id="github-actions" tabindex="-1"><a class="header-anchor" href="#github-actions"><span>GitHub Actions</span></a></h1><h2 id="gitee-与-github-自动同步" tabindex="-1"><a class="header-anchor" href="#gitee-与-github-自动同步"><span>Gitee 与 GitHub 自动同步</span></a></h2><p>当 github 上的项目代码 master 分支提交后，gitee 自动同步。如何实现呢。主要通过 github action 实现</p><p>我们想将 luoyunchong/lin-cms-dotnetcore 同步到 igeekfan/lin-cms-dotnetcore 上面，需要做的非常简单，只需要 2 步：</p><p>1.将 Gitee 的私钥，上传到项目的 setting 的 Secrets 中。<br><a href="https://pic.downk.cc/item/5e9725f5c2a9a83be5dcdec3.png" target="_blank" rel="noopener noreferrer"><img src="https://pic.downk.cc/item/5e9725f5c2a9a83be5dcdec3.png" alt=""></a></p><p>前提，该私钥对应的公钥在 gitee 上，windows(C:\\Users\\Computer.ssh)，其中 id_rsa 是私钥，id_rsa.pub 内容是公钥，具体在 gitee 上增加 ssh 公钥的过程，请参考<a href="https://gitee.com/help/articles/4191" target="_blank" rel="noopener noreferrer">SSH 公钥设置</a></p><ol start="2"><li>改 source-repo、destination-repo 的值</li></ol><h2 id="lin-cms-dotnetcore-gitee-同步脚本" tabindex="-1"><a class="header-anchor" href="#lin-cms-dotnetcore-gitee-同步脚本"><span>lin-cms-dotnetcore gitee 同步脚本</span></a></h2><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span>name: Publish</span></span>
<span class="line"><span>on:</span></span>
<span class="line"><span>    push:</span></span>
<span class="line"><span>        branches:</span></span>
<span class="line"><span>            - master</span></span>
<span class="line"><span></span></span>
<span class="line"><span>jobs:</span></span>
<span class="line"><span>    build:</span></span>
<span class="line"><span>        runs-on: ubuntu-latest</span></span>
<span class="line"><span>        steps:</span></span>
<span class="line"><span>            - name: Sync to Gitee 💕</span></span>
<span class="line"><span>              uses: wearerequired/git-mirror-action@master</span></span>
<span class="line"><span>              env:</span></span>
<span class="line"><span>                  SSH_PRIVATE_KEY: \${{ secrets.SSH_PRIVATE_KEY }}</span></span>
<span class="line"><span>              with:</span></span>
<span class="line"><span>                  source-repo: &quot;git@github.com:luoyunchong/lin-cms-dotnetcore.git&quot;</span></span>
<span class="line"><span>                  destination-repo: &quot;git@gitee.com:igeekfan/lin-cms-dotnetcore.git&quot;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>每一个 steps 就是在 jobs 里执行命令，一个 jobs 可以有多个 steps,<br> steps 字段指定每个 Job 的运行步骤的介绍</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span>jobs.&lt;job_id&gt;.steps.name 步骤名称</span></span>
<span class="line"><span>jobs.&lt;job_id&gt;.steps.env 该步骤所需的环境变量。</span></span>
<span class="line"><span>jobs.&lt;job_id&gt;.steps.uses  使用的组件</span></span>
<span class="line"><span>jobs.&lt;job_id&gt;.steps.with 多个值(这个参数其实是提交给容器的CMD)</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="ci-cd-部署" tabindex="-1"><a class="header-anchor" href="#ci-cd-部署"><span>CI/CD 部署</span></a></h2><ul><li>完整的配置项</li></ul><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span># This workflow will do a clean install of node dependencies, build the source code and run tests across different versions of node</span></span>
<span class="line"><span># For more information see: https://help.github.com/actions/language-and-framework-guides/using-nodejs-with-github-actions</span></span>
<span class="line"><span></span></span>
<span class="line"><span>name: Node.js CI</span></span>
<span class="line"><span></span></span>
<span class="line"><span>on:</span></span>
<span class="line"><span>  push:</span></span>
<span class="line"><span>    branches:</span></span>
<span class="line"><span>      - master</span></span>
<span class="line"><span></span></span>
<span class="line"><span>jobs:</span></span>
<span class="line"><span>  build:</span></span>
<span class="line"><span>    name: 编译</span></span>
<span class="line"><span>    runs-on: ubuntu-latest</span></span>
<span class="line"><span>    strategy:</span></span>
<span class="line"><span>      matrix:</span></span>
<span class="line"><span>        node-version: [&#39;8&#39;,&#39;10&#39;,&#39;12&#39;]</span></span>
<span class="line"><span>    steps:</span></span>
<span class="line"><span>    - uses: actions/checkout@v2</span></span>
<span class="line"><span>    - name: Use Node.js \${{ matrix.node-version }}</span></span>
<span class="line"><span>      uses: actions/setup-node@v1</span></span>
<span class="line"><span>      with:</span></span>
<span class="line"><span>        node-version: \${{ matrix.node-version }}</span></span>
<span class="line"><span>    - name: 安装依赖</span></span>
<span class="line"><span>      run: npm i</span></span>
<span class="line"><span>    - name: 编译文件</span></span>
<span class="line"><span>      run: |</span></span>
<span class="line"><span>        npm run lint</span></span>
<span class="line"><span>        npm run build</span></span>
<span class="line"><span>  deploy:</span></span>
<span class="line"><span>    name: 部署</span></span>
<span class="line"><span>    runs-on: ubuntu-latest</span></span>
<span class="line"><span>    steps:</span></span>
<span class="line"><span>      - name: 拉取代码</span></span>
<span class="line"><span>        uses: actions/checkout@v2</span></span>
<span class="line"><span>      - name: 安装 Node.js 12</span></span>
<span class="line"><span>        uses: actions/setup-node@v1</span></span>
<span class="line"><span>        with:</span></span>
<span class="line"><span>          node-version: 12</span></span>
<span class="line"><span>      - name: 安装依赖</span></span>
<span class="line"><span>        run: npm i</span></span>
<span class="line"><span>      - name: 编译文件</span></span>
<span class="line"><span>        run: |</span></span>
<span class="line"><span>          npm run lint</span></span>
<span class="line"><span>          npm run build</span></span>
<span class="line"><span>      - name: 上传文件</span></span>
<span class="line"><span>        uses: easingthemes/ssh-deploy@v2.1.4</span></span>
<span class="line"><span>        env:</span></span>
<span class="line"><span>          ARGS: &quot;-rltgoDzvO --delete&quot;</span></span>
<span class="line"><span>          SOURCE: &quot;dist/&quot;</span></span>
<span class="line"><span>          REMOTE_HOST: \${{ secrets.HOST }}</span></span>
<span class="line"><span>          REMOTE_USER: \${{ secrets.USER }}</span></span>
<span class="line"><span>          SSH_PRIVATE_KEY: \${{ secrets.SERVER_SSH_KEY }}</span></span>
<span class="line"><span>          TARGET: \${{ secrets.REMOTE_TARGET }}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="ssh-deploy-插件" tabindex="-1"><a class="header-anchor" href="#ssh-deploy-插件"><span>ssh-deploy 插件</span></a></h3><ul><li><a href="https://github.com/easingthemes/ssh-deploy" target="_blank" rel="noopener noreferrer">https://github.com/easingthemes/ssh-deploy</a></li></ul><p>可查看 README 了解具体参数</p><p>以上共有四个参数需要配置</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span>REMOTE_HOST: \${{ secrets.HOST }}</span></span>
<span class="line"><span>REMOTE_USER: \${{ secrets.USER }}</span></span>
<span class="line"><span>SSH_PRIVATE_KEY: \${{ secrets.SERVER_SSH_KEY }}</span></span>
<span class="line"><span>TARGET: \${{ secrets.REMOTE_TARGET }}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>打开 Settings-&gt;Secrets-&gt;New secret 配置如下内容。</p><ul><li>HOST eg: <a href="http://mydomain.com" target="_blank" rel="noopener noreferrer">mydomain.com</a> 这里我们配置了服务器的 ip 111.231.197.142</li><li>USER centos 服务器的用户名</li><li>REMOTE_TARGET 目标服务器的文件夹位置， eg: /var/www/lin-cms-vvlog</li><li>SERVER_SSH_KEY：SSH 密钥对的私钥部分，公钥应该添加到服务器上的 authorized_keys 文件中。。eg /root/.ssh/authorized_keys</li></ul><p>最后一个参数说明：这个相当于把私钥给 github，让他能远程上传文件到 centos 中，公钥放到服务器上。公钥生成的过程不 BB 了，</p><h3 id="ssh-生成" tabindex="-1"><a class="header-anchor" href="#ssh-生成"><span>.ssh 生成</span></a></h3><ul><li><a href="https://help.github.com/en/articles/connecting-to-github-with-ssh" target="_blank" rel="noopener noreferrer">https://help.github.com/en/articles/connecting-to-github-with-ssh</a></li><li><a href="https://www.ssh.com/ssh/public-key-authentication" target="_blank" rel="noopener noreferrer">https://www.ssh.com/ssh/public-key-authentication</a></li></ul><p>本地 windows .ssh 默认生成目录</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span>C:\\Users\\计算机名\\.ssh</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>我的.ssh 目录位置</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span>C:\\Users\\Computer\\.ssh</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>dir 查看文件</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span>C:\\Users\\Computer\\.ssh&gt;dir</span></span>
<span class="line"><span>2020/02/22  19:45             3,243 id_rsa</span></span>
<span class="line"><span>2020/02/22  19:45               750 id_rsa.pub</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>id_rsa 是私钥，用 vscode 等记事本编辑器打开，并复制配置到 github 上。New secret,id_rsa.pub 是公钥，把他复制到 linux 文件夹<code>/root/.ssh/</code>目录中，这时把他的名字由<code>id_rsa.pub</code>改成<code>authorized_keys</code>即可。</p><p><code>/用户名/.ssh</code> 没有.ssh 文件夹就创建一个。</p><h3 id="xsheel-ssh-登录" tabindex="-1"><a class="header-anchor" href="#xsheel-ssh-登录"><span>XSheel ssh 登录</span></a></h3><p>可通过 xshell 工具验证，Public Key 登录。</p><p>新建会话属性-&gt;输入主机（H）即 IP 地址。</p><p>选择用户身份验证-&gt;方法选择 public Key,输入用户名，比如 root</p><ul><li>选择私钥登录<br> 在用户密钥右侧点击浏览-&gt;用户密钥-&gt;导入-&gt;选择 id_rsa.pub 私钥，导入成功后，选择此密钥，确定。再在 SSH 用户身份验证界面确定,即可登录成功。表明私钥，公钥配置成功</li></ul><h2 id="参考" tabindex="-1"><a class="header-anchor" href="#参考"><span>参考</span></a></h2><ul><li><a href="https://github.com/marketplace/actions/mirror-a-repository-using-ssh" target="_blank" rel="noopener noreferrer">https://github.com/marketplace/actions/mirror-a-repository-using-ssh</a></li><li><a href="https://help.github.com/en/actions" target="_blank" rel="noopener noreferrer">https://help.github.com/en/actions</a></li></ul>`,39)]))}const d=n(l,[["render",t],["__file","github-actions.html.vue"]]),o=JSON.parse('{"path":"/dotnetcore/lin-cms/github-actions.html","title":"GitHub Actions","lang":"zh-CN","frontmatter":{"description":"GitHub Actions Gitee 与 GitHub 自动同步 当 github 上的项目代码 master 分支提交后，gitee 自动同步。如何实现呢。主要通过 github action 实现 我们想将 luoyunchong/lin-cms-dotnetcore 同步到 igeekfan/lin-cms-dotnetcore 上面，需要做...","head":[["meta",{"property":"og:url","content":"https://igeekfan.cn/igeekfan-docs/dotnetcore/lin-cms/github-actions.html"}],["meta",{"property":"og:site_name","content":".NET 开发者指北"}],["meta",{"property":"og:title","content":"GitHub Actions"}],["meta",{"property":"og:description","content":"GitHub Actions Gitee 与 GitHub 自动同步 当 github 上的项目代码 master 分支提交后，gitee 自动同步。如何实现呢。主要通过 github action 实现 我们想将 luoyunchong/lin-cms-dotnetcore 同步到 igeekfan/lin-cms-dotnetcore 上面，需要做..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://pic.downk.cc/item/5e9725f5c2a9a83be5dcdec3.png"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2022-06-02T11:02:17.000Z"}],["meta",{"property":"article:modified_time","content":"2022-06-02T11:02:17.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"GitHub Actions\\",\\"image\\":[\\"https://pic.downk.cc/item/5e9725f5c2a9a83be5dcdec3.png\\"],\\"dateModified\\":\\"2022-06-02T11:02:17.000Z\\",\\"author\\":[]}"],["link",{"rel":"alternate","type":"application/atom+xml","href":"https://igeekfan.cn/igeekfan-docs/atom.xml","title":".NET 开发者指北 Atom Feed"}],["link",{"rel":"alternate","type":"application/json","href":"https://igeekfan.cn/igeekfan-docs/feed.json","title":".NET 开发者指北 JSON Feed"}],["link",{"rel":"alternate","type":"application/rss+xml","href":"https://igeekfan.cn/igeekfan-docs/rss.xml","title":".NET 开发者指北 RSS Feed"}]]},"headers":[{"level":2,"title":"Gitee 与 GitHub 自动同步","slug":"gitee-与-github-自动同步","link":"#gitee-与-github-自动同步","children":[]},{"level":2,"title":"lin-cms-dotnetcore gitee 同步脚本","slug":"lin-cms-dotnetcore-gitee-同步脚本","link":"#lin-cms-dotnetcore-gitee-同步脚本","children":[]},{"level":2,"title":"CI/CD 部署","slug":"ci-cd-部署","link":"#ci-cd-部署","children":[{"level":3,"title":"ssh-deploy 插件","slug":"ssh-deploy-插件","link":"#ssh-deploy-插件","children":[]},{"level":3,"title":".ssh 生成","slug":"ssh-生成","link":"#ssh-生成","children":[]},{"level":3,"title":"XSheel ssh 登录","slug":"xsheel-ssh-登录","link":"#xsheel-ssh-登录","children":[]}]},{"level":2,"title":"参考","slug":"参考","link":"#参考","children":[]}],"git":{"createdTime":1595610608000,"updatedTime":1654167737000,"contributors":[{"name":"igeekfan","email":"luoyunchong@foxmail.com","commits":1},{"name":"luoyunchong","email":"luoyunchong@foxmail.com","commits":1}]},"readingTime":{"minutes":3,"words":900},"filePathRelative":"dotnetcore/lin-cms/github-actions.md","localizedDate":"2020年7月24日","autoDesc":true}');export{d as comp,o as data};
