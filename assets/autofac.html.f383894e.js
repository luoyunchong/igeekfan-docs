import{_ as t}from"./plugin-vue_export-helper.21dcd24c.js";import{r as c,c as o,a as n,b as p,F as l,d as e,e as s,o as u}from"./app.5de88598.js";const i={},r=e(`<h1 id="autofac-\u4F9D\u8D56\u6CE8\u5165\u5C0F\u77E5\u8BC6" tabindex="-1"><a class="header-anchor" href="#autofac-\u4F9D\u8D56\u6CE8\u5165\u5C0F\u77E5\u8BC6" aria-hidden="true">#</a> Autofac \u4F9D\u8D56\u6CE8\u5165\u5C0F\u77E5\u8BC6</h1><h2 id="\u63A7\u5236\u53CD\u8F6C-\u4F9D\u8D56\u6CE8\u5165-ioc-di" tabindex="-1"><a class="header-anchor" href="#\u63A7\u5236\u53CD\u8F6C-\u4F9D\u8D56\u6CE8\u5165-ioc-di" aria-hidden="true">#</a> \u63A7\u5236\u53CD\u8F6C/\u4F9D\u8D56\u6CE8\u5165 IOC/DI</h2><p>\u4F9D\u8D56\u63A5\u53E3\u800C\u4E0D\u4F9D\u8D56\u4E8E\u5B9E\u73B0\uFF0C\u662F\u9762\u5411\u5BF9\u8C61\u7684\u516D\u5927\u8BBE\u8BA1\u539F\u5219\uFF08SOLID)\u4E4B\u4E00\u3002\u5373\u4F9D\u8D56\u5012\u7F6E\u539F\u5219(<code>Dependence Inversion Principle</code>)</p><p>aspnetcore\u4E2D\u7684\u751F\u547D\u5468\u671F\u901A\u5E38\u5206\u4E3A\u4E09\u79CD\uFF0C\u5177\u4F53\u5982\u4E0B</p><ul><li><code>Singleton</code> \u5355\u4F8B\uFF08\u5168\u5C40\u552F\u4E00\u5B9E\u4F8B\uFF09</li><li><code>Scoped</code> \u8303\u56F4 \uFF08\u5728\u540C\u4E00\u4E2A\u751F\u547D\u5468\u671F\u5185\u662F\u540C\u4E00\u4E2A\u5B9E\u4F8B\uFF09</li><li><code>Transient</code> \u77AC\u65F6\uFF08\u6BCF\u6B21\u8BF7\u6C42\u90FD\u662F\u4E00\u4E2A\u65B0\u7684\u5B9E\u4F8B\uFF09</li></ul><p>Autofac\u547D\u540D\u6709\u4E00\u4E9B\u4E0D\u540C\uFF0C\u4F46\u529F\u80FD\u662F\u4E00\u6837\u7684\u3002</p><ul><li>Instance Per Dependency\u77AC\u65F6\u7684</li><li>Single Instance \u5355\u4F8B</li><li>Instance Per Lifetime Scope \u4F5C\u7528\u57DF</li></ul><h3 id="autofac-\u751F\u547D\u5468\u671F" tabindex="-1"><a class="header-anchor" href="#autofac-\u751F\u547D\u5468\u671F" aria-hidden="true">#</a> Autofac \u751F\u547D\u5468\u671F</h3><ul><li>Instance Per Dependency \u77AC\u65F6</li></ul><div class="language-csharp ext-cs line-numbers-mode"><pre class="language-csharp"><code>builder<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">RegisterType</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>Worker<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">InstancePerDependency</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// \u5982\u679C\u4E0D\u6307\u5B9A,\u9ED8\u8BA4\u5C31\u662FInstancePerDependency</span>
builder<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">RegisterType</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>Worker<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><ul><li>Instance Per Lifetime Scope \u4F5C\u7528\u57DF</li></ul><div class="language-csharp ext-cs line-numbers-mode"><pre class="language-csharp"><code><span class="token comment">// \u5728\u540C\u4E00\u4E2A\u4F5C\u7528\u57DF\u4E2D\u83B7\u5F97\u7684\u662F\u76F8\u540C\u5B9E\u4F8B\uFF0C\u5728\u4E0D\u540C\u4F5C\u7528\u57DF\u83B7\u5F97\u7684\u662F\u4E0D\u540C\u5B9E\u4F8B</span>
builder<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">RegisterType</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>Worker<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">InstancePerLifetimeScope</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><ul><li>Single Instance \u5355\u4F8B</li></ul><div class="language-csharp ext-cs line-numbers-mode"><pre class="language-csharp"><code><span class="token comment">// \u6CE8\u518CWorker\u7C7B\u4E3ASIngle Instance\uFF08\u5355\u4F8B\uFF09\uFF0C\u6BCF\u6B21\u83B7\u53D6\u5747\u8FD4\u56DE\u540C\u4E00\u4E2A\u5B9E\u4F8B</span>
builder<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">RegisterType</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>Worker<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">SingleInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><h2 id="\u4F7F\u7528\u8BF4\u660E" tabindex="-1"><a class="header-anchor" href="#\u4F7F\u7528\u8BF4\u660E" aria-hidden="true">#</a> \u4F7F\u7528\u8BF4\u660E</h2><p>\u521B\u5EFA<code>ASP.NET Core 3.0+</code>\u7684\u9879\u76EE\uFF0C\u5E76\u5B89\u88C5<code>Autofac</code>\u5305</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code>dotnet <span class="token function">add</span> package Autofac.Extensions.DependencyInjection
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>\u5728 Program \u4E2D Host \u4E3B\u673A\u6307\u5B9A <code>.UseServiceProviderFactory(new AutofacServiceProviderFactory())</code>.</p><p>UseServiceProviderFactory \u8C03\u7528 Autofac \u63D0\u4F9B\u7A0B\u5E8F,\u9644\u52A0\u5230\u901A\u7528\u5BBF\u4E3B\u673A\u5236\u3002</p><div class="language-diff ext-diff line-numbers-mode"><pre class="language-diff"><code>public class Program
{
<span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line">   public static void Main(string[] args)
</span><span class="token prefix unchanged"> </span><span class="token line">   {
</span><span class="token prefix unchanged"> </span><span class="token line">       var host = Host.CreateDefaultBuilder(args)
</span></span><span class="token inserted-sign inserted"><span class="token prefix inserted">+</span><span class="token line">       .UseServiceProviderFactory(new AutofacServiceProviderFactory())
</span></span><span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line">       .ConfigureWebHostDefaults(webHostBuilder =&gt; {
</span><span class="token prefix unchanged"> </span><span class="token line">           webHostBuilder
</span><span class="token prefix unchanged"> </span><span class="token line">           .UseContentRoot(Directory.GetCurrentDirectory())
</span><span class="token prefix unchanged"> </span><span class="token line">           .UseIISIntegration()
</span><span class="token prefix unchanged"> </span><span class="token line">           .UseStartup&lt;Startup&gt;();
</span><span class="token prefix unchanged"> </span><span class="token line">       })
</span><span class="token prefix unchanged"> </span><span class="token line">       .Build();
</span></span>
<span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line">       host.Run();
</span><span class="token prefix unchanged"> </span><span class="token line">   }
</span></span>}
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br></div></div><p>\u5728 StartUp \u4E2D\u914D\u7F6E</p><div class="language-diff ext-diff line-numbers-mode"><pre class="language-diff"><code>public class Startup
{
<span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line"> public Startup(IConfiguration configuration)
</span><span class="token prefix unchanged"> </span><span class="token line"> {
</span><span class="token prefix unchanged"> </span><span class="token line">   this.Configuration = configuration;
</span><span class="token prefix unchanged"> </span><span class="token line"> }
</span></span>
<span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line"> public IConfiguration Configuration { get; private set; }
</span></span>
<span class="token inserted-sign inserted"><span class="token prefix inserted">+</span><span class="token line">  public ILifetimeScope AutofacContainer { get; private set; }
</span></span>
<span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line"> public void ConfigureServices(IServiceCollection services)
</span><span class="token prefix unchanged"> </span><span class="token line"> {
</span><span class="token prefix unchanged"> </span><span class="token line">   services.AddOptions();
</span><span class="token prefix unchanged"> </span><span class="token line"> }
</span></span>
<span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line"> // ConfigureContainer is where you can register things directly
</span><span class="token prefix unchanged"> </span><span class="token line"> // with Autofac. This runs after ConfigureServices so the things
</span><span class="token prefix unchanged"> </span><span class="token line"> // here will override registrations made in ConfigureServices.
</span><span class="token prefix unchanged"> </span><span class="token line"> // Don&#39;t build the container; that gets done for you by the factory.
</span><span class="token prefix unchanged"> </span><span class="token line"> public void ConfigureContainer(ContainerBuilder builder)
</span><span class="token prefix unchanged"> </span><span class="token line"> {
</span><span class="token prefix unchanged"> </span><span class="token line">   // Register your own things directly with Autofac here. Don&#39;t
</span><span class="token prefix unchanged"> </span><span class="token line">   // call builder.Populate(), that happens in AutofacServiceProviderFactory
</span><span class="token prefix unchanged"> </span><span class="token line">   // for you.
</span></span><span class="token inserted-sign inserted"><span class="token prefix inserted">+</span><span class="token line">    builder.RegisterModule(new MyApplicationModule());
</span></span><span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line"> }
</span></span>
<span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line"> public void Configure(
</span><span class="token prefix unchanged"> </span><span class="token line">   IApplicationBuilder app,
</span><span class="token prefix unchanged"> </span><span class="token line">   ILoggerFactory loggerFactory)
</span><span class="token prefix unchanged"> </span><span class="token line"> {
</span></span><span class="token inserted-sign inserted"><span class="token prefix inserted">+</span><span class="token line">   this.AutofacContainer = app.ApplicationServices.GetAutofacRoot();
</span></span>
<span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line">   loggerFactory.AddConsole(this.Configuration.GetSection(&quot;Logging&quot;));
</span><span class="token prefix unchanged"> </span><span class="token line">   loggerFactory.AddDebug();
</span><span class="token prefix unchanged"> </span><span class="token line">   app.UseMvc();
</span><span class="token prefix unchanged"> </span><span class="token line"> }
</span></span>}
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br></div></div><p>\u5B9A\u4E49\u6CE8\u5165\u5B9E\u73B0</p><div class="language-csharp ext-cs line-numbers-mode"><pre class="language-csharp"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyApplicationModule</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">Autofac<span class="token punctuation">.</span>Module</span></span>
<span class="token punctuation">{</span>
    <span class="token keyword">protected</span> <span class="token keyword">override</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Load</span><span class="token punctuation">(</span><span class="token class-name">ContainerBuilder</span> builder<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
      builder<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">RegisterType</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>HttpContextAccessor<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token generic-method"><span class="token function">As</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>IHttpContextAccessor<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">SingleInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><ul><li>\u6CE8\u518C\u6CDB\u578B\u4ED3\u50A8</li></ul><div class="language-csharp ext-cs line-numbers-mode"><pre class="language-csharp"><code>builder<span class="token punctuation">.</span><span class="token function">RegisterGeneric</span><span class="token punctuation">(</span><span class="token keyword">typeof</span><span class="token punctuation">(</span><span class="token type-expression class-name">AuditBaseRepository<span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">As</span><span class="token punctuation">(</span><span class="token keyword">typeof</span><span class="token punctuation">(</span><span class="token type-expression class-name">IAuditBaseRepository<span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">InstancePerLifetimeScope</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
builder<span class="token punctuation">.</span><span class="token function">RegisterGeneric</span><span class="token punctuation">(</span><span class="token keyword">typeof</span><span class="token punctuation">(</span><span class="token type-expression class-name">AuditBaseRepository<span class="token punctuation">&lt;</span><span class="token punctuation">,</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">As</span><span class="token punctuation">(</span><span class="token keyword">typeof</span><span class="token punctuation">(</span><span class="token type-expression class-name">IAuditBaseRepository<span class="token punctuation">&lt;</span><span class="token punctuation">,</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">InstancePerLifetimeScope</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><ul><li>\u4E00\u4E2A\u63A5\u53E3\u591A\u4E2A\u5B9E\u73B0,\u4F7F\u7528 Named\uFF0C\u533A\u5206\u3001\u53C2\u6570\u4E3A\u5B57\u7B26\u4E32\u5373\u53EF\u3002</li></ul><p>\u6CE8\u518C\u670D\u52A1</p><div class="language-csharp ext-cs line-numbers-mode"><pre class="language-csharp"><code>builder<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">RegisterType</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>IdentityServer4Service<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token generic-method"><span class="token function">Named</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>ITokenService<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token keyword">typeof</span><span class="token punctuation">(</span><span class="token type-expression class-name">IdentityServer4Service</span><span class="token punctuation">)</span><span class="token punctuation">.</span>Name<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">InstancePerLifetimeScope</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
builder<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">RegisterType</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>JwtTokenService<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token generic-method"><span class="token function">Named</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>ITokenService<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token keyword">typeof</span><span class="token punctuation">(</span><span class="token type-expression class-name">JwtTokenService</span><span class="token punctuation">)</span><span class="token punctuation">.</span>Name<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">InstancePerLifetimeScope</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>\u6839\u636E Name \u83B7\u53D6\u54EA\u4E2A\u670D\u52A1</p><div class="language-csharp ext-cs line-numbers-mode"><pre class="language-csharp"><code><span class="token keyword">private</span> <span class="token keyword">readonly</span> <span class="token class-name">ITokenService</span> _tokenService<span class="token punctuation">;</span>
<span class="token keyword">public</span> <span class="token function">AccountController</span><span class="token punctuation">(</span><span class="token class-name">IComponentContext</span> componentContext<span class="token punctuation">,</span> <span class="token class-name">IConfiguration</span> configuration<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token class-name"><span class="token keyword">bool</span></span> isIdentityServer4 <span class="token operator">=</span> configuration<span class="token punctuation">.</span><span class="token function">GetSection</span><span class="token punctuation">(</span><span class="token string">&quot;Service:IdentityServer4&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span>Value<span class="token punctuation">?.</span><span class="token function">ToBoolean</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">??</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
    _tokenService <span class="token operator">=</span> componentContext<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">ResolveNamed</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>ITokenService<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span>isIdentityServer4 <span class="token punctuation">?</span> <span class="token keyword">typeof</span><span class="token punctuation">(</span><span class="token type-expression class-name">IdentityServer4Service</span><span class="token punctuation">)</span><span class="token punctuation">.</span>Name <span class="token punctuation">:</span> <span class="token keyword">typeof</span><span class="token punctuation">(</span><span class="token type-expression class-name">JwtTokenService</span><span class="token punctuation">)</span><span class="token punctuation">.</span>Name<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><p>\u53EF\u901A\u8FC7 appsettings.json \u4E2D\u914D\u7F6E,\u53EF\u51B3\u5B9A\u662F\u54EA\u4E2A\u670D\u52A1</p><div class="language-json ext-json line-numbers-mode"><pre class="language-json"><code>  <span class="token property">&quot;Service&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token property">&quot;IdentityServer4&quot;</span><span class="token operator">:</span> <span class="token boolean">false</span>
  <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><ul><li>\u57FA\u4E8E\u63A5\u53E3\u7684\u6CE8\u5165</li></ul><p><code>AsImplementedInterfaces</code> Specifies that a type from a scanned assembly is registered as providing all of its implemented interfaces. \u6307\u5B9A\u5C06\u626B\u63CF\u7A0B\u5E8F\u96C6\u4E2D\u7684\u7C7B\u578B\u6CE8\u518C\u4E3A\u63D0\u4F9B\u5176\u6240\u6709\u5B9E\u73B0\u7684\u63A5\u53E3\u3002</p><p>\u6839\u636E\u63A5\u53E3<code>ITransientDependency</code>\u53EF\u4EE5\u5F97\u5230\u6709\u54EA\u4E9B\u7C7B\u7EE7\u627F\u4E86\u6B64\u63A5\u53E3\uFF0C\u5E76\u5224\u65AD\u662F\u7C7B\uFF0C\u4E0D\u662F\u62BD\u8C61\u7C7B\uFF0C\u4E0D\u662F\u6CDB\u578B\u3002</p><p>\u6240\u6709\u7EE7\u627F\u7C7B\u63A5\u53E3\u7684\u7C7B\uFF0C\u5C06\u4EE5\u63A5\u53E3\u7684\u65B9\u5F0F\u81EA\u52A8\u6CE8\u5165\u5B9E\u4F8B\u3002\u53EF\u76F4\u63A5\u4F7F\u7528\u63A5\u53E3\u5373\u53EF\u3002</p><ul><li>InstancePerDependency \u77AC\u65F6 \uFF08\u6BCF\u6B21\u8BF7\u6C42\u90FD\u662F\u4E00\u4E2A\u65B0\u7684\u5B9E\u4F8B\uFF09</li><li>InstancePerLifetimeScope \u8303\u56F4\uFF08\u5728\u540C\u4E00\u4E2A\u751F\u547D\u5468\u671F\u5185\u662F\u540C\u4E00\u4E2A\u5B9E\u4F8B\uFF09</li><li>SingleInstance \u5355\u4F8B\uFF08\u5168\u5C40\u552F\u4E00\u5B9E\u4F8B\uFF09</li></ul><div class="language-csharp ext-cs line-numbers-mode"><pre class="language-csharp"><code>    <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DependencyModule</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">Autofac<span class="token punctuation">.</span>Module</span></span>
    <span class="token punctuation">{</span>
        <span class="token keyword">protected</span> <span class="token keyword">override</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Load</span><span class="token punctuation">(</span><span class="token class-name">ContainerBuilder</span> builder<span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            <span class="token class-name">Assembly<span class="token punctuation">[</span><span class="token punctuation">]</span></span> currentAssemblies <span class="token operator">=</span> AppDomain<span class="token punctuation">.</span>CurrentDomain<span class="token punctuation">.</span><span class="token function">GetAssemblies</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Where</span><span class="token punctuation">(</span>r <span class="token operator">=&gt;</span> r<span class="token punctuation">.</span>FullName<span class="token punctuation">.</span><span class="token function">Contains</span><span class="token punctuation">(</span><span class="token string">&quot;LinCms.&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">ToArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

            <span class="token comment">//\u6BCF\u6B21\u8C03\u7528\uFF0C\u90FD\u4F1A\u91CD\u65B0\u5B9E\u4F8B\u5316\u5BF9\u8C61\uFF1B\u6BCF\u6B21\u8BF7\u6C42\u90FD\u521B\u5EFA\u4E00\u4E2A\u65B0\u7684\u5BF9\u8C61\uFF1B</span>
            <span class="token class-name">Type</span> transientDependency <span class="token operator">=</span> <span class="token keyword">typeof</span><span class="token punctuation">(</span><span class="token type-expression class-name">ITransientDependency</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            builder<span class="token punctuation">.</span><span class="token function">RegisterAssemblyTypes</span><span class="token punctuation">(</span>currentAssemblies<span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">Where</span><span class="token punctuation">(</span>t <span class="token operator">=&gt;</span> transientDependency<span class="token punctuation">.</span><span class="token function">GetTypeInfo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">IsAssignableFrom</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> t<span class="token punctuation">.</span>IsClass <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>t<span class="token punctuation">.</span>IsAbstract <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>t<span class="token punctuation">.</span>IsGenericType<span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">AsImplementedInterfaces</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">InstancePerDependency</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

            <span class="token comment">//\u540C\u4E00\u4E2ALifetime\u751F\u6210\u7684\u5BF9\u8C61\u662F\u540C\u4E00\u4E2A\u5B9E\u4F8B</span>
            <span class="token class-name">Type</span> scopeDependency <span class="token operator">=</span> <span class="token keyword">typeof</span><span class="token punctuation">(</span><span class="token type-expression class-name">IScopedDependency</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            builder<span class="token punctuation">.</span><span class="token function">RegisterAssemblyTypes</span><span class="token punctuation">(</span>currentAssemblies<span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">Where</span><span class="token punctuation">(</span>t <span class="token operator">=&gt;</span> scopeDependency<span class="token punctuation">.</span><span class="token function">GetTypeInfo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">IsAssignableFrom</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> t<span class="token punctuation">.</span>IsClass <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>t<span class="token punctuation">.</span>IsAbstract <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>t<span class="token punctuation">.</span>IsGenericType<span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">AsImplementedInterfaces</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">InstancePerLifetimeScope</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

            <span class="token comment">//\u5355\u4F8B\u6A21\u5F0F\uFF0C\u6BCF\u6B21\u8C03\u7528\uFF0C\u90FD\u4F1A\u4F7F\u7528\u540C\u4E00\u4E2A\u5B9E\u4F8B\u5316\u7684\u5BF9\u8C61\uFF1B\u6BCF\u6B21\u90FD\u7528\u540C\u4E00\u4E2A\u5BF9\u8C61\uFF1B</span>
            <span class="token class-name">Type</span> singletonDependency <span class="token operator">=</span> <span class="token keyword">typeof</span><span class="token punctuation">(</span><span class="token type-expression class-name">ISingletonDependency</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            builder<span class="token punctuation">.</span><span class="token function">RegisterAssemblyTypes</span><span class="token punctuation">(</span>currentAssemblies<span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">Where</span><span class="token punctuation">(</span>t <span class="token operator">=&gt;</span> singletonDependency<span class="token punctuation">.</span><span class="token function">GetTypeInfo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">IsAssignableFrom</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> t<span class="token punctuation">.</span>IsClass <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>t<span class="token punctuation">.</span>IsAbstract <span class="token operator">&amp;&amp;</span><span class="token operator">!</span>t<span class="token punctuation">.</span>IsGenericType<span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">AsImplementedInterfaces</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">SingleInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br></div></div><p>\u5982\u679C\u4E0D\u5199\u7EE7\u627F\uFF0C\u5982\u4F55\u6279\u91CF\u6CE8\u5165\u5462\u3002 1.\u7C7B\u540D\u6709\u89C4\u5219 2.\u57FA\u4E8E\u7279\u6B8A\u6807\u7B7E 3.\u7EE7\u627F\u63A5\u53E3\u3002</p><ul><li>\u7C7B\u540D\u6709\u89C4\u5219 \u6BD4\u5982\u4ED3\u50A8\u540E\u7F00\uFF0C\u5168\u662F<code>Repository</code>,\u5176\u4E2D<code>Assembly</code>\u4E3A\u4ED3\u50A8\u7684\u5B9E\u73B0\u6240\u5728\u7A0B\u5E8F\u96C6\u3002\u5C06\u81EA\u52A8\u6CE8\u5165\u6240\u6709\u7684\u4ED3\u50A8\uFF0C\u4ED3\u50A8\u5FC5\u987B\u6709\u63A5\u53E3\u3002</li></ul><div class="language-csharp ext-cs line-numbers-mode"><pre class="language-csharp"><code>    <span class="token class-name">Assembly</span> assemblysRepository <span class="token operator">=</span> Assembly<span class="token punctuation">.</span><span class="token function">Load</span><span class="token punctuation">(</span><span class="token string">&quot;LinCms.Infrastructure&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    builder<span class="token punctuation">.</span><span class="token function">RegisterAssemblyTypes</span><span class="token punctuation">(</span>assemblysRepository<span class="token punctuation">)</span>
            <span class="token punctuation">.</span><span class="token function">Where</span><span class="token punctuation">(</span>a <span class="token operator">=&gt;</span> a<span class="token punctuation">.</span>Name<span class="token punctuation">.</span><span class="token function">EndsWith</span><span class="token punctuation">(</span><span class="token string">&quot;Repository&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
            <span class="token punctuation">.</span><span class="token function">AsImplementedInterfaces</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
            <span class="token punctuation">.</span><span class="token function">InstancePerLifetimeScope</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><ul><li>\u6CE8\u5165\u670D\u52A1\u540E\u5C31\u6267\u884C\u4E00\u6BB5\u903B\u8F91</li></ul><div class="language-csharp ext-cs line-numbers-mode"><pre class="language-csharp"><code>builder<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">RegisterType</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>MigrationStartupTask<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">SingleInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
builder<span class="token punctuation">.</span><span class="token function">RegisterBuildCallback</span><span class="token punctuation">(</span><span class="token keyword">async</span> <span class="token punctuation">(</span>c<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token keyword">await</span> c<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">Resolve</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>MigrationStartupTask<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">StartAsync</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><h3 id="\u52A8\u6001\u4EE3\u7406" tabindex="-1"><a class="header-anchor" href="#\u52A8\u6001\u4EE3\u7406" aria-hidden="true">#</a> \u52A8\u6001\u4EE3\u7406</h3><div class="language-csharp ext-cs line-numbers-mode"><pre class="language-csharp"><code>dotnet <span class="token keyword">add</span> package Autofac<span class="token punctuation">.</span>Extras<span class="token punctuation">.</span>DynamicProxy
dotnet <span class="token keyword">add</span> package Castle<span class="token punctuation">.</span>Core<span class="token punctuation">.</span>AsyncInterceptor
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><ul><li>\u670D\u52A1\u6CE8\u518C</li></ul><p>AOP+\u5C5E\u6027\u6CE8\u5165+\u4EE5\u540E\u7F00\u4E3A Service \u7684\u670D\u52A1\u5B9E\u73B0\uFF0C\u6CE8\u5165 Scope \u8303\u56F4\u7684\u751F\u547D\u5468\u671F+\u542F\u7528\u63A5\u53E3\u7684\u62E6\u622A\u5668\u3002</p><ul><li>\u4F7F\u7528<code>EnableInterfaceInterceptors</code>\u521B\u5EFA\u6267\u884C\u62E6\u622A\u7684\u63A5\u53E3\u4EE3\u7406\uFF0C</li><li>\u4F7F\u7528<code>EnableClassInterceptors()</code> \u52A8\u6001\u5BF9\u5B50\u7C7B\u8FDB\u884C\u91CD\u5199, \u6267\u884C virtual \u65B9\u6CD5\u7684\u62E6\u622A</li></ul><div class="language-csharp ext-cs line-numbers-mode"><pre class="language-csharp"><code>builder<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">RegisterType</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>UnitOfWorkInterceptor<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
builder<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">RegisterType</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>UnitOfWorkAsyncInterceptor<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>


<span class="token class-name">List<span class="token punctuation">&lt;</span>Type<span class="token punctuation">&gt;</span></span> interceptorServiceTypes <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">List<span class="token punctuation">&lt;</span>Type<span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">typeof</span><span class="token punctuation">(</span><span class="token type-expression class-name">UnitOfWorkInterceptor</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token class-name">Assembly</span> servicesDllFile <span class="token operator">=</span> Assembly<span class="token punctuation">.</span><span class="token function">Load</span><span class="token punctuation">(</span><span class="token string">&quot;LinCms.Application&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
builder<span class="token punctuation">.</span><span class="token function">RegisterAssemblyTypes</span><span class="token punctuation">(</span>servicesDllFile<span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">Where</span><span class="token punctuation">(</span>a <span class="token operator">=&gt;</span> a<span class="token punctuation">.</span>Name<span class="token punctuation">.</span><span class="token function">EndsWith</span><span class="token punctuation">(</span><span class="token string">&quot;Service&quot;</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>a<span class="token punctuation">.</span>IsAbstract <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>a<span class="token punctuation">.</span>IsInterface <span class="token operator">&amp;&amp;</span> a<span class="token punctuation">.</span>IsPublic<span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">AsImplementedInterfaces</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">//\u63A5\u53E3\u6CE8\u5165</span>
    <span class="token punctuation">.</span><span class="token function">InstancePerLifetimeScope</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">//\u751F\u547D\u5468\u671F\uFF1A\u8303\u56F4</span>
    <span class="token punctuation">.</span><span class="token function">PropertiesAutowired</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">// \u5C5E\u6027\u6CE8\u5165</span>
    <span class="token punctuation">.</span><span class="token function">InterceptedBy</span><span class="token punctuation">(</span>interceptorServiceTypes<span class="token punctuation">.</span><span class="token function">ToArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">//\u58F0\u660E\u62E6\u622A\u5668</span>
    <span class="token punctuation">.</span><span class="token function">EnableInterfaceInterceptors</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//\u542F\u7528\u63A5\u53E3\u7684\u62E6\u622A\u5668\u3002</span>
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br></div></div><p>\u8FD9\u4E8C\u4E2A\u7C7B\uFF0C\u8BF7\u53C2\u8003\u5982\u4E0B\u4EE3\u7801</p>`,51),k=s("\u540C\u6B65\uFF1AUnitOfWorkInterceptor.cs "),d={href:"https://github.com/luoyunchong/lin-cms-dotnetcore/blob/master/src/LinCms.Web/Middleware/UnitOfWorkInterceptor.cs",target:"_blank",rel:"noopener noreferrer"},b=s("https://github.com/luoyunchong/lin-cms-dotnetcore/blob/master/src/LinCms.Web/Middleware/UnitOfWorkInterceptor.cs"),m=s("\u5F02\u6B65\u62E6\u622A\uFF1AUnitOfWorkAsyncInterceptor.cs "),g={href:"https://github.com/luoyunchong/lin-cms-dotnetcore/blob/master/src/LinCms.Web/Middleware/UnitOfWorkInterceptor.cs",target:"_blank",rel:"noopener noreferrer"},f=s("https://github.com/luoyunchong/lin-cms-dotnetcore/blob/master/src/LinCms.Web/Middleware/UnitOfWorkInterceptor.cs"),h=e(`<p><code>Autofac.Extras.DynamicProxy</code>\u4F9D\u8D56 Castle.Core,\u5373\u53EA\u652F\u6301\u540C\u6B65\u65B9\u6CD5\u7684\u62E6\u622A\u3002 \u5F02\u6B65\u65B9\u6CD5\u7684\u62E6\u622A\u9700\u8981\u5B89\u88C5\u5305\uFF1A<code>Castle.Core.AsyncInterceptor</code>\u3002</p><ul><li>\u5F02\u6B65\u65B9\u6CD5,\u5206\u4E3A\u6709/\u65E0\u8FD4\u56DE\u503C\uFF1A<code>async Task RunAsync()</code>,<code>asyn Task&lt;Result&gt; RunAsync()</code></li><li>\u540C\u6B65\u65B9\u6CD5\uFF1A<code>void Run()</code>,<code>Result Run()</code></li></ul><h3 id="\u540C\u6B65\u62E6\u622A" tabindex="-1"><a class="header-anchor" href="#\u540C\u6B65\u62E6\u622A" aria-hidden="true">#</a> \u540C\u6B65\u62E6\u622A</h3><p>1.\u5B9A\u4E49\u62E6\u622A\u5668</p><div class="language-csharp ext-cs line-numbers-mode"><pre class="language-csharp"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CallLogger</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">IInterceptor</span></span>
<span class="token punctuation">{</span>
  <span class="token class-name">TextWriter</span> _output<span class="token punctuation">;</span>

  <span class="token keyword">public</span> <span class="token function">CallLogger</span><span class="token punctuation">(</span><span class="token class-name">TextWriter</span> output<span class="token punctuation">)</span>
  <span class="token punctuation">{</span>
    _output <span class="token operator">=</span> output<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Intercept</span><span class="token punctuation">(</span><span class="token class-name">IInvocation</span> invocation<span class="token punctuation">)</span>
  <span class="token punctuation">{</span>
    _output<span class="token punctuation">.</span><span class="token function">Write</span><span class="token punctuation">(</span><span class="token string">&quot;Calling method {0} with parameters {1}... &quot;</span><span class="token punctuation">,</span>
      invocation<span class="token punctuation">.</span>Method<span class="token punctuation">.</span>Name<span class="token punctuation">,</span>
      <span class="token keyword">string</span><span class="token punctuation">.</span><span class="token function">Join</span><span class="token punctuation">(</span><span class="token string">&quot;, &quot;</span><span class="token punctuation">,</span> invocation<span class="token punctuation">.</span>Arguments<span class="token punctuation">.</span><span class="token function">Select</span><span class="token punctuation">(</span>a <span class="token operator">=&gt;</span> <span class="token punctuation">(</span>a <span class="token operator">??</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">ToString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">ToArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    invocation<span class="token punctuation">.</span><span class="token function">Proceed</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    _output<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">&quot;Done: result was {0}.&quot;</span><span class="token punctuation">,</span> invocation<span class="token punctuation">.</span>ReturnValue<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br></div></div><p>2.\u6CE8\u518C\u62E6\u622A\u5668\u3002</p><div class="language-csharp ext-cs line-numbers-mode"><pre class="language-csharp"><code><span class="token comment">// Named registration</span>
builder<span class="token punctuation">.</span><span class="token function">Register</span><span class="token punctuation">(</span>c <span class="token operator">=&gt;</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">CallLogger</span><span class="token punctuation">(</span>Console<span class="token punctuation">.</span>Out<span class="token punctuation">)</span><span class="token punctuation">)</span>
       <span class="token punctuation">.</span><span class="token generic-method"><span class="token function">Named</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>IInterceptor<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token string">&quot;log-calls&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// Typed registration</span>
builder<span class="token punctuation">.</span><span class="token function">Register</span><span class="token punctuation">(</span>c <span class="token operator">=&gt;</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">CallLogger</span><span class="token punctuation">(</span>Console<span class="token punctuation">.</span>Out<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><p>\u5C06\u62E6\u622A\u5668\u4E0E\u8981\u62E6\u622A\u7684\u7C7B\u578B \u5173\u8054</p><div class="language-csharp ext-cs line-numbers-mode"><pre class="language-csharp"><code><span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">Intercept</span><span class="token attribute-arguments"><span class="token punctuation">(</span><span class="token keyword">typeof</span><span class="token punctuation">(</span><span class="token type-expression class-name">CallLogger</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span></span><span class="token punctuation">]</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">First</span>
<span class="token punctuation">{</span>
  <span class="token keyword">public</span> <span class="token keyword">virtual</span> <span class="token return-type class-name"><span class="token keyword">int</span></span> <span class="token function">GetValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  <span class="token punctuation">{</span>
    <span class="token comment">// Do some calculation and return a value</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token comment">// This attribute will look for a NAMED</span>
<span class="token comment">// interceptor registration:</span>
<span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">Intercept</span><span class="token attribute-arguments"><span class="token punctuation">(</span><span class="token string">&quot;log-calls&quot;</span><span class="token punctuation">)</span></span></span><span class="token punctuation">]</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Second</span>
<span class="token punctuation">{</span>
  <span class="token keyword">public</span> <span class="token keyword">virtual</span> <span class="token return-type class-name"><span class="token keyword">int</span></span> <span class="token function">GetValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  <span class="token punctuation">{</span>
    <span class="token comment">// Do some calculation and return a value</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br></div></div><h2 id="\u94FE\u63A5" tabindex="-1"><a class="header-anchor" href="#\u94FE\u63A5" aria-hidden="true">#</a> \u94FE\u63A5</h2><ul><li>\u5B98\u7F51 https://autofac.org/</li><li>GitHub https://github.com/autofac/Autofac</li><li>\u6587\u6863 https://autofac.readthedocs.io/en/latest/</li></ul>`,11);function y(v,I){const a=c("ExternalLinkIcon");return u(),o(l,null,[r,n("ul",null,[n("li",null,[k,n("a",d,[b,p(a)])]),n("li",null,[m,n("a",g,[f,p(a)])])]),h],64)}var S=t(i,[["render",y],["__file","autofac.html.vue"]]);export{S as default};
