import{_ as t}from"./plugin-vue_export-helper.21dcd24c.js";import{r as p,c as o,a as n,b as c,F as l,d as a,e as s,o as r}from"./app.307ae017.js";const i={},u=a(`<h1 id="net-\u7F16\u7801\u7684\u57FA\u7840\u77E5\u8BC6" tabindex="-1"><a class="header-anchor" href="#net-\u7F16\u7801\u7684\u57FA\u7840\u77E5\u8BC6" aria-hidden="true">#</a> .NET \u7F16\u7801\u7684\u57FA\u7840\u77E5\u8BC6</h1><p>.NET \u7F16\u7801\u7684\u4E00\u4E9B\u57FA\u672C\u6982\u5FF5\u548C\u5206\u6790</p><h3 id="\u7B80\u5355\u7684\u7C7B\u578B\u6982\u5FF5" tabindex="-1"><a class="header-anchor" href="#\u7B80\u5355\u7684\u7C7B\u578B\u6982\u5FF5" aria-hidden="true">#</a> \u7B80\u5355\u7684\u7C7B\u578B\u6982\u5FF5</h3><ul><li>Hex \uFF0816 \u8FDB\u5236\uFF09</li><li>byte \u5B57\u8282 \u8303\u56F4\u662F\uFF1A<code>0~255</code>\uFF0C\u4E8C\u8FDB\u5236\u4E0B\u7684\u8303\u56F4\u5C31\u662F<code>00000000~11111111</code>\uFF0C\u76F8\u5F53\u4E8E 1 \u5B57\u8282\u3002</li><li>byte[] \u5B57\u8282\u6570\u7EC4</li><li>bit \u6BD4\u7279\uFF0C\u53EA\u6709 2 \u79CD\u72B6\u6001\uFF1A0\uFF0C1</li></ul><p><strong>1 \u5B57\u8282 \u7B49\u4E8E 8 \u6BD4\u7279</strong> \u5373<strong>1byte=8bit</strong></p><p>\u5728 c#\u4E2D\u3002Byte \u5373 byte\uFF0C\u4ED6\u662F\u4E00\u4E2A struct \u7ED3\u6784\u4F53\uFF0C</p><p>b1 \u7B49\u4E8E b2.</p><div class="language-csharp ext-cs line-numbers-mode"><pre class="language-csharp"><code><span class="token class-name"><span class="token keyword">byte</span></span> b <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
<span class="token class-name"><span class="token keyword">byte</span></span> b1 <span class="token operator">=</span> <span class="token number">0xf</span><span class="token punctuation">;</span><span class="token comment">//\u4EE50x\u5F00\u5934 \u537316\u8FDB\u5236\u7684\u5199\u6CD5</span>
<span class="token class-name"><span class="token keyword">byte</span></span> b2 <span class="token operator">=</span> <span class="token number">15</span><span class="token punctuation">;</span>
Assert<span class="token punctuation">.</span><span class="token function">Equal</span><span class="token punctuation">(</span>b1<span class="token punctuation">,</span> b2<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p>\u9519\u8BEF\u7684\u8BED\u6CD5</p><div class="language-csharp ext-cs line-numbers-mode"><pre class="language-csharp"><code><span class="token class-name"><span class="token keyword">byte</span></span> b3 <span class="token operator">=</span> b1 <span class="token operator">+</span> b2<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>\u6B63\u786E\u7684\u8BED\u6CD5</p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>byte b3 = (byte)(b1 + b2);
//\u6216
int b4 = b1 + b2;
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>\u56E0\u4E3A byte \u7684\u76F8\u4E92\u8FD0\u7B97\u592A\u5BB9\u6613\u53D1\u751F\u6EA2\u51FA\uFF0C+ \u52A0\u7684\u91CD\u8F7D \u662F int \u7C7B\u578B\u76F8\u52A0\uFF0C\u6240\u4EE5\u7ED3\u679C\u662F int \u7C7B\u578B</p><h3 id="encoding-utf8-getbytes" tabindex="-1"><a class="header-anchor" href="#encoding-utf8-getbytes" aria-hidden="true">#</a> Encoding.UTF8.GetBytes</h3><p>UTF8 \u662F\u7EDF\u4E00\u7684\u7F16\u7801\u65B9\u5F0F\uFF0C\u5B83\u662F\u4E00\u79CD\u53D8\u957F\u7684\u7F16\u7801\u65B9\u5F0F.\u5B83\u53EF\u4EE5\u4F7F\u7528 1~4 \u4E2A\u5B57\u8282\u8868\u793A\u4E00\u4E2A\u7B26\u53F7\uFF0C\u6839\u636E\u4E0D\u540C\u7684\u7B26\u53F7\u800C\u53D8\u5316\u5B57\u8282\u957F\u5EA6</p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>byte[] plaintext = Encoding.UTF8.GetBytes(&quot;0123456789&quot;);
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>\u80FD\u5F97\u5230\u4EC0\u4E48\u6837\u7684\u6570\u636E\uFF0C<strong>48,49,50,51,52,53,54,55,56,57</strong>\u3002\u4E3A\u4EC0\u4E48\uFF1F</p><p>\u641C ASCII \u7801\uFF0C\u6211\u4EEC\u5C31\u77E5\u9053 <code>0</code>\u7684 ASCII \u7801\u662F <code>48</code></p><p>\u5982\u679C\u662F\u5B57\u6BCD\u5462\u3002</p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>byte[] plaintext = Encoding.UTF8.GetBytes(&quot;ABCDabcd&quot;);
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>\u80FD\u5F97\u5230\u4EC0\u4E48\u6837\u7684\u6570\u636E\uFF0C<strong>65,66,67,68,97,98,99,100</strong>\u3002\u4E3A\u4EC0\u4E48\uFF1F\u8FD8\u662F\u56E0\u4E3A ASCII \u7801\u3002UTF8 \u5F53\u7136\u662F\u517C\u5BB9 ASCII \u7801\u3002</p><p>\u56E0\u4E3A\u4E00\u4E2A ASCII \u7801\uFF0C1 \u4E2A\u5B57\u8282\u5C31\u80FD\u8868\u793A 256 \u4E2A\u72B6\u6001\uFF0C\u6240\u4EE5\u82F1\u6587\u5B57\u6BCD\uFF0C\u963F\u62C9\u4F2F\u6570\u5B57\uFF0C\u6807\u70B9\u7B26\u53F7\u90FD\u4E0D\u5728\u8BDD\uFF0C\u54EA\u5982\u679C\u662F\u4E2D\u6587\u5462\u3002\u8FD9\u91CC\u6211\u4EEC\u5C31\u62FF UTF8 \u7F16\u7801\u6765\u5206\u6790\u3002</p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>byte[]   plaintext = Encoding.UTF8.GetBytes(&quot;\u4E2D\u56FD&quot;);
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>\u5982\u4E0B\u5185\u5BB9\uFF0C\u957F\u5EA6\u4E3A 6\uFF0C228\uFF0C184\uFF0C173 \u90FD\u662F\u5341\u8FDB\u5236\u3002\u5982\u679C\u8F6C\u6210 16 \u8FDB\u5236\u5462\u3002<strong>e4\uFF0Cb8\uFF0Cad</strong>\uFF0C\u5982\u679C\u5206\u4E0D\u6E05\u5341\u516D\u8FDB\u5236\uFF0C\u5EFA\u8BAE\u5B66\u4E00\u4E0B\uFF0C\u8BA1\u7B97\u673A\u7CFB\u7EDF\u57FA\u7840\u3002\u5F53\u7136\uFF0C\u8BF4\u660E\u4E00\u4E0B\uFF0C<code>a</code>\u4EE3\u8868<code>10</code>\uFF0C<code>e</code>\u5373\u4EE3\u8868<code>14</code>.\u5373<code>14*16+4=228</code>.\u8868\u793A\u65F6\u4E0D\u533A\u5206\u5927\u5C0F\u5199\uFF0C\u5373\u7528\u5927\u5199<code>A</code>\uFF0C\u548C\u5C0F\u5199<code>a</code>\u90FD\u80FD\u8868\u793A<code>10</code></p><table><thead><tr><th>\u5217</th><th>\u5341\u8FDB\u5236</th><th>\u5341\u516D\u8FDB\u5236</th></tr></thead><tbody><tr><td>0</td><td>228</td><td>e4</td></tr><tr><td>1</td><td>184</td><td>b8</td></tr><tr><td>2</td><td>173</td><td>ad</td></tr><tr><td>3</td><td>229</td><td>e5</td></tr><tr><td>4</td><td>155</td><td>9b</td></tr><tr><td>5</td><td>189</td><td>bd</td></tr></tbody></table><p>\u6211\u4EEC\u4ECE\u7F51\u4E0A\u641C\u4E0B\uFF0C\u53EF\u4EE5\u53D1\u73B0 \u4E2D\u56FD \u7684 UTF-8 \u7F16\u7801\uFF1A <strong>E4B8AD E59BBD</strong>.\u8BF4\u660E\u901A\u8FC7<code>Encoding.UTF8.GetBytes</code>\u7684\u7ED3\u679C\u80AF\u5B9A\u662F\u5BF9\u7684\u3002\u4E2D\u6587\u662F\u7528 3 \u6216 4 \u4E2A Bytes \u5B58\u50A8\u7684\u3002</p><h3 id="_1-byte-\u8F6C\u6362-hex-16-\u8FDB\u5236\u5B57\u7B26\u4E32" tabindex="-1"><a class="header-anchor" href="#_1-byte-\u8F6C\u6362-hex-16-\u8FDB\u5236\u5B57\u7B26\u4E32" aria-hidden="true">#</a> 1.byte[] \u8F6C\u6362 hex(16 \u8FDB\u5236\u5B57\u7B26\u4E32)</h3><ol><li><code>Encoding.UTF8.GetBytes</code>\u80FD\u5F97\u5230\u6570\u636E\u7684\u5341\u8FDB\u5236\u7684\u5B57\u8282\u6570\u7EC4\u3002</li><li><code>BitConverter.ToString</code>\u652F\u6301\u5C06\u5341\u8FDB\u5236\u7684\u6570\u636E\u8F6C\u6362\u6210 16 \u8FDB\u5236\uFF0C\u4E2D\u95F4\u4EE5<code>-</code>\u5206\u9694\uFF0C\u6240\u4EE5\u9700\u8981\u5C06\u4E2D\u95F4\u7684<code>-</code> <code>Replace</code>\u6389</li></ol><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>public string ByteToHex(string str)
{
    byte[] bytes = Encoding.UTF8.GetBytes(str);
    string hex = BitConverter.ToString(bytes, 0).Replace(&quot;-&quot;, string.Empty);
    return hex;
}
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><p><code>hex</code>\u5F97\u5230 \u7684\u6570\u636E\u5C31\u662F <code>E4B8ADE59BBD</code></p><div class="language-csharp ext-cs line-numbers-mode"><pre class="language-csharp"><code> <span class="token class-name"><span class="token keyword">string</span></span> hex<span class="token operator">=</span> <span class="token function">ByteToHex</span><span class="token punctuation">(</span><span class="token string">&quot;\u4E2D\u56FD&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br></div></div><h3 id="_2-byte-\u8F6C\u6362-hex-stringbuilder-\u65B9\u5F0F" tabindex="-1"><a class="header-anchor" href="#_2-byte-\u8F6C\u6362-hex-stringbuilder-\u65B9\u5F0F" aria-hidden="true">#</a> 2.byte[] \u8F6C\u6362 hex:StringBuilder \u65B9\u5F0F</h3><p>\u5982\u4E0B\u5185\u5BB9\u4E3A\u4EC0\u4E48\u80FD\u5C06\u6570\u636E\u8F6C\u6210 16 \u8FDB\u5236.</p>`,33),d=n("li",null,[n("code",null,"Encoding.UTF8.GetBytes"),s("\u80FD\u5F97\u5230\u6570\u636E\u7684\u5341\u8FDB\u5236\u7684\u5B57\u8282\u6570\u7EC4\u3002")],-1),k=s("\u5229\u7528 c#\u4E2D\u7684 "),b={href:"https://docs.microsoft.com/zh-cn/dotnet/standard/base-types/composite-formatting",target:"_blank",rel:"noopener noreferrer"},m=s("\u590D\u5408\u683C\u5F0F\u5316\u7279\u6027"),h=s(" {0:X2}\u81EA\u52A8\u8F6C\u6362\u6210 16 \u8FDB\u5236\u3002\u540C\u6837\u5185\u5BB9\u652F\u6301 Console.WriteLine \u7B49"),g=a(`<div class="language-csharp ext-cs line-numbers-mode"><pre class="language-csharp"><code><span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">string</span></span> <span class="token function">ByteToHex2</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span></span> str<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token class-name"><span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> bytes <span class="token operator">=</span> Encoding<span class="token punctuation">.</span>UTF8<span class="token punctuation">.</span><span class="token function">GetBytes</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">StringBuilder</span> ret <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">StringBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">foreach</span> <span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">byte</span></span> b <span class="token keyword">in</span> bytes<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token comment">//{0:x2} \u5C0F\u5199</span>
        ret<span class="token punctuation">.</span><span class="token function">AppendFormat</span><span class="token punctuation">(</span><span class="token string">&quot;{0:X2}&quot;</span><span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> ret<span class="token punctuation">.</span><span class="token function">ToString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><h3 id="hex-16-\u8FDB\u5236\u5B57\u7B26\u4E32-\u8F6C\u6362-byte" tabindex="-1"><a class="header-anchor" href="#hex-16-\u8FDB\u5236\u5B57\u7B26\u4E32-\u8F6C\u6362-byte" aria-hidden="true">#</a> hex(16 \u8FDB\u5236\u5B57\u7B26\u4E32)\u8F6C\u6362 byte[]</h3><ol><li>\u4E00\u4E2A\u5FAA\u73AF\u5C06 16 \u8FDB\u5236\u8F6C\u6362\u6210 10 \u8FDB\u5236\u3002</li></ol><div class="language-csharp ext-cs line-numbers-mode"><pre class="language-csharp"><code><span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> <span class="token function">HexToByte</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span></span> hex<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token class-name"><span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> inputByteArray <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name"><span class="token keyword">byte</span></span><span class="token punctuation">[</span>hex<span class="token punctuation">.</span>Length <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">var</span></span> x <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> x <span class="token operator">&lt;</span> inputByteArray<span class="token punctuation">.</span>Length<span class="token punctuation">;</span> x<span class="token operator">++</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token class-name"><span class="token keyword">var</span></span> i <span class="token operator">=</span> Convert<span class="token punctuation">.</span><span class="token function">ToInt32</span><span class="token punctuation">(</span>hex<span class="token punctuation">.</span><span class="token function">Substring</span><span class="token punctuation">(</span>x <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">16</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        inputByteArray<span class="token punctuation">[</span>x<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">byte</span><span class="token punctuation">)</span>i<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> inputByteArray<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><p>\u8C03\u7528\u5982\u4E0B\u5185\u5BB9\uFF0Cbytes[]\u4E2D\u7684\u957F\u5EA6\u4E3A 6\uFF0C\u6570\u636E\u662F 228\uFF0C184\uFF0C173\u3001229\uFF0C155\uFF0C189\u3002\u5373\u4E0A\u6587\u4E2D\u7684\u4E2D\u56FD\u7684\u5341\u8FDB\u5236 byte \u6570\u7EC4</p><div class="language-csharp ext-cs line-numbers-mode"><pre class="language-csharp"><code><span class="token class-name"><span class="token keyword">string</span></span> hexChinese <span class="token operator">=</span> <span class="token string">&quot;E4B8ADE59BBD&quot;</span><span class="token punctuation">;</span><span class="token comment">//\u4E2D\u56FD\u7684UTF8\u7F16\u7801\u3002\u5341\u516D\u8FDB\u5236\u3002</span>
<span class="token class-name"><span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> bytes <span class="token operator">=</span> <span class="token function">HexToByte</span><span class="token punctuation">(</span>hexChinese<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name"><span class="token keyword">string</span></span> text <span class="token operator">=</span> Encoding<span class="token punctuation">.</span>UTF8<span class="token punctuation">.</span><span class="token function">GetString</span><span class="token punctuation">(</span>bytes<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// \`\u4E2D\u56FD\`</span>
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div>`,6);function y(x,v){const e=p("ExternalLinkIcon");return r(),o(l,null,[u,n("ol",null,[d,n("li",null,[k,n("strong",null,[n("a",b,[m,c(e)])]),h])]),g],64)}var _=t(i,[["render",y],["__file","net-encoded-1.html.vue"]]);export{_ as default};
