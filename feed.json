{
  "version": "https://jsonfeed.org/version/1.1",
  "title": "IGeekFan 开发者文档",
  "home_page_url": "https://igeekfan.cn/igeekfan-docs/",
  "feed_url": "https://igeekfan.cn/igeekfan-docs/feed.json",
  "description": "问君能有几多愁？恰似一江春水向东流。",
  "items": [
    {
      "title": "Docker配置Baget",
      "url": "https://igeekfan.cn/igeekfan-docs/dotnetcore/docker/Docker-Baget.html",
      "id": "https://igeekfan.cn/igeekfan-docs/dotnetcore/docker/Docker-Baget.html",
      "content_html": "<h1 id=\"docker配置baget\" tabindex=\"-1\"> Docker配置Baget</h1>\n<p>创建一个名为baget.env存储BaGet的配置：</p>\n<div><pre><code><span>cd</span> /var\n<span>mkdir</span> baget\n<span>cd</span> /var/baget\n<span>vim</span> baget.env\n</code></pre><div aria-hidden=\"true\"><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br></div></div><ul>\n<li>baget.env</li>\n</ul>\n<div><pre><code># 以下配置是用于发布包的API密钥,您应该将其更改ApiKey的值以保护服务器。\nApiKey=Your-API-Key\n\nStorage__Type=FileSystem\nStorage__Path=/var/baget/packages\nDatabase__Type=Sqlite\nDatabase__ConnectionString=Data Source=/var/baget/baget.db\nSearch__Type=Database\nMirror__Enabled=true\n\n</code></pre><div aria-hidden=\"true\"><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br></div></div><p>有关配置的完整列表，请参阅<a href=\"https://loic-sharma.github.io/BaGet/configuration/\" target=\"_blank\" rel=\"noopener noreferrer\">Configuration - BaGet (loic-sharma.github.io)</a>的配置指南。</p>\n<h2 id=\"docker\" tabindex=\"-1\"> Docker</h2>\n<p>在baget.env同目录创建一个<code>baget-data</code> 的目录</p>\n<div><pre><code><span>mkdir</span> baget-data\n</code></pre><div aria-hidden=\"true\"><span>1</span><br></div></div><p>拉取baget最新的镜像</p>\n<div><pre><code><span>docker</span> pull loicsharma/baget\n</code></pre><div aria-hidden=\"true\"><span>1</span><br></div></div><p>运行BaGet</p>\n<div><pre><code><span>cd</span> /var/baget\n<span>docker</span> run --name nuget-server --restart<span>=</span>always -d -p <span>5555</span>:80 --env-file baget.env -v <span>\"<span><span>$(</span><span>pwd</span><span>)</span></span>/baget-data:/var/baget\"</span> loicsharma/baget:latest \n</code></pre><div aria-hidden=\"true\"><span>1</span><br><span>2</span><br></div></div><h2 id=\"发布包\" tabindex=\"-1\"> 发布包</h2>\n<p>发布第一个nuget包</p>\n<div><pre><code>dotnet nuget push -s http://localhost:5555/v3/index.json -k Your-API-Key\npackage.1.0.0.nupkg\n</code></pre><div aria-hidden=\"true\"><span>1</span><br><span>2</span><br></div></div><p>发布第一个symbol  package</p>\n<div><pre><code>dotnet nuget push -s http://localhost:5555/v3/index.json -k Your-API-Key package.1.0.0.snupkg\n</code></pre><div aria-hidden=\"true\"><span>1</span><br></div></div><p>示例</p>\n<div><pre><code>dotnet nuget push -s http://124.70.130.97:5555/v3/index.json src/IGeekFan.Localization.FreeSql/bin/Debug/IGeekFan.Localization.FreeSql.0.0.3.nupkg -k Your-API-Key\n\ndotnet nuget push -s http://124.70.130.97:5555/v3/index.json src/IGeekFan.Localization.FreeSql/bin/Debug/IGeekFan.Localization.FreeSql.0.0.3.snupkg -k Your-API-Key\n\n</code></pre><div aria-hidden=\"true\"><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br></div></div><h2 id=\"还原包\" tabindex=\"-1\"> 还原包</h2>\n<p>你可以通过以下源还原包</p>\n<div><pre><code>http://localhost:5555/v3/index.json\n</code></pre><div aria-hidden=\"true\"><span>1</span><br></div></div><p>可以通过打开URL来浏览包<a href=\"http://localhost:5555/\" target=\"_blank\" rel=\"noopener noreferrer\">http://localhost:5555/</a>在浏览器中。</p>\n<h2 id=\"symbol-server\" tabindex=\"-1\"> Symbol server</h2>\n<p>可以使用以下符号位置加载符号：</p>\n<div><pre><code>http://localhost:5555/api/download/symbols\n</code></pre><div aria-hidden=\"true\"><span>1</span><br></div></div><h3 id=\"https-loic-sharma-github-io-baget-installation-docker\" tabindex=\"-1\"> <a href=\"https://loic-sharma.github.io/BaGet/installation/docker/\" target=\"_blank\" rel=\"noopener noreferrer\">https://loic-sharma.github.io/BaGet/installation/docker/</a></h3>\n",
      "date_published": "2022-06-29T19:17:23.000Z",
      "date_modified": "2022-07-04T17:29:28.000Z",
      "authors": [],
      "tags": []
    },
    {
      "title": "Docker部署CMS命令",
      "url": "https://igeekfan.cn/igeekfan-docs/dotnetcore/docker/Docker-CMS.html",
      "id": "https://igeekfan.cn/igeekfan-docs/dotnetcore/docker/Docker-CMS.html",
      "content_html": "<h1 id=\"docker部署cms命令\" tabindex=\"-1\"> Docker部署CMS命令</h1>\n<h2 id=\"部署docker\" tabindex=\"-1\"> 部署docker</h2>\n<div><pre><code><span>#判断是否存在webnotebook容器</span>\n<span>docker</span> <span>ps</span> <span>|</span> <span>grep</span> lincms-web-1 <span>&amp;></span> /dev/null\n<span>#如果不存在，则Remove</span>\n<span>if</span> <span>[</span> <span>$?</span> -ne <span>0</span> <span>]</span>\n<span>then</span>\n    <span>echo</span> <span>\"lincms-web container not exist continue.. \"</span>\n<span>else</span>\n    <span>echo</span> <span>\"remove lincms-web-1 container\"</span>\n    <span>docker</span> <span>rm</span> lincms-web-1 -f\n<span>fi</span>\n\n<span>docker</span> images <span>|</span> <span>grep</span> registry.cn-hangzhou.aliyuncs.com/igeekfan/lincms-web <span>&amp;></span> /dev/null\n\n<span>if</span> <span>[</span> <span>$?</span> -ne <span>0</span> <span>]</span>\n<span>then</span>\n    <span>echo</span> <span>\"image does not exist , continue...\"</span>\n<span>else</span>\n    <span>echo</span> <span>\"image exists !!! remove it\"</span>\n    <span>docker</span> rmi --force registry.cn-hangzhou.aliyuncs.com/igeekfan/lincms-web\n<span>fi</span>\n<span>#从阿里云拉取刚刚push的镜像</span>\n<span>docker</span> pull registry.cn-hangzhou.aliyuncs.com/igeekfan/lincms-web\n\n<span>docker</span> run --restart unless-stopped -p <span>5011</span>:80 --name lincms-web-1 -d registry.cn-hangzhou.aliyuncs.com/igeekfan/lincms-web\n\n<span>docker</span> <span>rm</span> lincms-web-2 -f\n<span>docker</span> <span>rm</span> lincms-web-3 -f\n<span>docker</span> <span>rm</span> lincms-web-4 -f\n\n<span>docker</span> run --restart unless-stopped -p <span>5012</span>:80 --name lincms-web-2 -d registry.cn-hangzhou.aliyuncs.com/igeekfan/lincms-web\n<span>docker</span> run --restart unless-stopped -p <span>5020</span>:80 --name lincms-web-3 -d registry.cn-hangzhou.aliyuncs.com/igeekfan/lincms-web\n<span>docker</span> run --restart unless-stopped -p <span>5021</span>:80 --name lincms-web-4 -d registry.cn-hangzhou.aliyuncs.com/igeekfan/lincms-web\n\n\n</code></pre><div aria-hidden=\"true\"><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br><span>24</span><br><span>25</span><br><span>26</span><br><span>27</span><br><span>28</span><br><span>29</span><br><span>30</span><br><span>31</span><br><span>32</span><br><span>33</span><br><span>34</span><br></div></div><h2 id=\"nuget-api-key\" tabindex=\"-1\"> nuget api key</h2>\n<div><pre><code>Your-API-Key\n</code></pre><div aria-hidden=\"true\"><span>1</span><br></div></div><div><pre><code>nuget SetApiKey Your-API-Key\ndotnet nuget push IGeekFan.AspNetCore.Knife4jUI.0.0.11.nupkg --api-key Your-API-Key --source https://api.nuget.org/v3/index.json\n\n</code></pre><div aria-hidden=\"true\"><span>1</span><br><span>2</span><br><span>3</span><br></div></div><div><pre><code><span>{</span>\n  <span>//\"DefaultConnection\": \"Data Source=|DataDirectory|\\\\SampleApp.db;\",</span>\n  <span>\"Sqlite1\"</span><span>:</span> <span>\"Data Source=d:\\\\SampleApp1.db\"</span><span>,</span>\n  <span>\"Sqlite2\"</span><span>:</span> <span>\"Data Source=d:\\\\SampleApp2.db\"</span><span>,</span>\n  <span>\"Oracle\"</span><span>:</span> <span>\"user id=test;password=123qwe; data source=//127.0.0.1:1521/ORCL;Pooling=true;Min Pool Size=1\"</span><span>,</span>\n  <span>\"MySql\"</span><span>:</span> <span>\"Data Source=127.0.0.1;Port=3306;User ID=root;Password=root; Initial Catalog=cccddd;Charset=utf8; SslMode=none;Min pool size=1\"</span><span>,</span>\n  <span>\"SqlServer\"</span><span>:</span> <span>\"Data Source=(localdb)\\\\MSSQLLocalDB;Initial Catalog=cccddd;Pooling=true;Min Pool Size=1\"</span><span>,</span>\n  <span>\"PostgreSQL\"</span><span>:</span> <span>\"Host=127.0.0.1;Port=5432;Username=postgres;Password=postgresql; Database=postgres;Pooling=true;Minimum Pool Size=1\"</span>\n<span>}</span>\n</code></pre><div aria-hidden=\"true\"><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br></div></div>",
      "date_published": "2022-06-29T19:17:23.000Z",
      "date_modified": "2022-06-29T19:17:23.000Z",
      "authors": [],
      "tags": []
    },
    {
      "title": "Docker 命令行",
      "url": "https://igeekfan.cn/igeekfan-docs/dotnetcore/docker/Docker-Command.html",
      "id": "https://igeekfan.cn/igeekfan-docs/dotnetcore/docker/Docker-Command.html",
      "content_html": "<h1 id=\"docker-命令行\" tabindex=\"-1\"> Docker 命令行</h1>\n<ul>\n<li>Command-Line Interfaces <a href=\"https://docs.docker.com/engine/reference/run/\" title=\"https://docs.docker.com/engine/reference/run/\" target=\"_blank\" rel=\"noopener noreferrer\">https://docs.docker.com/engine/reference/run/</a></li>\n</ul>\n<div><pre><code><span>docker</span> images  <span># 查看所有镜像</span>\n\n<span>docker</span> <span>ps</span> -a <span>#显示所有的容器，包括未运行的。</span>\n<span>docker</span> <span>ps</span> -l <span>#最后启动的容器</span>\n\n<span>docker</span> <span>rm</span> 容器id   <span>#删除容器</span>\n<span>docker</span> <span>rm</span> <span><span>$(</span><span>docker</span> <span>ps</span> -q -a<span>)</span></span> <span>#一次性删除所有的容器</span>\n\n<span>docker</span> rmi 镜像id/镜像名称  <span>#删除镜像</span>\n<span>docker</span> rmi <span><span>$(</span><span>docker</span> images -q<span>)</span></span> <span>#一次性删除所有的镜像。</span>\n\n<span>docker</span> build -t igeekfan/demo <span>.</span>  <span>#运行构建命令,构建Docker 镜像。 </span>\n\n<span>docker</span> run 镜像 <span>#运行</span>\n<span>docker</span> run -it -p <span>5000</span>:80 igeekfan/demo\n<span>#5000是运行后，docker对外的端口，80是这个服务对外的端口，其中Dockerfile 存在语句EXPOSE 80</span>\n<span>docker</span> run -d -p <span>5000</span>:80 igeekfan/demo \n-d 参数后台运行\n\n<span>docker</span> start 容器id\n<span>docker</span> restart 容器id\n<span>docker</span> stop 容器id <span>#终止容器。</span>\n<span>docker</span> logs <span>$CONTAINER_ID</span> <span>##在container外面查看它的输出 </span>\n<span>docker</span> attach <span>$CONTAINER_ID</span> <span>##连接上容器实时查看：</span>\n\n<span>docker</span> pull microsoft/dotnet  <span>#单独安装某一镜像</span>\n\n<span>docker</span> save 镜像id <span>></span> 文件 <span>#持久化镜像</span>\n<span>docker</span> load <span>&lt;</span> 文件\n</code></pre><div aria-hidden=\"true\"><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br><span>24</span><br><span>25</span><br><span>26</span><br><span>27</span><br><span>28</span><br><span>29</span><br></div></div><p>我们如果想将Docker 放置到其他机器运行，很简单。</p>\n<div><pre><code><span>#直接保存镜像，然后复制镜像到其他机器，然后使用docker 命令load 既可。</span>\n\n<span>docker</span> save igeekfan/demo <span>></span> demo.tar\n\n<span>#然后加载命令</span>\n\n<span>docker</span> load <span>&lt;</span> demo.tar\n</code></pre><div aria-hidden=\"true\"><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br></div></div><p>我们如果想将Docker 放置到其他机器运行，很简单。</p>\n<div><pre><code><span>#直接保存镜像，然后复制镜像到其他机器，然后使用docker 命令load 既可。</span>\n\n<span>docker</span> save igeekfan/demo <span>></span> demo.tar\n\n<span>#然后加载命令</span>\n\n<span>docker</span> load <span>&lt;</span> demo.tar\n</code></pre><div aria-hidden=\"true\"><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br></div></div><p>Docker删除</p>\n<div><pre><code><span># 查询相关软件包</span>\ndpkg -l <span>|</span> <span>grep</span> <span>docker</span>\n<span># 删除这个包 上面查到什么，删除什么</span>\n<span>sudo</span> <span>apt</span> remove --purge docker.io\n</code></pre><div aria-hidden=\"true\"><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br></div></div>",
      "date_published": "2022-06-29T19:17:23.000Z",
      "date_modified": "2022-06-29T19:17:23.000Z",
      "authors": [],
      "tags": []
    },
    {
      "title": "Docker 配置 Jenkins",
      "url": "https://igeekfan.cn/igeekfan-docs/dotnetcore/docker/Docker-Jenkins.html",
      "id": "https://igeekfan.cn/igeekfan-docs/dotnetcore/docker/Docker-Jenkins.html",
      "content_html": "<h1 id=\"docker-配置-jenkins\" tabindex=\"-1\"> Docker 配置 Jenkins</h1>\n<p><a href=\"https://www.cnblogs.com/hanease/p/15690225.html\" target=\"_blank\" rel=\"noopener noreferrer\">docker安装jenkins - hanease - 博客园 (cnblogs.com)</a></p>\n<h2 id=\"配置-docker-镜像\" tabindex=\"-1\"> 配置 Docker 镜像</h2>\n<div><pre><code><span>curl</span> -sSL https://get.daocloud.io/daotools/set_mirror.sh <span>|</span> <span>sh</span> -s http://f1361db2.m.daocloud.io\n</code></pre><div aria-hidden=\"true\"><span>1</span><br></div></div><h2 id=\"docker拉取镜像\" tabindex=\"-1\"> Docker拉取镜像</h2>\n<div><pre><code><span>docker</span> pull jenkins/jenkins:lts\n</code></pre><div aria-hidden=\"true\"><span>1</span><br></div></div><h2 id=\"配置本地存储目录\" tabindex=\"-1\"> 配置本地存储目录</h2>\n<div><pre><code><span>mkdir</span> -p /apps/devops/jenkins\n<span>chmod</span> <span>777</span> /apps/devops/jenkins\n</code></pre><div aria-hidden=\"true\"><span>1</span><br><span>2</span><br></div></div><h3 id=\"启动jenkins容器\" tabindex=\"-1\"> 启动Jenkins容器</h3>\n<div><pre><code><span>docker</span> stop jenkins\n<span>docker</span> rmi jenkins\n\n<span>sudo</span> <span>usermod</span> -a -G <span>docker</span> root\n<span>sudo</span> <span>chmod</span> <span>666</span> /var/run/docker.sock\n\n\n<span>docker</span> run -itd -p <span>9003</span>:8080 -p <span>9004</span>:50000 <span>\\</span>\n--restart always <span>\\</span>\n-v /apps/devops/jenkins:/var/jenkins_home <span>\\</span>\n--name jenkins <span>\\</span>\n--volume /var/run/docker.sock:/var/run/docker.sock <span>\\</span>\n-v <span><span>$(</span><span>which</span> <span>docker</span><span>)</span></span>:/usr/bin/docker <span>\\</span>\n-v <span><span>$(</span><span>which</span> <span>docker</span><span>)</span></span>:/usr/bin/com.docker.cli <span>\\</span>\njenkins/jenkins:lts\n</code></pre><div aria-hidden=\"true\"><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br></div></div><h2 id=\"docker-运行aspnetcore项目\" tabindex=\"-1\"> Docker 运行aspnetcore项目</h2>\n<div><pre><code><span>docker</span> run -it -d -p <span>7000</span>:80 --name aspnetcoredemo aspnetcoredemo\n</code></pre><div aria-hidden=\"true\"><span>1</span><br></div></div><h2 id=\"构建项目\" tabindex=\"-1\"> 构建项目</h2>\n<div><pre><code><span>docker</span> build -f src/aspnetcoredemo/Dockerfile -t aspnetcoredemo <span>.</span>\n\n<span>GITHASH</span><span>=</span><span><span>`</span><span>git</span> rev-parse --short HEAD<span>`</span></span>\n<span>docker</span> build -f src/aspnetcoredemo/Dockerfile -t aspnetcoredemo:<span>$GITHASH</span> <span>.</span>\n<span>docker</span> tag aspnetcoredemo:<span>$GITHASH</span> aspnetcoredemo:latest\n\n<span>docker</span> build -f src/Services/ToDo/IGeekFan.FreeKit.Todos.API/Dockerfile -t igeekfan.freekit.todos.api <span>.</span>\n  \n\n</code></pre><div aria-hidden=\"true\"><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br></div></div><p>IGeekFan.Freekit.Service bash脚本</p>\n<div><pre><code><span>#!/bin/bash</span>\n<span># 获取短版本号</span>\n<span>GITHASH</span><span>=</span><span><span>`</span><span>git</span> rev-parse --short HEAD<span>`</span></span>\n<span>docker</span> stop igeekfan.freekit.todos.api\n<span>docker</span> <span>rm</span> igeekfan.freekit.todos.api\n<span>echo</span> ---------------Building Docker Image<span>..</span>.------------------\n<span>docker</span> build -f src/Services/ToDo/IGeekFan.FreeKit.Todos.API/Dockerfile -t igeekfan.freekit.todos.api:<span>$GITHASH</span> <span>.</span>\n<span>docker</span> tag igeekfan.freekit.todos.api:<span>$GITHASH</span> igeekfan.freekit.todos.api:latest\n<span>echo</span> ---------------Launching Container<span>..</span>igeekfan.freekit.todos.api.------------------\n<span>docker</span> run -it -d -p <span>7002</span>:80 --name igeekfan.freekit.todos.api igeekfan.freekit.todos.api -v\n\n\n<span>docker</span> stop igeekfan.freekit.files.api\n<span>docker</span> <span>rm</span> igeekfan.freekit.files.api\n<span>echo</span> ---------------Building Docker Image<span>..</span>.------------------\n<span>docker</span> build -f src/Services/File/IGeekFan.FreeKit.Files.API/Dockerfile -t igeekfan.freekit.files.api:<span>$GITHASH</span> <span>.</span>\n<span>docker</span> tag igeekfan.freekit.files.api:<span>$GITHASH</span> igeekfan.freekit.files.api:latest\n<span>echo</span> ---------------Launching Container<span>..</span>igeekfan.freekit.files.api.------------------\n<span>docker</span> run -it -d -p <span>7003</span>:80 --name igeekfan.freekit.files.api igeekfan.freekit.files.api -v\n\n<span>docker</span> stop igeekfan.freekit.identity.api\n<span>docker</span> <span>rm</span> igeekfan.freekit.identity.api\n<span>echo</span> ---------------Building Docker Image<span>..</span>.------------------\n<span>docker</span> build -f src/Services/Identity/IGeekFan.FreeKit.Identity.API/Dockerfile -t igeekfan.freekit.identity.api:<span>$GITHASH</span> <span>.</span>\n<span>docker</span> tag igeekfan.freekit.identity.api:<span>$GITHASH</span> igeekfan.freekit.identity.api:latest\n<span>echo</span> ---------------Launching Container<span>..</span>igeekfan.freekit.identity.api.------------------\n<span>docker</span> run -it -d -p <span>7004</span>:80 --name igeekfan.freekit.identity.api igeekfan.freekit.identity.api -v\n\n\n</code></pre><div aria-hidden=\"true\"><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br><span>24</span><br><span>25</span><br><span>26</span><br><span>27</span><br><span>28</span><br><span>29</span><br></div></div><p>aspnetcoredemo项目 bash脚本</p>\n<div><pre><code><span>#!/bin/bash</span>\n<span># 获取短版本号</span>\n<span>GITHASH</span><span>=</span><span><span>`</span><span>git</span> rev-parse --short HEAD<span>`</span></span>\n<span>docker</span> stop aspnetcoredemo\n<span>docker</span> <span>rm</span> aspnetcoredemo\n<span>echo</span> ---------------Building Docker Image<span>..</span>aspnetcoredemo.------------------\n<span>docker</span> build -f src/aspnetcoredemo/Dockerfile -t aspnetcoredemo:<span>$GITHASH</span> <span>.</span>\n<span>docker</span> tag aspnetcoredemo:<span>$GITHASH</span> aspnetcoredemo:latest\n<span>echo</span> ---------------Launching Container<span>..</span>aspnetcoredemo.------------------\n<span>docker</span> run -it -d -p <span>7000</span>:80 --name aspnetcoredemo aspnetcoredemo -v \n\n<span>echo</span> ---------------Finish<span>..</span>aspnetcoredemo.------------------\n\n<span>docker</span> stop webapplicationdemo\n<span>docker</span> <span>rm</span> webapplicationdemo\n<span>echo</span> ---------------Building Docker Image<span>..</span>webapplicationdemo.------------------\n<span>docker</span> build -f src/webapplicationdemo/Dockerfile -t webapplicationdemo:<span>$GITHASH</span> <span>.</span>\n<span>docker</span> tag webapplicationdemo:<span>$GITHASH</span> webapplicationdemo:latest\n<span>echo</span> ---------------Launching Container<span>..</span>webapplicationdemo.------------------\n<span>docker</span> run -it -d -p <span>7001</span>:80 --name webapplicationdemo webapplicationdemo -v \n\n</code></pre><div aria-hidden=\"true\"><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br></div></div>",
      "date_published": "2022-06-29T19:17:23.000Z",
      "date_modified": "2022-06-29T19:17:23.000Z",
      "authors": [],
      "tags": []
    },
    {
      "title": "Docker 配置 MySql",
      "url": "https://igeekfan.cn/igeekfan-docs/dotnetcore/docker/Docker-MySql.html",
      "id": "https://igeekfan.cn/igeekfan-docs/dotnetcore/docker/Docker-MySql.html",
      "content_html": "<h1 id=\"docker-配置-mysql\" tabindex=\"-1\"> Docker 配置 MySql</h1>\n<h2 id=\"_1-拉取镜像\" tabindex=\"-1\"> 1.拉取镜像</h2>\n<div><pre><code><span>docker</span> pull mysql:5.7   <span># 拉取 mysql 5.7</span>\n<span>docker</span> pull mysql       <span># 拉取最新版mysql镜像</span>\n</code></pre><div aria-hidden=\"true\"><span>1</span><br><span>2</span><br></div></div><h2 id=\"_2不指定目录映射\" tabindex=\"-1\"> 2不指定目录映射</h2>\n<div><pre><code><span>sudo</span> <span>docker</span> run -p <span>3306</span>:3306 --name mysql -e <span>MYSQL_ROOT_PASSWORD</span><span>=</span><span>123456</span> -d mysql\n</code></pre><div aria-hidden=\"true\"><span>1</span><br></div></div><p>-p 端口配置 主机3306/容器3306\n-name 容器名，此处为mysql\n-e 配置信息 MYSQL_ROOT_PASSWORD=123456 指定密码为123456\n-d 指定镜像\nsudo docker run -p 3306:3306 --name mysql -e MYSQL_ROOT_PASSWORD=123456 -d mysql</p>\n<blockquote>\n<p>默认的配置文件是：/etc/mysql/my.cnf\n默认的数据目录是：/var/lib/mysql</p>\n</blockquote>\n<p>我们进入mysql容器中，查看my.cnf.</p>\n<div><pre><code><span>docker</span> <span>exec</span> -it mysql <span>bash</span>\n<span>cat</span> /etc/mysql/my.cnf\n</code></pre><div aria-hidden=\"true\"><span>1</span><br><span>2</span><br></div></div><p>my.cnf 加载了 /etc/mysql/conf.d目录中所有以后缀为.cnf的配置文件，所以我们映射目录，只需要映射conf.d目录即可。</p>\n<p>先在linux上创建目录</p>\n<div><pre><code><span>sudo</span> <span>mkdir</span> -p /usr/local/docker/mysql/conf.d\n<span>sudo</span> <span>vim</span> mysql-docker.cnf\n</code></pre><div aria-hidden=\"true\"><span>1</span><br><span>2</span><br></div></div><p>保存内容</p>\n<div><pre><code><span>[</span>mysqld<span>]</span>\nserver-id <span>=</span> <span>1</span> <span>#服务Id唯一</span>\nport <span>=</span> <span>3306</span>\nlog-error    <span>=</span> /var/log/mysql/error.log\n<span>#只能用IP地址</span>\nskip_name_resolve \n<span>#数据库默认字符集</span>\ncharacter-set-server <span>=</span> utf8mb4\n<span>#数据库字符集对应一些排序等规则 </span>\ncollation-server <span>=</span> utf8mb4_general_ci\n<span>#设置client连接mysql时的字符集,防止乱码</span>\n<span>init_connect</span><span>=</span><span>'SET NAMES utf8mb4'</span>\n<span>#最大连接数</span>\nmax_connections <span>=</span> <span>300</span>\n</code></pre><div aria-hidden=\"true\"><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br></div></div><div><pre><code><span>#如果遇到这个错就执行下权限</span>\n<span>#mysqld: [Warning] World-writable config file '/etc/mysql/conf.d/mysql-docker.cnf' is ignored</span>\n<span>sudo</span> <span>chmod</span> <span>644</span> mysql-docker.cnf\n</code></pre><div aria-hidden=\"true\"><span>1</span><br><span>2</span><br><span>3</span><br></div></div><h2 id=\"_3-建立目录映射\" tabindex=\"-1\"> 3.建立目录映射</h2>\n<p>在linux上创建目录，用于存放mysql的日志和数据。</p>\n<div><pre><code><span>sudo</span> <span>mkdir</span> -p /usr/local/docker/mysql/logs\n<span>sudo</span> <span>mkdir</span> -p /usr/local/docker/mysql/data\n</code></pre><div aria-hidden=\"true\"><span>1</span><br><span>2</span><br></div></div><div><pre><code><span>sudo</span> <span>docker</span> run -p <span>3310</span>:3306 --name mysql <span>\\</span>\n-v /usr/local/docker/mysql/conf.d:/etc/mysql/conf.d <span>\\</span>\n-v /usr/local/docker/mysql/logs:/var/log/mysql <span>\\</span>\n-v /usr/local/docker/mysql/data:/var/lib/mysql <span>\\</span>\n-e <span>MYSQL_ROOT_PASSWORD</span><span>=</span><span>123456</span> <span>\\</span>\n--restart<span>=</span>always <span>\\</span>\n-d mysql\n\n</code></pre><div aria-hidden=\"true\"><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br></div></div><div><pre><code><span>#查看docker 下进程，mysql是否启动</span>\n<span>docker</span> <span>ps</span> \n<span>#由于 mysql /var/log/mysql 默认情况下查看</span>\n<span>docker</span> <span>exec</span> mysql <span>chown</span> mysql:root /var/log/mysql\n</code></pre><div aria-hidden=\"true\"><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br></div></div><ul>\n<li>-p 端口配置 linux主机3310/容器3306</li>\n<li>-name 容器名，此处为mysql</li>\n<li>-v 指定容器及其挂载的卷，此外为 宿主机文件目录:容器文件目录，可指定多个数据文件目录</li>\n<li>-e 配置信息 MYSQL_ROOT_PASSWORD=123456 设置 MySql服务的root密码为123456</li>\n<li>--restart=always 容器退出时总是重启</li>\n<li>-d 后台运行。</li>\n<li>镜像名</li>\n</ul>\n<h2 id=\"docker相关命令\" tabindex=\"-1\"> Docker相关命令</h2>\n<p>其中mysql为容器的name或id</p>\n<div><pre><code><span>#重启容器</span>\n<span>docker</span> restart mysql\n<span>#暂停容器</span>\n<span>docker</span> stop mysql\n<span>#删除容器</span>\n<span>docker</span> <span>rm</span> mysql\n<span>#启动容器</span>\n<span>docker</span> start mysql\n<span>#更新容器 开机也能重启</span>\n<span>docker</span> update mysql --restart<span>=</span>always\n</code></pre><div aria-hidden=\"true\"><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br></div></div><h3 id=\"配置远程navicat可访问\" tabindex=\"-1\"> 配置远程Navicat可访问</h3>\n<p>如果遇到无法访问时，可以使用此方式</p>\n<div><pre><code><span>sudo</span> <span>docker</span> <span>exec</span> -it mysql /bin/bash\nmysql -uroot -p123456\nuse mysql<span>;</span>\nALTER <span>USER</span> <span>'root'</span>@<span>'%'</span> IDENTIFIED WITH mysql_native_password BY <span>'123456'</span><span>;</span>\nflush privileges<span>;</span>\n</code></pre><div aria-hidden=\"true\"><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br></div></div><h3 id=\"restart参数\" tabindex=\"-1\"> Restart参数</h3>\n<p>Docker 中restart参数用于指定自动重启docker容器策略，包含3个选项：no，on-failure[:times]，always，unless-stopped</p>\n<p>no 默认值，表示容器退出时，docker不自动重启容器</p>\n<div><pre><code><span>docker</span> run --restart<span>=</span>no <span>[</span>容器名<span>]</span>\n</code></pre><div aria-hidden=\"true\"><span>1</span><br></div></div><p>on-failure 若容器的退出状态非0，则docker自动重启容器，还可以指定重启次数，若超过指定次数未能启动容器则放弃**</p>\n<div><pre><code><span>docker</span> run --restart<span>=</span>on-failure:3 <span>[</span>容器名<span>]</span>\n</code></pre><div aria-hidden=\"true\"><span>1</span><br></div></div><p>always 容器退出时总是重启**</p>\n<div><pre><code><span>docker</span> run --restart<span>=</span>always <span>[</span>容器名<span>]</span>\n</code></pre><div aria-hidden=\"true\"><span>1</span><br></div></div><p>unless-stopped 容器退出时总是重启，但不考虑Docker守护进程启动时就已经停止的容器**</p>\n<div><pre><code><span>docker</span> run --restart<span>=</span>unless-stopped <span>[</span>容器名<span>]</span>\n</code></pre><div aria-hidden=\"true\"><span>1</span><br></div></div><p>如果容器启动时没有设置–restart参数，则通过下面命令进行更新：* *</p>\n<div><pre><code><span>docker</span> update --restart<span>=</span>always <span>[</span>容器名<span>]</span>\n</code></pre><div aria-hidden=\"true\"><span>1</span><br></div></div>",
      "date_published": "2022-06-29T19:17:23.000Z",
      "date_modified": "2022-06-29T19:17:23.000Z",
      "authors": [],
      "tags": []
    },
    {
      "title": "Docker 配置 Nacos",
      "url": "https://igeekfan.cn/igeekfan-docs/dotnetcore/docker/Docker-Nacos.html",
      "id": "https://igeekfan.cn/igeekfan-docs/dotnetcore/docker/Docker-Nacos.html",
      "content_html": "<h1 id=\"docker-配置-nacos\" tabindex=\"-1\"> Docker 配置 Nacos</h1>\n<h2 id=\"_2、创建本地的映射文件\" tabindex=\"-1\"> 2、创建本地的映射文件</h2>\n<p>创建目录</p>\n<div><pre><code><span>mkdir</span> -p  /usr/local/docker/nacos/logs /usr/local/docker/nacos/conf\n</code></pre><div aria-hidden=\"true\"><span>1</span><br></div></div><p>配置数据库 application.properties</p>\n<div><pre><code><span>vim</span> /usr/local/docker/nacos/conf/application.properties\n</code></pre><div aria-hidden=\"true\"><span>1</span><br></div></div><ul>\n<li>application.properties</li>\n</ul>\n<div><pre><code>spring.datasource.platform<span>=</span>mysql\ndb.num<span>=</span><span>1</span>\ndb.url.0<span>=</span>jdbc:mysql://localhost:3310/nacos_config?characterEncoding<span>=</span>utf8<span>&amp;</span><span>connectTimeout</span><span>=</span><span>1000</span><span>&amp;</span><span>socketTimeout</span><span>=</span><span>3000</span><span>&amp;</span><span>autoReconnect</span><span>=</span>true\ndb.user<span>=</span>user\ndb.password<span>=</span>password\n</code></pre><div aria-hidden=\"true\"><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br></div></div><p>下面通过配置来暴露除了/shutdown之外的所有端点。下面通过配置来暴露除了/shutdown之外的所有端点</p>\n<div><pre><code>management.endpoints.web.exposure.include<span>=</span>* \n</code></pre><div aria-hidden=\"true\"><span>1</span><br></div></div><p>运行容器：使用<code>standalone</code>(单机)模式并开放8848端口，并映射配置文件和日志目录，数据库在application.properties中配置</p>\n<div><pre><code><span>docker</span> run -d <span>\\</span>\n-p <span>8848</span>:8848 -p <span>9848</span>:9848 -p <span>9555</span>:9555 <span>\\</span>\n-e <span>MODE</span><span>=</span>standalone <span>\\</span>\n-e <span>TZ</span><span>=</span><span>\"Asia/Shanghai\"</span> <span>\\</span>\n-e <span>PREFER_HOST_MODE</span><span>=</span>hostname <span>\\</span>\n-v /usr/local/docker/nacos/logs:/home/nacos/logs <span>\\</span>\n-v /usr/local/docker/nacos/conf/application.properties:/home/nacos/conf/application.properties <span>\\</span>\n--restart always <span>\\</span>\n--name nacos <span>\\</span>\nnacos/nacos-server\n</code></pre><div aria-hidden=\"true\"><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br></div></div><p>其中-v 指定映射配置。左侧为linux文件，右侧为docker目录</p>\n<div><pre><code><span>docker</span> network create mysql-net\n<span># 创建桥接网络 mysql-net</span>\n<span>docker</span> network connect mysql-net mysql\n<span># 容器 mysql 连入 mysql-net</span>\n<span>docker</span> network connect mysql-net nacos\n<span># 同上，nacos</span>\n<span>docker</span> network inspect mysql-net\n<span># 配置完后容器运行起来使用该命令查看该桥接网络下容器信息</span>\n</code></pre><div aria-hidden=\"true\"><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br></div></div>",
      "date_published": "2022-06-29T19:17:23.000Z",
      "date_modified": "2022-06-29T19:17:23.000Z",
      "authors": [],
      "tags": []
    },
    {
      "title": "Docker 配置Portainer",
      "url": "https://igeekfan.cn/igeekfan-docs/dotnetcore/docker/Docker-Portainer.html",
      "id": "https://igeekfan.cn/igeekfan-docs/dotnetcore/docker/Docker-Portainer.html",
      "content_html": "<h1 id=\"docker-配置portainer\" tabindex=\"-1\"> Docker 配置Portainer</h1>\n<h2 id=\"docker-可视化管\" tabindex=\"-1\"> Docker 可视化管</h2>\n<ul>\n<li>portainer 默认9000端口</li>\n</ul>\n<div><pre><code><span>docker</span> pull portainer/portainer\n</code></pre><div aria-hidden=\"true\"><span>1</span><br></div></div><div><pre><code><span>sudo</span> <span>docker</span> run -d -p <span>9000</span>:9000 <span>\\</span>\n--restart<span>=</span>always <span>\\</span>\n-v /var/run/docker.sock:/var/run/docker.sock <span>\\</span>\n-v portainer_data:/data <span>\\</span>\n--name portainer <span>\\</span>\n-d portainer/portainer\n</code></pre><div aria-hidden=\"true\"><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br></div></div><ul>\n<li>-d 后台运行</li>\n<li>-p 端口映射 主机端口9000:容器端口9000</li>\n<li>--restart=always 容器退出时总是重启</li>\n<li>-v 本地docker.sock</li>\n<li><code>--</code>name指定容器名</li>\n<li>-d 指定镜像名</li>\n</ul>\n",
      "date_published": "2022-06-29T19:17:23.000Z",
      "date_modified": "2022-06-29T19:17:23.000Z",
      "authors": [],
      "tags": []
    },
    {
      "title": "Docker 配置 Redis",
      "url": "https://igeekfan.cn/igeekfan-docs/dotnetcore/docker/Docker-Redis.html",
      "id": "https://igeekfan.cn/igeekfan-docs/dotnetcore/docker/Docker-Redis.html",
      "content_html": "<h1 id=\"docker-配置-redis\" tabindex=\"-1\"> Docker 配置 Redis</h1>\n<h2 id=\"目录\" tabindex=\"-1\"> 目录</h2>\n<ul>\n<li>\n<ul>\n<li></li>\n<li></li>\n<li></li>\n</ul>\n</li>\n</ul>\n<h2 id=\"_2-本地配置文件映射\" tabindex=\"-1\"> 2.本地配置文件映射</h2>\n<p>创建/etc/redis/conf/redis.conf文件，并且daemonize=no。一定要是非后台模式，如果 是YES,会导致redis无法启动，因为后台会导致docker无任务可做而退出</p>\n<div><pre><code><span>mkdir</span> -p /etc/redis/conf/\n<span>cd</span> /etc/redis/conf/\n<span>vim</span> redis.conf\n\n<span>##redis.conf文件内容</span>\ndaemonize no\nport <span>6379</span>\nrequirepass <span>123456</span>\n<span>bind</span> <span>0.0</span>.0.0\n\n</code></pre><div aria-hidden=\"true\"><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br></div></div><h2 id=\"_3-启动docker\" tabindex=\"-1\"> 3.启动Docker</h2>\n<div><pre><code><span>docker</span> run <span>\\</span>\n-p <span>6379</span>:6379 <span>\\</span>\n--name redis <span>\\</span>\n-v /etc/redis/conf/redis.conf:/etc/redis/redis.conf <span>\\</span>\n-v /etc/redis/data:/data <span>\\</span>\n-d redis <span>\\</span>\nredis-server /etc/redis/redis.conf <span>\\</span>\n--requirepass <span>'123456'</span> <span>\\</span>\n--appendonly <span>yes</span>\n\n</code></pre><div aria-hidden=\"true\"><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br></div></div><p><strong>docker 镜像reids 默认 无配置文件启动</strong></p>\n<ul>\n<li>-p：表示端口映射，冒号左面的是我们的服务器的端口，右侧则表示的是容器内mysql的端口</li>\n<li><code>--</code>name：是我们给redis容器取的名字</li>\n<li>-v：表示挂载路径\\映射配置文件</li>\n</ul>\n<p>/etc/redis/conf/redis.conf左侧，代表linux上的路径，映射到容器上的/etc/redis/redis.conf。</p>\n<p>/etc/redis/data代现linux上的redis的数据路径，映射到窗口中的/data目录</p>\n<ul>\n<li>-d redis  后台模式启动 redis</li>\n<li>redis-server /etc/redis/redis.conf    redis 将以 /etc/redis/redis.conf 为配置文件启动</li>\n<li>--appendonly yes  开启redis 持久化</li>\n<li>--requirepass '123456' 指定密码为123456</li>\n<li>--appendonly yes：开启持久化</li>\n</ul>\n<p>后续可通过修改linux上的/etc/redis/conf/redis.conf文件来修改容器的redis服务，如密码requireapss+ 密码</p>\n",
      "date_published": "2022-06-29T19:17:23.000Z",
      "date_modified": "2022-06-29T19:17:23.000Z",
      "authors": [],
      "tags": []
    },
    {
      "title": "Docker",
      "url": "https://igeekfan.cn/igeekfan-docs/dotnetcore/docker/",
      "id": "https://igeekfan.cn/igeekfan-docs/dotnetcore/docker/",
      "content_html": "<h1 id=\"docker\" tabindex=\"-1\"> Docker</h1>\n<p>Docker 中的三个概念，镜像（Image)、容器（Container)、仓库（Repository）</p>\n<p>一个Image可有多个Container，我们可以把Image发布至Dokcer Hub提供的Repository中或阿里云Docker镜像仓库（Docker Registry），供他人使用。</p>\n<h2 id=\"docker-安装\" tabindex=\"-1\"> Docker 安装</h2>\n<p><a href=\"https://cloud.tencent.com/developer/article/1853467\" title=\"Ubuntu Docker 安装 - 云+社区 - 腾讯云 (tencent.com)\" target=\"_blank\" rel=\"noopener noreferrer\">Ubuntu Docker 安装 - 云+社区 - 腾讯云 (tencent.com)</a></p>\n<h2 id=\"docker-理论到实战\" tabindex=\"-1\"> Docker 理论到实战</h2>\n<p><a href=\"https://www.cnblogs.com/codelove/p/10030439.html\" title=\"Docker最全教程——从理论到实战(一)\" target=\"_blank\" rel=\"noopener noreferrer\">Docker最全教程——从理论到实战(一)</a></p>\n<p><a href=\"http://dockone.io/article/126\" title=\"八个Docker的真实应用场景\" target=\"_blank\" rel=\"noopener noreferrer\">八个Docker的真实应用场景</a></p>\n<p><a href=\"https://blog.csdn.net/julien71/article/details/79760919\" title=\"docker pull很慢解决办法、配置阿里镜像\" target=\"_blank\" rel=\"noopener noreferrer\">docker pull很慢解决办法、配置阿里镜像</a></p>\n<p><a href=\"https://www.cnblogs.com/zxtceq/p/7403953.html\" title=\"ASP.NET Core开发Docker部署\" target=\"_blank\" rel=\"noopener noreferrer\">ASP.NET Core开发Docker部署</a></p>\n<h2 id=\"docker学习记录\" tabindex=\"-1\"> Docker学习记录</h2>\n<p>Docker Desktop 在windows 10下安装正常，Hyper-V也正常安装，但Hyper-V下无法打开虚拟交换机管理器，提示“尝试检索虚拟交换列表时出错”，也无法快速创建虚拟机，提示“xx异常”。事件查看器-&gt;Windows日志-&gt;系统中，Hyper-V-VmSwitch 一直提示 类似&quot;VMSwitch driver due to error&quot;</p>\n<p><a href=\"https://www.cnblogs.com/GeDiao/p/7975667.html\" title=\"Hyper-V管理器无法打开虚拟交换机管理，别人的方法，但无济于事\" target=\"_blank\" rel=\"noopener noreferrer\">Hyper-V管理器无法打开虚拟交换机管理，别人的方法，但无济于事</a></p>\n<p>别人都是说去在windows功能上打开Hyper-v即可，而我开启了一直不行，我这个主要是Hyper-V问题，导致Docker服务一直无法正常启动。微软的论坛也找了，没人能解决，说重装系统？这只能终极解决方案。下面这个链接，我也回答了一下。</p>\n<p><a href=\"https://social.msdn.microsoft.com/Forums/healthvault/zh-CN/cf5c267b-1ca0-40dd-9959-5ecb3475a06c/hyperv?forum=window10app\" title=\"hyperv 无法打开虚拟交换机管理器，报错“尝试检索虚拟交换机列表时出错\" target=\"_blank\" rel=\"noopener noreferrer\">hyperv 无法打开虚拟交换机管理器，报错“尝试检索虚拟交换机列表时出错</a></p>\n<p>后来找到解决办法，在设置-更新和安全-Windows预览体验计划，先去官网申请，申请后，升级系统，他会帮我修复Hyper-V.</p>\n<p>AMD 启用了虚拟化也无法使用,命令行设置hyper-v参数.管理员模式下的命令提示符中输入</p>\n<div><pre><code>bcdedit /set hypervisorlaunchtype Auto\n</code></pre><div aria-hidden=\"true\"><span>1</span><br></div></div><p>然后重启电脑，启动docker</p>\n<h2 id=\"docker运行aspnetcore项目\" tabindex=\"-1\"> docker运行aspnetcore项目</h2>\n<div><pre><code><span>docker</span> run --restart unless-stopped -p <span>5020</span>:80 --name lincms-web-1 -d registry.cn-hangzhou.aliyuncs.com/igeekfan/lincms-web\n\n<span>docker</span> run --restart unless-stopped -p <span>5021</span>:80 --name lincms-web-2 -d registry.cn-hangzhou.aliyuncs.com/igeekfan/lincms-web\n\n<span>docker</span> run --restart unless-stopped -p <span>5022</span>:80 --name lincms-web-3 -d registry.cn-hangzhou.aliyuncs.com/igeekfan/lincms-web\n</code></pre><div aria-hidden=\"true\"><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br></div></div><p>docker 提示hype-v冲突，以管理员身份运行命令提示符 执行命令</p>\n<div><pre><code>bcdedit /set hypervisorlaunchtype off \n</code></pre><div aria-hidden=\"true\"><span>1</span><br></div></div><p>重启，运行vm即可。</p>\n<p>如果想要恢复hyper启动</p>\n<div><pre><code>bcdedit /set hypervisorlaunchtype auto\n</code></pre><div aria-hidden=\"true\"><span>1</span><br></div></div>",
      "date_published": "2022-06-29T19:17:23.000Z",
      "date_modified": "2022-06-29T19:17:23.000Z",
      "authors": [],
      "tags": []
    },
    {
      "title": "在 ASP.NET Core 6 中添加Startup.cs的整洁方式",
      "url": "https://igeekfan.cn/igeekfan-docs/dotnetcore/examples/ASPNETCore6-Add-Startup-Clean.html",
      "id": "https://igeekfan.cn/igeekfan-docs/dotnetcore/examples/ASPNETCore6-Add-Startup-Clean.html",
      "content_html": "<blockquote>\n<ul>\n<li><a href=\"https://www.talkingdotnet.com/clean-way-to-add-startup-class-in-asp-net-core-6-project/\" target=\"_blank\" rel=\"noopener noreferrer\">https://www.talkingdotnet.com/clean-way-to-add-startup-class-in-asp-net-core-6-project/</a></li>\n<li>作者: Talking Dotnet</li>\n</ul>\n</blockquote>\n<p>如果您关注<code>ASP.NET Core 6</code>，那么您可能发现，对于<code>ASP.NET Core 6</code>项目，没有<code>Startup.cs</code>文件。我发布了关于<a href=\"https://igeekfan.cn/dotnetcore/examples/NET6Startup.html\" target=\"_blank\" rel=\"noopener noreferrer\">如何在ASP.NETCore 6项目中添加Startup.cs</a>，这种方法以传统的方式将类引入到项目中，这是我们今天使用的<code>ASP.NET Core 5</code>及其早期版本。但是，如果我们能够改进，让它变得更好呢。好的，在这篇文章中，让我们看一看在<code>ASP.NET Core6</code>中添加<code>Startup</code>类的整洁方法</p>\n<p>为了以整洁的方式实现，我们将利用<a href=\"https://docs.microsoft.com/en-us/dotnet/csharp/programming-guide/classes-and-structs/extension-methods\" target=\"_blank\" rel=\"noopener noreferrer\">扩展方法</a>。扩展方法允许您向现有类型“添加”方法，而无需创建新的派生类型、重新编译或以其他方式修改原始类型。<code>ASP.NET Core 6.0</code>使用和来引导<code>ASP.NET Core应用程序</code>。因此，我们将为这二个(<code>WebApplicationBuilder</code>、<code>WebApplication</code>)类创建扩展方法</p>\n<p>记住，这2个是<code>ASP.NET Core 6.0</code>新引入的。阅读<a href=\"https://andrewlock.net/exploring-dotnet-6-part-2-comparing-webapplicationbuilder-to-the-generic-host/\" target=\"_blank\" rel=\"noopener noreferrer\">Comparing WebApplicationBuilder to the Generic Host</a>，并<a href=\"https://andrewlock.net/exploring-dotnet-6-part-3-exploring-the-code-behind-webapplicationbuilder/\" target=\"_blank\" rel=\"noopener noreferrer\">Exploring the code behind WebApplicationBuilder</a>以了解有关此新引导模型的更多信息。</p>\n<p>该类用于注册/配置服务或依赖项。由于扩展方法是静态方法，所以请使用名为的静态方法创建一个静态类。现在，将依赖项注册代码从移动到这里。如下</p>\n<div><pre><code><span>public</span> <span>static</span> <span>class</span> <span>RegisterStartupServices</span>\n<span>{</span>\n    <span>public</span> <span>static</span> <span>WebApplicationBuilder</span> <span>RegisterServices</span><span>(</span><span>this</span> <span>WebApplicationBuilder</span> builder<span>)</span>\n    <span>{</span>\n        builder<span>.</span>Services<span>.</span><span>AddControllers</span><span>(</span><span>)</span><span>;</span>\n        <span>// Learn more about configuring Swagger/OpenAPI at https://aka.ms/aspnetcore/swashbuckle</span>\n        builder<span>.</span>Services<span>.</span><span>AddEndpointsApiExplorer</span><span>(</span><span>)</span><span>;</span>\n        builder<span>.</span>Services<span>.</span><span>AddSwaggerGen</span><span>(</span><span>)</span><span>;</span>\n        <span>return</span> builder<span>;</span>\n    <span>}</span>\n<span>}</span>\n</code></pre><div aria-hidden=\"true\"><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br></div></div><p>现在，让我们创建另一个静态类<code>RegisterStartupMiddlewares</code>，它扩展了用于中间件注册的类<code>WebApplication</code>。在这个类中，从中移动中间件注册码并将其引入方法。Program.cs中的<code>SetupMiddleware</code></p>\n<div><pre><code><span>public</span> <span>static</span> <span>class</span> <span>RegisterStartupMiddlewares</span>\n<span>{</span>\n    <span>public</span> <span>static</span> <span>WebApplication</span> <span>SetupMiddleware</span><span>(</span><span>this</span> <span>WebApplication</span> app<span>)</span>\n    <span>{</span>\n        <span>// Configure the HTTP request pipeline.</span>\n        <span>if</span> <span>(</span>app<span>.</span>Environment<span>.</span><span>IsDevelopment</span><span>(</span><span>)</span><span>)</span>\n        <span>{</span>\n            app<span>.</span><span>UseSwagger</span><span>(</span><span>)</span><span>;</span>\n            app<span>.</span><span>UseSwaggerUI</span><span>(</span><span>)</span><span>;</span>\n        <span>}</span>\n\n        app<span>.</span><span>UseHttpsRedirection</span><span>(</span><span>)</span><span>;</span>\n\n        app<span>.</span><span>UseAuthorization</span><span>(</span><span>)</span><span>;</span>\n\n        app<span>.</span><span>MapControllers</span><span>(</span><span>)</span><span>;</span>\n\n        <span>return</span> app<span>;</span>\n    <span>}</span>\n<span>}</span>\n</code></pre><div aria-hidden=\"true\"><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br></div></div><p>完成后，让我们返回到<code>Program.cs</code>中更新代码并使用这些扩展方法。如下</p>\n<div><pre><code><span><span>var</span></span> builder <span>=</span> WebApplication<span>.</span><span>CreateBuilder</span><span>(</span>args<span>)</span>\n             <span>.</span><span>RegisterServices</span><span>(</span><span>)</span><span>;</span>\n\n<span><span>var</span></span> app <span>=</span> builder<span>.</span><span>Build</span><span>(</span><span>)</span>\n        <span>.</span><span>SetupMiddleware</span><span>(</span><span>)</span><span>;</span>\n\napp<span>.</span><span>Run</span><span>(</span><span>)</span><span>;</span>\n</code></pre><div aria-hidden=\"true\"><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br></div></div><p>或者，我们可以让他更加整洁，并将其排成一行，如下</p>\n<div><pre><code>WebApplication<span>.</span><span>CreateBuilder</span><span>(</span>args<span>)</span>\n    <span>.</span><span>RegisterServices</span><span>(</span><span>)</span>\n    <span>.</span><span>Build</span><span>(</span><span>)</span>\n    <span>.</span><span>SetupMiddleware</span><span>(</span><span>)</span>\n    <span>.</span><span>Run</span><span>(</span><span>)</span><span>;</span>\n</code></pre><div aria-hidden=\"true\"><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br></div></div><p>现在，这看起来更加清晰、可读和易于管理。就是这么简单。</p>\n<h2 id=\"源码\" tabindex=\"-1\"> 源码</h2>\n<ul>\n<li><a href=\"https://github.com/luoyunchong/dotnetcore-examples/blob/master/999-Others/NET6/NET6Extensions/Program.cs\" target=\"_blank\" rel=\"noopener noreferrer\">dotnetcore-examples/Program.cs at master · luoyunchong/dotnetcore-examples (github.com)</a></li>\n</ul>\n",
      "date_published": "2022-06-13T14:06:43.000Z",
      "date_modified": "2022-06-13T15:26:37.000Z",
      "authors": [
        {
          "name": "Talking Dotnet"
        }
      ],
      "tags": [
        "ASP.NET Core"
      ]
    },
    {
      "title": "在 ASP.NET Core 6 如何添加 Startup.cs",
      "url": "https://igeekfan.cn/igeekfan-docs/dotnetcore/examples/NET6Startup.html",
      "id": "https://igeekfan.cn/igeekfan-docs/dotnetcore/examples/NET6Startup.html",
      "content_html": "<blockquote>\n<ul>\n<li>原文：<a href=\"https://www.talkingdotnet.com/how-to-add-startup-cs-in-asp-net-core-6-project/#more-8202\" target=\"_blank\" rel=\"noopener noreferrer\">https://www.talkingdotnet.com/how-to-add-startup-cs-in-asp-net-core-6-project/#more-8202</a></li>\n<li>作者: Talking Dotnet</li>\n</ul>\n</blockquote>\n<p>使用 <code>ASP.NET Core 6.0</code>项目，您将找不到<code>Startup.cs</code>文件。默认情况下，此文件将被删除，并且是将注册依赖项和中间件放到了<code>Program.cs</code>中。但是，如果您是 <code>Startup.cs</code> 的粉丝或将项目升级到 <code>ASP.NET Core 6.0</code>，你可能仍想要使用 <code>Startup.cs</code> 文件。因此，在这篇文章中，让我们将了解如何在 <code>ASP.NET Core 6</code> 项目中添加 <code>Startup.cs</code></p>\n<p>使用 <code>ASP.NET Core 6.0</code>项目时，您的<code>Program.cs</code>文件可能会这样。<code>Program.cs</code>是 ASP.NET Core Web 6应用模板的文件</p>\n<div><pre><code><span><span>var</span></span> builder <span>=</span> WebApplication<span>.</span><span>CreateBuilder</span><span>(</span>args<span>)</span><span>;</span>\n\n<span>// Add services to the container.</span>\nbuilder<span>.</span>Services<span>.</span><span>AddRazorPages</span><span>(</span><span>)</span><span>;</span>\n\n<span><span>var</span></span> app <span>=</span> builder<span>.</span><span>Build</span><span>(</span><span>)</span><span>;</span>\n\n<span>// Configure the HTTP request pipeline.</span>\n<span>if</span> <span>(</span><span>!</span>app<span>.</span>Environment<span>.</span><span>IsDevelopment</span><span>(</span><span>)</span><span>)</span>\n<span>{</span>\n    app<span>.</span><span>UseExceptionHandler</span><span>(</span><span>\"/Error\"</span><span>)</span><span>;</span>\n    <span>// The default HSTS value is 30 days. You may want to change this for production scenarios, see https://aka.ms/aspnetcore-hsts.</span>\n    app<span>.</span><span>UseHsts</span><span>(</span><span>)</span><span>;</span>\n<span>}</span>\napp<span>.</span><span>UseHttpsRedirection</span><span>(</span><span>)</span><span>;</span>\napp<span>.</span><span>UseStaticFiles</span><span>(</span><span>)</span><span>;</span>\napp<span>.</span><span>UseRouting</span><span>(</span><span>)</span><span>;</span>\napp<span>.</span><span>UseAuthorization</span><span>(</span><span>)</span><span>;</span>\napp<span>.</span><span>MapRazorPages</span><span>(</span><span>)</span><span>;</span>\napp<span>.</span><span>Run</span><span>(</span><span>)</span><span>;</span>\n</code></pre><div aria-hidden=\"true\"><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br></div></div><p>正如您在此处看到的，服务和中间件注册现在是此文件的一部分。而 <code>Statup.cs</code> 有 2 个方法 <code>ConfigureServices()</code> 和 <code>Configure()</code>，我们在方法 <code>ConfigureServices</code> 中注册依赖关系/服务，在 <code>Configure</code> 中注册中间件。</p>\n<p>现在使用 <code>Program.cs</code>，您需要在第 4 行之后注册您的服务/依赖项<code>builder.Services.AddRazorPages();</code>，并在第 6 行之后注册中间件<code>var app = builder.Build();</code>。请记住，在管道中注册中间件时，顺序很重要。</p>\n<p>若要将 <code>Startup.cs</code> 添加到 <code>ASP.NET Core 6.0</code> 项目中 ，请添加一个名为<code>Startup.cs</code>的新文件 并添加以下代码。</p>\n<div><pre><code><span>public</span> <span>class</span> <span>Startup</span>\n<span>{</span>\n    <span>public</span> <span>Startup</span><span>(</span><span>IConfiguration</span> configuration<span>)</span>\n    <span>{</span>\n        Configuration <span>=</span> configuration<span>;</span>\n    <span>}</span>\n\n    <span>public</span> <span>IConfiguration</span> Configuration <span>{</span> <span>get</span><span>;</span> <span>}</span>\n\n    <span>public</span> <span><span>void</span></span> <span>ConfigureServices</span><span>(</span><span>IServiceCollection</span> services<span>)</span>\n    <span>{</span>\n        services<span>.</span><span>AddRazorPages</span><span>(</span><span>)</span><span>;</span>\n    <span>}</span>\n\n    <span>public</span> <span><span>void</span></span> <span>Configure</span><span>(</span><span>WebApplication</span> app<span>,</span> <span>IWebHostEnvironment</span> env<span>)</span>\n    <span>{</span>\n        <span>if</span> <span>(</span><span>!</span>app<span>.</span>Environment<span>.</span><span>IsDevelopment</span><span>(</span><span>)</span><span>)</span>\n        <span>{</span>\n            app<span>.</span><span>UseExceptionHandler</span><span>(</span><span>\"/Error\"</span><span>)</span><span>;</span>\n            <span>// The default HSTS value is 30 days. You may want to change this for production scenarios, see https://aka.ms/aspnetcore-hsts.</span>\n            app<span>.</span><span>UseHsts</span><span>(</span><span>)</span><span>;</span>\n        <span>}</span>\n        app<span>.</span><span>UseHttpsRedirection</span><span>(</span><span>)</span><span>;</span>\n        app<span>.</span><span>UseStaticFiles</span><span>(</span><span>)</span><span>;</span>\n        app<span>.</span><span>UseRouting</span><span>(</span><span>)</span><span>;</span>\n        app<span>.</span><span>UseAuthorization</span><span>(</span><span>)</span><span>;</span>\n        app<span>.</span><span>MapRazorPages</span><span>(</span><span>)</span><span>;</span>\n        app<span>.</span><span>Run</span><span>(</span><span>)</span><span>;</span>\n    <span>}</span>\n<span>}</span>\n</code></pre><div aria-hidden=\"true\"><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br><span>24</span><br><span>25</span><br><span>26</span><br><span>27</span><br><span>28</span><br><span>29</span><br><span>30</span><br></div></div><p>构造函数和这两个方法中的代码是非常熟悉。从文件<code>Program.cs</code>中删除依赖项注册的代码并将其放入<code>ConfigureService()</code>方法中。同样，中间件注册码也从文件中删除并放入<code>Configure()</code> 方法中。</p>\n<p>接下来，我们需要介绍 <code>Program.cs</code> 如何调用 <code>Startup.cs</code> 。因此，请将文件代码更新为以下内容。</p>\n<div><pre><code><span><span>var</span></span> builder <span>=</span> WebApplication<span>.</span><span>CreateBuilder</span><span>(</span>args<span>)</span><span>;</span>\n\n<span><span>var</span></span> startup <span>=</span> <span>new</span> <span>Startup</span><span>(</span>builder<span>.</span>Configuration<span>)</span><span>;</span>\nstartup<span>.</span><span>ConfigureServices</span><span>(</span>builder<span>.</span>Services<span>)</span><span>;</span>\n\n<span><span>var</span></span> app <span>=</span> builder<span>.</span><span>Build</span><span>(</span><span>)</span><span>;</span>\nstartup<span>.</span><span>Configure</span><span>(</span>app<span>,</span> builder<span>.</span>Environment<span>)</span><span>;</span>\n</code></pre><div aria-hidden=\"true\"><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br></div></div><p>Startup.cs 类所需的所有对象都存在于 builder 对象中，因此我们可以将所需的对象传递给<code>ConfigureService()</code>和<code>Configure()</code>方法。就是这样。您的项目应该正常运行</p>\n<h2 id=\"我们还能做什么\" tabindex=\"-1\"> 我们还能做什么？</h2>\n<p>这是添加<code>Startup.cs</code>的自定义方式，因此实际上我们不必遵循任何与该类相关的内置规则。我从不喜欢<code>ConfigureService()</code>和<code>Configure()</code>这两个名称，因为它们并没有确切定义它们的用途。以前，无法重命名这些名称，但现在我可以给出一个有意义的名称。类似地，<code>ConfigureService</code>变成<code>RegisterServices</code>，<code>Configure</code>变成<code>SetupMiddleware</code>。</p>\n<div><pre><code><span><span>var</span></span> startup <span>=</span> <span>new</span> <span>Startup</span><span>(</span>builder<span>.</span>Configuration<span>)</span><span>;</span>\nstartup<span>.</span><span>RegisterServices</span><span>(</span>builder<span>.</span>Services<span>)</span><span>;</span>\n\n<span><span>var</span></span> app <span>=</span> builder<span>.</span><span>Build</span><span>(</span><span>)</span><span>;</span>\nstartup<span>.</span><span>SetupMiddlewares</span><span>(</span>app<span>,</span> builder<span>.</span>Environment<span>)</span><span>;</span>\n</code></pre><div aria-hidden=\"true\"><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br></div></div><h2 id=\"源码\" tabindex=\"-1\"> 源码</h2>\n<ul>\n<li><a href=\"https://github.com/luoyunchong/dotnetcore-examples/blob/master/999-Others/NET6/NET6Startup/Program.cs\" target=\"_blank\" rel=\"noopener noreferrer\">dotnetcore-examples/Program.cs at master · luoyunchong/dotnetcore-examples (github.com)</a></li>\n</ul>\n",
      "date_published": "2022-06-11T09:01:13.000Z",
      "date_modified": "2022-06-13T15:26:37.000Z",
      "authors": [
        {
          "name": "Talking Dotnet"
        }
      ],
      "tags": [
        "ASP.NET Core"
      ]
    },
    {
      "title": "七牛云对象存储",
      "url": "https://igeekfan.cn/igeekfan-docs/dotnetcore/examples/qiniu-object-storages.html",
      "id": "https://igeekfan.cn/igeekfan-docs/dotnetcore/examples/qiniu-object-storages.html",
      "content_html": "<h1 id=\"七牛云对象存储\" tabindex=\"-1\"> 七牛云对象存储</h1>\n<p>.NET Core 下集成 七牛云下的对象存储</p>\n<h2 id=\"开源地址\" tabindex=\"-1\"> 开源地址</h2>\n<p><a href=\"https://github.com/luoyunchong/dotnetcore-examples/tree/master/999-Others/OvOv.MQiniu.Core\" target=\"_blank\" rel=\"noopener noreferrer\">OvOv.MQiniu.Core</a></p>\n<h2 id=\"集成类库\" tabindex=\"-1\"> 集成类库</h2>\n<table>\n<thead>\n<tr>\n<th>基础类库集成方案</th>\n<th>开源地址</th>\n<th>文档</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><a href=\"https://github.com/luoyunchong/dotnetcore-examples/tree/master/dotnet-core-efcore\" target=\"_blank\" rel=\"noopener noreferrer\">Qiniu 云对象存储</a></td>\n<td><a href=\"https://github.com/qiniu/csharp-sdk\" target=\"_blank\" rel=\"noopener noreferrer\">.net</a>/<a href=\"https://github.com/Hello-Mango/MQiniu.Core\" target=\"_blank\" rel=\"noopener noreferrer\">.net core</a></td>\n<td><a href=\"https://developer.qiniu.com/kodo/sdk/1237/csharp\" target=\"_blank\" rel=\"noopener noreferrer\">c# sdk</a></td>\n<td>由于官网未支持. net core，所以 大家看<a href=\"https://github.com/Hello-Mango/MQiniu.Core\" target=\"_blank\" rel=\"noopener noreferrer\">社区版解决方案</a></td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"前提\" tabindex=\"-1\"> 前提</h2>\n<ul>\n<li>本地 windows 10,安装 .net core 2.2+</li>\n<li>Linux 服务器 Ubuntu Server 16+</li>\n<li>服务器安装了 Docker</li>\n<li>本地 xftp、xshell（这二个分别是 windows 传文件至 linux，执行命令行。）</li>\n</ul>\n<h2 id=\"准备\" tabindex=\"-1\"> 准备</h2>\n<p>在七牛云中自行注册后，在个人中心，密钥管理，生成自己的密钥（https://portal.qiniu.com/user/key）\nv* AK，SK 分别代表：AccessKey/SecretKey</p>\n<ul>\n<li>Bucket 中的 vant-ui，是创建对象存储时起的名字</li>\n<li>PrefixPath 中的值，随意字符串，前缀地址。</li>\n<li>Host 为：融合 CDN 测试域名,可自行绑定自己的域名，否则只有三十天免费使用时长。</li>\n</ul>\n<h2 id=\"appsettings-json-配置项\" tabindex=\"-1\"> appsettings.json 配置项</h2>\n<div><pre><code>  <span>\"Qiniu\"</span><span>:</span> <span>{</span>\n    <span>\"AK\"</span><span>:</span> <span>\"eUH1O-ft66S4XM2GIK7FGmj7czuYkcAyNGDAc-wq\"</span><span>,</span>\n    <span>\"SK\"</span><span>:</span> <span>\"4dOi1daSr2-YgofhAfWb8JaLrbgozCmgD6AUmmM9\"</span><span>,</span>\n    <span>\"Bucket\"</span><span>:</span> <span>\"vant-ui\"</span><span>,</span>\n    <span>\"PrefixPath\"</span><span>:</span> <span>\"ui\"</span><span>,</span>\n    <span>\"Host\"</span><span>:</span> <span>\"http://pu5vnz60k.bkt.clouddn.com/\"</span>\n  <span>}</span>\n</code></pre><div aria-hidden=\"true\"><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br></div></div><h2 id=\"安装包\" tabindex=\"-1\"> 安装包</h2>\n<div><pre><code>Install-Package MQiniu.Core\n</code></pre><div aria-hidden=\"true\"><span>1</span><br></div></div><h2 id=\"代码解读\" tabindex=\"-1\"> 代码解读</h2>\n<p>配置 swagger 的过程就不说了，创建 QiniuController</p>\n<div><pre><code>  <span>/// <span><span><span>&lt;</span>summary</span><span>></span></span></span>\n    <span>/// 七牛云上传服务</span>\n    <span>/// <span><span><span>&lt;/</span>summary</span><span>></span></span></span>\n    <span>[</span><span>Route</span><span>(</span><span>\"api/[controller]\"</span><span>)</span><span>]</span>\n    <span>[</span><span><span>ApiController</span></span><span>]</span>\n    <span>public</span> <span>class</span> <span>QiniuController</span> <span>:</span> <span><span>ControllerBase</span></span>\n    <span>{</span>\n        <span>private</span> <span>readonly</span> <span>IConfiguration</span> _configuration<span>;</span>\n\n        <span>public</span> <span>QiniuController</span><span>(</span><span>IConfiguration</span> configuration<span>)</span>\n        <span>{</span>\n            _configuration <span>=</span> configuration<span>;</span>\n        <span>}</span>\n\n        <span>/// <span><span><span>&lt;</span>summary</span><span>></span></span></span>\n        <span>/// 根据后台配置项，得到请求七牛云的token值，前台也可根据此token值上传至七牛云服务</span>\n        <span>/// <span><span><span>&lt;/</span>summary</span><span>></span></span></span>\n        <span>/// <span><span><span>&lt;</span>returns</span><span>></span></span><span><span><span>&lt;/</span>returns</span><span>></span></span></span>\n        <span>[</span><span>HttpGet</span><span>(</span><span>\"access_token\"</span><span>)</span><span>]</span>\n        <span>public</span> <span><span>string</span></span> <span>GetAccessToken</span><span>(</span><span>)</span>\n        <span>{</span>\n            <span>Mac</span> mac <span>=</span> <span>new</span> <span>Mac</span><span>(</span>_configuration<span>[</span><span>\"Qiniu:AK\"</span><span>]</span><span>,</span> _configuration<span>[</span><span>\"Qiniu:SK\"</span><span>]</span><span>)</span><span>;</span>\n            <span>PutPolicy</span> putPolicy <span>=</span> <span>new</span> <span>PutPolicy</span> <span>{</span> Scope <span>=</span> _configuration<span>[</span><span>\"Qiniu:Bucket\"</span><span>]</span> <span>}</span><span>;</span>\n            <span>return</span> Auth<span>.</span><span>CreateUploadToken</span><span>(</span>mac<span>,</span> putPolicy<span>.</span><span>ToJsonString</span><span>(</span><span>)</span><span>)</span><span>;</span>\n        <span>}</span>\n\n        <span>/// <span><span><span>&lt;</span>summary</span><span>></span></span></span>\n        <span>/// 上传文件至七牛云,code为200，代表上传成功,其他代表不成功</span>\n        <span>/// <span><span><span>&lt;/</span>summary</span><span>></span></span></span>\n        <span>/// <span><span><span>&lt;</span>param</span> <span>name</span><span><span>=</span><span>\"</span>file<span>\"</span></span><span>></span></span>单个文件<span><span><span>&lt;/</span>param</span><span>></span></span></span>\n        <span>/// <span><span><span>&lt;</span>returns</span><span>></span></span>new { code = 200, data =\"七牛云文件地址，包括http://....mm.png\", msg = \"上传成功\" };<span><span><span>&lt;/</span>returns</span><span>></span></span></span>\n        <span>[</span><span>HttpPost</span><span>(</span><span>\"upload\"</span><span>)</span><span>]</span>\n        <span>public</span> <span><span>dynamic</span></span> <span>Upload</span><span>(</span><span>IFormFile</span> file<span>)</span>\n        <span>{</span>\n            <span>if</span> <span>(</span>file<span>.</span>Length <span>==</span> <span>0</span><span>)</span>\n            <span>{</span>\n                <span>return</span> <span>new</span> <span>{</span> code <span>=</span> <span>1</span><span>,</span> msg <span>=</span> <span>\"文件为空\"</span> <span>}</span><span>;</span>\n            <span>}</span>\n\n            <span>FormUploader</span> upload <span>=</span> <span>new</span> <span>FormUploader</span><span>(</span><span>new</span> <span>Config</span><span>(</span><span>)</span>\n            <span>{</span>\n                Zone <span>=</span> Zone<span>.</span>ZONE_CN_South<span>,</span><span>//华南</span>\n                UseHttps <span>=</span> <span>true</span>\n            <span>}</span><span>)</span><span>;</span>\n\n            <span><span>var</span></span> fileName <span>=</span> ContentDispositionHeaderValue\n                <span>.</span><span>Parse</span><span>(</span>file<span>.</span>ContentDisposition<span>)</span>\n                <span>.</span>FileName<span>.</span><span>Trim</span><span>(</span><span>)</span><span>;</span>\n\n            <span><span>string</span></span> qiniuName <span>=</span> _configuration<span>[</span><span>\"Qiniu:PrefixPath\"</span><span>]</span> <span>+</span> <span>\"/\"</span> <span>+</span> DateTime<span>.</span>Now<span>.</span><span>ToString</span><span>(</span><span>\"yyyyMMddHHmmssffffff\"</span><span>)</span> <span>+</span> fileName<span>;</span>\n            <span>Stream</span> stream <span>=</span> file<span>.</span><span>OpenReadStream</span><span>(</span><span>)</span><span>;</span>\n            <span>HttpResult</span> result <span>=</span> upload<span>.</span><span>UploadStream</span><span>(</span>stream<span>,</span> qiniuName<span>,</span> <span>GetAccessToken</span><span>(</span><span>)</span><span>,</span> <span>null</span><span>)</span><span>;</span>\n\n            <span>if</span> <span>(</span>result<span>.</span>Code <span>==</span> <span>200</span><span>)</span>\n            <span>{</span>\n                <span>return</span> <span>new</span> <span>{</span> code <span>=</span> <span>200</span><span>,</span> data <span>=</span> _configuration<span>[</span><span>\"Qiniu:Host\"</span><span>]</span> <span>+</span> qiniuName<span>,</span> msg <span>=</span> <span>\"上传成功\"</span> <span>}</span><span>;</span>\n            <span>}</span>\n\n            <span>return</span> <span>new</span> <span>{</span> code <span>=</span> <span>1</span><span>,</span> msg <span>=</span> <span>\"上传失败\"</span> <span>}</span><span>;</span>\n        <span>}</span>\n    <span>}</span>\n\n</code></pre><div aria-hidden=\"true\"><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br><span>24</span><br><span>25</span><br><span>26</span><br><span>27</span><br><span>28</span><br><span>29</span><br><span>30</span><br><span>31</span><br><span>32</span><br><span>33</span><br><span>34</span><br><span>35</span><br><span>36</span><br><span>37</span><br><span>38</span><br><span>39</span><br><span>40</span><br><span>41</span><br><span>42</span><br><span>43</span><br><span>44</span><br><span>45</span><br><span>46</span><br><span>47</span><br><span>48</span><br><span>49</span><br><span>50</span><br><span>51</span><br><span>52</span><br><span>53</span><br><span>54</span><br><span>55</span><br><span>56</span><br><span>57</span><br><span>58</span><br><span>59</span><br><span>60</span><br><span>61</span><br><span>62</span><br></div></div><p>Upload 方法中，Zone.ZONE_CN_South，代表华南，所以创建对象存储时要注意，请选择与此相同的位置（华南），或根据实际情况修改 Zone 所在地区的枚举值即可。</p>\n<div><pre><code><span>FormUploader</span> upload <span>=</span> <span>new</span> <span>FormUploader</span><span>(</span><span>new</span> <span>Config</span><span>(</span><span>)</span>\n<span>{</span>\n    Zone <span>=</span> Zone<span>.</span>ZONE_CN_South<span>,</span><span>//华南</span>\n    UseHttps <span>=</span> <span>true</span>\n<span>}</span><span>)</span><span>;</span>\n\n</code></pre><div aria-hidden=\"true\"><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br></div></div><h2 id=\"发布至-linux-下的-docker\" tabindex=\"-1\"> 发布至 Linux 下的 Docker</h2>\n<p>双击 publish.bat，生成的文件夹为如下：</p>\n<p><img src=\"https://upload-images.jianshu.io/upload_images/2001974-bcd72707e4fcc7f8.png?imageMogr2/auto-orient/strip|imageView2/2/w/1240\" alt=\"image\" loading=\"lazy\"></p>\n<p>修改项目名为 qiniu-web，复制 至 linux 服务器中，（xftp 工具）\n<img src=\"https://upload-images.jianshu.io/upload_images/2001974-48771e9fce281262.png?imageMogr2/auto-orient/strip|imageView2/2/w/1240\" alt=\"image\" loading=\"lazy\"></p>\n<p>使用 xshell 远程登录后，进入 root 权限。</p>\n<div><pre><code>root@VM-37-104-ubuntu:/home/ubuntu/<span># sudo su</span>\nroot@VM-37-104-ubuntu:/home/ubuntu/<span># cd qiniu-web</span>\n</code></pre><div aria-hidden=\"true\"><span>1</span><br><span>2</span><br></div></div><p>前置条件，在 ubuntu 上安装好了 docker。并且正常运行。</p>\n<p>-d 代表后台运行，此时将对外显露 5000 端口运行，5000 是运行后，docker 对外的端口，80 是这个服务对外的端口，其中 Dockerfile 存在语句 EXPOSE 80</p>\n<div><pre><code><span>docker</span> build -t igeekfan/qiniu <span>.</span>     <span>#生成images</span>\n<span>docker</span> run -d -p <span>5000</span>:80 igeekfan/qiniu  <span># 生成 container 并运行在5000端口</span>\n</code></pre><div aria-hidden=\"true\"><span>1</span><br><span>2</span><br></div></div><p>此时打开 浏览器， ip+端口 5000 即可访问服务，请加/swagger。</p>\n<p>本项目已部署至服务器 <a href=\"http://122.152.192.161:5000/swagger/index.html\" target=\"_blank\" rel=\"noopener noreferrer\">http://122.152.192.161:5000/swagger/index.html</a></p>\n<h2 id=\"运行结果\" tabindex=\"-1\"> 运行结果</h2>\n<p><img src=\"https://upload-images.jianshu.io/upload_images/2001974-2b72cc6338db1434.png?imageMogr2/auto-orient/strip|imageView2/2/w/1240\" alt=\"image.png\" loading=\"lazy\"></p>\n<h2 id=\"参考\" tabindex=\"-1\"> 参考</h2>\n<ul>\n<li>.NET Core 版本七牛云 SDK 使用<a href=\"https://www.cnblogs.com/OMango/p/8447480.html\" target=\"_blank\" rel=\"noopener noreferrer\">https://www.cnblogs.com/OMango/p/8447480.html</a></li>\n<li>.NET Core 部署至 Linux 下的 Docker <a href=\"http://blog.igeekfan.cn/2019/06/09/dotnetcore/aspnetcore-Deploy-To-Docker-Ubuntu/\" target=\"_blank\" rel=\"noopener noreferrer\">http://blog.igeekfan.cn/2019/06/09/dotnetcore/aspnetcore-Deploy-To-Docker-Ubuntu/</a></li>\n</ul>\n",
      "image": "https://upload-images.jianshu.io/upload_images/2001974-bcd72707e4fcc7f8.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240",
      "date_published": "2022-06-02T18:18:50.000Z",
      "date_modified": "2022-06-02T18:18:50.000Z",
      "authors": [],
      "tags": []
    },
    {
      "title": "aspnetcore identity freesql 的实现",
      "url": "https://igeekfan.cn/igeekfan-docs/dotnetcore/freekit/AspNetCore.Identity.FreeSql.html",
      "id": "https://igeekfan.cn/igeekfan-docs/dotnetcore/freekit/AspNetCore.Identity.FreeSql.html",
      "content_html": "<h1 id=\"aspnetcore-identity-freesql-的实现\" tabindex=\"-1\"> aspnetcore identity freesql 的实现</h1>\n<h2 id=\"igeekfan-aspnetcore-identity-freesql\" tabindex=\"-1\"> IGeekFan.AspNetCore.Identity.FreeSql</h2>\n<p><code>asp.net core 6</code> 的<code>identity</code>的<code>freesql</code>实现</p>\n<ul>\n<li>安装包</li>\n</ul>\n<div><pre><code>dotnet <span>add</span> package IGeekFan.AspNetCore.Identity.FreeSql\n</code></pre><div aria-hidden=\"true\"><span>1</span><br></div></div><ul>\n<li>新增 FreeSql的Provider 相关包</li>\n</ul>\n<div><pre><code>dotnet <span>add</span> package FreeSql.Provider.MySqlConnector\n</code></pre><div aria-hidden=\"true\"><span>1</span><br></div></div><h3 id=\"扩展用户、角色\" tabindex=\"-1\"> 扩展用户、角色</h3>\n<div><pre><code><span>public</span> <span>class</span> <span>AppUser</span> <span>:</span> <span><span>IdentityUser<span>&lt;</span>Guid<span>></span></span></span>\n<span>{</span>\n<span>}</span>\n<span>public</span> <span>class</span> <span>AppRole</span> <span>:</span> <span><span>IdentityRole<span>&lt;</span>Guid<span>></span></span></span>\n<span>{</span>\n\n<span>}</span>\n<span>public</span> <span>class</span> <span>IdentityContext</span> <span>:</span> <span><span>IdentityDbContext<span>&lt;</span>AppUser<span>,</span> AppRole<span>,</span> Guid<span>></span></span></span>\n<span>{</span>\n    <span>public</span> <span>IdentityContext</span><span>(</span><span>IOptions<span>&lt;</span>IdentityOptions<span>></span></span> identityOptions<span>,</span> <span>IFreeSql</span> fsql<span>,</span> <span>DbContextOptions</span> options<span>)</span>\n    <span>:</span> <span>base</span><span>(</span>identityOptions<span>.</span>Value<span>,</span> fsql<span>,</span> options<span>)</span>\n    <span>{</span>\n    <span>}</span>\n\n    <span>protected</span> <span>override</span> <span><span>void</span></span> <span>OnConfiguring</span><span>(</span><span>DbContextOptionsBuilder</span> builder<span>)</span>\n    <span>{</span>\n        <span>//这里直接指定一个静态的 IFreeSql 对象即可，切勿重新 Build()</span>\n    <span>}</span>\n\n    <span>protected</span> <span>override</span> <span><span>void</span></span> <span>OnModelCreating</span><span>(</span><span>ICodeFirst</span> codefirst<span>)</span>\n    <span>{</span>\n        <span>base</span><span>.</span><span>OnModelCreating</span><span>(</span>codefirst<span>)</span><span>;</span>\n    <span>}</span>\n<span>}</span>\n\n</code></pre><div aria-hidden=\"true\"><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br><span>24</span><br><span>25</span><br></div></div><h3 id=\"配置用户、角色的fulentapi\" tabindex=\"-1\"> 配置用户、角色的FulentAPI</h3>\n<div><pre><code><span>public</span> <span>class</span> <span>AppUserConfiguration</span> <span>:</span> <span><span>IEntityTypeConfiguration<span>&lt;</span>AppUser<span>></span></span></span>\n<span>{</span>\n    <span>public</span> <span><span>void</span></span> <span>Configure</span><span>(</span><span>EfCoreTableFluent<span>&lt;</span>AppUser<span>></span></span> model<span>)</span>\n    <span>{</span>\n        model<span>.</span><span>ToTable</span><span>(</span><span>\"app_user\"</span><span>)</span><span>;</span>\n    <span>}</span>\n<span>}</span>\n<span>public</span> <span>class</span> <span>AppRoleConfiguration</span> <span>:</span> <span><span>IEntityTypeConfiguration<span>&lt;</span>AppRole<span>></span></span></span>\n<span>{</span>\n    <span>public</span> <span><span>void</span></span> <span>Configure</span><span>(</span><span>EfCoreTableFluent<span>&lt;</span>AppRole<span>></span></span> model<span>)</span>\n    <span>{</span>\n        model<span>.</span><span>ToTable</span><span>(</span><span>\"app_role\"</span><span>)</span><span>;</span>\n    <span>}</span>\n<span>}</span>\n</code></pre><div aria-hidden=\"true\"><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br></div></div><ul>\n<li>appsettings.json\n该配置通过方法<code>UseConnectionString</code>读取如下配置</li>\n</ul>\n<div><pre><code><span>\"ConnectionStrings\"</span><span>:</span> <span>{</span>\n    <span>\"MySql\"</span><span>:</span> <span>\"Data Source=localhost;Port=3306;User ID=root;Password=root;Initial Catalog=file;Charset=utf8mb4;SslMode=none;Max pool size=1;Connection LifeTime=20\"</span>\n<span>}</span>\n</code></pre><div aria-hidden=\"true\"><span>1</span><br><span>2</span><br><span>3</span><br></div></div><h3 id=\"配置-identity-freesql\" tabindex=\"-1\"> 配置 Identity+FreeSql</h3>\n<ul>\n<li>新增一个扩展方法，引用 aspnetcore identity 相关服务</li>\n</ul>\n<div><pre><code><span>public</span> <span>static</span> <span>IServiceCollection</span> <span>AddFreeSql</span><span>(</span><span>this</span> <span>IServiceCollection</span> services<span>,</span> <span>IConfiguration</span> configuration<span>)</span>\n<span>{</span>\n    <span>IFreeSql</span> fsql <span>=</span> <span>new</span> <span>FreeSqlBuilder</span><span>(</span><span>)</span>\n            <span>.</span><span>UseConnectionString</span><span>(</span>DataType<span>.</span>MySql<span>,</span> configuration<span>[</span><span>\"ConnectionStrings:MySql\"</span><span>]</span><span>)</span>\n            <span>.</span><span>UseNameConvert</span><span>(</span>NameConvertType<span>.</span>PascalCaseToUnderscoreWithLower<span>)</span>\n            <span>.</span><span>UseAutoSyncStructure</span><span>(</span><span>true</span><span>)</span> <span>//自动同步实体结构到数据库，FreeSql不会扫描程序集，只有CRUD时才会生成表。</span>\n            <span>.</span><span>UseMonitorCommand</span><span>(</span>cmd <span>=></span>\n            <span>{</span>\n                Trace<span>.</span><span>WriteLine</span><span>(</span>cmd<span>.</span>CommandText <span>+</span> <span>\";\"</span><span>)</span><span>;</span>\n            <span>}</span><span>)</span>\n            <span>.</span><span>Build</span><span>(</span><span>)</span><span>;</span>\n    <span>//软删除</span>\n    fsql<span>.</span>GlobalFilter<span>.</span><span><span>Apply</span><span><span>&lt;</span>ISoftDelete<span>></span></span></span><span>(</span><span>\"IsDeleted\"</span><span>,</span> a <span>=></span> a<span>.</span>IsDeleted <span>==</span> <span>false</span><span>)</span><span>;</span>\n\n    services<span>.</span><span><span>AddSingleton</span><span><span>&lt;</span>IFreeSql<span>></span></span></span><span>(</span>fsql<span>)</span><span>;</span>\n    services<span>.</span><span>AddFreeRepository</span><span>(</span><span>)</span><span>;</span>\n    services<span>.</span><span><span>AddScoped</span><span><span>&lt;</span>UnitOfWorkManager<span>></span></span></span><span>(</span><span>)</span><span>;</span>\n\n    <span>//只有实例化了ToDoContext，才能正常调用OnModelCreating，不然直接使用仓储，无法调用DbContext中的OnModelCreating方法，，配置的TodoConfiguration 就会没有生效</span>\n    services<span>.</span><span><span>AddFreeDbContext</span><span><span>&lt;</span>IdentityContext<span>></span></span></span><span>(</span>options <span>=></span> options\n                <span>.</span><span>UseFreeSql</span><span>(</span>fsql<span>)</span>\n                <span>.</span><span>UseOptions</span><span>(</span><span>new</span> <span>DbContextOptions</span><span>(</span><span>)</span>\n                <span>{</span>\n                    EnableAddOrUpdateNavigateList <span>=</span> <span>true</span>\n                <span>}</span><span>)</span>\n    <span>)</span><span>;</span>\n\n    services<span>.</span><span><span>AddIdentityCore</span><span><span>&lt;</span>AppUser<span>></span></span></span><span>(</span>options <span>=></span> options<span>.</span>SignIn<span>.</span>RequireConfirmedAccount <span>=</span> <span>true</span><span>)</span>\n            <span>.</span><span><span>AddFreeSqlStores</span><span><span>&lt;</span>IdentityContext<span>></span></span></span><span>(</span><span>)</span><span>;</span>\n\n    <span>//fsql.CodeFirst.ApplyConfiguration(new TodoConfiguration());</span>\n\n    <span>return</span> services<span>;</span>\n<span>}</span>\n</code></pre><div aria-hidden=\"true\"><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br><span>24</span><br><span>25</span><br><span>26</span><br><span>27</span><br><span>28</span><br><span>29</span><br><span>30</span><br><span>31</span><br><span>32</span><br><span>33</span><br><span>34</span><br></div></div>",
      "date_published": "2022-06-02T18:18:50.000Z",
      "date_modified": "2022-06-29T19:17:23.000Z",
      "authors": [],
      "tags": []
    },
    {
      "title": "基础包",
      "url": "https://igeekfan.cn/igeekfan-docs/dotnetcore/freekit/Core.html",
      "id": "https://igeekfan.cn/igeekfan-docs/dotnetcore/freekit/Core.html",
      "content_html": "<h1 id=\"基础包\" tabindex=\"-1\"> 基础包</h1>\n<h2 id=\"安装-igeekfan-freekit\" tabindex=\"-1\"> 安装 IGeekFan.FreeKit</h2>\n<p>该项目无任何依赖</p>\n<div><pre><code>dotnet <span>add</span> package IGeekFan.FreeKit\n</code></pre><div aria-hidden=\"true\"><span>1</span><br></div></div><h3 id=\"实体审计类\" tabindex=\"-1\"> 实体审计类</h3>\n<p>仅包含一些基础的审计类</p>\n<ul>\n<li>Entity</li>\n<li>IEntity</li>\n<li>IEntityDto</li>\n<li>ICreateAduitEntity</li>\n<li>IUpdateAuditEntity</li>\n<li>IDeleteAduitEntity</li>\n<li>ISoftDelete</li>\n<li>IFullAduitEntity</li>\n</ul>\n<h3 id=\"依赖注入接口\" tabindex=\"-1\"> 依赖注入接口</h3>\n<p>只是空接口</p>\n<ul>\n<li>ITransientDependency</li>\n<li>IScopedDependency</li>\n<li>ISingletonDependency</li>\n</ul>\n",
      "date_published": "2022-06-02T18:18:50.000Z",
      "date_modified": "2022-06-29T19:17:23.000Z",
      "authors": [],
      "tags": []
    },
    {
      "title": "Email 邮件",
      "url": "https://igeekfan.cn/igeekfan-docs/dotnetcore/freekit/Email.html",
      "id": "https://igeekfan.cn/igeekfan-docs/dotnetcore/freekit/Email.html",
      "content_html": "<h1 id=\"email-邮件\" tabindex=\"-1\"> Email 邮件</h1>\n<h2 id=\"igeekfan-freekit-email\" tabindex=\"-1\"> IGeekFan.FreeKit.Email</h2>\n<p>该包是一个独立的开发包，内部由 MailKit 实现发送邮件。</p>\n<ol>\n<li>安装包</li>\n</ol>\n<div><pre><code>dotnet <span>add</span> package IGeekFan.FreeKit.Email\n</code></pre><div aria-hidden=\"true\"><span>1</span><br></div></div><ul>\n<li>ConfigureServices 方法</li>\n</ul>\n<div><pre><code>    Services<span>.</span><span><span>Configure</span><span><span>&lt;</span>MailKitOptions<span>></span></span></span><span>(</span>Configuration<span>.</span><span>GetSection</span><span>(</span><span>\"MailKitOptions\"</span><span>)</span><span>)</span><span>;</span>\n</code></pre><div aria-hidden=\"true\"><span>1</span><br></div></div><ul>\n<li>appsettings.json</li>\n</ul>\n<div><pre><code>  <span>\"MailKitOptions\"</span><span>:</span> <span>{</span>\n    <span>\"Host\"</span><span>:</span> <span>\"smtp.163.com\"</span><span>,</span>\n    <span>\"Port\"</span><span>:</span> <span>\"25\"</span><span>,</span>\n    <span>\"EnableSsl\"</span><span>:</span> <span>true</span><span>,</span>\n    <span>\"UserName\"</span><span>:</span> <span>\"igeekfan@163.com\"</span><span>,</span>\n    <span>\"Password\"</span><span>:</span> <span>\"\"</span><span>,</span>\n    <span>\"Domain\"</span><span>:</span> <span>\"\"</span>\n  <span>}</span><span>,</span>\n</code></pre><div aria-hidden=\"true\"><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br></div></div><ul>\n<li>业务逻辑</li>\n</ul>\n<div><pre><code>    <span>public</span> <span>interface</span> <span>IAccountService</span>\n    <span>{</span>\n        <span>Task</span> <span>SendEmailCode</span><span>(</span><span>RegisterDto</span> registerDto<span>)</span><span>;</span>\n    <span>}</span>\n    <span>public</span> <span>class</span> <span>AccountService</span> <span>:</span> <span><span>IAccountService</span></span>\n    <span>{</span>\n        <span>private</span> <span>readonly</span> <span>IEmailSender</span> _emailSender<span>;</span>\n        <span>private</span> <span>readonly</span> <span>MailKitOptions</span> _mailKitOptions<span>;</span>\n\n        <span>public</span> <span>AccountService</span><span>(</span>\n            <span>IEmailSender</span> emailSender<span>,</span>\n            <span>IOptions<span>&lt;</span>MailKitOptions<span>></span></span> options<span>)</span>\n        <span>{</span>\n            _emailSender <span>=</span> emailSender<span>;</span>\n            _mailKitOptions <span>=</span> options<span>.</span>Value<span>;</span>\n        <span>}</span>\n        <span>public</span> <span>async</span> <span>Task</span> <span>SendEmailCode</span><span>(</span><span>RegisterDto</span> registerDto<span>)</span>\n        <span>{</span>\n            <span><span>var</span></span> message <span>=</span> <span>new</span> <span>MimeMessage</span><span>(</span><span>)</span><span>;</span>\n            message<span>.</span>From<span>.</span><span>Add</span><span>(</span><span>new</span> <span>MailboxAddress</span><span>(</span>_mailKitOptions<span>.</span>UserName<span>,</span> _mailKitOptions<span>.</span>UserName<span>)</span><span>)</span><span>;</span>\n            message<span>.</span>To<span>.</span><span>Add</span><span>(</span><span>new</span> <span>MailboxAddress</span><span>(</span>registerDto<span>.</span>Nickname<span>,</span> registerDto<span>.</span>Email<span>)</span><span>)</span><span>;</span>\n            message<span>.</span>Subject <span>=</span> <span><span>$\"VVLOG-你的验证码是\"</span></span><span>;</span>\n\n            <span><span>string</span></span> uuid <span>=</span> Guid<span>.</span><span>NewGuid</span><span>(</span><span>)</span><span>.</span><span>ToString</span><span>(</span><span>)</span><span>;</span>\n            <span>await</span> RedisHelper<span>.</span><span>SetAsync</span><span>(</span><span>\"SendEmailCode-\"</span> <span>+</span> registerDto<span>.</span>Email<span>,</span> uuid<span>,</span> <span>30</span> <span>*</span> <span>60</span><span>)</span><span>;</span>\n\n            <span><span>int</span></span> rand6Value <span>=</span> <span>new</span> <span>Random</span><span>(</span><span>)</span><span>.</span><span>Next</span><span>(</span><span>100000</span><span>,</span> <span>999999</span><span>)</span><span>;</span>\n\n            message<span>.</span>Body <span>=</span> <span>new</span> <span>TextPart</span><span>(</span><span>\"html\"</span><span>)</span>\n            <span>{</span>\n                Text <span>=</span> <span><span>$@\"</span><span><span>{</span><span>registerDto<span>.</span>Nickname</span><span>}</span></span><span>,您好!&lt;/br>你此次验证码如下，请在 30 分钟内输入验证码进行下一步操作。&lt;/br>如非你本人操作，请忽略此邮件。&lt;/br></span><span><span>{</span><span>rand6Value</span><span>}</span></span><span>\"</span></span>\n            <span>}</span><span>;</span>\n\n\n            <span>await</span> _emailSender<span>.</span><span>SendAsync</span><span>(</span>message<span>)</span><span>;</span>\n        <span>}</span>\n    <span>}</span>\n</code></pre><div aria-hidden=\"true\"><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br><span>24</span><br><span>25</span><br><span>26</span><br><span>27</span><br><span>28</span><br><span>29</span><br><span>30</span><br><span>31</span><br><span>32</span><br><span>33</span><br><span>34</span><br><span>35</span><br><span>36</span><br><span>37</span><br></div></div><p>简单的实体，在发送之前应验证必填项、密码强度和邮件格式等</p>\n<div><pre><code>    <span>public</span> <span>class</span> <span>RegisterDto</span>\n    <span>{</span>\n        <span>/// <span><span><span>&lt;</span>summary</span><span>></span></span></span>\n        <span>/// 昵称</span>\n        <span>/// <span><span><span>&lt;/</span>summary</span><span>></span></span></span>\n        <span>public</span> <span><span>string</span></span> Nickname <span>{</span> <span>get</span><span>;</span> <span>set</span><span>;</span> <span>}</span>\n        <span>/// <span><span><span>&lt;</span>summary</span><span>></span></span></span>\n        <span>/// 密码</span>\n        <span>/// <span><span><span>&lt;/</span>summary</span><span>></span></span></span>\n        <span>public</span> <span><span>string</span></span> Password <span>{</span> <span>get</span><span>;</span> <span>set</span><span>;</span> <span>}</span>\n        <span>/// <span><span><span>&lt;</span>summary</span><span>></span></span></span>\n        <span>/// 邮件</span>\n        <span>/// <span><span><span>&lt;/</span>summary</span><span>></span></span></span>\n        <span>public</span> <span><span>string</span></span> Email <span>{</span> <span>get</span><span>;</span> <span>set</span><span>;</span> <span>}</span>\n   <span>}</span>\n</code></pre><div aria-hidden=\"true\"><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br></div></div><p><strong>IEmailSender</strong>还不能直接使用。</p>\n<p>有二种方式</p>\n<p>1.使用 ASPNETCore 默认的 DI。</p>\n<div><pre><code>    services.AddTransient&lt;IEmailSender, EmailSender>();\n</code></pre><div aria-hidden=\"true\"><span>1</span><br></div></div><p>2.由于继承了接口<strong>ITransientDependency</strong>，可通过<code>IGeekFan.FreeKit.Extras</code>依赖包中，默认的注册机制，通过 Autofac 配置继承此接口的接口将注入到依赖注入的集合中。</p>\n<ul>\n<li>增加依赖包</li>\n</ul>\n<div><pre><code>dotnet <span>add</span> package IGeekFan.FreeKit.Extras\n</code></pre><div aria-hidden=\"true\"><span>1</span><br></div></div><ul>\n<li>配置依赖</li>\n</ul>\n<div><pre><code>builder<span>.</span>Host\n    <span>.</span><span>UseServiceProviderFactory</span><span>(</span><span>new</span> <span>AutofacServiceProviderFactory</span><span>(</span><span>)</span><span>)</span>\n    <span>.</span><span><span>ConfigureContainer</span><span><span>&lt;</span>ContainerBuilder<span>></span></span></span><span>(</span><span>(</span>webBuilder<span>,</span> containerBuilder<span>)</span> <span>=></span>\n    <span>{</span>\n        containerBuilder<span>.</span><span>RegisterModule</span><span>(</span><span>new</span> <span>FreeKitModule</span><span>(</span><span>typeof</span><span>(</span><span>FreeKitModule</span><span>)</span><span>,</span> <span>typeof</span><span>(</span><span>Program</span><span>)</span><span>,</span><span>typeof</span><span>(</span><span>MailKitOptions</span><span>)</span><span>)</span><span>)</span>\n    <span>}</span><span>)</span><span>;</span>\n</code></pre><div aria-hidden=\"true\"><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br></div></div>",
      "date_published": "2022-06-02T18:18:50.000Z",
      "date_modified": "2022-06-02T18:18:50.000Z",
      "authors": [],
      "tags": []
    },
    {
      "title": "Extras 扩展包",
      "url": "https://igeekfan.cn/igeekfan-docs/dotnetcore/freekit/Extras.html",
      "id": "https://igeekfan.cn/igeekfan-docs/dotnetcore/freekit/Extras.html",
      "content_html": "<h1 id=\"extras-扩展包\" tabindex=\"-1\"> Extras 扩展包</h1>\n<p>该项目是基于 FreeSql 实现的一些扩展包、AOP 事务，当前用户，简化依赖注入</p>\n<ul>\n<li>IGeekFan.FreeKit.Extras的依赖项</li>\n</ul>\n<div><pre><code><span><span><span>&lt;</span>PackageReference</span> <span>Include</span><span><span>=</span><span>\"</span>FreeSql.DbContext<span>\"</span></span> <span>Version</span><span><span>=</span><span>\"</span>3.2.664<span>\"</span></span> <span>/></span></span>\n<span><span><span>&lt;</span>PackageReference</span> <span>Include</span><span><span>=</span><span>\"</span>Autofac.Extensions.DependencyInjection<span>\"</span></span> <span>Version</span><span><span>=</span><span>\"</span>8.0.0<span>\"</span></span> <span>/></span></span>\n<span><span><span>&lt;</span>PackageReference</span> <span>Include</span><span><span>=</span><span>\"</span>Autofac.Extras.DynamicProxy<span>\"</span></span> <span>Version</span><span><span>=</span><span>\"</span>6.0.1<span>\"</span></span> <span>/></span></span>\n<span><span><span>&lt;</span>PackageReference</span> <span>Include</span><span><span>=</span><span>\"</span>Castle.Core.AsyncInterceptor<span>\"</span></span> <span>Version</span><span><span>=</span><span>\"</span>2.1.0<span>\"</span></span> <span>/></span></span>\n</code></pre><div aria-hidden=\"true\"><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br></div></div><p>根据自己访问数据库的不同，安装对应的<a href=\"http://freesql.net/guide/install.html#packages\" target=\"_blank\" rel=\"noopener noreferrer\">Provider</a></p>\n<div><pre><code>dotnet <span>add</span> package IGeekFan.FreeKit.Extras\ndotnet <span>add</span> package FreeSql.Provider.Sqlite\n</code></pre><div aria-hidden=\"true\"><span>1</span><br><span>2</span><br></div></div><h2 id=\"一些扩展包\" tabindex=\"-1\"> 一些扩展包</h2>\n<ul>\n<li>简化 FreeSql 单库的配置：UseConnectionString 扩展方法</li>\n<li>基于特性标签的 AOP 事务</li>\n<li>基于接口的注入</li>\n<li>通用 CRUD 的</li>\n<li>Security 当前登录人信息</li>\n<li>FluentAPI 基于接口的配置实体</li>\n<li>注入以 Service 为后缀接口所在的程序集</li>\n<li>CaseQuery 支持 Get 请求参数 key，大小驼峰转换</li>\n</ul>\n<h3 id=\"简化-freesql-单库的配置\" tabindex=\"-1\"> 简化 FreeSql 单库的配置</h3>\n<p>UseConnectionString 扩展方法，DefaultDB 配置 0 代表使用配置串 MySql。需要安装<code>FreeSql.Provider.MySqlConnector</code>,<code>DefaultDB</code>配置的值实际为<code>FreeSql.DataType</code>的枚举值</p>\n<ul>\n<li>appsettings.json</li>\n</ul>\n<div><pre><code><span>\"ConnectionStrings\"</span><span>:</span> <span>{</span>\n    <span>\"DefaultDB\"</span><span>:</span> <span>\"0\"</span><span>,</span>\n    <span>\"DataType\"</span><span>:</span> <span>{</span>\n        <span>\"MySql\"</span><span>:</span> <span>0</span><span>,</span>\n        <span>\"SqlServer\"</span><span>:</span> <span>1</span><span>,</span>\n        <span>\"PostgreSQL\"</span><span>:</span> <span>2</span><span>,</span>\n        <span>\"Oracle\"</span><span>:</span> <span>3</span><span>,</span>\n        <span>\"Sqlite\"</span><span>:</span> <span>4</span>\n     <span>}</span><span>,</span>\n    <span>\"MySql\"</span><span>:</span> <span>\"Data Source=localhost;Port=3306;User ID=root;Password=root;Initial Catalog=freekit;Charset=utf8mb4;SslMode=none;Max pool size=1;Connection LifeTime=20\"</span><span>,</span>\n    <span>\"SqlServer\"</span><span>:</span> <span>\"Data Source=.;User ID=sa;Password=123456;Integrated Security=True;Initial Catalog=LinCMS;Pooling=true;Min Pool Size=1\"</span><span>,</span>\n    <span>\"PostgreSQL\"</span><span>:</span> <span>\"Host=localhost;Port=5432;Username=postgres;Password=123456; Database=lincms;Pooling=true;Minimum Pool Size=1\"</span><span>,</span>\n    <span>\"Oracle\"</span><span>:</span> <span>\"user id=user1;password=123456; data source=//127.0.0.1:1521/ORCL;Pooling=true;Min Pool Size=1\"</span><span>,</span>\n    <span>\"Sqlite\"</span><span>:</span> <span>\"Data Source=|DataDirectory|\\\\freekit.db; Attachs=freekit.db; Pooling=true;Min Pool Size=1\"</span>\n    <span>}</span>\n</code></pre><div aria-hidden=\"true\"><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br></div></div><div><pre><code>    <span>public</span> <span>static</span> <span>IServiceCollection</span> <span>AddFreeSql</span><span>(</span><span>this</span> <span>IServiceCollection</span> services<span>,</span> <span>IConfiguration</span> configuration<span>)</span>\n    <span>{</span>\n        <span>IFreeSql</span> fsql <span>=</span> <span>new</span> <span>FreeSqlBuilder</span><span>(</span><span>)</span>\n                  <span>.</span><span>UseConnectionString</span><span>(</span>configuration<span>)</span>\n                  <span>.</span><span>UseNameConvert</span><span>(</span>NameConvertType<span>.</span>PascalCaseToUnderscoreWithLower<span>)</span>\n                  <span>.</span><span>UseAutoSyncStructure</span><span>(</span><span>true</span><span>)</span> <span>//自动同步实体结构到数据库，FreeSql不会扫描程序集，只有CRUD时才会生成表。</span>\n                  <span>.</span><span>UseMonitorCommand</span><span>(</span>cmd <span>=></span>\n                  <span>{</span>\n                      Trace<span>.</span><span>WriteLine</span><span>(</span>cmd<span>.</span>CommandText <span>+</span> <span>\";\"</span><span>)</span><span>;</span>\n                  <span>}</span><span>)</span>\n                  <span>.</span><span>Build</span><span>(</span><span>)</span><span>;</span>\n\n        fsql<span>.</span>GlobalFilter<span>.</span><span><span>Apply</span><span><span>&lt;</span>ISoftDelete<span>></span></span></span><span>(</span><span>\"IsDeleted\"</span><span>,</span> a <span>=></span> a<span>.</span>IsDeleted <span>==</span> <span>false</span><span>)</span><span>;</span>\n\n        services<span>.</span><span><span>AddSingleton</span><span><span>&lt;</span>IFreeSql<span>></span></span></span><span>(</span>fsql<span>)</span><span>;</span>\n        services<span>.</span><span>AddFreeRepository</span><span>(</span><span>)</span><span>;</span>\n        services<span>.</span><span><span>AddScoped</span><span><span>&lt;</span>UnitOfWorkManager<span>></span></span></span><span>(</span><span>)</span><span>;</span>\n\n        <span>return</span> services<span>;</span>\n    <span>}</span>\n</code></pre><div aria-hidden=\"true\"><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br></div></div><h3 id=\"基于特性标签的-aop-事务\" tabindex=\"-1\"> 基于特性标签的 AOP 事务</h3>\n<ul>\n<li>特性标签 <strong>[Transactional]</strong></li>\n</ul>\n<p>通过 Autofac 配置哪些类需要基于特性标签的 AOP 事务</p>\n<div><pre><code>\n</code></pre><div aria-hidden=\"true\"><span>1</span><br></div></div><p>如果依旧是 Startup 的模式，可通过 ConfigureContainer 配置服务</p>\n<ul>\n<li>Program.cs 配置</li>\n</ul>\n<div><pre><code>    Host<span>.</span><span>CreateDefaultBuilder</span><span>(</span>args<span>)</span>\n                <span>.</span><span>UseServiceProviderFactory</span><span>(</span><span>new</span> <span>AutofacServiceProviderFactory</span><span>(</span><span>)</span><span>)</span>\n                <span>.</span><span>ConfigureWebHostDefaults</span><span>(</span>webBuilder <span>=></span>\n                <span>{</span>\n                    webBuilder<span>.</span><span><span>UseStartup</span><span><span>&lt;</span>Startup<span>></span></span></span><span>(</span><span>)</span><span>;</span>\n                <span>}</span><span>)</span><span>;</span>\n</code></pre><div aria-hidden=\"true\"><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br></div></div><ul>\n<li>Startup.cs 配置</li>\n</ul>\n<div><pre><code>    <span>public</span> <span><span>void</span></span> <span>ConfigureContainer</span><span>(</span><span>ContainerBuilder</span> builder<span>)</span>\n    <span>{</span>\n        builder<span>.</span><span>RegisterModule</span><span>(</span><span>new</span> <span>ServiceModule</span><span>(</span><span>)</span><span>)</span><span>;</span>\n    <span>}</span>\n</code></pre><div aria-hidden=\"true\"><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br></div></div><p>或</p>\n<div><pre><code>builder<span>.</span>Host\n    <span>.</span><span>UseServiceProviderFactory</span><span>(</span><span>new</span> <span>AutofacServiceProviderFactory</span><span>(</span><span>)</span><span>)</span>\n    <span>.</span><span><span>ConfigureContainer</span><span><span>&lt;</span>ContainerBuilder<span>></span></span></span><span>(</span><span>(</span>webBuilder<span>,</span> containerBuilder<span>)</span> <span>=></span>\n    <span>{</span>\n        containerBuilder<span>.</span><span>RegisterModule</span><span>(</span><span>new</span> <span>ServiceModule</span><span>(</span><span>)</span><span>)</span><span>;</span>\n    <span>}</span><span>)</span><span>;</span>\n</code></pre><div aria-hidden=\"true\"><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br></div></div><h3 id=\"基于接口的注入\" tabindex=\"-1\"> 基于接口的注入</h3>\n<p>只需要继承如下接口，会自动按照对应的生命周期注入到 DI 中。</p>\n<ul>\n<li>IScopedDependency 范围</li>\n<li>ISingletonDependency 单例</li>\n<li>ITransientDependency 瞬时</li>\n</ul>\n<div><pre><code><span>namespace</span> <span>Module1</span>\n<span>{</span>\n    <span>public</span> <span>interface</span> <span>ITestService</span> <span>:</span> <span><span>ITransientDependency</span></span>\n    <span>{</span>\n        <span><span>bool</span></span> <span>ExecuteConnectTest</span><span>(</span><span>)</span><span>;</span>\n    <span>}</span>\n<span>}</span>\n\n<span>namespace</span> <span>Module1</span>\n<span>{</span>\n    <span>public</span> <span>class</span> <span>TestService</span> <span>:</span> <span><span>ITestService</span></span>\n    <span>{</span>\n        <span>private</span> <span>readonly</span> <span>IFreeSql</span> _fsql<span>;</span>\n        <span>public</span> <span>TestService</span><span>(</span><span>IFreeSql</span> fsql<span>)</span>\n        <span>{</span>\n            _fsql <span>=</span> fsql<span>;</span>\n        <span>}</span>\n\n        <span>public</span> <span><span>bool</span></span> <span>ExecuteConnectTest</span><span>(</span><span>)</span>\n        <span>{</span>\n            <span>return</span> _fsql<span>.</span>Ado<span>.</span><span>ExecuteConnectTest</span><span>(</span><span>)</span><span>;</span>\n        <span>}</span>\n    <span>}</span>\n<span>}</span>\n\n<span>public</span> <span>class</span> <span>TestController</span> <span>:</span> <span><span>Controller</span></span>\n<span>{</span>\n    <span>ILogger<span>&lt;</span>TestController<span>></span></span> logger<span>;</span>\n    <span>private</span> <span>readonly</span> <span>ITestService</span> testService<span>;</span>\n\n    <span>public</span> <span>TestController</span><span>(</span><span>ILogger<span>&lt;</span>TestController<span>></span></span> logger<span>,</span> <span>ITestService</span> testService<span>)</span>\n    <span>{</span>\n        <span>this</span><span>.</span>logger <span>=</span> logger<span>;</span>\n        <span>this</span><span>.</span>testService <span>=</span> testService<span>;</span>\n    <span>}</span>\n\n    <span>[</span><span><span>HttpGet</span><span><span>(</span><span>\"ExecuteConnectTest\"</span><span>)</span></span></span><span>]</span>\n    <span>public</span> <span>ActionResult<span>&lt;</span><span>bool</span><span>></span></span> <span>ExecuteConnectTest</span><span>(</span><span>)</span>\n    <span>{</span>\n        <span>return</span> testService<span>.</span><span>ExecuteConnectTest</span><span>(</span><span>)</span><span>;</span>\n    <span>}</span>\n<span>}</span>\n\n</code></pre><div aria-hidden=\"true\"><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br><span>24</span><br><span>25</span><br><span>26</span><br><span>27</span><br><span>28</span><br><span>29</span><br><span>30</span><br><span>31</span><br><span>32</span><br><span>33</span><br><span>34</span><br><span>35</span><br><span>36</span><br><span>37</span><br><span>38</span><br><span>39</span><br><span>40</span><br><span>41</span><br><span>42</span><br><span>43</span><br></div></div><p>1.获取所有的程序集合，然后根据 FullName，一般为项目名，过滤具体的程序集</p>\n<div><pre><code>builder<span>.</span>Host\n    <span>.</span><span>UseServiceProviderFactory</span><span>(</span><span>new</span> <span>AutofacServiceProviderFactory</span><span>(</span><span>)</span><span>)</span>\n    <span>.</span><span><span>ConfigureContainer</span><span><span>&lt;</span>ContainerBuilder<span>></span></span></span><span>(</span><span>(</span>webBuilder<span>,</span> containerBuilder<span>)</span> <span>=></span>\n    <span>{</span>\n        <span>Assembly<span>[</span><span>]</span></span> currentAssemblies <span>=</span> AppDomain<span>.</span>CurrentDomain<span>.</span><span>GetAssemblies</span><span>(</span><span>)</span><span>.</span><span>Where</span><span>(</span>r <span>=></span>\nr<span>.</span>FullName<span>.</span><span>Contains</span><span>(</span><span>\"IGeekFan.FreeKit.Extras\"</span><span>)</span><span>||</span>\nr<span>.</span>FullName<span>.</span><span>Contains</span><span>(</span><span>\"Module1\"</span><span>)</span>\n<span>)</span><span>.</span><span>ToArray</span><span>(</span><span>)</span><span>;</span>\n\n        containerBuilder<span>.</span><span>RegisterModule</span><span>(</span><span>new</span> <span>FreeKitModule</span><span>(</span>currentAssemblies<span>)</span><span>)</span><span>;</span>\n    <span>}</span><span>)</span><span>;</span>\n</code></pre><div aria-hidden=\"true\"><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br></div></div><p>其中<code>FreeKitModule</code>的参数支持<code>params Type[]types</code>或<code>params Assembly[]assemblies</code>,即哪些<a href=\"https://docs.microsoft.com/zh-cn/dotnet/standard/assembly/\" target=\"_blank\" rel=\"noopener noreferrer\">程序集</a>中的类需要注入到依赖注入的集合中。</p>\n<p>2.根据程序集中的某个类获取程序集</p>\n<div><pre><code><span>Assembly<span>[</span><span>]</span></span> currentAssemblies2 <span>=</span> <span>new</span> <span>Assembly<span>[</span><span>]</span></span> <span>{</span> <span>typeof</span><span>(</span><span>FreeKitModule</span><span>)</span><span>.</span>Assembly<span>,</span> <span>typeof</span><span>(</span><span>Module1<span>.</span>Module1Startup</span><span>)</span><span>.</span>Assembly <span>}</span><span>;</span>\ncontainerBuilder<span>.</span><span>RegisterModule</span><span>(</span><span>new</span> <span>FreeKitModule</span><span>(</span>currentAssemblies2<span>)</span><span>)</span><span>;</span>\n</code></pre><div aria-hidden=\"true\"><span>1</span><br><span>2</span><br></div></div><p>3.直接使用 params Assembly[] 的特性，直接作为 FreeKitModule 的参数</p>\n<div><pre><code>containerBuilder<span>.</span><span>RegisterModule</span><span>(</span><span>new</span> <span>FreeKitModule</span><span>(</span> <span>typeof</span><span>(</span><span>FreeKitModule</span><span>)</span><span>.</span>Assembly<span>,</span> <span>typeof</span><span>(</span><span>Program</span><span>)</span><span>.</span>Assembly<span>)</span><span>)</span>\n</code></pre><div aria-hidden=\"true\"><span>1</span><br></div></div><p>4，通过 params Type[]，内部解析 Assembly。</p>\n<div><pre><code>containerBuilder<span>.</span><span>RegisterModule</span><span>(</span><span>new</span> <span>FreeKitModule</span><span>(</span><span>typeof</span><span>(</span><span>FreeKitModule</span><span>)</span><span>,</span> <span>typeof</span><span>(</span><span>Program</span><span>)</span><span>)</span><span>)</span>\n</code></pre><div aria-hidden=\"true\"><span>1</span><br></div></div><p>其中，此程序集中的类 如果继承了<code>IScopedDependency</code>,<code>ISingletonDependency</code>、<code>ITransientDependency</code>这些接口， 都会按照对应的生命周期注入到依赖注入的集合中 ，可直接使用。</p>\n<h3 id=\"currentuser-当前登录人信息\" tabindex=\"-1\"> CurrentUser 当前登录人信息</h3>\n<p>如何使用，先注入<code>IHttpContextAccessor</code></p>\n<div><pre><code>    services<span>.</span><span>AddHttpContextAccessor</span><span>(</span><span>)</span><span>;</span>\n</code></pre><div aria-hidden=\"true\"><span>1</span><br></div></div><p>因为我们无法确定用户 Id 的类型，可能是<code>long</code>,也可能是<code>Guid</code>，ICurrentUser&lt;T&gt;是泛型的，默认有一个实现<code>ICurrentUser:ICurrentUser&lt;string&gt;</code>,所以通过 <code>ICurrentUser</code>，默认Id为string?类型，如果想改变类型，可使用<code>ICurrentUser</code>接口<code>FindUserIdToLong</code>扩展方法，获取<code>long?</code>类型的用户<code>Id</code>,或使用<code>ICurrentUser</code>接口<code>FindUserIdToGuid</code>的扩展方法</p>\n<p>此接口定义如下继承了<code>ITransientDependency</code>,所以他是瞬时</p>\n<div><pre><code><span>public</span> <span>interface</span> <span>ICurrentUser<span>&lt;</span>T<span>></span></span> <span>:</span> <span><span>ITransientDependency</span></span>\n<span>{</span>\n    <span>/// <span><span><span>&lt;</span>summary</span><span>></span></span></span>\n    <span>/// 是否登录</span>\n    <span>/// <span><span><span>&lt;/</span>summary</span><span>></span></span></span>\n    <span><span>bool</span></span> IsAuthenticated <span>{</span> <span>get</span><span>;</span> <span>}</span>\n\n    <span>/// <span><span><span>&lt;</span>summary</span><span>></span></span></span>\n    <span>/// 用户Id</span>\n    <span>/// <span><span><span>&lt;/</span>summary</span><span>></span></span></span>\n    <span>T<span>?</span></span> Id <span>{</span> <span>get</span><span>;</span> <span>}</span>\n\n    <span>/// <span><span><span>&lt;</span>summary</span><span>></span></span></span>\n    <span>/// 登录名，用户名，唯一值</span>\n    <span>/// <span><span><span>&lt;/</span>summary</span><span>></span></span></span>\n    <span><span>string</span></span> UserName <span>{</span> <span>get</span><span>;</span> <span>}</span>\n\n    <span>/// <span><span><span>&lt;</span>summary</span><span>></span></span></span>\n    <span>/// 昵称</span>\n    <span>/// <span><span><span>&lt;/</span>summary</span><span>></span></span></span>\n    <span><span>string</span><span>?</span></span> NickName <span>{</span> <span>get</span><span>;</span> <span>}</span>\n\n    <span>/// <span><span><span>&lt;</span>summary</span><span>></span></span></span>\n    <span>/// 邮件</span>\n    <span>/// <span><span><span>&lt;/</span>summary</span><span>></span></span></span>\n    <span><span>string</span><span>?</span></span> Email <span>{</span> <span>get</span><span>;</span> <span>}</span>\n\n    <span>/// <span><span><span>&lt;</span>summary</span><span>></span></span></span>\n    <span>/// 角色</span>\n    <span>/// <span><span><span>&lt;/</span>summary</span><span>></span></span></span>\n    <span><span>string</span><span>[</span><span>]</span></span> Roles <span>{</span> <span>get</span><span>;</span> <span>}</span>\n\n    <span>Claim</span> <span>FindClaim</span><span>(</span><span><span>string</span></span> claimType<span>)</span><span>;</span>\n\n    <span>Claim<span>[</span><span>]</span></span> <span>FindClaims</span><span>(</span><span><span>string</span></span> claimType<span>)</span><span>;</span>\n\n    <span>Claim<span>[</span><span>]</span></span> <span>GetAllClaims</span><span>(</span><span>)</span><span>;</span>\n\n    <span><span>bool</span></span> <span>IsInRole</span><span>(</span><span><span>string</span></span> roleId<span>)</span><span>;</span>\n<span>}</span>\n</code></pre><div aria-hidden=\"true\"><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br><span>24</span><br><span>25</span><br><span>26</span><br><span>27</span><br><span>28</span><br><span>29</span><br><span>30</span><br><span>31</span><br><span>32</span><br><span>33</span><br><span>34</span><br><span>35</span><br><span>36</span><br><span>37</span><br><span>38</span><br><span>39</span><br><span>40</span><br></div></div><p>当然可增加一个扩展方法，用于不确定主键类型,所有的方法都调用此方法，需要更改类型，则只用更改此方法即可,比如如果用户Id类型是int类型，可自行创建此扩展类进行处理</p>\n<div><pre><code><span>public</span> <span>static</span> <span>class</span> <span>Extensions</span>\n｛\n    <span>public</span> <span>static</span> <span><span>int</span><span>?</span></span> <span>FindUserId</span><span>(</span><span>this</span> <span>ICurrentUser</span> currentUser<span>)</span>\n    <span>{</span>\n        <span>if</span> <span>(</span>currentUser<span>.</span>Id <span>==</span> <span>null</span><span>)</span> <span>return</span> <span>null</span><span>;</span>\n        <span>return</span> <span>int</span><span>.</span><span>Parse</span><span>(</span>currentUser<span>.</span>Id<span>)</span><span>;</span>\n    <span>}</span>\n<span>}</span>\n</code></pre><div aria-hidden=\"true\"><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br></div></div><h3 id=\"实体审计类\" tabindex=\"-1\"> 实体审计类</h3>\n<ul>\n<li>FullAduitEntity</li>\n</ul>\n<h3 id=\"casequery-支持-get-请求参数-key-大小驼峰转换\" tabindex=\"-1\"> CaseQuery 支持 Get 请求参数 key，大小驼峰转换</h3>\n<p><code>HttpGet</code>请求时，参数的 key 和实体相同，比如创建如下类。</p>\n<div><pre><code><span>public</span> <span>class</span> <span>QueryModel</span>\n<span>{</span>\n    <span>public</span> <span><span>string</span></span> Title <span>{</span> <span>get</span><span>;</span> <span>set</span><span>;</span> <span>}</span>\n    <span>public</span> <span><span>string</span></span> UserName <span>{</span> <span>get</span><span>;</span> <span>set</span><span>;</span> <span>}</span>\n<span>}</span>\n</code></pre><div aria-hidden=\"true\"><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br></div></div><div><pre><code><span>[</span><span><span>HttpGet</span></span><span>]</span>\n<span>public</span> <span>IEnumerable<span>&lt;</span>WeatherForecast<span>></span></span> <span>Get</span><span>(</span><span>[</span><span><span>FromQuery</span></span><span>]</span> <span>QueryModel</span> queryModel<span>)</span>\n<span>{</span>\n    <span>return</span> <span>null</span><span>;</span>\n<span>}</span>\n</code></pre><div aria-hidden=\"true\"><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br></div></div><p>在 swagger 下就会生成如下内容</p>\n<p><img src=\"@source/dotnetcore/freekit/images/DefaultQueryValue.png\" alt=\"DefaultQueryValue\" loading=\"lazy\">\n如果实现，GET 请求参数的 key 转换呢。</p>\n<h3 id=\"查询参数转换支持\" tabindex=\"-1\"> 查询参数转换支持</h3>\n<ul>\n<li>\n<p>SnakeCase（下划线写法）</p>\n</li>\n<li>\n<p>LowerCase（小写）</p>\n</li>\n<li>\n<p>CamelCase（首字母小写）</p>\n</li>\n<li>\n<p>使用方式</p>\n</li>\n</ul>\n<p>在 AddControllers 中注入实现</p>\n<div><pre><code>    services<span>.</span><span>AddControllers</span><span>(</span>options <span>=></span>\n    <span>{</span>\n        options<span>.</span>ValueProviderFactories<span>.</span><span>Add</span><span>(</span><span>new</span> <span>CamelCaseValueProviderFactory</span><span>(</span><span>)</span><span>)</span><span>;</span>\n    <span>}</span><span>)</span><span>;</span>\n</code></pre><div aria-hidden=\"true\"><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br></div></div><p>swagger 渲染需要替换 provider</p>\n<div><pre><code>    services<span>.</span><span>TryAddEnumerable</span><span>(</span>ServiceDescriptor<span>.</span><span><span>Transient</span><span><span>&lt;</span>IApiDescriptionProvider<span>,</span> CamelCaseApiDescriptionProvider<span>></span></span></span><span>(</span><span>)</span><span>)</span><span>;</span>\n</code></pre><div aria-hidden=\"true\"><span>1</span><br></div></div><p><img src=\"@source/dotnetcore/freekit/images/CamelCaseValueProviderFactory.png\" alt=\"CamelCaseValueProviderFactory\" loading=\"lazy\"></p>\n<p>其中支持的 Factory 如下</p>\n<ul>\n<li>SnakeCaseValueProviderFactory（下划线写法）</li>\n<li>LowerCaseValueProviderFactory（小写）</li>\n<li>CamelCaseValueProviderFactory（首字母小写）</li>\n</ul>\n<p>Provider 支持如下</p>\n<ul>\n<li>SnakeApiDescriptionProvider（下划线写法）</li>\n<li>LowerApiDescriptionProvider（小写）</li>\n<li>CamelCaseApiDescriptionProvider（首字母小写）</li>\n</ul>\n",
      "date_published": "2022-06-02T18:18:50.000Z",
      "date_modified": "2022-06-29T19:17:23.000Z",
      "authors": [],
      "tags": []
    },
    {
      "title": "本地化",
      "url": "https://igeekfan.cn/igeekfan-docs/dotnetcore/freekit/Localization.FreeSql.html",
      "id": "https://igeekfan.cn/igeekfan-docs/dotnetcore/freekit/Localization.FreeSql.html",
      "content_html": "<h1 id=\"本地化\" tabindex=\"-1\"> 本地化</h1>\n",
      "date_published": "2022-06-02T18:18:50.000Z",
      "date_modified": "2022-06-02T18:18:50.000Z",
      "authors": [],
      "tags": []
    },
    {
      "title": "Modularity 模块化",
      "url": "https://igeekfan.cn/igeekfan-docs/dotnetcore/freekit/Modularity.html",
      "id": "https://igeekfan.cn/igeekfan-docs/dotnetcore/freekit/Modularity.html",
      "content_html": "<h1 id=\"modularity-模块化\" tabindex=\"-1\"> Modularity 模块化</h1>\n<h2 id=\"单体模块化\" tabindex=\"-1\"> 单体模块化</h2>\n<ul>\n<li>https://github.com/thinktecture-labs/aspnetcore-modular-monolith</li>\n</ul>\n<p>因为类名如 Autofac 和 aspnetcore 中的类相同，将类名修改成如下名称</p>\n<ul>\n<li>Module.cs--&gt;ModuleInfo.cs</li>\n<li>IStartup.cs--&gt;IModuleStartup.cs</li>\n</ul>\n<p>创建一个类库名 Module1，并引用 AspNetCore 包</p>\n<div><pre><code>   <span><span><span>&lt;</span>ItemGroup</span><span>></span></span>\n\t\t<span><span><span>&lt;</span>FrameworkReference</span> <span>Include</span><span><span>=</span><span>\"</span>Microsoft.AspNetCore.App<span>\"</span></span> <span>/></span></span>\n   <span><span><span>&lt;/</span>ItemGroup</span><span>></span></span>\n</code></pre><div aria-hidden=\"true\"><span>1</span><br><span>2</span><br><span>3</span><br></div></div><p>集成接口，可在<code>ConfigureServices</code>中注入任何服务，在<code>Configure</code>方法中注入中间件</p>\n<div><pre><code><span>public</span> <span>class</span> <span>Module1Startup</span> <span>:</span> <span><span>IModuleStartup</span></span>\n<span>{</span>\n    <span>public</span> <span><span>void</span></span> <span>ConfigureServices</span><span>(</span><span>IServiceCollection</span> services<span>)</span>\n    <span>{</span>\n        <span>//services.AddSingleton&lt;ITestService, TestService>();</span>\n    <span>}</span>\n\n    <span>public</span> <span><span>void</span></span> <span>Configure</span><span>(</span><span>IApplicationBuilder</span> app<span>,</span> <span>IWebHostEnvironment</span> env<span>)</span>\n    <span>{</span>\n        app<span>.</span><span>UseEndpoints</span><span>(</span>endpoints <span>=></span>\n            endpoints<span>.</span><span>MapGet</span><span>(</span><span>\"/TestEndpoint\"</span><span>,</span>\n                <span>async</span> context <span>=></span>\n                <span>{</span>\n                    <span>await</span> context<span>.</span>Response<span>.</span><span>WriteAsync</span><span>(</span><span>\"Hello World from TestEndpoint in Module 1\"</span><span>)</span><span>;</span>\n                <span>}</span><span>)</span><span>.</span><span>RequireAuthorization</span><span>(</span><span>)</span>\n        <span>)</span><span>;</span>\n    <span>}</span>\n<span>}</span>\n</code></pre><div aria-hidden=\"true\"><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br></div></div><p>使用控制器</p>\n<div><pre><code><span>using</span> <span>Microsoft<span>.</span>AspNetCore<span>.</span>Mvc</span><span>;</span>\n\n<span>[</span><span><span>Route</span><span><span>(</span><span>\"[module]/[controller]\"</span><span>)</span></span></span><span>]</span>\n<span>public</span> <span>class</span> <span>TestController</span> <span>:</span> <span><span>Controller</span></span>\n<span>{</span>\n    <span>[</span><span><span>HttpGet</span></span><span>]</span>\n    <span>public</span> <span>ActionResult<span>&lt;</span><span>string</span><span>></span></span> <span>Index</span><span>(</span><span>)</span>\n    <span>{</span>\n        <span>return</span> <span>\"Hello World from TestController in Module 1\"</span><span>;</span>\n    <span>}</span>\n\n    <span>/// <span><span><span>&lt;</span>summary</span><span>></span></span></span>\n    <span>/// InterModule</span>\n    <span>/// <span><span><span>&lt;/</span>summary</span><span>></span></span></span>\n    <span>/// <span><span><span>&lt;</span>returns</span><span>></span></span><span><span><span>&lt;/</span>returns</span><span>></span></span></span>\n    <span>[</span><span>HttpGet</span><span>(</span><span>\"InterModule\"</span><span>)</span><span>]</span>\n    <span>public</span> <span>ActionResult<span>&lt;</span><span>string</span><span>></span></span> <span>InterModule</span><span>(</span><span>)</span>\n    <span>{</span>\n        <span>return</span> <span><span>$\"</span><span><span>{</span><span><span>0</span></span><span>}</span></span><span> in TestController in Module 1\"</span></span><span>;</span>\n    <span>}</span>\n<span>}</span>\n</code></pre><div aria-hidden=\"true\"><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br></div></div><ul>\n<li>主程序<code>Program</code></li>\n</ul>\n<div><pre><code><span>// Register a convention allowing to us to prefix routes to modules.</span>\nbuilder<span>.</span>Services<span>.</span><span><span>AddTransient</span><span><span>&lt;</span>IPostConfigureOptions<span>&lt;</span>MvcOptions<span>></span><span>,</span> ModuleRoutingMvcOptionsPostConfigure<span>></span></span></span><span>(</span><span>)</span><span>;</span>\n\n<span>// Adds module1 with the route prefix module-1</span>\nbuilder<span>.</span>Services<span>.</span><span><span>AddModule</span><span><span>&lt;</span>Module1<span>.</span>Module1Startup<span>></span></span></span><span>(</span><span>\"module-1\"</span><span>)</span><span>;</span>\n\n<span>// Adds module2 with the route prefix module-2</span>\nbuilder<span>.</span>Services<span>.</span><span><span>AddModule</span><span><span>&lt;</span>Module2<span>.</span>Module2Startup<span>></span></span></span><span>(</span><span>\"module-2\"</span><span>)</span><span>;</span>\n</code></pre><div aria-hidden=\"true\"><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br></div></div><ul>\n<li>注入中间件</li>\n</ul>\n<div><pre><code><span>// Adds endpoints defined in modules</span>\n<span><span>var</span></span> modules <span>=</span> app<span>.</span>Services<span>.</span><span><span>GetRequiredService</span><span><span>&lt;</span>IEnumerable<span>&lt;</span>ModuleInfo<span>></span><span>></span></span></span><span>(</span><span>)</span><span>;</span>\n<span>foreach</span> <span>(</span><span><span>var</span></span> module <span>in</span> modules<span>)</span>\n<span>{</span>\n    app<span>.</span><span>Map</span><span>(</span><span><span>$\"/</span><span><span>{</span><span>module<span>.</span>RoutePrefix</span><span>}</span></span><span>\"</span></span><span>,</span> builder <span>=></span>\n    <span>{</span>\n        builder<span>.</span><span>UseRouting</span><span>(</span><span>)</span><span>;</span>\n        module<span>.</span>Startup<span>.</span><span>Configure</span><span>(</span>builder<span>,</span> app<span>.</span>Environment<span>)</span><span>;</span>\n    <span>}</span><span>)</span><span>;</span>\n<span>}</span>\n\n</code></pre><div aria-hidden=\"true\"><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br></div></div>",
      "date_published": "2022-06-02T18:18:50.000Z",
      "date_modified": "2022-06-02T18:18:50.000Z",
      "authors": [],
      "tags": []
    },
    {
      "title": "FreeKit",
      "url": "https://igeekfan.cn/igeekfan-docs/dotnetcore/freekit/",
      "id": "https://igeekfan.cn/igeekfan-docs/dotnetcore/freekit/",
      "content_html": "<h1 id=\"freekit\" tabindex=\"-1\"> FreeKit</h1>\n<div align=\"center\">\n    <h1 align=\"center\"> .NET <img alt=\"logo\" src=\"/images/dotnet-20-years.png\" width=\"80px\"/>YEARS </h1>\n<p><strong>Freekit</strong> 为.NET Core 提供了更多的扩展实现</p>\n<p><a href=\"https://www.jetbrains.com/rider/\" target=\"_blank\" rel=\"noopener noreferrer\"><img src=\"https://img.shields.io/static/v1?style=float&amp;logo=rider&amp;label=Rider&amp;message=jetbrains&amp;color=red\" alt=\".NET IDE Rider\" loading=\"lazy\"></a>\n<a href=\"https://raw.githubusercontent.com/luoyunchong/IGeekFan.AspNetCore.RapiDoc/master/LICENSE\" target=\"_blank\" rel=\"noopener noreferrer\"><img src=\"https://img.shields.io/badge/license-MIT-blue.svg\" alt=\"GitHub license\" loading=\"lazy\"></a></p>\n</div>\n<h2 id=\"nuget-packages\" tabindex=\"-1\"> Nuget Packages</h2>\n<table>\n<thead>\n<tr>\n<th>Package name</th>\n<th>Version</th>\n<th>Downloads</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>IGeekFan.AspNetCore.Identity.FreeSql</code></td>\n<td><a href=\"https://www.nuget.org/packages/IGeekFan.AspNetCore.Identity.FreeSql/\" target=\"_blank\" rel=\"noopener noreferrer\"><img src=\"https://img.shields.io/nuget/v/IGeekFan.AspNetCore.Identity.FreeSql.svg?style=flat-square&amp;label=nuget&amp;color=fedcba\" alt=\"NuGet\" loading=\"lazy\"></a></td>\n<td><img src=\"https://img.shields.io/nuget/dt/IGeekFan.AspNetCore.Identity.FreeSql.svg\" alt=\"downloads\" loading=\"lazy\"></td>\n</tr>\n<tr>\n<td><code>IGeekFan.FreeKit</code></td>\n<td><a href=\"https://www.nuget.org/packages/IGeekFan.FreeKit/\" target=\"_blank\" rel=\"noopener noreferrer\"><img src=\"https://img.shields.io/nuget/v/IGeekFan.FreeKit.svg?style=flat-square&amp;label=nuget\" alt=\"NuGet\" loading=\"lazy\"></a></td>\n<td><img src=\"https://img.shields.io/nuget/dt/IGeekFan.FreeKit.svg\" alt=\"downloads\" loading=\"lazy\"></td>\n</tr>\n<tr>\n<td><code>IGeekFan.FreeKit.Extras</code></td>\n<td><a href=\"https://www.nuget.org/packages/IGeekFan.FreeKit.Extras/\" target=\"_blank\" rel=\"noopener noreferrer\"><img src=\"https://img.shields.io/nuget/v/IGeekFan.FreeKit.Extras.svg?style=flat-square&amp;label=nuget\" alt=\"NuGet\" loading=\"lazy\"></a></td>\n<td><img src=\"https://img.shields.io/nuget/dt/IGeekFan.FreeKit.Extras.svg\" alt=\"downloads\" loading=\"lazy\"></td>\n</tr>\n<tr>\n<td><code>IGeekFan.FreeKit.Modularity</code></td>\n<td><a href=\"https://www.nuget.org/packages/IGeekFan.FreeKit.Modularity/\" target=\"_blank\" rel=\"noopener noreferrer\"><img src=\"https://img.shields.io/nuget/v/IGeekFan.FreeKit.Modularity.svg?style=flat-square&amp;label=nuget\" alt=\"NuGet\" loading=\"lazy\"></a></td>\n<td><img src=\"https://img.shields.io/nuget/dt/IGeekFan.FreeKit.Modularity.svg\" alt=\"downloads\" loading=\"lazy\"></td>\n</tr>\n<tr>\n<td><code>IGeekFan.FreeKit.Email</code></td>\n<td><a href=\"https://www.nuget.org/packages/IGeekFan.FreeKit.Email/\" target=\"_blank\" rel=\"noopener noreferrer\"><img src=\"https://img.shields.io/nuget/v/IGeekFan.FreeKit.Email.svg?style=flat-square&amp;label=nuget\" alt=\"NuGet\" loading=\"lazy\"></a></td>\n<td><img src=\"https://img.shields.io/nuget/dt/IGeekFan.FreeKit.Email.svg\" alt=\"downloads\" loading=\"lazy\"></td>\n</tr>\n<tr>\n<td><code>IGeekFan.Localization.FreeSql</code></td>\n<td><a href=\"https://www.nuget.org/packages/IGeekFan.Localization.FreeSql/\" target=\"_blank\" rel=\"noopener noreferrer\"><img src=\"https://img.shields.io/nuget/v/IGeekFan.Localization.FreeSql.svg?style=flat-square&amp;label=nuget\" alt=\"NuGet\" loading=\"lazy\"></a></td>\n<td><img src=\"https://img.shields.io/nuget/dt/IGeekFan.Localization.FreeSql.svg\" alt=\"downloads\" loading=\"lazy\"></td>\n</tr>\n<tr>\n<td><code>IGeekFan.AspNetCore.DataProtection.FreeRedis</code></td>\n<td><a href=\"https://www.nuget.org/packages/IGeekFan.AspNetCore.DataProtection.FreeRedis/\" target=\"_blank\" rel=\"noopener noreferrer\"><img src=\"https://img.shields.io/nuget/v/IGeekFan.AspNetCore.DataProtection.FreeRedis.svg?style=flat-square&amp;label=nuget\" alt=\"NuGet\" loading=\"lazy\"></a></td>\n<td><img src=\"https://img.shields.io/nuget/dt/IGeekFan.AspNetCore.DataProtection.FreeRedis.svg\" alt=\"downloads\" loading=\"lazy\"></td>\n</tr>\n<tr>\n<td><code>IGeekFan.AspNetCore.DataProtection.FreeSql</code></td>\n<td><a href=\"https://www.nuget.org/packages/IGeekFan.AspNetCore.DataProtection.FreeSql/\" target=\"_blank\" rel=\"noopener noreferrer\"><img src=\"https://img.shields.io/nuget/v/IGeekFan.AspNetCore.DataProtection.FreeSql.svg?style=flat-square&amp;label=nuget\" alt=\"NuGet\" loading=\"lazy\"></a></td>\n<td><img src=\"https://img.shields.io/nuget/dt/IGeekFan.AspNetCore.DataProtection.FreeSql.svg\" alt=\"downloads\" loading=\"lazy\"></td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"baget-packages\" tabindex=\"-1\"> BaGet Packages</h2>\n<table>\n<thead>\n<tr>\n<th>Package name</th>\n<th>Version</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>IGeekFan.AspNetCore.Identity.FreeSql</code></td>\n<td><a href=\"http://124.70.130.97:5555/packages/IGeekFan.AspNetCore.Identity.FreeSql\" target=\"_blank\" rel=\"noopener noreferrer\">BaGet</a></td>\n</tr>\n<tr>\n<td><code>IGeekFan.FreeKit</code></td>\n<td><a href=\"http://124.70.130.97:5555/packages/IGeekFan.FreeKit\" target=\"_blank\" rel=\"noopener noreferrer\">BaGet</a></td>\n</tr>\n<tr>\n<td><code>IGeekFan.FreeKit.Extras</code></td>\n<td><a href=\"http://124.70.130.97:5555/packages/IGeekFan.FreeKit.Extras\" target=\"_blank\" rel=\"noopener noreferrer\">BaGet</a></td>\n</tr>\n<tr>\n<td><code>IGeekFan.FreeKit.Modularity</code></td>\n<td><a href=\"http://124.70.130.97:5555/packages/IGeekFan.FreeKit.Modularity\" target=\"_blank\" rel=\"noopener noreferrer\">BaGet</a></td>\n</tr>\n<tr>\n<td><code>IGeekFan.FreeKit.Email</code></td>\n<td><a href=\"http://124.70.130.97:5555/packages/IGeekFan.FreeKit.Email\" target=\"_blank\" rel=\"noopener noreferrer\">BaGet</a></td>\n</tr>\n<tr>\n<td><code>IGeekFan.Localization.FreeSql</code></td>\n<td><a href=\"http://124.70.130.97:5555/packages/IGeekFan.Localization.FreeSql\" target=\"_blank\" rel=\"noopener noreferrer\">BaGet</a></td>\n</tr>\n<tr>\n<td><code>IGeekFan.AspNetCore.DataProtection.FreeRedis</code></td>\n<td><a href=\"http://124.70.130.97:5555/packages/IGeekFan.AspNetCore.DataProtection.FreeRedis\" target=\"_blank\" rel=\"noopener noreferrer\">BaGet</a></td>\n</tr>\n<tr>\n<td><code>IGeekFan.AspNetCore.DataProtection.FreeSql</code></td>\n<td><a href=\"http://124.70.130.97:5555/packages/IGeekFan.AspNetCore.DataProtection.FreeSql\" target=\"_blank\" rel=\"noopener noreferrer\">BaGet</a></td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"igeekfan-aspnetcore-identity-freesql\" tabindex=\"-1\"> IGeekFan.AspNetCore.Identity.FreeSql</h2>\n<ul>\n<li>查看<a href=\"/dotnetcore/freekit/AspNetCore.Identity.FreeSql.html\">IGeekFan.AspNetCore.Identity.FreeSql</a><strong>文档</strong></li>\n</ul>\n<h2 id=\"igeekfan-freekit\" tabindex=\"-1\"> IGeekFan.FreeKit</h2>\n<ul>\n<li>AduitEntity 审计日志实体</li>\n<li>Dependency 依赖注入接口</li>\n<li>查看<a href=\"/dotnetcore/freekit/Core.html\">IGeekFan.FreeKit</a><strong>文档</strong></li>\n</ul>\n<h2 id=\"igeekfan-freekit-extras\" tabindex=\"-1\"> IGeekFan.FreeKit.Extras</h2>\n<ul>\n<li>FreeSql 扩展+Autofac UnitOfWork</li>\n<li>FreeSql+AduitEntity</li>\n<li>Autofac+ITransientDependency+IScopedDependency+ISingletonDependency</li>\n<li>CaseQuery</li>\n<li>Security 登录人信息</li>\n<li>查看<a href=\"/dotnetcore/freekit/Extras.html\">IGeekFan.FreeKit.Extras</a><strong>文档</strong></li>\n</ul>\n<h2 id=\"igeekfan-freekit-email\" tabindex=\"-1\"> IGeekFan.FreeKit.Email</h2>\n<ul>\n<li>查看<a href=\"/dotnetcore/freekit/Email.html\">IGeekFan.FreeKit.Email</a><strong>文档</strong></li>\n</ul>\n",
      "image": "https://img.shields.io/static/v1?style=float&logo=rider&label=Rider&message=jetbrains&color=red",
      "date_published": "2022-06-02T18:18:50.000Z",
      "date_modified": "2022-06-29T19:17:49.000Z",
      "authors": [],
      "tags": []
    },
    {
      "title": "获取控制器及方法特性标签",
      "url": "https://igeekfan.cn/igeekfan-docs/dotnetcore/lin-cms/Reflex-Assembly.html",
      "id": "https://igeekfan.cn/igeekfan-docs/dotnetcore/lin-cms/Reflex-Assembly.html",
      "content_html": "<h1 id=\"获取控制器及方法特性标签\" tabindex=\"-1\"> 获取控制器及方法特性标签</h1>\n<blockquote>\n<p>.NET Core 反射获取所有控制器及方法上特定标签.</p>\n</blockquote>\n<p>有个需求，就是在. NET Core 中，我们想在项目 启动时，获取 LinCmsAuthorizeAttribute 这个特性标签所有出现的地方，把他的参数，放入一个集合并缓存起来，以便后面使用此数据用于权限验证。</p>\n<p>我们通过反射获取所有控制器下及方法的 Attribute。</p>\n<h2 id=\"lincmsauthorizeattribute-是什么\" tabindex=\"-1\"> LinCmsAuthorizeAttribute 是什么</h2>\n<p>其代码非常简单，用于自定义权限验证，通过重写 OnAuthorizationAsync 方法，实现固定权限可分配给动态角色（也能分配给动态用户）。主要就<strong>基于权限的授权</strong>的实现进行研究，实现方法级别的权限验证。</p>\n<ul>\n<li><a href=\"https://www.cnblogs.com/RainingNight/p/dynamic-authorization-in-aspnetcore.html\" target=\"_blank\" rel=\"noopener noreferrer\">https://www.cnblogs.com/RainingNight/p/dynamic-authorization-in-aspnetcore.html</a></li>\n</ul>\n<p>当然，这个只是部分代码，完整代码请查看最下方开源地址，其中 LinCmsAuthorizeAttribute 继承 AuthorizeAttribute，拥有指定角色权限控制，当 Permission 未指定时，当过滤器与 Authorize 功能相同。Module 是指模块，即多个权限，属于同一个模块，方便前台展示为树型结构。Permission 属性的值不可重复。</p>\n<div><pre><code>[AttributeUsage(AttributeTargets.Class | AttributeTargets.Method, AllowMultiple = true)]\npublic class LinCmsAuthorizeAttribute : AuthorizeAttribute, IAsyncAuthorizationFilter\n{\n    public string Permission { get; set; }\n    public string Module { get; set; }\n\n    public LinCmsAuthorizeAttribute()\n    {\n\n    }\n\n    public LinCmsAuthorizeAttribute(string permission,string module)\n    {\n        Permission = permission;\n        Module = module;\n    }\n\n    public LinCmsAuthorizeAttribute(string permission,string module, string policy) : base(policy)\n    {\n        Permission = permission;\n        Module = module;\n    }\n\n    public async Task OnAuthorizationAsync(AuthorizationFilterContext context)\n    {\n        if (Permission == null) return;\n        var authorizationService = (IAuthorizationService)context.HttpContext.RequestServices.GetService(typeof(IAuthorizationService));\n        var authorizationResult = await authorizationService.AuthorizeAsync(context.HttpContext.User, null, new OperationAuthorizationRequirement() { Name = Permission });\n        if (!authorizationResult.Succeeded)\n        {\n            context.Result = new ForbidResult();\n        }\n    }\n\n    public override string ToString()\n    {\n        return $\"\\\"{base.ToString()}\\\",\\\"Permission:{Permission}\\\",\\\"Module:{Module}\\\",\\\"Roles:{Roles}\\\",\\\"Policy:{Policy}\\\",\\\"AuthenticationSchemes:{AuthenticationSchemes}\\\"\";\n    }\n}\n</code></pre><div aria-hidden=\"true\"><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br><span>24</span><br><span>25</span><br><span>26</span><br><span>27</span><br><span>28</span><br><span>29</span><br><span>30</span><br><span>31</span><br><span>32</span><br><span>33</span><br><span>34</span><br><span>35</span><br><span>36</span><br><span>37</span><br><span>38</span><br><span>39</span><br></div></div><h2 id=\"controller\" tabindex=\"-1\"> Controller</h2>\n<p>在 LinCms.Web 中的 Controller，至于为什么 Permission 为中文，目前的主要原因，此项目用于适配 <a href=\"https://github.com/TaleLin/lin-cms-vue\" target=\"_blank\" rel=\"noopener noreferrer\">Lin-CMS-VUE</a>项目,所以于平常我们以某个字符串作为权限名不同，但不须大惊小怪，道理相同。</p>\n<div><pre><code>[Route(\"cms/log\")]\n[ApiController]\npublic class LogController : ControllerBase\n{\n    private readonly ILogService _logService;\n\n    public LogController(ILogService logService)\n    {\n        _logService = logService;\n    }\n\n    [HttpGet(\"users\")]\n    [LinCmsAuthorize(\"查询日志记录的用户\", \"日志\")]\n    public List&lt;string> GetLoggedUsers([FromQuery]PageDto pageDto)\n    {\n        return _logService.GetLoggedUsers(pageDto);\n    }\n\n\n    [HttpGet]\n    [LinCmsAuthorize(\"查询所有日志\", \"日志\")]\n    public PagedResultDto&lt;LinLog> GetLogs([FromQuery]LogSearchDto searchDto)\n    {\n        return _logService.GetLogUsers(searchDto);\n    }\n\n    [HttpGet(\"search\")]\n    [LinCmsAuthorize(\"搜索日志\", \"日志\")]\n    public PagedResultDto&lt;LinLog> SearchLogs([FromQuery]LogSearchDto searchDto)\n    {\n        return _logService.GetLogUsers(searchDto);\n    }\n}\n</code></pre><div aria-hidden=\"true\"><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br><span>24</span><br><span>25</span><br><span>26</span><br><span>27</span><br><span>28</span><br><span>29</span><br><span>30</span><br><span>31</span><br><span>32</span><br><span>33</span><br></div></div><h2 id=\"测试类获取方法上的特定标签\" tabindex=\"-1\"> 测试类获取方法上的特定标签</h2>\n<p>in xunit test 项目工程中，开始我们的测试</p>\n<div><pre><code>[Fact]\npublic void GetAssemblyMethodsAttributes()\n{\n    var assembly = typeof(Startup).Assembly.GetTypes().AsEnumerable()\n        .Where(type => typeof(ControllerBase).IsAssignableFrom(type)).ToList();\n\n    assembly.ForEach(r =>\n    {\n        foreach (var methodInfo in r.GetMethods())\n        {\n            foreach (Attribute attribute in methodInfo.GetCustomAttributes())\n            {\n                if (attribute is LinCmsAuthorizeAttribute linCmsAuthorize)\n                {\n                    _testOutputHelper.WriteLine(linCmsAuthorize.ToString());\n                }\n            }\n        }\n    });\n}\n</code></pre><div aria-hidden=\"true\"><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br></div></div><h2 id=\"方法结果\" tabindex=\"-1\"> 方法结果</h2>\n<p>可在输出文本中查看，正是我们想要的东西，最后一行，是其他 Controller 中的内容，而且我们重写了 ToString(),所以我们能看到其属性。</p>\n<div><pre><code>\"LinCms.Zero.Authorization.LinCmsAuthorizeAttribute\",\"Permission:查询日志记录的用户\",\"Module:日志\",\"Roles:\",\"Policy:\",\"AuthenticationSchemes:\"\n\"LinCms.Zero.Authorization.LinCmsAuthorizeAttribute\",\"Permission:查询所有日志\",\"Module:日志\",\"Roles:\",\"Policy:\",\"AuthenticationSchemes:\"\n\"LinCms.Zero.Authorization.LinCmsAuthorizeAttribute\",\"Permission:搜索日志\",\"Module:日志\",\"Roles:\",\"Policy:\",\"AuthenticationSchemes:\"\n\"LinCms.Zero.Authorization.LinCmsAuthorizeAttribute\",\"Permission:查看lin的信息\",\"Module:信息\",\"Roles:\",\"Policy:\",\"AuthenticationSchemes:\"\n\n</code></pre><div aria-hidden=\"true\"><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br></div></div><h2 id=\"获取控制器上特性标签\" tabindex=\"-1\"> 获取控制器上特性标签</h2>\n<div><pre><code>/// &lt;summary>\n/// 获取控制器上的LinCmsAuthorizeAttribute\n/// &lt;/summary>\n/// \"LinCms.Zero.Authorization.LinCmsAuthorizeAttribute\",\"Permission:\",\"Module:\",\"Roles:Administrator\",\"Policy:\",\"AuthenticationSchemes:\"\n[Fact]\npublic void GetControllerAttributes()\n{\n    var assembly = typeof(Startup).Assembly.GetTypes().AsEnumerable()\n        .Where(type => typeof(ControllerBase).IsAssignableFrom(type)).ToList();\n\n    assembly.ForEach(d =>\n    {\n        var linCmsAuthorize = d.GetCustomAttribute&lt;LinCmsAuthorizeAttribute>();\n        if (linCmsAuthorize != null)\n        {\n            _testOutputHelper.WriteLine(linCmsAuthorize.ToString());\n        }\n    });\n}\n</code></pre><div aria-hidden=\"true\"><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br></div></div><h2 id=\"controller-结果\" tabindex=\"-1\"> Controller 结果</h2>\n<p>只有 AdminController 加了此标签，所以只有一行。</p>\n<div><pre><code>\"LinCms.Zero.Authorization.LinCmsAuthorizeAttribute\",\"Permission:\",\"Module:\",\"Roles:Administrator\",\"Policy:\",\"AuthenticationSchemes:\"\n</code></pre><div aria-hidden=\"true\"><span>1</span><br></div></div><p>此时 Roles 为 Administrator，Permission 及 Module 都是 null，\n这是因为只有 AdminController 中加了 LinGroup.Administrator=&quot;Administrator&quot;字符串，在登录过程中，已经给当前登录用户设置了 new Claim(ClaimTypes.Role,user.IsAdmin()?LinGroup.Administrator:user.GroupId.ToString())，即&quot;Administrator,当用户访问 AdminController 中的方法时，LinCmsAuthorize 并没有做相关验证，都是 AuthorizeAttribute，实现了固定角色权限的判断及登录的判断。LinCmsAuthorize 完成了固定权限设置为不同的动态角色后，判断用户是否拥有此权限。</p>\n<div><pre><code>[LinCmsAuthorize(Roles = LinGroup.Administrator)]\npublic class AdminController : ControllerBase\n{\n    ...\n}\n</code></pre><div aria-hidden=\"true\"><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br></div></div><h2 id=\"参考\" tabindex=\"-1\"> 参考</h2>\n<ul>\n<li>c# – 如何在 asp. net core rc2 中获取控制器的自定义属性 <a href=\"https://codeday.me/bug/20181207/453278.html\" target=\"_blank\" rel=\"noopener noreferrer\">https://codeday.me/bug/20181207/453278.html</a></li>\n<li></li>\n</ul>\n<h2 id=\"开源地址\" tabindex=\"-1\"> 开源地址</h2>\n<ul>\n<li><a href=\"github.com/luoyunchong/lin-cms-dotnetcore\">github.com/luoyunchong/lin-cms-dotnetcore</a></li>\n</ul>\n",
      "date_published": "2022-06-02T18:18:50.000Z",
      "date_modified": "2022-06-02T18:18:50.000Z",
      "authors": [],
      "tags": []
    },
    {
      "title": "Blogs分享",
      "url": "https://igeekfan.cn/igeekfan-docs/blogs/",
      "id": "https://igeekfan.cn/igeekfan-docs/blogs/",
      "content_html": "<h1 id=\"blogs分享\" tabindex=\"-1\"> Blogs分享</h1>\n",
      "date_published": "2022-01-07T10:07:15.000Z",
      "date_modified": "2022-01-07T10:07:15.000Z",
      "authors": [],
      "tags": []
    },
    {
      "title": "git emoji",
      "url": "https://igeekfan.cn/igeekfan-docs/blogs/git-emoji.html",
      "id": "https://igeekfan.cn/igeekfan-docs/blogs/git-emoji.html",
      "content_html": "<h1 id=\"git-emoji\" tabindex=\"-1\"> git emoji</h1>\n<table>\n<thead>\n<tr>\n<th>emoji 图标</th>\n<th>emoji</th>\n<th>含义</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>🎨(调色板)</td>\n<td><code>:art:</code></td>\n<td>改进代码结构/代码格式</td>\n</tr>\n<tr>\n<td>⚡️ (闪电)</td>\n<td><code>:zap:</code></td>\n<td>提升性能</td>\n</tr>\n<tr>\n<td>🐎 (赛马)</td>\n<td><code>:racehorse:</code></td>\n<td>提升性能</td>\n</tr>\n<tr>\n<td>🔥 (火焰)</td>\n<td><code>:fire:</code></td>\n<td>移除代码或文件</td>\n</tr>\n<tr>\n<td>🐛 (bug)</td>\n<td><code>:bug: </code></td>\n<td>修复 bug</td>\n</tr>\n<tr>\n<td>🚑 (急救车)</td>\n<td><code>:ambulance:</code></td>\n<td>重要补丁</td>\n</tr>\n<tr>\n<td>✨ (火花)</td>\n<td><code>:sparkles:</code></td>\n<td>引入新功能</td>\n</tr>\n<tr>\n<td>📝 (备忘录)</td>\n<td><code>:memo: </code></td>\n<td>撰写文档</td>\n</tr>\n<tr>\n<td>🚀 (火箭)</td>\n<td><code>:rocket: </code></td>\n<td>部署功能</td>\n</tr>\n<tr>\n<td>💄 (口红)</td>\n<td><code>:lipstick:</code></td>\n<td>更新 UI 和样式文件</td>\n</tr>\n<tr>\n<td>🎉 (庆祝)</td>\n<td><code>:tada:</code></td>\n<td>初次提交</td>\n</tr>\n<tr>\n<td>✅ (白色复选框)</td>\n<td><code>:white_check_mark:</code></td>\n<td>更新测试</td>\n</tr>\n<tr>\n<td>🔒 (锁)</td>\n<td><code>:lock:</code></td>\n<td>修复安全问题</td>\n</tr>\n<tr>\n<td>🍎 (苹果)</td>\n<td><code>:apple:</code></td>\n<td>修复 macOS 下的问题</td>\n</tr>\n<tr>\n<td>🐧 (企鹅)</td>\n<td><code>:penguin:</code></td>\n<td>修复 Linux 下的问题</td>\n</tr>\n<tr>\n<td>🏁 (旗帜)</td>\n<td><code>:checkered_flag:</code></td>\n<td>修复 Windows 下的问题</td>\n</tr>\n<tr>\n<td>🤖（机器人）</td>\n<td><code>:robot:</code></td>\n<td>修复 Android 下的问题</td>\n</tr>\n<tr>\n<td>🍏 (绿苹果)</td>\n<td><code>:green_apple:</code></td>\n<td>修复 iOS 下的问题</td>\n</tr>\n<tr>\n<td>🔖 (书签)</td>\n<td><code>:bookmark:</code></td>\n<td>发行/版本标签</td>\n</tr>\n<tr>\n<td>🚨 (警车灯)</td>\n<td><code>:rotating_light:</code></td>\n<td>移除 linter 警告</td>\n</tr>\n<tr>\n<td>🚧 (施工)</td>\n<td><code>:construction:</code></td>\n<td>工作进行中</td>\n</tr>\n<tr>\n<td>👷 (工人)</td>\n<td><code>:construction_worker:</code></td>\n<td>添加 CI 构建系统</td>\n</tr>\n<tr>\n<td>💚 (绿心)</td>\n<td><code>:green_heart:</code></td>\n<td>修复 CI 构建问题</td>\n</tr>\n<tr>\n<td>⬆️ (上升箭头)</td>\n<td><code> :arrow_up:</code></td>\n<td>升级依赖</td>\n</tr>\n<tr>\n<td>⬇️ (下降箭头)</td>\n<td><code> :arrow_down:</code></td>\n<td>降级依赖</td>\n</tr>\n<tr>\n<td>📌 (图钉)</td>\n<td><code>:pushpin: </code></td>\n<td>将依赖项固定到特定版本</td>\n</tr>\n<tr>\n<td>📈 (上升趋势图)</td>\n<td><code>:chart_with_upwards_trend:</code></td>\n<td>添加分析或跟踪代码</td>\n</tr>\n<tr>\n<td>♻️ （回收）</td>\n<td><code>:recycle:</code></td>\n<td>重构代码</td>\n</tr>\n<tr>\n<td>🐳 (鲸鱼)</td>\n<td><code>:whale:</code></td>\n<td>Docker 相关工作</td>\n</tr>\n<tr>\n<td>🌐 (带子午线的地球仪)</td>\n<td><code>:globe_with_meridians:</code></td>\n<td>国际化与本地化</td>\n</tr>\n<tr>\n<td>➕ (加号)</td>\n<td><code>:heavy_plus_sign: </code></td>\n<td>增加一个依赖</td>\n</tr>\n<tr>\n<td>➖ (减号)</td>\n<td><code>:heavy_minus_sign:</code></td>\n<td>减少一个依赖</td>\n</tr>\n<tr>\n<td>🔧 (扳手)</td>\n<td><code>:wrench:</code></td>\n<td>修改配置文件</td>\n</tr>\n<tr>\n<td>🔨 (锤子)</td>\n<td><code>:hammer:</code></td>\n<td>重大重构</td>\n</tr>\n<tr>\n<td>✏️ (铅笔)</td>\n<td><code>:pencil2:</code></td>\n<td>修复 typo</td>\n</tr>\n<tr>\n<td>💩 (粑粑…)</td>\n<td><code>:poop:</code></td>\n<td>写了辣鸡代码需要优化</td>\n</tr>\n<tr>\n<td>⏪ (倒带)</td>\n<td><code>:rewind:</code></td>\n<td>恢复更改</td>\n</tr>\n<tr>\n<td>🔀 (交叉向右的箭头)</td>\n<td><code>:twisted_rightwards_arrows:</code></td>\n<td>合并分支</td>\n</tr>\n<tr>\n<td>📦 (包裹)</td>\n<td><code>:package:</code></td>\n<td>更新编译的文件或包</td>\n</tr>\n<tr>\n<td>👽 (外星人)</td>\n<td><code>:alien:</code></td>\n<td>由于外部 API 更改而更新代码</td>\n</tr>\n<tr>\n<td>🚚 (货车)</td>\n<td><code>:truck:</code></td>\n<td>移动或者重命名文件</td>\n</tr>\n<tr>\n<td>📄 (正面朝上的页面)</td>\n<td><code>:page_facing_up:</code></td>\n<td>增加或更新许可证书</td>\n</tr>\n<tr>\n<td>💥 (爆炸)</td>\n<td><code>:boom:</code></td>\n<td>引入突破性的变化</td>\n</tr>\n<tr>\n<td>🍱 (铅笔)</td>\n<td><code>:bento:</code></td>\n<td>增加或更新资源</td>\n</tr>\n<tr>\n<td>👌 (OK 手势)</td>\n<td><code>:ok_hand:</code></td>\n<td>由于代码审查更改而更新代码</td>\n</tr>\n<tr>\n<td>♿️ (轮椅)</td>\n<td><code>:wheelchair:</code></td>\n<td>改善无障碍交互</td>\n</tr>\n<tr>\n<td>💡 (灯泡)</td>\n<td><code>:bulb:</code></td>\n<td>给代码添加注释</td>\n</tr>\n<tr>\n<td>🍻 (啤酒)</td>\n<td><code>:beers:</code></td>\n<td>醉醺醺地写代码…</td>\n</tr>\n<tr>\n<td>💬 (消息气泡)</td>\n<td><code>:speech_balloon:</code></td>\n<td>更新文本文档</td>\n</tr>\n<tr>\n<td>🗃 (卡片文件盒)</td>\n<td><code>:card_file_box:</code></td>\n<td>执行与数据库相关的更改</td>\n</tr>\n<tr>\n<td>🔊 (音量大)</td>\n<td><code>:loud_sound:</code></td>\n<td>增加日志</td>\n</tr>\n<tr>\n<td>🔇 (静音)</td>\n<td><code>:mute:</code></td>\n<td>移除日志</td>\n</tr>\n<tr>\n<td>👥 (轮廓中的半身像)</td>\n<td><code>:busts_in_silhouette:</code></td>\n<td>增加贡献者</td>\n</tr>\n<tr>\n<td>🚸 (孩童通行)</td>\n<td><code>:children_crossing:</code></td>\n<td>优化用户体验、可用性</td>\n</tr>\n<tr>\n<td>🏗 (建筑建造)</td>\n<td><code>:building_construction:</code></td>\n<td>结构变动</td>\n</tr>\n<tr>\n<td>📱 (iPhone)</td>\n<td><code>:iphone:</code></td>\n<td>做响应式设计</td>\n</tr>\n<tr>\n<td>🤡 (小丑脸)</td>\n<td><code>:clown_face:</code></td>\n<td>嘲弄事物（直译，这个没明白）</td>\n</tr>\n<tr>\n<td>🥚 (鸡蛋)</td>\n<td><code>:egg: </code></td>\n<td>增加彩蛋</td>\n</tr>\n<tr>\n<td>🙈 (看不见邪恶)</td>\n<td><code>:see_no_evil:</code></td>\n<td>增加或更改 gitignore</td>\n</tr>\n<tr>\n<td>📸 (照相机闪光灯)</td>\n<td><code>:camera_flash:</code></td>\n<td>增加或更新截图</td>\n</tr>\n<tr>\n<td>⚗️ (蒸馏器)</td>\n<td><code>:alembic:</code></td>\n<td>尝试新东西</td>\n</tr>\n<tr>\n<td>🔍 (放大镜)</td>\n<td><code>:mag: </code></td>\n<td>SEO 优化</td>\n</tr>\n<tr>\n<td>☸️ (船的方向盘)</td>\n<td><code>:wheel_of_dharma: </code></td>\n<td>关于 Kubernetes 的工作</td>\n</tr>\n<tr>\n<td>🏷 (标签)</td>\n<td><code>:label:</code></td>\n<td>增加类型（FLow、Typescript</td>\n</tr>\n</tbody>\n</table>\n",
      "date_published": "2022-01-07T10:07:15.000Z",
      "date_modified": "2022-06-02T11:02:17.000Z",
      "authors": [],
      "tags": []
    },
    {
      "title": ".NET 编码的基础知识",
      "url": "https://igeekfan.cn/igeekfan-docs/blogs/net-encoded-1.html",
      "id": "https://igeekfan.cn/igeekfan-docs/blogs/net-encoded-1.html",
      "content_html": "<h1 id=\"net-编码的基础知识\" tabindex=\"-1\"> .NET 编码的基础知识</h1>\n<p>.NET 编码的一些基本概念和分析</p>\n<h3 id=\"简单的类型概念\" tabindex=\"-1\"> 简单的类型概念</h3>\n<ul>\n<li>Hex （16 进制）</li>\n<li>byte 字节 范围是：<code>0~255</code>，二进制下的范围就是<code>00000000~11111111</code>，相当于 1 字节。</li>\n<li>byte[] 字节数组</li>\n<li>bit 比特，只有 2 种状态：0，1</li>\n</ul>\n<p><strong>1 字节 等于 8 比特</strong> 即<strong>1byte=8bit</strong></p>\n<p>在 c#中。Byte 即 byte，他是一个 struct 结构体，</p>\n<p>b1 等于 b2.</p>\n<div><pre><code><span><span>byte</span></span> b <span>=</span> <span>1</span><span>;</span>\n<span><span>byte</span></span> b1 <span>=</span> <span>0xf</span><span>;</span><span>//以0x开头 即16进制的写法</span>\n<span><span>byte</span></span> b2 <span>=</span> <span>15</span><span>;</span>\nAssert<span>.</span><span>Equal</span><span>(</span>b1<span>,</span> b2<span>)</span><span>;</span>\n</code></pre><div aria-hidden=\"true\"><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br></div></div><p>错误的语法</p>\n<div><pre><code><span><span>byte</span></span> b3 <span>=</span> b1 <span>+</span> b2<span>;</span>\n</code></pre><div aria-hidden=\"true\"><span>1</span><br></div></div><p>正确的语法</p>\n<div><pre><code>byte b3 = (byte)(b1 + b2);\n//或\nint b4 = b1 + b2;\n</code></pre><div aria-hidden=\"true\"><span>1</span><br><span>2</span><br><span>3</span><br></div></div><p>因为 byte 的相互运算太容易发生溢出，+ 加的重载 是 int 类型相加，所以结果是 int 类型</p>\n<h3 id=\"encoding-utf8-getbytes\" tabindex=\"-1\"> Encoding.UTF8.GetBytes</h3>\n<p>UTF8 是统一的编码方式，它是一种变长的编码方式.它可以使用 1~4 个字节表示一个符号，根据不同的符号而变化字节长度</p>\n<div><pre><code>byte[] plaintext = Encoding.UTF8.GetBytes(\"0123456789\");\n</code></pre><div aria-hidden=\"true\"><span>1</span><br></div></div><p>能得到什么样的数据，<strong>48,49,50,51,52,53,54,55,56,57</strong>。为什么？</p>\n<p>搜 ASCII 码，我们就知道 <code>0</code>的 ASCII 码是 <code>48</code></p>\n<p>如果是字母呢。</p>\n<div><pre><code>byte[] plaintext = Encoding.UTF8.GetBytes(\"ABCDabcd\");\n</code></pre><div aria-hidden=\"true\"><span>1</span><br></div></div><p>能得到什么样的数据，<strong>65,66,67,68,97,98,99,100</strong>。为什么？还是因为 ASCII 码。UTF8 当然是兼容 ASCII 码。</p>\n<p>因为一个 ASCII 码，1 个字节就能表示 256 个状态，所以英文字母，阿拉伯数字，标点符号都不在话，哪如果是中文呢。这里我们就拿 UTF8 编码来分析。</p>\n<div><pre><code>byte[]   plaintext = Encoding.UTF8.GetBytes(\"中国\");\n</code></pre><div aria-hidden=\"true\"><span>1</span><br></div></div><p>如下内容，长度为 6，228，184，173 都是十进制。如果转成 16 进制呢。<strong>e4，b8，ad</strong>，如果分不清十六进制，建议学一下，计算机系统基础。当然，说明一下，<code>a</code>代表<code>10</code>，<code>e</code>即代表<code>14</code>.即<code>14*16+4=228</code>.表示时不区分大小写，即用大写<code>A</code>，和小写<code>a</code>都能表示<code>10</code></p>\n<table>\n<thead>\n<tr>\n<th>列</th>\n<th>十进制</th>\n<th>十六进制</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>0</td>\n<td>228</td>\n<td>e4</td>\n</tr>\n<tr>\n<td>1</td>\n<td>184</td>\n<td>b8</td>\n</tr>\n<tr>\n<td>2</td>\n<td>173</td>\n<td>ad</td>\n</tr>\n<tr>\n<td>3</td>\n<td>229</td>\n<td>e5</td>\n</tr>\n<tr>\n<td>4</td>\n<td>155</td>\n<td>9b</td>\n</tr>\n<tr>\n<td>5</td>\n<td>189</td>\n<td>bd</td>\n</tr>\n</tbody>\n</table>\n<p>我们从网上搜下，可以发现 中国 的 UTF-8 编码： <strong>E4B8AD E59BBD</strong>.说明通过<code>Encoding.UTF8.GetBytes</code>的结果肯定是对的。中文是用 3 或 4 个 Bytes 存储的。</p>\n<h3 id=\"_1-byte-转换-hex-16-进制字符串\" tabindex=\"-1\"> 1.byte[] 转换 hex(16 进制字符串)</h3>\n<ol>\n<li><code>Encoding.UTF8.GetBytes</code>能得到数据的十进制的字节数组。</li>\n<li><code>BitConverter.ToString</code>支持将十进制的数据转换成 16 进制，中间以<code>-</code>分隔，所以需要将中间的<code>-</code> <code>Replace</code>掉</li>\n</ol>\n<div><pre><code>public string ByteToHex(string str)\n{\n    byte[] bytes = Encoding.UTF8.GetBytes(str);\n    string hex = BitConverter.ToString(bytes, 0).Replace(\"-\", string.Empty);\n    return hex;\n}\n</code></pre><div aria-hidden=\"true\"><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br></div></div><p><code>hex</code>得到 的数据就是 <code>E4B8ADE59BBD</code></p>\n<div><pre><code> <span><span>string</span></span> hex<span>=</span> <span>ByteToHex</span><span>(</span><span>\"中国\"</span><span>)</span><span>;</span>\n</code></pre><div aria-hidden=\"true\"><span>1</span><br></div></div><h3 id=\"_2-byte-转换-hex-stringbuilder-方式\" tabindex=\"-1\"> 2.byte[] 转换 hex:StringBuilder 方式</h3>\n<p>如下内容为什么能将数据转成 16 进制.</p>\n<ol>\n<li><code>Encoding.UTF8.GetBytes</code>能得到数据的十进制的字节数组。</li>\n<li>利用 c#中的 <strong><a href=\"https://docs.microsoft.com/zh-cn/dotnet/standard/base-types/composite-formatting\" target=\"_blank\" rel=\"noopener noreferrer\">复合格式化特性</a></strong> {0:X2}自动转换成 16 进制。同样内容支持 Console.WriteLine 等</li>\n</ol>\n<div><pre><code><span>public</span> <span><span>string</span></span> <span>ByteToHex2</span><span>(</span><span><span>string</span></span> str<span>)</span>\n<span>{</span>\n    <span><span>byte</span><span>[</span><span>]</span></span> bytes <span>=</span> Encoding<span>.</span>UTF8<span>.</span><span>GetBytes</span><span>(</span>str<span>)</span><span>;</span>\n    <span>StringBuilder</span> ret <span>=</span> <span>new</span> <span>StringBuilder</span><span>(</span><span>)</span><span>;</span>\n    <span>foreach</span> <span>(</span><span><span>byte</span></span> b <span>in</span> bytes<span>)</span>\n    <span>{</span>\n        <span>//{0:x2} 小写</span>\n        ret<span>.</span><span>AppendFormat</span><span>(</span><span>\"{0:X2}\"</span><span>,</span> b<span>)</span><span>;</span>\n    <span>}</span>\n    <span>return</span> ret<span>.</span><span>ToString</span><span>(</span><span>)</span><span>;</span>\n<span>}</span>\n</code></pre><div aria-hidden=\"true\"><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br></div></div><h3 id=\"hex-16-进制字符串-转换-byte\" tabindex=\"-1\"> hex(16 进制字符串)转换 byte[]</h3>\n<ol>\n<li>一个循环将 16 进制转换成 10 进制。</li>\n</ol>\n<div><pre><code><span>public</span> <span><span>byte</span><span>[</span><span>]</span></span> <span>HexToByte</span><span>(</span><span><span>string</span></span> hex<span>)</span>\n<span>{</span>\n    <span><span>byte</span><span>[</span><span>]</span></span> inputByteArray <span>=</span> <span>new</span> <span><span>byte</span></span><span>[</span>hex<span>.</span>Length <span>/</span> <span>2</span><span>]</span><span>;</span>\n    <span>for</span> <span>(</span><span><span>var</span></span> x <span>=</span> <span>0</span><span>;</span> x <span>&lt;</span> inputByteArray<span>.</span>Length<span>;</span> x<span>++</span><span>)</span>\n    <span>{</span>\n        <span><span>var</span></span> i <span>=</span> Convert<span>.</span><span>ToInt32</span><span>(</span>hex<span>.</span><span>Substring</span><span>(</span>x <span>*</span> <span>2</span><span>,</span> <span>2</span><span>)</span><span>,</span> <span>16</span><span>)</span><span>;</span>\n        inputByteArray<span>[</span>x<span>]</span> <span>=</span> <span>(</span><span>byte</span><span>)</span>i<span>;</span>\n    <span>}</span>\n    <span>return</span> inputByteArray<span>;</span>\n<span>}</span>\n</code></pre><div aria-hidden=\"true\"><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br></div></div><p>调用如下内容，bytes[]中的长度为 6，数据是 228，184，173、229，155，189。即上文中的中国的十进制 byte 数组</p>\n<div><pre><code><span><span>string</span></span> hexChinese <span>=</span> <span>\"E4B8ADE59BBD\"</span><span>;</span><span>//中国的UTF8编码。十六进制。</span>\n<span><span>byte</span><span>[</span><span>]</span></span> bytes <span>=</span> <span>HexToByte</span><span>(</span>hexChinese<span>)</span><span>;</span>\n<span><span>string</span></span> text <span>=</span> Encoding<span>.</span>UTF8<span>.</span><span>GetString</span><span>(</span>bytes<span>)</span><span>;</span><span>// `中国`</span>\n</code></pre><div aria-hidden=\"true\"><span>1</span><br><span>2</span><br><span>3</span><br></div></div>",
      "date_published": "2022-01-07T10:07:15.000Z",
      "date_modified": "2022-06-02T11:02:17.000Z",
      "authors": [],
      "tags": []
    },
    {
      "title": ".NET+Sqlite 如何支持加密",
      "url": "https://igeekfan.cn/igeekfan-docs/blogs/net-sqlite-encryption.html",
      "id": "https://igeekfan.cn/igeekfan-docs/blogs/net-sqlite-encryption.html",
      "content_html": "<h1 id=\"net-sqlite-如何支持加密\" tabindex=\"-1\"> .NET+Sqlite 如何支持加密</h1>\n<h2 id=\"相关文章\" tabindex=\"-1\"> 相关文章</h2>\n<ul>\n<li><a href=\"https://www.cnblogs.com/igeekfan/p/freesql-sqlitecore-SQLCipher.html\" target=\"_blank\" rel=\"noopener noreferrer\">FreeSql.Provider.SqliteCore 如何加密</a></li>\n</ul>\n<h2 id=\"sqlite\" tabindex=\"-1\"> Sqlite</h2>\n<p><code>SQLite</code> 来源于公共领域 <code>SQLite Is Public Domain</code>、\n确保代码不会受到任何专有或许可内容的污染，没有任何来自互联网上的未知来源复制。即全是原创的。</p>\n<p>虽然是免费的，无需许可证，可用于任何目的，但如果你的公司必须要一个许可证，你也能申请授权<a href=\"https://sqlite.org/purchase/license\" target=\"_blank\" rel=\"noopener noreferrer\">https://sqlite.org/purchase/license</a>.</p>\n<p>但不支持<strong>加密</strong>。如果想支持登录加密，需要另外的扩展<strong>SQLite 加密扩展(SQLite Encryption Extension,)</strong>，具有读取/写入 AES 加密数据库的附加功能。具体授权可参考 <a href=\"https://www.sqlite.org/prosupport.html\" target=\"_blank\" rel=\"noopener noreferrer\">https://www.sqlite.org/prosupport.html</a></p>\n<h2 id=\"sqlite-加密\" tabindex=\"-1\"> Sqlite 加密</h2>\n<p>一直以来，<code>FreeSql</code>开发群中，总会有一些开发者来询问<code>Sqlite</code>加密的问题，事实上，官方提供的 Sqlite 加密功能是收费的。当连接串上使用<code>Password</code>时，会提示授权问题。\n如果底层依赖于<code>System.Data.SQLite.Core</code>，</p>\n<div><pre><code>Could not load file or assembly 'System.Data.SQLite.SEE.License,\nVersion=1.0.115.5, Culture=neutral, PublicKeyToken=433d9874d0bb98c5,\nprocessorArchitecture=MSIL\n</code></pre><div aria-hidden=\"true\"><span>1</span><br><span>2</span><br><span>3</span><br></div></div><p>如果底层依赖于<code>Microsoft.Data.Sqlite</code> 也会提示</p>\n<div><pre><code>You specified a password in the connection string, but the native SQLite\nlibrary 'e_sqlite3' doesn't support encryption.\n</code></pre><div aria-hidden=\"true\"><span>1</span><br><span>2</span><br></div></div><h2 id=\"system-data-sqlite-core\" tabindex=\"-1\"> System.Data.SQLite.Core</h2>\n<p>创建一个控制台项目,起名 <code>OvOv.SqliteSystemCore</code></p>\n<div><pre><code>dotnet new console -n OvOv.SqliteSystemCore\n<span>cd</span> OvOv.SqliteSystemCore\n</code></pre><div aria-hidden=\"true\"><span>1</span><br><span>2</span><br></div></div><p>安装包</p>\n<div><pre><code>dotnet <span>add</span> package System.Data.SQLite.Core\n</code></pre><div aria-hidden=\"true\"><span>1</span><br></div></div><p>使用<code>SQLiteConnection</code>创建一个连接，使用 Password 指定密码</p>\n<div><pre><code><span>using</span> <span>System<span>.</span>Data<span>.</span>SQLite</span><span>;</span>\n\n<span>static</span> <span><span>void</span></span> <span>Open</span><span>(</span><span>)</span>\n<span>{</span>\n    <span><span>string</span></span> baseConnectionString <span>=</span> <span>\"Data Source=local.db\"</span><span>;</span>\n    <span><span>var</span></span> connectionString <span>=</span> <span>new</span> <span>SQLiteConnectionStringBuilder</span><span>(</span>baseConnectionString<span>)</span>\n    <span>{</span>\n        Password <span>=</span> <span>\"123qwe\"</span>\n    <span>}</span><span>.</span><span>ToString</span><span>(</span><span>)</span><span>;</span>\n\n    <span>using</span> <span>SQLiteConnection<span>?</span></span> connection <span>=</span> <span>new</span> <span>SQLiteConnection</span><span>(</span>connectionString<span>)</span><span>;</span>\n    connection<span>.</span><span>Open</span><span>(</span><span>)</span><span>;</span>\n<span>}</span>\n<span>Open</span><span>(</span><span>)</span><span>;</span>\n</code></pre><div aria-hidden=\"true\"><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br></div></div><p>运行项目</p>\n<div><pre><code>dotnet run\n</code></pre><div aria-hidden=\"true\"><span>1</span><br></div></div><p>就会出现如下错误。</p>\n<div><pre><code>System.IO.FileNotFoundException:“Could not load file or assembly\n'System.Data.SQLite.SEE.License, Version=1.0.115.5, Culture=neutral, PublicKeyToken=433d9874d0bb98c5, processorArchitecture=MSIL'.\n系统找不到指定的文件。”\n</code></pre><div aria-hidden=\"true\"><span>1</span><br><span>2</span><br><span>3</span><br></div></div><h2 id=\"microsoft-data-sqlite\" tabindex=\"-1\"> Microsoft.Data.Sqlite</h2>\n<p>创建一个控制台项目,起名 <code>OvOv.SqliteMicrosoft</code></p>\n<div><pre><code>dotnet new console -n OvOv.SqliteMicrosoft\n<span>cd</span> OvOv.SqliteMicrosoft\n</code></pre><div aria-hidden=\"true\"><span>1</span><br><span>2</span><br></div></div><p>安装包</p>\n<div><pre><code>dotnet <span>add</span> package Microsoft.Data.Sqlite\n</code></pre><div aria-hidden=\"true\"><span>1</span><br></div></div><p>使用<code>SqliteConnection</code>创建一个连接，使用 Password 指定密码</p>\n<div><pre><code><span>using</span> <span>Microsoft<span>.</span>Data<span>.</span>Sqlite</span><span>;</span>\n\n<span>static</span> <span><span>void</span></span> <span>Open</span><span>(</span><span>)</span>\n<span>{</span>\n    <span><span>string</span></span> baseConnectionString <span>=</span> <span>\"Data Source=local.db\"</span><span>;</span>\n    <span><span>var</span></span> connectionString <span>=</span> <span>new</span> <span>SqliteConnectionStringBuilder</span><span>(</span>baseConnectionString<span>)</span>\n    <span>{</span>\n        Mode <span>=</span> SqliteOpenMode<span>.</span>ReadWriteCreate<span>,</span>\n        Password <span>=</span> <span>\"123qwe\"</span>\n    <span>}</span><span>.</span><span>ToString</span><span>(</span><span>)</span><span>;</span>\n\n    <span>using</span> <span>SqliteConnection<span>?</span></span> connection <span>=</span> <span>new</span> <span>SqliteConnection</span><span>(</span>connectionString<span>)</span><span>;</span>\n    connection<span>.</span><span>Open</span><span>(</span><span>)</span><span>;</span>\n<span>}</span>\n\n<span>Open</span><span>(</span><span>)</span><span>;</span>\n</code></pre><div aria-hidden=\"true\"><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br></div></div><p>运行项目</p>\n<div><pre><code>dotnet run\n</code></pre><div aria-hidden=\"true\"><span>1</span><br></div></div><p>就会出现如下错误。</p>\n<div><pre><code>Unhandled exception. System.InvalidOperationException: You specified a password in the connection string,\nbut the native SQLite library\n'e_sqlite3' doesn't support encryption. at Microsoft.Data.Sqlite.SqliteConnection.Open()\n</code></pre><div aria-hidden=\"true\"><span>1</span><br><span>2</span><br><span>3</span><br></div></div><p>其实微软已经提供了加密的方案。</p>\n<ul>\n<li><a href=\"https://docs.microsoft.com/zh-cn/dotnet/standard/data/sqlite/encryption?tabs=netcore-cli\" target=\"_blank\" rel=\"noopener noreferrer\">https://docs.microsoft.com/zh-cn/dotnet/standard/data/sqlite/encryption?tabs=netcore-cli</a></li>\n</ul>\n<div><pre><code>dotnet remove package Microsoft.Data.Sqlite\ndotnet <span>add</span> package Microsoft.Data.Sqlite.Core\ndotnet <span>add</span> package SQLitePCLRaw.bundle_e_sqlcipher\n</code></pre><div aria-hidden=\"true\"><span>1</span><br><span>2</span><br><span>3</span><br></div></div><p>重新运行项目 ，就会发现，他正常执行。没有任何报错。</p>\n<p>有关使用不同的本机库进行加密的详细信息，请参阅<a href=\"https://docs.microsoft.com/zh-cn/dotnet/standard/data/sqlite/custom-versions?tabs=netcore-cli\" target=\"_blank\" rel=\"noopener noreferrer\">自定义 SQLite 版本</a>。</p>\n<p>我们从 自定义 SQLite 版本上可以看到。</p>\n<p>默认情况下，主 <code>Microsoft.Data.Sqlite</code> 包引入 <code>SQLitePCLRaw.bundle_e_sqlite3</code>。 若要使用不同的捆绑，请改为安装 <code>Microsoft.Data.Sqlite.Core</code> 包以及要使用的捆绑包。</p>\n<h4 id=\"sqlitepclraw-bundle-e-sqlcipher\" tabindex=\"-1\"> <code>SQLitePCLRaw.bundle_e_sqlcipher</code></h4>\n<p>提供 SQLCipher 的<strong>非官方开放源代码内部版本</strong>。此版本支持<strong>加密</strong>。</p>\n<h3 id=\"ado-net-修改-sqlite-密码\" tabindex=\"-1\"> ADO.NET 修改 Sqlite 密码</h3>\n<div><pre><code><span>static</span> <span><span>int</span></span> <span>UpdatePassword</span><span>(</span><span><span>string</span></span> oldPassword<span>,</span> <span><span>string</span></span> newPassword<span>)</span>\n<span>{</span>\n    <span><span>string</span></span> baseConnectionString <span>=</span> <span>\"Data Source=local.db\"</span><span>;</span>\n    <span><span>var</span></span> connectionString <span>=</span> <span>new</span> <span>SqliteConnectionStringBuilder</span><span>(</span>baseConnectionString<span>)</span>\n    <span>{</span>\n        Mode <span>=</span> SqliteOpenMode<span>.</span>ReadWriteCreate<span>,</span>\n        Password <span>=</span> oldPassword\n    <span>}</span><span>.</span><span>ToString</span><span>(</span><span>)</span><span>;</span>\n\n    <span>using</span> <span>(</span><span><span>var</span></span> connection <span>=</span> <span>new</span> <span>SqliteConnection</span><span>(</span>connectionString<span>)</span><span>)</span>\n    <span>{</span>\n        connection<span>.</span><span>Open</span><span>(</span><span>)</span><span>;</span>\n        <span>using</span> <span>(</span><span><span>var</span></span> command <span>=</span> connection<span>.</span><span>CreateCommand</span><span>(</span><span>)</span><span>)</span>\n        <span>{</span>\n            command<span>.</span>CommandText <span>=</span> <span>\"SELECT quote($newPassword);\"</span><span>;</span>\n            command<span>.</span>Parameters<span>.</span><span>AddWithValue</span><span>(</span><span>\"$newPassword\"</span><span>,</span> newPassword<span>)</span><span>;</span>\n            <span><span>var</span></span> quotedNewPassword <span>=</span> command<span>.</span><span>ExecuteScalar</span><span>(</span><span>)</span> <span>as</span> <span><span>string</span></span><span>;</span>\n\n            command<span>.</span>CommandText <span>=</span> <span>\"PRAGMA rekey = \"</span> <span>+</span> quotedNewPassword<span>;</span>\n            command<span>.</span>Parameters<span>.</span><span>Clear</span><span>(</span><span>)</span><span>;</span>\n            <span><span>int</span></span> x <span>=</span> command<span>.</span><span>ExecuteNonQuery</span><span>(</span><span>)</span><span>;</span>\n            <span>return</span> x<span>;</span>\n        <span>}</span>\n    <span>}</span>\n<span>}</span>\n\n<span><span>string</span></span> oldPassword <span>=</span> <span>\"123qwe\"</span><span>;</span>\n<span><span>string</span></span> newPassword <span>=</span> <span>\"abcd\"</span><span>;</span>\n<span>UpdatePassword</span><span>(</span>oldPassword<span>,</span> newPassword<span>)</span><span>;</span>\n</code></pre><div aria-hidden=\"true\"><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br><span>24</span><br><span>25</span><br><span>26</span><br><span>27</span><br><span>28</span><br><span>29</span><br></div></div><h4 id=\"完整代码\" tabindex=\"-1\"> 完整代码</h4>\n<ul>\n<li><a href=\"https://github.com/luoyunchong/dotnetcore-examples/blob/master/Database-Drivers/OvOv.SqliteMicrosoftCore/Program.cs\" target=\"_blank\" rel=\"noopener noreferrer\">https://github.com/luoyunchong/dotnetcore-examples/blob/master/Database-Drivers/OvOv.SqliteMicrosoftCore/Program.cs</a></li>\n</ul>\n",
      "date_published": "2022-01-07T10:07:15.000Z",
      "date_modified": "2022-06-02T11:02:17.000Z",
      "authors": [],
      "tags": []
    },
    {
      "title": "Serilog指南",
      "url": "https://igeekfan.cn/igeekfan-docs/dotnetcore/examples/serilog-tutorial.html",
      "id": "https://igeekfan.cn/igeekfan-docs/dotnetcore/examples/serilog-tutorial.html",
      "content_html": "<h1 id=\"serilog指南\" tabindex=\"-1\"> Serilog指南</h1>\n<ul>\n<li>原文：<a href=\"https://blog.datalust.co/serilog-tutorial/#3eventsandlevels\" target=\"_blank\" rel=\"noopener noreferrer\">https://blog.datalust.co/serilog-tutorial/#3eventsandlevels</a></li>\n<li>github: <a href=\"https://github.com/serilog/serilog\" target=\"_blank\" rel=\"noopener noreferrer\">https://github.com/serilog/serilog</a></li>\n</ul>\n<h3 id=\"_1-概述\" tabindex=\"-1\"> 1.概述</h3>\n<p>serilog是一个完全结构化事件的简单.NET日志记录</p>\n<p><code>fully-structured</code>,结构化</p>\n<ul>\n<li>支持多种Provider，可将日志推送到不同的中间件，如文件，数据库(mysql,sql server,mariadb等)</li>\n</ul>\n<h3 id=\"_2-hello-serilog\" tabindex=\"-1\"> 2. Hello, Serilog!</h3>\n<p>让我们从最简单的开始，跟随以下教程，你需要创建一个Console项目，适用于.NET FrameWork 和.NET Core。</p>\n<p><code>Serilog</code> 通过 <code>NuGet</code>  分发包. 该项目以Serilog包为核心组织，配合许多 <code>sinks</code>（接收器） (超过上百!), 用于将事件写入终端,文件，数据库，日志服务器的插件中。</p>\n<p>我们从 <code>Serilog</code> 和 <code>Serilog.Sinks.Console</code>开始, 稍后再讨论其他选项:</p>\n<div><pre><code>Install-Package Serilog\nInstall-Package Serilog.Sinks.Console\n</code></pre><div aria-hidden=\"true\"><span>1</span><br><span>2</span><br></div></div><p>以下是世界上最简单的 Serilog 配置：</p>\n<div><pre><code>using Serilog;\n\nclass Program\n{\n    public static void Main(string[] args)\n    {\n        using (var log = new LoggerConfiguration()\n            .WriteTo.Console()\n            .CreateLogger())\n        {\n            log.Information(\"Hello, Serilog!\");\n            log.Warning(\"Goodbye, Serilog.\");\n        }\n    }\n}\n</code></pre><div aria-hidden=\"true\"><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br></div></div><p>明确以下几点</p>\n<ul>\n<li><code>LoggerConfiguration</code> 类提供 了一个fluent 接口 构建一个日志管道</li>\n<li><code>WriteTo.Console() </code> 将一个控制台接收器 添加到管道中</li>\n<li><code>CreateLogger()</code> 集合构建后会 返回一个 <code>Logger</code> 对象, 他实现了 <code>ILogger</code>的接口</li>\n<li><code>Logger</code> 接口继承 <code>IDisposable</code>, 所以我们使用 <code>using</code> 块</li>\n<li>最后, <code>log.Information()</code> 和 <code>log.Warning()</code> 通过logger记录所有的发出的事件</li>\n</ul>\n<p>运行程序</p>\n<p><img src=\"https://note.youdao.com/yws/api/personal/file/261B46CA8E7E474D889CC2D6312BA39E?method=download&amp;shareKey=b47ca475a270339f81b8af4ba28a1954\" alt=\"image\" loading=\"lazy\"></p>\n<p>现在最迫切的问题是: 在我们的应用程序中，其他类如何得到这个Log对象? 除了通过参数进行传递, 有两种可能性</p>\n<ul>\n<li>如果您使用的是 <code>IoC</code> 容器, 你 可以使用组件接收<code>ILogger</code>对象，即通过 <code>dependency injection</code>(依赖注入)<code> ILogger</code>的方式使用. 像集成 <a href=\"https://github.com/nblumhardt/autofac-serilog-integration\" target=\"_blank\" rel=\"noopener noreferrer\">AutofacSerilogIntegration</a>等包即可。</li>\n</ul>\n<p>或者,你可以把Logger存储到一个已知的位置中;为此 <code>Serilog</code>有一个静态日志类</p>\n<div><pre><code>Log<span>.</span>Logger <span>=</span> <span>new</span> <span>LoggerConfiguration</span><span>(</span><span>)</span>\n    <span>.</span>WriteTo<span>.</span><span>Console</span><span>(</span><span>)</span>\n    <span>.</span><span>CreateLogger</span><span>(</span><span>)</span><span>;</span>\n\nLog<span>.</span><span>Information</span><span>(</span><span>\"Hello again, Serilog!\"</span><span>)</span><span>;</span>\n\nLog<span>.</span><span>CloseAndFlush</span><span>(</span><span>)</span><span>;</span>\n</code></pre><div aria-hidden=\"true\"><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br></div></div><p><code>Log</code> 类提供了与<code>ILogger</code>接口相同的所有方法.用于替换使用using 块,我们可以调用 <code>Log.CloseAndFlush()</code>，重置<code>Serilog.Log.Logger</code>,并释放原有的资源</p>\n<blockquote>\n<p>你可能选择基于<code>ILogger</code>的注入方式使用，或使用静态Log类 -这种选择是基于个人口味和爱好的问题. 为了保持简单 我们将在此教程中使用静态日志类。</p>\n</blockquote>\n<h3 id=\"_3-事件和级别\" tabindex=\"-1\"> 3. 事件和级别</h3>\n<p>如果使用过<code>log4net</code>等较旧的库，在使<code>Serilog</code>时，您需要在思维方式上做的最大改变是从日志事件而不是日志消息的角度来思考。活动由以下部分组成：</p>\n<ul>\n<li>记录事件发生时的时间戳</li>\n<li>描述何时应捕获事件的级别</li>\n<li>记录事件所代表内容的消息</li>\n<li>描述事件的命名属性</li>\n<li>可能是一个异常对象</li>\n</ul>\n<p>您可以将日志事件格式化为控制台的可读文本，正如我们在第一个示例中看到的：</p>\n<div><pre><code>11:33:01 [INF] Hello, Serilog!\n</code></pre><div aria-hidden=\"true\"><span>1</span><br></div></div><p>或者，您可以将同一事件格式化为JSON，并将其发送到远程日志服务器：</p>\n<div><pre><code>{\"@t\":\"2017-11-20T11:33:01.22138\",\"@m\":\"Hello, Serilog!\"}`\n</code></pre><div aria-hidden=\"true\"><span>1</span><br></div></div><p>在幕后，应用程序中的日志语句创建LogEvent对象，而连接到管道的接收器则确定如何记录它们。</p>\n<h3 id=\"logging-levels\" tabindex=\"-1\"> Logging levels</h3>\n<p><code>Serilog</code>速度很快，但始终构造和记录详细的日志事件可能会浪费CPU、磁盘和网络资源。为了管理这一点，<code>Serilog</code>事件被分配了调试、信息、警告和错误等级别。每个支持的级别都有一个<code>Log.*（）</code>方法。</p>\n<p>在开发过程中，可能会打开调试级别事件：</p>\n<div><pre><code>Log.Logger = new LoggerConfiguration()\n    .MinimumLevel.Debug() // &lt;- Set the minimum level\n    .WriteTo.Console()\n    .CreateLogger();\n\n// In a tight loop...\nLog.Debug(\"Processing item {ItemNumber} of {ItemCount}\", itemNumber, itemCount);\n</code></pre><div aria-hidden=\"true\"><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br></div></div><p>在生产中，通常关闭调试事件并将最低级别设置为信息，以便只记录重要事件。阅读文档中有关<code>Serilog</code>级别的<a href=\"https://github.com/serilog/serilog/wiki/Writing-Log-Events#log-event-levels\" target=\"_blank\" rel=\"noopener noreferrer\">更多信息</a>。</p>\n<h3 id=\"_4-发送和收集结构化数据\" tabindex=\"-1\"> 4. 发送和收集结构化数据</h3>\n<div><pre><code>var itemNumber = 10;\nvar itemCount = 999;\nLog.Debug(\"Processing item {ItemNumber} of {ItemCount}\", itemNumber, itemCount);\n</code></pre><div aria-hidden=\"true\"><span>1</span><br><span>2</span><br><span>3</span><br></div></div><p>您注意到日志消息中的<code>{ItemNumber}</code>之类的命名占位符了吗？这不是C#插值字符串：Log.*（）方法接受消息模板，这是.NET格式字符串的一种变体，除了通常的{0}位置字符串外，还支持{Named}占位符。</p>\n<p>这似乎有点奇怪，直到您意识到，通过这样做，<code>Serilog</code>可以将消息的一部分作为一级属性与人性化文本一起捕获：</p>\n<div><pre><code>{\n    \"@t\": \"2017-11-20T11:33:01.22138\",\n    \"@l\": \"Debug\",\n    \"@m\": \"Processing item 10 of 999\",\n    \"ItemNumber\": 10,\n    \"ItemCount\": 999\n}\n</code></pre><div aria-hidden=\"true\"><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br></div></div><p>我们为什么要这样做？由于日志事件附带了一些有趣的字段作为属性，因此我们可以立即使用简单的过滤器（如<code>ItemNumber&gt;900</code>）来查找事件，而不必通过正则表达式从消息中提取信息。</p>\n<p>更进一步，我们可以使用<code>@structure</code>捕获操作符不仅获取平面属性值，还获取完整的对象：</p>\n<div><pre><code>var user = new { Name = \"Nick\", Id = \"nblumhardt\" };\nLog.Information(\"Logged on user {@User}\", user);\n</code></pre><div aria-hidden=\"true\"><span>1</span><br><span>2</span><br></div></div><p>在这里，用户对象被捕获到生成的JSON中，因此我们可以使用诸如<code>user.Id='nblumhardt'</code>之类的查询来查找事件：</p>\n<div><pre><code>{\n    \"@t\": \"2017-11-20T11:33:01.22138\",\n    \"@m\": \"Logged on user {\\\"Name\\\": \\\"Nick\\\", \\\"Id\\\": \\\"nblumhardt\\\"}\",\n    \"User\": {\"Name\": \"Nick\", \"Id\": \"nblumhardt\"}\n}\n</code></pre><div aria-hidden=\"true\"><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br></div></div><p>生产监控和调试已经是一项艰巨、耗时且经常充满压力的任务：通常这些相关数据触手可及，<code>Serilog</code>消除了与操作相关 活动中最大的分歧之一。</p>\n<blockquote>\n<p>提示：从<code>VisualStudioMarketplace</code>安装了不起的<a href=\"https://marketplace.visualstudio.com/items?itemName=Suchiman.SerilogAnalyzer\" target=\"_blank\" rel=\"noopener noreferrer\">Serilog分析器</a>，以便在键入时检查消息模板语法</p>\n</blockquote>\n<p>这实际上会产生多大的差异，很大程度上取决于您如何从<code>Serilog</code>收集事件。传统上，日志事件进入文本文件并使用<code>grep</code>进行搜索。<code>Serilog</code>也可以记录文本文件，但您不能在记事本中执行<code>ItemNumber&gt;900</code>，因此您需要评估更强大的工具来实现这一点。</p>\n<h2 id=\"将事件写入json日志文件\" tabindex=\"-1\"> 将事件写入JSON日志文件</h2>\n<p>如果您的需求很简单，可以将<code>JSON</code>写入日志文件，并使用<code>JSON</code>感知工具直接查询文件。<code>Serilog</code>的文件接收器和紧凑的<code>JSON</code>格式化程序使第一部分变得简单。让我们尝试另一个安装了以下软件包的小型控制台应用程序：</p>\n<div><pre><code>Install-Package Serilog;\nInstall-Package Serilog.Sinks.File\nInstall-Package Serilog.Formatting.Compact\n</code></pre><div aria-hidden=\"true\"><span>1</span><br><span>2</span><br><span>3</span><br></div></div><p>在Main（）方法中：</p>\n<div><pre><code>Log.Logger = new LoggerConfiguration()\n    .MinimumLevel.Debug()\n    .WriteTo.File(new CompactJsonFormatter(), \"log.clef\")\n    .CreateLogger();\n\nvar itemCount = 99;\nfor (var itemNumber = 0; itemNumber &lt; itemCount; ++itemNumber)\n    Log.Debug(\"Processing item {ItemNumber} of {ItemCount}\", itemNumber, itemCount);\n\nLog.CloseAndFlush();\n</code></pre><div aria-hidden=\"true\"><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br></div></div><p>运行此应用程序将使用<code>Serilog</code>的压缩日志事件格式在<code>log.clef</code>中生成一个<a href=\"https://en.wikipedia.org/wiki/JSON_streaming\" target=\"_blank\" rel=\"noopener noreferrer\">新行分隔的<code>JSON</code>流</a>。（如果没有<code>CompactJsonFormatter</code>，我们将创建一个简单的平面日志文件。）</p>\n<p>如果在文本编辑器中打开该文件，您将看到JSON事件，如我们上面使用的示例。</p>\n<h3 id=\"将事件写入日志服务器\" tabindex=\"-1\"> 将事件写入日志服务器</h3>\n<div><pre><code>Install-Package Serilog.Sinks.Seq\n</code></pre><div aria-hidden=\"true\"><span>1</span><br></div></div><div><pre><code>Log.Logger = new LoggerConfiguration()\n    .MinimumLevel.Debug()\n    .WriteTo.Seq(\"http://localhost:5341\")\n    .CreateLogger();\n</code></pre><div aria-hidden=\"true\"><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br></div></div><h3 id=\"_5-标记用于筛选和关联的事件\" tabindex=\"-1\"> 5.标记用于筛选和关联的事件</h3>\n<h4 id=\"增加固定属性\" tabindex=\"-1\"> 增加固定属性</h4>\n<p>最简单的充实方法是向源自日志管道的所有事件添加固定属性值。这是使用记录器配置中的<code>Enrich.WithProperty()</code>完成的：</p>\n<div><pre><code>Log.Logger = new LoggerConfiguration()\n    .Enrich.WithProperty(\"Application\", \"Demo\")\n    .WriteTo.Seq(\"http://localhost:5341\")\n    .CreateLogger();\n</code></pre><div aria-hidden=\"true\"><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br></div></div><p>在<code>LogEvents</code>上，通过扩展添加的属性与源自消息模板的属性相同：</p>\n<div><pre><code>{\n    \"@t\": \"2017-11-20T11:33:01.22138\",\n    \"@l\": \"Debug\",\n    \"@m\": \"Processing item 10 of 999\",\n    \"ItemNumber\": 10,\n    \"ItemCount\": 999,\n    \"Application\": \"Demo\"\n}\n</code></pre><div aria-hidden=\"true\"><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br></div></div><p>这种策略有助于放大集中日志流中的特定日志源；以这种方式添加的属性包括应用程序、环境和版本等内容。</p>\n<h2 id=\"增加事件或记录器特定属性\" tabindex=\"-1\"> 增加事件或记录器特定属性</h2>\n<p>通过创建和使用上下文记录器，可以将属性添加到一个或几个相关事件中，而不是使用相同的值丰富所有事件：</p>\n<div><pre><code>var orderLog = Log.ForContext(\"OrderId\", order.Id);\norderLog.Information(\"Looking up product codes\");\n// ...\norderLog.Information(\"Product lookup took {Elapsed} ms\", elapsed.TotalMilliseconds);\n</code></pre><div aria-hidden=\"true\"><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br></div></div><p>在这里，通过<code>orderLog</code>发出的两个事件都将附加<code>OrderId</code>属性。</p>\n<p>扩展是可添加的：如果<code>Application</code>属性设置在管道级别，则上面的第二个事件将携带经过（来自消息）、<code>OrderId</code>（来自上下文记录器）和<code>Application</code>（来自日志管道）。</p>\n<h3 id=\"丰富源类型信息\" tabindex=\"-1\"> 丰富源类型信息</h3>\n<p>特定于记录器的充实的一个特例是如何用创建事件的类标记事件。</p>\n<p>在名为<code>HomeController</code>的类中，使用以下方法创建特定于类型的记录器：</p>\n<div><pre><code>private readonly ILogger _log = Log.ForContext&lt;HomeController>();\n</code></pre><div aria-hidden=\"true\"><span>1</span><br></div></div><p>通过<code>_log</code>发出的事件将携带值为<code>MyApp.Controller.HomeController</code>的<code>SourceContext</code>属性。</p>\n<h3 id=\"丰富环境语境\" tabindex=\"-1\"> 丰富环境语境</h3>\n<p>为了丰富工作单元中引发的所有事件，<code>Serilog</code>提供了<code>LogContext</code>。首先需要在<code>LoggerConfiguration</code>级别使用<code>Enrich.FromLogContext()</code>启用此功能：</p>\n<div><pre><code>Log.Logger = new LoggerConfiguraition()\n     .Enrich.FromLogContext()\n     // ...\n</code></pre><div aria-hidden=\"true\"><span>1</span><br><span>2</span><br><span>3</span><br></div></div><p><code>LogContext</code>可以看作是（键、值）对的堆栈；当从日志上下文中丰富事件时，这些事件将作为属性添加到事件中。</p>\n<div><pre><code>using (LogContext.PushProperty(\"MessageId\", message.Id))\n{\n    Log.Debug(\"Dispatching message of type {MessageType}\", message.GetType());\n    await handler.HandleAsync(message);\n}\n</code></pre><div aria-hidden=\"true\"><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br></div></div><p><code>LogContext</code>的有趣之处在于不需要传递任何信息。在示例代码中，<code>HandleAsync()</code>的实现以及它调用的任何其他方法都可以直接使用<code>Log</code>和<code>ILogger</code>、 <code>MessageId</code>属性将被提取并添加到后台。</p>\n<blockquote>\n<p>提示：<code>LogContext</code>是一个堆栈；推送到堆栈上的属性必须通过处理从<code>PushProperty()</code>返回的对象再次弹出-必须使用块。</p>\n</blockquote>\n",
      "image": "https://note.youdao.com/yws/api/personal/file/261B46CA8E7E474D889CC2D6312BA39E?method=download&shareKey=b47ca475a270339f81b8af4ba28a1954",
      "date_published": "2022-01-07T10:07:15.000Z",
      "date_modified": "2022-01-07T10:07:15.000Z",
      "authors": [],
      "tags": []
    },
    {
      "title": "Nacos 配置中心",
      "url": "https://igeekfan.cn/igeekfan-docs/dotnetcore/examples/nacos-aspnetcore.html",
      "id": "https://igeekfan.cn/igeekfan-docs/dotnetcore/examples/nacos-aspnetcore.html",
      "content_html": "<h1 id=\"nacos-配置中心\" tabindex=\"-1\"> Nacos 配置中心</h1>\n<p><code>nacos</code> 是一个构建云原生应用的动态服务发现、配置管理和服务管理平台。。</p>\n<h2 id=\"配置管理\" tabindex=\"-1\"> 配置管理</h2>\n<p>asp.net core 中所有的配置项，如 appsetting.json 进行集中管理,支持热加载，支持服务发现。</p>\n<ul>\n<li>nacos github <a href=\"https://github.com/alibaba/nacos\" target=\"_blank\" rel=\"noopener noreferrer\">https://github.com/alibaba/nacos</a></li>\n<li>csharp sdk github <a href=\"https://github.com/nacos-group/nacos-sdk-csharp\" target=\"_blank\" rel=\"noopener noreferrer\">https://github.com/nacos-group/nacos-sdk-csharp</a></li>\n<li>csharp sdk 文档：<a href=\"https://nacos-sdk-csharp.readthedocs.io/en/latest/introduction/gettingstarted.html\" target=\"_blank\" rel=\"noopener noreferrer\">https://nacos-sdk-csharp.readthedocs.io/en/latest/introduction/gettingstarted.html</a></li>\n<li><a href=\"https://nacos.io/zh-cn/\" target=\"_blank\" rel=\"noopener noreferrer\">https://nacos.io/zh-cn/</a></li>\n</ul>\n<p>安装请参考：<a href=\"https://nacos.io/zh-cn/docs/quick-start.html\" target=\"_blank\" rel=\"noopener noreferrer\">https://nacos.io/zh-cn/docs/quick-start.html</a></p>\n<h3 id=\"开始\" tabindex=\"-1\"> 开始</h3>\n<ul>\n<li>windows 进入 nacos 的 bin 目录，或把目录 <code>D:\\work\\tools\\nacos\\bin</code>（我本地）配置到环境变量中的 Path 中。</li>\n</ul>\n<p>即可在任意位置，执行命令</p>\n<div><pre><code>startup.cmd -m standalone\n</code></pre><div aria-hidden=\"true\"><span>1</span><br></div></div><ul>\n<li>standalone 代表着单机模式运行，非集群模式</li>\n</ul>\n<div><pre><code>C:\\WINDOWS\\system32&gt;startup.cmd -m standalone\n&quot;nacos is starting with standalone&quot;\n\n         ,--.\n       ,--.'|\n   ,--,:  : |                                           Nacos 2.0.3\n,`--.'`|  ' :                       ,---.               Running in stand alone mode, All function modules\n|   :  :  | |                      '   ,'\\   .--.--.    Port: 8848\n:   |   \\ | :  ,--.--.     ,---.  /   /   | /  /    '   Pid: 14504\n|   : '  '; | /       \\   /     \\.   ; ,. :|  :  /`./   Console: http://192.168.0.10:8848/nacos/index.html\n'   ' ;.    ;.--.  .-. | /    / ''   | |: :|  :  ;_\n|   | | \\   | \\__\\/: . ..    ' / '   | .; : \\  \\    `.      https://nacos.io\n'   : |  ; .' ,&quot; .--.; |'   ; :__|   :    |  `----.   \\\n|   | '`--'  /  /  ,.  |'   | '.'|\\   \\  /  /  /`--'  /\n'   : |     ;  :   .'   \\   :    : `----'  '--'.     /\n;   |.'     |  ,     .-./\\   \\  /            `--'---'\n'---'        `--`---'     `----'\n\n</code></pre><div aria-hidden=\"true\"><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br></div></div><p>默认运行在 8848 端口</p>\n<ul>\n<li>http://localhost:8848/nacos/#/login</li>\n<li>nacos</li>\n<li>nacos</li>\n</ul>\n<h2 id=\"必做\" tabindex=\"-1\"> 必做</h2>\n<p>登录后，打开<strong>命名空间</strong>-&gt;新建命名空间-&gt;</p>\n<ul>\n<li><code> 命名空间ID</code>:这里填，<code>cs-test</code>，注意下方的配置项 Namespace 请填写此值。</li>\n<li><code>命名空间名：</code>这个只是用于展示区分，填<code>cs-test</code>，建议直接和命名空间 id 相同即可。</li>\n<li><code>描述：</code>:这个随便填</li>\n</ul>\n<h2 id=\"nacos-console\" tabindex=\"-1\"> Nacos+Console</h2>\n<p>新建一个控制台项目</p>\n<p>引入包</p>\n<div><pre><code><span><span><span>&lt;</span>PackageReference</span> <span>Include</span><span><span>=</span><span>\"</span>Microsoft.Extensions.Hosting<span>\"</span></span> <span>Version</span><span><span>=</span><span>\"</span>6.0.0<span>\"</span></span> <span>/></span></span>\n<span><span><span>&lt;</span>PackageReference</span> <span>Include</span><span><span>=</span><span>\"</span>nacos-sdk-csharp<span>\"</span></span> <span>Version</span><span><span>=</span><span>\"</span>1.2.2<span>\"</span></span> <span>/></span></span>\n</code></pre><div aria-hidden=\"true\"><span>1</span><br><span>2</span><br></div></div><div><pre><code><span>static</span> <span>IHost</span> <span>AppStartup</span><span>(</span><span>)</span>\n<span>{</span>\n    <span><span>var</span></span> host <span>=</span> Host<span>.</span><span>CreateDefaultBuilder</span><span>(</span><span>)</span>\n                <span>.</span><span>ConfigureServices</span><span>(</span><span>(</span>context<span>,</span> services<span>)</span> <span>=></span>\n                <span>{</span>\n                    <span>ConfigureServices</span><span>(</span>context<span>,</span> services<span>)</span><span>;</span>\n                    services<span>.</span><span><span>AddTransient</span><span><span>&lt;</span>App<span>></span></span></span><span>(</span><span>)</span><span>;</span>\n                <span>}</span><span>)</span>\n                <span>.</span><span>ConfigureAppConfiguration</span><span>(</span><span>(</span>host<span>,</span> config<span>)</span> <span>=></span>\n                <span>{</span>\n\n                <span>}</span><span>)</span>\n                <span>.</span><span>Build</span><span>(</span><span>)</span><span>;</span> <span>// Build the Host</span>\n\n    <span>return</span> host<span>;</span>\n<span>}</span>\n\n</code></pre><div aria-hidden=\"true\"><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br></div></div><p>配置<code>nacos</code>的服务</p>\n<div><pre><code><span>static</span> <span><span>void</span></span> <span>ConfigureServices</span><span>(</span><span>HostBuilderContext</span> context<span>,</span><span>IServiceCollection</span> services<span>)</span>\n<span>{</span>\n    services<span>.</span><span>AddNacosV2Config</span><span>(</span>x <span>=></span>\n    <span>{</span>\n        x<span>.</span>ServerAddresses <span>=</span> <span>new</span> <span>System<span>.</span>Collections<span>.</span>Generic<span>.</span>List<span>&lt;</span><span>string</span><span>></span></span> <span>{</span> <span>\"http://localhost:8848/\"</span> <span>}</span><span>;</span>\n        x<span>.</span>EndPoint <span>=</span> <span>\"\"</span><span>;</span>\n        x<span>.</span>Namespace <span>=</span> <span>\"cs-test\"</span><span>;</span>\n\n        <span>/*x.UserName = \"nacos\";\n       x.Password = \"nacos\";*/</span>\n\n        <span>// swich to use http or rpc</span>\n        x<span>.</span>ConfigUseRpc <span>=</span> <span>true</span><span>;</span>\n    <span>}</span><span>)</span><span>;</span>\n\n    services<span>.</span><span>AddNacosV2Naming</span><span>(</span>x <span>=></span>\n    <span>{</span>\n        x<span>.</span>ServerAddresses <span>=</span> <span>new</span> <span>System<span>.</span>Collections<span>.</span>Generic<span>.</span>List<span>&lt;</span><span>string</span><span>></span></span> <span>{</span> <span>\"http://localhost:8848/\"</span> <span>}</span><span>;</span>\n        x<span>.</span>EndPoint <span>=</span> <span>\"\"</span><span>;</span>\n        x<span>.</span>Namespace <span>=</span> <span>\"cs-test\"</span><span>;</span>\n\n        <span>/*x.UserName = \"nacos\";\n       x.Password = \"nacos\";*/</span>\n\n        <span>// swich to use http or rpc</span>\n        x<span>.</span>NamingUseRpc <span>=</span> <span>true</span><span>;</span>\n    <span>}</span><span>)</span><span>;</span>\n<span>}</span>\n</code></pre><div aria-hidden=\"true\"><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br><span>24</span><br><span>25</span><br><span>26</span><br><span>27</span><br><span>28</span><br></div></div><p>调用</p>\n<div><pre><code><span><span>var</span></span> host <span>=</span> <span>AppStartup</span><span>(</span><span>)</span><span>;</span>\n<span><span>var</span></span> service <span>=</span> ActivatorUtilities<span>.</span><span><span>CreateInstance</span><span><span>&lt;</span>App<span>></span></span></span><span>(</span>host<span>.</span>Services<span>)</span><span>;</span>\n<span>await</span> service<span>.</span><span>RunAsync</span><span>(</span>args<span>)</span><span>;</span>\n</code></pre><div aria-hidden=\"true\"><span>1</span><br><span>2</span><br><span>3</span><br></div></div><p>App.cs 文件配置</p>\n<div><pre><code><span>public</span> <span>class</span> <span>App</span>\n<span>{</span>\n    <span>private</span> <span>readonly</span> <span>ILogger<span>&lt;</span>App<span>></span></span> _logger<span>;</span>\n    <span>private</span> <span>readonly</span> <span>INacosConfigService</span> _ns<span>;</span>\n    <span>public</span> <span>App</span><span>(</span><span>ILogger<span>&lt;</span>App<span>></span></span> logger<span>,</span> <span>INacosConfigService</span> ns<span>)</span>\n    <span>{</span>\n        _logger <span>=</span> logger<span>;</span>\n        _ns <span>=</span> ns<span>;</span>\n    <span>}</span>\n\n    <span>public</span> <span>async</span> <span>Task</span> <span>RunAsync</span><span>(</span><span><span>string</span><span>[</span><span>]</span></span> args<span>)</span>\n    <span>{</span>\n        <span>await</span> <span>PublishConfig</span><span>(</span>_ns<span>)</span><span>;</span>\n        <span>await</span> <span>GetConfig</span><span>(</span>_ns<span>)</span><span>;</span>\n        <span>await</span> <span>RemoveConfig</span><span>(</span>_ns<span>)</span><span>;</span>\n    <span>}</span>\n\n    <span>static</span> <span>async</span> <span>Task</span> <span>PublishConfig</span><span>(</span><span>INacosConfigService</span> svc<span>)</span>\n    <span>{</span>\n        <span><span>var</span></span> dataId <span>=</span> <span>\"demo-dateid\"</span><span>;</span>\n        <span><span>var</span></span> <span>group</span> <span>=</span> <span>\"demo-group\"</span><span>;</span>\n        <span><span>var</span></span> val <span>=</span> <span>\"test-value-\"</span> <span>+</span> DateTimeOffset<span>.</span>Now<span>.</span><span>ToUnixTimeSeconds</span><span>(</span><span>)</span><span>.</span><span>ToString</span><span>(</span><span>)</span><span>;</span>\n\n        <span>await</span> Task<span>.</span><span>Delay</span><span>(</span><span>500</span><span>)</span><span>;</span>\n        <span><span>var</span></span> flag <span>=</span> <span>await</span> svc<span>.</span><span>PublishConfig</span><span>(</span>dataId<span>,</span> <span>group</span><span>,</span> val<span>)</span><span>;</span>\n        Console<span>.</span><span>WriteLine</span><span>(</span><span><span>$\"======================发布配置结果，</span><span><span>{</span><span>flag</span><span>}</span></span><span>\"</span></span><span>)</span><span>;</span>\n    <span>}</span>\n\n    <span>static</span> <span>async</span> <span>Task</span> <span>GetConfig</span><span>(</span><span>INacosConfigService</span> svc<span>)</span>\n    <span>{</span>\n        <span><span>var</span></span> dataId <span>=</span> <span>\"demo-dateid\"</span><span>;</span>\n        <span><span>var</span></span> <span>group</span> <span>=</span> <span>\"demo-group\"</span><span>;</span>\n\n        <span>await</span> Task<span>.</span><span>Delay</span><span>(</span><span>500</span><span>)</span><span>;</span>\n        <span><span>var</span></span> config <span>=</span> <span>await</span> svc<span>.</span><span>GetConfig</span><span>(</span>dataId<span>,</span> <span>group</span><span>,</span> <span>5000L</span><span>)</span><span>;</span>\n        Console<span>.</span><span>WriteLine</span><span>(</span><span><span>$\"======================获取配置结果，</span><span><span>{</span><span>config</span><span>}</span></span><span>\"</span></span><span>)</span><span>;</span>\n    <span>}</span>\n\n    <span>static</span> <span>async</span> <span>Task</span> <span>RemoveConfig</span><span>(</span><span>INacosConfigService</span> svc<span>)</span>\n    <span>{</span>\n        <span><span>var</span></span> dataId <span>=</span> <span>\"demo-dateid\"</span><span>;</span>\n        <span><span>var</span></span> <span>group</span> <span>=</span> <span>\"demo-group\"</span><span>;</span>\n\n        <span>await</span> Task<span>.</span><span>Delay</span><span>(</span><span>500</span><span>)</span><span>;</span>\n        <span><span>var</span></span> flag <span>=</span> <span>await</span> svc<span>.</span><span>RemoveConfig</span><span>(</span>dataId<span>,</span> <span>group</span><span>)</span><span>;</span>\n        Console<span>.</span><span>WriteLine</span><span>(</span><span><span>$\"=====================删除配置结果，</span><span><span>{</span><span>flag</span><span>}</span></span><span>\"</span></span><span>)</span><span>;</span>\n    <span>}</span>\n<span>}</span>\n\n</code></pre><div aria-hidden=\"true\"><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br><span>24</span><br><span>25</span><br><span>26</span><br><span>27</span><br><span>28</span><br><span>29</span><br><span>30</span><br><span>31</span><br><span>32</span><br><span>33</span><br><span>34</span><br><span>35</span><br><span>36</span><br><span>37</span><br><span>38</span><br><span>39</span><br><span>40</span><br><span>41</span><br><span>42</span><br><span>43</span><br><span>44</span><br><span>45</span><br><span>46</span><br><span>47</span><br><span>48</span><br><span>49</span><br></div></div><p>f5 运行后可看到输出如下内容</p>\n<div><pre><code>======================发布配置结果，True\n======================获取配置结果，test-value-1637000754\n=====================删除配置结果，True\n</code></pre><div aria-hidden=\"true\"><span>1</span><br><span>2</span><br><span>3</span><br></div></div><p>我们把<code>await RemoveConfig(_ns);</code>这行删除，即可在 nacos 的网站上看到信息。</p>\n<p>配置管理 -选<code>cs-test</code>,可以看到<code>Data Id为demo-dateid</code>，<code>Group</code>为<code>demo-group</code>的一行数据，点击行内的编辑即可看到具体信息。</p>\n<h2 id=\"nacso-asp-net-core\" tabindex=\"-1\"> Nacso+Asp.NET Core</h2>\n<p>新增包</p>\n<div><pre><code><span><span><span>&lt;</span>PackageReference</span> <span>Include</span><span><span>=</span><span>\"</span>nacos-sdk-csharp.AspNetCore<span>\"</span></span> <span>Version</span><span><span>=</span><span>\"</span>1.2.2<span>\"</span></span> <span>/></span></span>\n<span><span><span>&lt;</span>PackageReference</span> <span>Include</span><span><span>=</span><span>\"</span>nacos-sdk-csharp.Extensions.Configuration<span>\"</span></span> <span>Version</span><span><span>=</span><span>\"</span>1.2.2<span>\"</span></span> <span>/></span></span>\n</code></pre><div aria-hidden=\"true\"><span>1</span><br><span>2</span><br></div></div><p>在 Program 中配置服务</p>\n<div><pre><code>builder<span>.</span>Host<span>.</span><span>ConfigureAppConfiguration</span><span>(</span><span>(</span>context<span>,</span> builder<span>)</span> <span>=></span>\n        <span>{</span>\n            <span><span>var</span></span> c <span>=</span> builder<span>.</span><span>Build</span><span>(</span><span>)</span><span>;</span>\n\n            <span>// 从配置文件读取Nacos相关配置</span>\n            <span>// 默认会使用JSON解析器来解析存在Nacos Server的配置</span>\n            builder<span>.</span><span>AddNacosV2Configuration</span><span>(</span>c<span>.</span><span>GetSection</span><span>(</span><span>\"NacosConfig\"</span><span>)</span><span>)</span><span>;</span>\n            <span>// 也可以按需使用ini或yaml的解析器</span>\n            <span>// builder.AddNacosV2Configuration(c.GetSection(\"NacosConfig\"), Nacos.IniParser.IniConfigurationStringParser.Instance);</span>\n            <span>// builder.AddNacosV2Configuration(c.GetSection(\"NacosConfig\"), Nacos.YamlParser.YamlConfigurationStringParser.Instance);</span>\n        <span>}</span><span>)</span><span>;</span>\n</code></pre><div aria-hidden=\"true\"><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br></div></div><p><code>appsetting.json</code>配置</p>\n<div><pre><code><span>{</span>\n  <span>\"NacosConfig\"</span><span>:</span> <span>{</span>\n    <span>\"Listeners\"</span><span>:</span> <span>[</span>\n      <span>{</span>\n        <span>\"Optional\"</span><span>:</span> <span>false</span><span>,</span>\n        <span>\"DataId\"</span><span>:</span> <span>\"common\"</span><span>,</span>\n        <span>\"Group\"</span><span>:</span> <span>\"DEFAULT_GROUP\"</span>\n      <span>}</span><span>,</span>\n      <span>{</span>\n        <span>\"Optional\"</span><span>:</span> <span>false</span><span>,</span>\n        <span>\"DataId\"</span><span>:</span> <span>\"demo\"</span><span>,</span>\n        <span>\"Group\"</span><span>:</span> <span>\"DEFAULT_GROUP\"</span>\n      <span>}</span>\n    <span>]</span><span>,</span>\n    <span>\"Namespace\"</span><span>:</span> <span>\"cs-test\"</span><span>,</span>\n    <span>\"ServerAddresses\"</span><span>:</span> <span>[</span><span>\"http://localhost:8848/\"</span><span>]</span><span>,</span>\n    <span>\"UserName\"</span><span>:</span> <span>\"nacos\"</span><span>,</span>\n    <span>\"Password\"</span><span>:</span> <span>\"nacos\"</span><span>,</span>\n    <span>\"AccessKey\"</span><span>:</span> <span>\"\"</span><span>,</span>\n    <span>\"SecretKey\"</span><span>:</span> <span>\"\"</span><span>,</span>\n    <span>\"EndPoint\"</span><span>:</span> <span>\"\"</span><span>,</span>\n    <span>\"ConfigFilterAssemblies\"</span><span>:</span> <span>[</span><span>]</span><span>,</span>\n    <span>\"ConfigFilterExtInfo\"</span><span>:</span> <span>\"\"</span>\n  <span>}</span>\n<span>}</span>\n</code></pre><div aria-hidden=\"true\"><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br><span>24</span><br><span>25</span><br></div></div><p>在上面我们可以看到<code>DataId</code>为<code>common</code>的、我们去管理端 UI，命名空间为<code>cs-test</code>新增一个配置</p>\n<p>新增二个配置项</p>\n<ul>\n<li>Data ID:common</li>\n<li>Group:DEFAULT_GROUP</li>\n<li>配置内容：选择 json。</li>\n</ul>\n<div><pre><code><span>{</span>\n  <span>\"UserInfo\"</span><span>:</span> <span>{</span>\n    <span>\"Name\"</span><span>:</span> <span>\"luo\"</span><span>,</span>\n    <span>\"Sex\"</span><span>:</span> <span>\"Boy\"</span><span>,</span>\n    <span>\"Age\"</span><span>:</span> <span>99</span>\n  <span>}</span><span>,</span>\n  <span>\"commonkey\"</span><span>:</span> <span>\"commonkey_value_值\"</span>\n<span>}</span>\n</code></pre><div aria-hidden=\"true\"><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br></div></div><ul>\n<li>Data ID:demo</li>\n<li>Group:DEFAULT_GROUP</li>\n<li>配置内容：选择 json。</li>\n</ul>\n<div><pre><code><span>{</span>\n  <span>\"demokey\"</span><span>:</span> <span>\"demo_value_值\"</span>\n<span>}</span>\n</code></pre><div aria-hidden=\"true\"><span>1</span><br><span>2</span><br><span>3</span><br></div></div><p>那我们如何获取的这么一个 json 值和 demokey 中的值呢。</p>\n<p>我们新增一个类</p>\n<div><pre><code>    <span>public</span> <span>class</span> <span>UserInfo</span>\n    <span>{</span>\n        <span>public</span> <span><span>string</span></span> Name <span>{</span> <span>get</span><span>;</span> <span>set</span><span>;</span> <span>}</span>\n        <span>public</span> <span><span>string</span></span> Sex <span>{</span> <span>get</span><span>;</span> <span>set</span><span>;</span> <span>}</span>\n        <span>public</span> <span><span>int</span></span> Age <span>{</span> <span>get</span><span>;</span> <span>set</span><span>;</span> <span>}</span>\n    <span>}</span>\n</code></pre><div aria-hidden=\"true\"><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br></div></div><p>在默认的控制器注入 <code>IConfiguration</code>,像从 appsettings.json 中获取数据一样，可直接取出来。</p>\n<div><pre><code>    <span>private</span> <span>readonly</span> <span>ILogger<span>&lt;</span>ConfigController<span>></span></span> _logger<span>;</span>\n    <span>private</span> <span>readonly</span> <span>IConfiguration</span> _configuration<span>;</span>\n\n    <span>public</span> <span>ConfigController</span><span>(</span><span>ILogger<span>&lt;</span>WeatherForecastController<span>></span></span> logger<span>,</span> <span>IConfiguration</span> configuration<span>)</span>\n    <span>{</span>\n        _logger <span>=</span> logger<span>;</span>\n        _configuration <span>=</span> configuration<span>;</span>\n    <span>}</span>\n\n    <span>[</span><span><span>HttpGet</span><span><span>(</span><span>\"getconfig\"</span><span>)</span></span></span><span>]</span>\n    <span>public</span> <span>UserInfo</span> <span>GetConfig</span><span>(</span><span>)</span>\n    <span>{</span>\n        <span><span>var</span></span> userInfo1 <span>=</span> _configuration<span>.</span><span>GetSection</span><span>(</span><span>\"UserInfo\"</span><span>)</span><span>.</span><span><span>Get</span><span><span>&lt;</span>UserInfo<span>></span></span></span><span>(</span><span>)</span><span>;</span>\n        <span><span>var</span></span> commonvalue <span>=</span> _configuration<span>[</span><span>\"commonkey\"</span><span>]</span><span>;</span>\n        <span><span>var</span></span> demovalue <span>=</span> _configuration<span>[</span><span>\"demokey\"</span><span>]</span><span>;</span>\n        _logger<span>.</span><span>LogInformation</span><span>(</span><span>\"commonkey:\"</span> <span>+</span> commonvalue<span>)</span><span>;</span>\n        _logger<span>.</span><span>LogInformation</span><span>(</span><span>\"demokey:\"</span> <span>+</span> demovalue<span>)</span><span>;</span>\n        <span>return</span> userInfo1<span>;</span>\n    <span>}</span>\n</code></pre><div aria-hidden=\"true\"><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br></div></div><p>会输出如下内容</p>\n<div><pre><code><span>info:</span> NacosApi<span>.</span>Controllers<span>.</span>WeatherForecastController<span>[</span><span>0</span><span>]</span>\n      commonkey<span>:</span>commonkey_value_值\n<span>info:</span> NacosApi<span>.</span>Controllers<span>.</span>WeatherForecastController<span>[</span><span>0</span><span>]</span>\n      demokey<span>:</span>demo_value_值\n</code></pre><div aria-hidden=\"true\"><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br></div></div><p>并在界面上返回 UserInfo 的信息。</p>\n<div><pre><code><span>{</span>\n  <span>\"name\"</span><span>:</span> <span>\"luo\"</span><span>,</span>\n  <span>\"sex\"</span><span>:</span> <span>\"Boy\"</span><span>,</span>\n  <span>\"age\"</span><span>:</span> <span>99</span>\n<span>}</span>\n</code></pre><div aria-hidden=\"true\"><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br></div></div><h4 id=\"注意\" tabindex=\"-1\"> 注意</h4>\n<ul>\n<li>当二个<code>DataId</code>中配置的 json,包含相同的 Key 时，实际会依后面的 Key 中值为准。顺序以 appsetting.json 中的配置 Listeners 的数组顺序为依据。</li>\n</ul>\n<p>当然我们通过强类型绑定<code>UserInfo</code>,在<code>Program</code>配置服务</p>\n<div><pre><code>builder<span>.</span>Services<span>.</span><span><span>Configure</span><span><span>&lt;</span>UserInfo<span>></span></span></span><span>(</span>builder<span>.</span>Configuration<span>.</span><span>GetSection</span><span>(</span><span>\"UserInfo\"</span><span>)</span><span>)</span><span>;</span>\n</code></pre><div aria-hidden=\"true\"><span>1</span><br></div></div><div><pre><code><span>public</span> <span>ConfigController</span><span>(</span><span>ILogger<span>&lt;</span>ConfigController<span>></span></span> logger<span>,</span>\n        <span>IConfiguration</span> configuration<span>,</span>\n        <span>IOptions<span>&lt;</span>UserInfo<span>></span></span> options1<span>,</span>\n        <span>IOptionsSnapshot<span>&lt;</span>UserInfo<span>></span></span> options2<span>,</span>\n        <span>IOptionsMonitor<span>&lt;</span>UserInfo<span>></span></span> options3\n    <span>)</span>\n<span>{</span>\n    _logger <span>=</span> logger<span>;</span>\n    _configuration <span>=</span> configuration<span>;</span>\n    _user1 <span>=</span> options1<span>.</span>Value<span>;</span>\n    _user2 <span>=</span> options2<span>.</span>Value<span>;</span>\n    _user3 <span>=</span> options3<span>.</span>CurrentValue<span>;</span>\n<span>}</span>\n\n<span>[</span><span><span>HttpGet</span></span><span>]</span>\n<span>public</span> <span><span>string</span></span> <span>Get</span><span>(</span><span>)</span>\n<span>{</span>\n    <span><span>string</span></span> id <span>=</span> Guid<span>.</span><span>NewGuid</span><span>(</span><span>)</span><span>.</span><span>ToString</span><span>(</span><span>\"N\"</span><span>)</span><span>;</span>\n\n    _logger<span>.</span><span>LogInformation</span><span>(</span><span><span>$\"============== begin </span><span><span>{</span><span>id</span><span>}</span></span><span> =====================\"</span></span><span>)</span><span>;</span>\n\n    <span><span>var</span></span> str1 <span>=</span> Newtonsoft<span>.</span>Json<span>.</span>JsonConvert<span>.</span><span>SerializeObject</span><span>(</span>_user1<span>)</span><span>;</span>\n    _logger<span>.</span><span>LogInformation</span><span>(</span><span><span>$\"</span><span><span>{</span><span>id</span><span>}</span></span><span> IOptions = </span><span><span>{</span><span>str1</span><span>}</span></span><span>\"</span></span><span>)</span><span>;</span>\n\n    <span><span>var</span></span> str2 <span>=</span> Newtonsoft<span>.</span>Json<span>.</span>JsonConvert<span>.</span><span>SerializeObject</span><span>(</span>_user2<span>)</span><span>;</span>\n    _logger<span>.</span><span>LogInformation</span><span>(</span><span><span>$\"</span><span><span>{</span><span>id</span><span>}</span></span><span> IOptionsSnapshot = </span><span><span>{</span><span>str2</span><span>}</span></span><span>\"</span></span><span>)</span><span>;</span>\n\n    <span><span>var</span></span> str3 <span>=</span> Newtonsoft<span>.</span>Json<span>.</span>JsonConvert<span>.</span><span>SerializeObject</span><span>(</span>_user3<span>)</span><span>;</span>\n    _logger<span>.</span><span>LogInformation</span><span>(</span><span><span>$\"</span><span><span>{</span><span>id</span><span>}</span></span><span> IOptionsMonitor = </span><span><span>{</span><span>str3</span><span>}</span></span><span>\"</span></span><span>)</span><span>;</span>\n\n    _logger<span>.</span><span>LogInformation</span><span>(</span><span><span>$\"===============================================\"</span></span><span>)</span><span>;</span>\n\n    <span>return</span> <span>\"ok\"</span><span>;</span>\n<span>}</span>\n</code></pre><div aria-hidden=\"true\"><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br><span>24</span><br><span>25</span><br><span>26</span><br><span>27</span><br><span>28</span><br><span>29</span><br><span>30</span><br><span>31</span><br><span>32</span><br><span>33</span><br><span>34</span><br></div></div><p>当然输出是一模一样的。我们在界面上再次调整下数据</p>\n<div><pre><code><span>info:</span> NacosApi<span>.</span>Controllers<span>.</span>ConfigController<span>[</span><span>0</span><span>]</span>\n      <span>7bafb7f9cd2a46ec95324e38d01048aa</span> IOptions <span>=</span> <span>{</span><span>\"Name\"</span><span>:</span><span>\"luo\"</span><span>,</span><span>\"Sex\"</span><span>:</span><span>\"Boy\"</span><span>,</span><span>\"Age\"</span><span>:</span><span>99</span><span>}</span>\n<span>info:</span> NacosApi<span>.</span>Controllers<span>.</span>ConfigController<span>[</span><span>0</span><span>]</span>\n      <span>7bafb7f9cd2a46ec95324e38d01048aa</span> IOptionsSnapshot <span>=</span> <span>{</span><span>\"Name\"</span><span>:</span><span>\"luo\"</span><span>,</span><span>\"Sex\"</span><span>:</span><span>\"Boy\"</span><span>,</span><span>\"Age\"</span><span>:</span><span>99</span><span>}</span>\n<span>info:</span> NacosApi<span>.</span>Controllers<span>.</span>ConfigController<span>[</span><span>0</span><span>]</span>\n      <span>7bafb7f9cd2a46ec95324e38d01048aa</span> IOptionsMonitor <span>=</span> <span>{</span><span>\"Name\"</span><span>:</span><span>\"luo\"</span><span>,</span><span>\"Sex\"</span><span>:</span><span>\"Boy\"</span><span>,</span><span>\"Age\"</span><span>:</span><span>99</span><span>}</span>\n</code></pre><div aria-hidden=\"true\"><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br></div></div><p>只有<code>IOptions&lt;UserInfo&gt;</code>不会变化，其他是会跟着变化的。</p>\n<div><pre><code><span>info:</span> NacosApi<span>.</span>Controllers<span>.</span>ConfigController<span>[</span><span>0</span><span>]</span>\n      <span>604d8db7b0ad48ccbc64c3ccd06eb524</span> IOptions <span>=</span> <span>{</span><span>\"Name\"</span><span>:</span><span>\"luo\"</span><span>,</span><span>\"Sex\"</span><span>:</span><span>\"Boy\"</span><span>,</span><span>\"Age\"</span><span>:</span><span>99</span><span>}</span>\n<span>info:</span> NacosApi<span>.</span>Controllers<span>.</span>ConfigController<span>[</span><span>0</span><span>]</span>\n      <span>604d8db7b0ad48ccbc64c3ccd06eb524</span> IOptionsSnapshot <span>=</span> <span>{</span><span>\"Name\"</span><span>:</span><span>\"abc\"</span><span>,</span><span>\"Sex\"</span><span>:</span><span>\"Boy\"</span><span>,</span><span>\"Age\"</span><span>:</span><span>99</span><span>}</span>\n<span>info:</span> NacosApi<span>.</span>Controllers<span>.</span>ConfigController<span>[</span><span>0</span><span>]</span>\n      <span>604d8db7b0ad48ccbc64c3ccd06eb524</span> IOptionsMonitor <span>=</span> <span>{</span><span>\"Name\"</span><span>:</span><span>\"abc\"</span><span>,</span><span>\"Sex\"</span><span>:</span><span>\"Boy\"</span><span>,</span><span>\"Age\"</span><span>:</span><span>99</span><span>}</span>\n</code></pre><div aria-hidden=\"true\"><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br></div></div><h2 id=\"docker-安装-nacos\" tabindex=\"-1\"> Docker 安装 Nacos</h2>\n<ul>\n<li>\n<p><a href=\"https://www.cnblogs.com/niunafei/p/12803965.html\" target=\"_blank\" rel=\"noopener noreferrer\">https://www.cnblogs.com/niunafei/p/12803965.html</a></p>\n<p>1.拉取镜像</p>\n</li>\n</ul>\n<div><pre><code>docker pull nacos/nacos-server\n</code></pre><div aria-hidden=\"true\"><span>1</span><br></div></div><p>2、创建本地的映射文件，application.properties，</p>\n<div><pre><code>mkdir -p  /root/nacos/logs /root/nacos/conf\n</code></pre><div aria-hidden=\"true\"><span>1</span><br></div></div><p>配置数据库</p>\n<div><pre><code>vim /root/nacos/conf/application.properties\n</code></pre><div aria-hidden=\"true\"><span>1</span><br></div></div><ul>\n<li>application.properties</li>\n</ul>\n<div><pre><code>spring.datasource.platform=mysql\ndb.num=1\ndb.url.0=jdbc:mysql://ip:3306/nacos_config?characterEncoding=utf8&amp;connectTimeout=1000&amp;socketTimeout=3000&amp;autoReconnect=true\ndb.user=userid\ndb.password=userpassword\n\n</code></pre><div aria-hidden=\"true\"><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br></div></div><p>下面通过配置来暴露除了/shutdown 之外的所有端点。下面通过配置来暴露除了/shutdown 之外的所有端点</p>\n<div><pre><code>management.endpoints.web.exposure.include=*\n</code></pre><div aria-hidden=\"true\"><span>1</span><br></div></div><p>运行容器：使用<code>standalone</code>模式并开放 8848 端口，并映射配置文件和日志目录，数据库在 application.properties 中配置</p>\n<div><pre><code>docker run -d -p 8848:8848 -p 9848:9848 -p 9555:9555 -e MODE=standalone -e PREFER_HOST_MODE=hostname -v /root/nacos/logs:/home/nacos/logs -v /root/nacos/conf/application.properties:/home/nacos/conf/application.properties --restart always --name nacos nacos/nacos-server\n</code></pre><div aria-hidden=\"true\"><span>1</span><br></div></div><p>其中-v 指定映射配置。左侧为 linux 文件，右侧为 docker 目录</p>\n<h3 id=\"更多指令\" tabindex=\"-1\"> 更多指令</h3>\n<p>启动容器</p>\n<div><pre><code>docker start 容器id\n或者\ndocker start nacos\n</code></pre><div aria-hidden=\"true\"><span>1</span><br><span>2</span><br><span>3</span><br></div></div><p>关闭容器</p>\n<div><pre><code>docker stop nacos\n</code></pre><div aria-hidden=\"true\"><span>1</span><br></div></div><h2 id=\"博客\" tabindex=\"-1\"> 博客</h2>\n<ul>\n<li><a href=\"https://mp.weixin.qq.com/s/iC6lFJJsHUFUveSJhoZxgA\" target=\"_blank\" rel=\"noopener noreferrer\">聊一聊如何在.NET Core 中使用 Nacos 2.0</a></li>\n</ul>\n",
      "date_published": "2021-12-22T18:31:25.000Z",
      "date_modified": "2022-06-02T11:02:17.000Z",
      "authors": [],
      "tags": []
    },
    {
      "title": "LinCms如何切换成SQL server",
      "url": "https://igeekfan.cn/igeekfan-docs/dotnetcore/lin-cms/change-sqlserver.html",
      "id": "https://igeekfan.cn/igeekfan-docs/dotnetcore/lin-cms/change-sqlserver.html",
      "content_html": "<h1 id=\"lincms如何切换成sql-server\" tabindex=\"-1\"> LinCms如何切换成SQL server</h1>\n<p>需要修改LinCms.Web中的appsetting.json配置</p>\n<h3 id=\"数据库配置\" tabindex=\"-1\"> 数据库配置</h3>\n<p>DefaultDB：改成1\nSqlServer：改成自己的数据库配置</p>\n<div><pre><code><span><span> </span><span> \"ConnectionStrings\": {\n</span></span><span><span>-</span><span>    \"DefaultDB\": \"0\",\n</span></span><span><span>+</span><span>    \"DefaultDB\": \"1\",\n</span></span><span><span> </span><span>   \"DataType\": {\n</span><span> </span><span>     \"MySql\": 0,\n</span><span> </span><span>     \"SqlServer\": 1,\n</span><span> </span><span>     \"PostgreSQL\": 2,\n</span><span> </span><span>     \"Oracle\": 3,\n</span><span> </span><span>     \"Sqlite\": 4\n</span><span> </span><span>   },\n</span><span> </span><span>   \"MySql\": \"Data Source=localhost;Port=3306;User ID=root;Password=rCsRedisoot;Initial Catalog=lincms;Charset=utf8mb4;SslMode=none;Max pool size=1;Connection LifeTime=20\"\n</span></span><span><span>+</span><span>   \"SqlServer\": \"Data Source=.;User ID=sa;Password=123456;Integrated Security=True;Initial Catalog=LinCMS;Pooling=true;Min Pool Size=1\"\n</span></span><span><span> </span><span> },\n</span></span></code></pre><div aria-hidden=\"true\"><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br></div></div><h3 id=\"serilog配置\" tabindex=\"-1\"> Serilog配置</h3>\n<p>Using引用  <code>&quot;Serilog.Sinks.MSSqlServer&quot;</code>,去掉<code> &quot;Serilog.Sinks.MariaDB&quot;</code></p>\n<p>把 <code>&quot;Name&quot;</code>为 <code>&quot;MariaDB&quot;</code>的json注释掉。</p>\n<p>把<code>&quot;Name&quot;</code>为 <code>&quot;MSSqlServer&quot;</code>的json注释去掉。</p>\n<p>并改掉<code>Args:connectionString</code>的连接串。</p>\n<div><pre><code><span><span> </span><span>   \"Serilog\": {\n</span><span> </span><span>   \"Using\": [\n</span><span> </span><span>     \"Serilog.Sinks.Console\",\n</span><span> </span><span>     \"Serilog.Sinks.File\",\n</span></span><span><span>-</span><span>      \"Serilog.Sinks.MariaDB\"\n</span></span><span><span>+</span><span>      \"Serilog.Sinks.MSSqlServer\"\n</span></span><span><span> </span><span>   ],\n</span><span> </span><span>   \"MinimumLevel\": {\n</span><span> </span><span>     \"Default\": \"Information\",\n</span><span> </span><span>     \"Override\": {\n</span><span> </span><span>       \"Microsoft\": \"Information\",\n</span><span> </span><span>       \"System\": \"Warning\"\n</span><span> </span><span>     }\n</span><span> </span><span>   },\n</span><span> </span><span>   \"WriteTo\": [\n</span><span> </span><span>     {\n</span><span> </span><span>       \"Name\": \"File\",\n</span><span> </span><span>       \"Args\": {\n</span><span> </span><span>         \"path\": \"Logs/log.txt\",\n</span><span> </span><span>         \"rollingInterval\": \"Day\"\n</span><span> </span><span>       }\n</span><span> </span><span>     },\n</span><span> </span><span>     {\n</span><span> </span><span>       \"Name\": \"Console\",\n</span><span> </span><span>       \"Args\": {\n</span><span> </span><span>         \"theme\": \"Serilog.Sinks.SystemConsole.Themes.AnsiConsoleTheme::Code, Serilog.Sinks.Console\",\n</span><span> </span><span>         \"outputTemplate\": \"[{Timestamp:HH:mm:ss} {Level:u3}] {Message:lj} &lt;s:{SourceContext}>{NewLine}{Exception}\"\n</span><span> </span><span>       }\n</span><span> </span><span>     },\n</span></span><span><span>-</span><span>      {\n</span></span><span><span> </span><span>       \"Name\": \"MariaDB\",\n</span><span> </span><span>       \"Args\": {\n</span><span> </span><span>         \"connectionString\": \"Data Source=localhost;Port=3308;User ID=root;Password=root;Initial Catalog=lincms;Charset=utf8mb4;SslMode=none;Max pool size=1;Connection LifeTime=20\",\n</span><span> </span><span>         \"autoCreateTable\": true,\n</span><span> </span><span>         \"tableName\": \"app_serilog\",\n</span><span> </span><span>         \"restrictedToMinimumLevel\": \"Information\",\n</span><span> </span><span>         \"batchPostingLimit\": 4, //1000\n</span><span> </span><span>         \"period\": \"0.00:00:03\",\n</span><span> </span><span>         \"options\": {\n</span><span> </span><span>           \"PropertiesToColumnsMapping\": {\n</span><span> </span><span>             \"Exception\": \"exception\",\n</span><span> </span><span>             \"Level\": \"level\",\n</span><span> </span><span>             \"Message\": \"message\",\n</span><span> </span><span>             \"MessageTemplate\": \"message_template\",\n</span><span> </span><span>             \"Properties\": \"properties\",\n</span><span> </span><span>             \"Timestamp\": \"timestamp\"\n</span><span> </span><span>           },\n</span><span> </span><span>           \"TimestampInUtc\": false,\n</span><span> </span><span>           \"ExcludePropertiesWithDedicatedColumn\": true,\n</span><span> </span><span>           \"EnumsAsInts\": true,\n</span><span> </span><span>           \"LogRecordsCleanupFrequency\": \"0.02:00:00\",\n</span><span> </span><span>           \"LogRecordsExpiration\": \"31.00:00:00\"\n</span><span> </span><span>         }\n</span><span> </span><span>       }\n</span></span><span><span>-</span><span>      }\n</span></span><span><span>+</span><span>      //{\n</span></span><span><span> </span><span>     //  \"Name\": \"MSSqlServer\",\n</span><span> </span><span>     //  \"Args\": {\n</span><span> </span><span>     //    \"connectionString\": \"Data Source=.;User ID=sa;Password=123456;Integrated Security=True;Initial Catalog=LinCMS;Pooling=true;Min Pool Size=1\",\n</span><span> </span><span>     //    \"restrictedToMinimumLevel\": \"Information\",\n</span><span> </span><span>     //    \"sinkOptionsSection\": {\n</span><span> </span><span>     //      \"tableName\": \"app_serilog\",\n</span><span> </span><span>     //      \"schemaName\": \"dbo\",\n</span><span> </span><span>     //      \"autoCreateSqlTable\": true,\n</span><span> </span><span>     //      \"batchPostingLimit\": 1000,\n</span><span> </span><span>     //      \"period\": \"0.00:00:15\"\n</span><span> </span><span>     //    },\n</span><span> </span><span>     //    \"columnOptionsSection\": {\n</span><span> </span><span>     //      \"disableTriggers\": true,\n</span><span> </span><span>     //      \"clusteredColumnstoreIndex\": false,\n</span><span> </span><span>     //      \"primaryKeyColumnName\": \"id\",\n</span><span> </span><span>     //      \"addStandardColumns\": [ \"LogEvent\" ],\n</span><span> </span><span>     //      \"removeStandardColumns\": [ \"Properties\" ],\n</span><span> </span><span>     //      \"additionalColumns\": [\n</span><span> </span><span>     //        {\n</span><span> </span><span>     //          \"ColumnName\": \"event_type\",\n</span><span> </span><span>     //          \"DataType\": \"int\",\n</span><span> </span><span>     //          \"AllowNull\": true\n</span><span> </span><span>     //        },\n</span><span> </span><span>     //        {\n</span><span> </span><span>     //          \"ColumnName\": \"release\",\n</span><span> </span><span>     //          \"DataType\": \"varchar\",\n</span><span> </span><span>     //          \"DataLength\": 32\n</span><span> </span><span>     //        },\n</span><span> </span><span>     //        {\n</span><span> </span><span>     //          \"ColumnName\": \"environment_user_name\",\n</span><span> </span><span>     //          \"PropertyName\": \"UserName\",\n</span><span> </span><span>     //          \"DataType\": \"varchar\",\n</span><span> </span><span>     //          \"DataLength\": 50\n</span><span> </span><span>     //        },\n</span><span> </span><span>     //        {\n</span><span> </span><span>     //          \"ColumnName\": \"all_sqlcolumn_defaults\",\n</span><span> </span><span>     //          \"DataType\": \"varchar\",\n</span><span> </span><span>     //          \"AllowNull\": true,\n</span><span> </span><span>     //          \"DataLength\": -1,\n</span><span> </span><span>     //          \"NonClusteredIndex\": false\n</span><span> </span><span>     //        }\n</span><span> </span><span>     //      ],\n</span><span> </span><span>     //      \"id\": {\n</span><span> </span><span>     //        \"columnName\": \"id\",\n</span><span> </span><span>     //        \"nonClusteredIndex\": true\n</span><span> </span><span>     //      },\n</span><span> </span><span>     //      \"level\": {\n</span><span> </span><span>     //        \"columnName\": \"level\",\n</span><span> </span><span>     //        \"storeAsEnum\": true\n</span><span> </span><span>     //      },\n</span><span> </span><span>     //      //\"Properties\": {\n</span><span> </span><span>     //      //  \"columnName\": \"properties\",\n</span><span> </span><span>     //      //  \"excludeAdditionalProperties\": true,\n</span><span> </span><span>     //      //  \"dictionaryElementName\": \"dict\",\n</span><span> </span><span>     //      //  \"itemElementName\": \"item\",\n</span><span> </span><span>     //      //  \"omitDictionaryContainerElement\": false,\n</span><span> </span><span>     //      //  \"omitSequenceContainerElement\": false,\n</span><span> </span><span>     //      //  \"omitStructureContainerElement\": false,\n</span><span> </span><span>     //      //  \"omitElementIfEmpty\": true,\n</span><span> </span><span>     //      //  \"propertyElementName\": \"prop\",\n</span><span> </span><span>     //      //  \"rootElementName\": \"root\",\n</span><span> </span><span>     //      //  \"sequenceElementName\": \"seq\",\n</span><span> </span><span>     //      //  \"structureElementName\": \"struct\",\n</span><span> </span><span>     //      //  \"usePropertyKeyAsElementName\": false\n</span><span> </span><span>     //      //},\n</span><span> </span><span>     //      \"TimeStamp\": {\n</span><span> </span><span>     //        \"columnName\": \"timestamp\",\n</span><span> </span><span>     //        \"convertToUtc\": true,\n</span><span> </span><span>     //        \"DataType\": \"tinyint\"\n</span><span> </span><span>     //      },\n</span><span> </span><span>     //      \"MessageTemplate\": {\n</span><span> </span><span>     //        \"columnName\": \"message_template\",\n</span><span> </span><span>     //        \"convertToUtc\": true\n</span><span> </span><span>     //      },\n</span><span> </span><span>     //      \"Timestamp\": \"timestamp\",\n</span><span> </span><span>     //      \"Exception\": {\n</span><span> </span><span>     //        \"columnName\": \"exception\"\n</span><span> </span><span>     //      },\n</span><span> </span><span>     //      \"Message\": {\n</span><span> </span><span>     //        \"columnName\": \"message\"\n</span><span> </span><span>     //      },\n</span><span> </span><span>     //      \"logEvent\": {\n</span><span> </span><span>     //        \"columnName\": \"properties\",\n</span><span> </span><span>     //        \"excludeAdditionalProperties\": true,\n</span><span> </span><span>     //        \"excludeStandardColumns\": true\n</span><span> </span><span>     //      }\n</span><span> </span><span>     //    }\n</span><span> </span><span>     //  }\n</span></span><span><span>+</span><span>      //}\n</span></span><span><span> </span><span>   ]\n</span><span> </span><span> }\n</span></span></code></pre><div aria-hidden=\"true\"><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br><span>24</span><br><span>25</span><br><span>26</span><br><span>27</span><br><span>28</span><br><span>29</span><br><span>30</span><br><span>31</span><br><span>32</span><br><span>33</span><br><span>34</span><br><span>35</span><br><span>36</span><br><span>37</span><br><span>38</span><br><span>39</span><br><span>40</span><br><span>41</span><br><span>42</span><br><span>43</span><br><span>44</span><br><span>45</span><br><span>46</span><br><span>47</span><br><span>48</span><br><span>49</span><br><span>50</span><br><span>51</span><br><span>52</span><br><span>53</span><br><span>54</span><br><span>55</span><br><span>56</span><br><span>57</span><br><span>58</span><br><span>59</span><br><span>60</span><br><span>61</span><br><span>62</span><br><span>63</span><br><span>64</span><br><span>65</span><br><span>66</span><br><span>67</span><br><span>68</span><br><span>69</span><br><span>70</span><br><span>71</span><br><span>72</span><br><span>73</span><br><span>74</span><br><span>75</span><br><span>76</span><br><span>77</span><br><span>78</span><br><span>79</span><br><span>80</span><br><span>81</span><br><span>82</span><br><span>83</span><br><span>84</span><br><span>85</span><br><span>86</span><br><span>87</span><br><span>88</span><br><span>89</span><br><span>90</span><br><span>91</span><br><span>92</span><br><span>93</span><br><span>94</span><br><span>95</span><br><span>96</span><br><span>97</span><br><span>98</span><br><span>99</span><br><span>100</span><br><span>101</span><br><span>102</span><br><span>103</span><br><span>104</span><br><span>105</span><br><span>106</span><br><span>107</span><br><span>108</span><br><span>109</span><br><span>110</span><br><span>111</span><br><span>112</span><br><span>113</span><br><span>114</span><br><span>115</span><br><span>116</span><br><span>117</span><br><span>118</span><br><span>119</span><br><span>120</span><br><span>121</span><br><span>122</span><br><span>123</span><br><span>124</span><br><span>125</span><br><span>126</span><br><span>127</span><br><span>128</span><br><span>129</span><br><span>130</span><br><span>131</span><br><span>132</span><br><span>133</span><br><span>134</span><br><span>135</span><br><span>136</span><br><span>137</span><br><span>138</span><br><span>139</span><br><span>140</span><br><span>141</span><br><span>142</span><br><span>143</span><br><span>144</span><br><span>145</span><br><span>146</span><br><span>147</span><br></div></div><h3 id=\"cap配置\" tabindex=\"-1\"> CAP配置</h3>\n<p>因为用了<code>CAP</code>。cap换<code>sql server</code>。这里改成 <code>DefaultStorage</code>改成2。</p>\n<p>如果Messqueue换rabbitmq的话，<code>DefaultMessageQueue</code>就改成1.然后配置 RabbitMQ</p>\n<div><pre><code><span><span> </span><span> \"CAP\": {\n</span></span><span><span>-</span><span>    \"DefaultStorage\": \"1\",\n</span></span><span><span>+</span><span>    \"DefaultStorage\": \"2\",\n</span></span><span><span> </span><span>   \"DefaultMessageQueue\": \"0\",\n</span><span> </span><span>   \"Storage\": {\n</span><span> </span><span>     \"InMemoryStorage\": 0,\n</span><span> </span><span>     \"MySql\": 1,\n</span><span> </span><span>     \"SqlServer\": 2\n</span><span> </span><span>   },\n</span><span> </span><span>   \"MessageQueue\": {\n</span><span> </span><span>     \"InMemoryQueue\": 0,\n</span><span> </span><span>     \"RabbitMQ\": 1\n</span><span> </span><span>   },\n</span><span> </span><span>   \"RabbitMQ\": {\n</span><span> </span><span>     \"HostName\": \"localhost\",\n</span><span> </span><span>     \"UserName\": \"admin\",\n</span><span> </span><span>     \"Password\": \"123456\",\n</span><span> </span><span>     \"Port\": 5672,\n</span><span> </span><span>     \"VirtualHost\": \"/admin\"\n</span><span> </span><span>   }\n</span><span> </span><span> },\n</span></span></code></pre><div aria-hidden=\"true\"><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br></div></div><p>双击<code>LinCms.Application</code>项目,注释掉<code>DotNetCore.CAP.MySql</code>的引用，引用 SqlServer的包</p>\n<div><pre><code>\t&lt;ItemGroup>\n\t\t&lt;PackageReference Include=\"AspNet.Security.OAuth.Gitee\" Version=\"5.0.11\" />\n\t\t&lt;PackageReference Include=\"AspNet.Security.OAuth.GitHub\" Version=\"5.0.11\" />\n\t\t&lt;PackageReference Include=\"AspNet.Security.OAuth.QQ\" Version=\"5.0.11\" />\n\t\t&lt;PackageReference Include=\"AutoMapper\" Version=\"10.1.1\" />\n\t\t&lt;PackageReference Include=\"Autofac.Extensions.DependencyInjection\" Version=\"7.1.0\" />\n<span><span>-</span><span>\t\t&lt;PackageReference Include=\"DotNetCore.CAP.MySql\" Version=\"5.1.3\" />\n</span></span><span><span>+</span><span>\t\t&lt;PackageReference Include=\"DotNetCore.CAP.SqlServer\" Version=\"5.1.3\" />\n</span></span>\t\t&lt;PackageReference Include=\"IdentityServer4\" Version=\"4.1.2\" />\n\t\t&lt;PackageReference Include=\"DotNetCore.CAP\" Version=\"5.1.3\" />\n\t\t&lt;PackageReference Include=\"IdentityModel\" Version=\"5.1.0\" />\n\t\t&lt;PackageReference Include=\"MQiniu.Core\" Version=\"1.0.1\" />\n\t\t&lt;PackageReference Include=\"Caching.CSRedis\" Version=\"3.6.60\" />\n\t\t&lt;PackageReference Include=\"CSRedisCore\" Version=\"3.6.6\" />\n\t&lt;/ItemGroup>\n\n</code></pre><div aria-hidden=\"true\"><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br></div></div><p>打开<code>LinCms.Application</code>项目中的<code>CapUnitOfWorkExtensions.cs</code>文件</p>\n<p>修改方法<code>BeginTransaction</code></p>\n<div><pre><code>public static ICapTransaction BeginTransaction(this IUnitOfWork unitOfWork, ICapPublisher publisher, bool autoCommit = false)\n{\n<span><span> </span><span>   //看了源码，换了新的写法，换不同的数据库，就需要手动修改这段代码了（MySqlCapTransaction）\n</span><span> </span><span>   //publisher.Transaction.Value = (ICapTransaction)publisher.ServiceProvider.GetService(typeof(ICapTransaction));新版本只能得到nul\n</span></span><span><span>-</span><span>   publisher.Transaction.Value = ActivatorUtilities.CreateInstance&lt;MySqlCapTransaction>(publisher.ServiceProvider);\n</span></span><span><span>+</span><span>   publisher.Transaction.Value = ActivatorUtilities.CreateInstance&lt;SqlServerCapTransaction>(publisher.ServiceProvider);\n</span></span>}\n</code></pre><div aria-hidden=\"true\"><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br></div></div>",
      "date_published": "2021-12-22T18:31:25.000Z",
      "date_modified": "2021-12-22T18:31:25.000Z",
      "authors": [],
      "tags": []
    },
    {
      "title": "ASP.NETCore 下 FreeSql 的仓储事务",
      "url": "https://igeekfan.cn/igeekfan-docs/dotnetcore/lin-cms/aspnetcore-repository-unitofwork.html",
      "id": "https://igeekfan.cn/igeekfan-docs/dotnetcore/lin-cms/aspnetcore-repository-unitofwork.html",
      "content_html": "<h1 id=\"asp-netcore-下-freesql-的仓储事务\" tabindex=\"-1\"> ASP.NETCore 下 FreeSql 的仓储事务</h1>\n<h4 id=\"第一步-配置-startup-cs-注入\" tabindex=\"-1\"> 第一步：配置 Startup.cs 注入</h4>\n<p>引入包</p>\n<div><pre><code>dotnet <span>add</span> package FreeSql\ndotnet <span>add</span> package FreeSql<span>.</span>DbContext\ndotnet <span>add</span> package FreeSql<span>.</span>Provider<span>.</span>MySqlConnector\n</code></pre><div aria-hidden=\"true\"><span>1</span><br><span>2</span><br><span>3</span><br></div></div><p>配置 Startup.cs 注入</p>\n<div><pre><code><span>public</span> <span><span>void</span></span> <span>ConfigureServices</span><span>(</span><span>IServiceCollection</span> services<span>)</span>\n<span>{</span>\n  <span>IConfigurationSection</span> Mysql <span>=</span> Configuration<span>.</span><span>GetSection</span><span>(</span><span>\"Mysql\"</span><span>)</span><span>;</span>\n        Fsql <span>=</span> <span>new</span> <span>FreeSqlBuilder</span><span>(</span><span>)</span>\n            <span>.</span><span>UseConnectionString</span><span>(</span>DataType<span>.</span>MySql<span>,</span> Mysql<span>.</span>Value<span>)</span>\n            <span>.</span><span>UseAutoSyncStructure</span><span>(</span><span>true</span><span>)</span>\n            <span>.</span><span>UseNameConvert</span><span>(</span>NameConvertType<span>.</span>PascalCaseToUnderscoreWithLower<span>)</span>\n            <span>.</span><span>UseMonitorCommand</span><span>(</span>cmd <span>=></span> Trace<span>.</span><span>WriteLine</span><span>(</span>cmd<span>.</span>CommandText<span>)</span><span>)</span>\n            <span>.</span><span>Build</span><span>(</span><span>)</span><span>;</span>\n    services<span>.</span><span><span>AddSingleton</span><span><span>&lt;</span>IFreeSql<span>></span></span></span><span>(</span>fsql<span>)</span><span>;</span>\n    services<span>.</span><span><span>AddScoped</span><span><span>&lt;</span>UnitOfWorkManager<span>></span></span></span><span>(</span><span>)</span><span>;</span>\n    services<span>.</span><span>AddFreeRepository</span><span>(</span><span>null</span><span>,</span> <span>typeof</span><span>(</span><span>Startup</span><span>)</span><span>.</span>Assembly<span>)</span><span>;</span>\n    <span>//新增自己的服务，这里只有实现</span>\n    services<span>.</span><span><span>AddScoped</span><span><span>&lt;</span>TransBlogService<span>></span></span></span><span>(</span><span>)</span><span>;</span>\n<span>}</span>\n</code></pre><div aria-hidden=\"true\"><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br></div></div><ul>\n<li>appsettings.json</li>\n</ul>\n<div><pre><code><span>{</span>\n  <span>\"Mysql\"</span><span>:</span> <span>\"Data Source=127.0.0.1;Port=3306;User ID=root;Password=root;Initial Catalog=ovov_freesql_repository;Charset=utf8;SslMode=none;Max pool size=10\"</span>\n<span>}</span>\n</code></pre><div aria-hidden=\"true\"><span>1</span><br><span>2</span><br><span>3</span><br></div></div><table>\n<thead>\n<tr>\n<th>UnitOfWorkManager 成员</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>IUnitOfWork Current</td>\n<td>返回当前的工作单元</td>\n</tr>\n<tr>\n<td>void Binding(repository)</td>\n<td>将仓储的事务交给它管理</td>\n</tr>\n<tr>\n<td>IUnitOfWork Begin(propagation, isolationLevel)</td>\n<td>创建工作单元</td>\n</tr>\n</tbody>\n</table>\n<ul>\n<li>TransBlogService.cs</li>\n</ul>\n<div><pre><code><span>private</span> <span>readonly</span> <span>IBaseRepository<span>&lt;</span>Blog<span>,</span> <span>int</span><span>></span></span> _blogRepository<span>;</span>\n<span>private</span> <span>readonly</span> <span>IBaseRepository<span>&lt;</span>Tag<span>,</span> <span>int</span><span>></span></span> _tagRepository<span>;</span>\n<span>private</span> <span>readonly</span> <span>UnitOfWorkManager</span> _unitOfWorkManager<span>;</span>\n\n<span>public</span> <span>TransBlogService</span><span>(</span><span>IBaseRepository<span>&lt;</span>Blog<span>,</span> <span>int</span><span>></span></span> blogRepository<span>,</span> <span>IBaseRepository<span>&lt;</span>Tag<span>,</span> <span>int</span><span>></span></span> tagRepository<span>,</span><span>UnitOfWorkManager</span> unitOfWorkManager<span>)</span>\n<span>{</span>\n    _blogRepository <span>=</span> blogRepository <span>;</span>\n    _tagRepository <span>=</span> tagRepository <span>;</span>\n    _unitOfWorkManager <span>=</span> unitOfWorkManager<span>;</span>\n<span>}</span>\n\n<span>public</span> <span>async</span> <span>Task</span> <span>CreateBlogUnitOfWorkAsync</span><span>(</span><span>Blog</span> blog<span>,</span>List<span>&lt;</span>Tag<span>></span>tagList<span>)</span>\n<span>{</span>\n    <span>using</span> <span>(</span><span>IUnitOfWork</span> unitOfWork <span>=</span> _unitOfWorkManager<span>.</span><span>Begin</span><span>(</span><span>)</span><span>)</span>\n    <span>{</span>\n        <span>try</span>\n        <span>{</span>\n            <span>await</span> _blogRepository<span>.</span><span>InsertAsync</span><span>(</span>blog<span>)</span><span>;</span>\n            tagList<span>.</span><span>ForEach</span><span>(</span>r <span>=></span>\n            <span>{</span>\n                r<span>.</span>PostId <span>=</span> blog<span>.</span>Id<span>;</span>\n            <span>}</span><span>)</span><span>;</span>\n            <span>await</span> _tagRepository<span>.</span><span>InsertAsync</span><span>(</span>tagList<span>)</span><span>;</span>\n            unitOfWork<span>.</span><span>Commit</span><span>(</span><span>)</span><span>;</span>\n        <span>}</span>\n        <span>catch</span> <span>(</span><span>Exception</span> e<span>)</span>\n        <span>{</span>\n            <span>//实际 可以不Rollback。因为IUnitOfWork内部Dispose，会把没有Commit的事务Rollback回来，但能提前Rollback</span>\n\n            unitOfWork<span>.</span><span>Rollback</span><span>(</span><span>)</span><span>;</span>\n            <span>//记录日志、或继续throw;出来</span>\n        <span>}</span>\n    <span>}</span>\n<span>}</span>\n\n<span>public</span> <span>async</span> <span>Task</span> <span>UpdateBlogAsync</span><span>(</span><span><span>int</span></span> id<span>)</span>\n<span>{</span>\n    <span>using</span> <span>(</span><span>IUnitOfWork</span> unitOfWork <span>=</span> _unitOfWorkManager<span>.</span><span>Begin</span><span>(</span><span>)</span><span>)</span>\n    <span>{</span>\n        <span>try</span>\n        <span>{</span>\n            <span>Blog</span> blog <span>=</span> _blogRepository<span>.</span>Select<span>.</span><span>Where</span><span>(</span>r <span>=></span> r<span>.</span>Id <span>==</span> id<span>)</span><span>.</span><span>First</span><span>(</span><span>)</span><span>;</span>\n            blog<span>.</span>IsDeleted <span>=</span> <span>true</span><span>;</span>\n            <span>await</span> _blogRepository<span>.</span><span>UpdateAsync</span><span>(</span>blog<span>)</span><span>;</span>\n            unitOfWork<span>.</span><span>Commit</span><span>(</span><span>)</span><span>;</span>\n        <span>}</span>\n        <span>catch</span> <span>(</span><span>Exception</span> e<span>)</span>\n        <span>{</span>\n           <span>//记录日志、或继续throw;出来</span>\n            unitOfWork<span>.</span><span>Rollback</span><span>(</span><span>)</span><span>;</span>\n        <span>}</span>\n    <span>}</span>\n<span>}</span>\n</code></pre><div aria-hidden=\"true\"><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br><span>24</span><br><span>25</span><br><span>26</span><br><span>27</span><br><span>28</span><br><span>29</span><br><span>30</span><br><span>31</span><br><span>32</span><br><span>33</span><br><span>34</span><br><span>35</span><br><span>36</span><br><span>37</span><br><span>38</span><br><span>39</span><br><span>40</span><br><span>41</span><br><span>42</span><br><span>43</span><br><span>44</span><br><span>45</span><br><span>46</span><br><span>47</span><br><span>48</span><br><span>49</span><br><span>50</span><br><span>51</span><br><span>52</span><br><span>53</span><br></div></div><table>\n<thead>\n<tr>\n<th>IUnitOfWork 成员</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>IFreeSql Orm</td>\n<td>该对象 Select/Delete/Insert/Update/InsertOrUpdate 与工作单元事务保持一致，可省略传递 WithTransaction</td>\n</tr>\n<tr>\n<td>DbTransaction GetOrBeginTransaction()</td>\n<td>开启事务，或者返回已开启的事务</td>\n</tr>\n<tr>\n<td>void Commit()</td>\n<td>提交事务</td>\n</tr>\n<tr>\n<td>void Rollback()</td>\n<td>回滚事务</td>\n</tr>\n<tr>\n<td>DbContext.EntityChangeReport EntityChangeReport</td>\n<td>工作单元内的实体变化跟踪</td>\n</tr>\n</tbody>\n</table>\n<h4 id=\"完整的代码\" tabindex=\"-1\"> 完整的代码</h4>\n<ul>\n<li><a href=\"https://github.com/luoyunchong/dotnetcore-examples/blob/master/ORM/FreeSql/OvOv.Core/Domain/Blog.cs\" target=\"_blank\" rel=\"noopener noreferrer\">Blog.cs</a></li>\n<li><a href=\"https://github.com/luoyunchong/dotnetcore-examples/blob/master/ORM/FreeSql/OvOv.Core/Domain/Tag.cs\" target=\"_blank\" rel=\"noopener noreferrer\">Tag.cs</a></li>\n<li><a href=\"https://github.com/luoyunchong/dotnetcore-examples/blob/master/ORM/FreeSql/OvOv.FreeSql.AutoFac.DynamicProxy/Services/TransBlogService.cs\" target=\"_blank\" rel=\"noopener noreferrer\">TransBlogService.cs</a></li>\n</ul>\n<p>以上使用的是泛型仓储，那我们如果是重写一个仓储 如何保持和<code>UnitOfWorkManager</code>同一个事务呢。\n继承现有的<code>DefaultRepository&lt;,&gt;</code>仓储，实现自定义的仓储<code>BlogRepository.cs</code>,</p>\n<div><pre><code>    <span>public</span> <span>class</span> <span>BlogRepository</span> <span>:</span> <span><span>DefaultRepository<span>&lt;</span>Blog<span>,</span> <span>int</span><span>></span></span><span>,</span> <span>IBlogRepository</span></span>\n    <span>{</span>\n        <span>public</span> <span>BlogRepository</span><span>(</span><span>UnitOfWorkManager</span> uowm<span>)</span> <span>:</span> <span>base</span><span>(</span>uowm<span>?.</span>Orm<span>,</span> uowm<span>)</span>\n        <span>{</span>\n        <span>}</span>\n\n        <span>public</span> <span>List<span>&lt;</span>Blog<span>></span></span> <span>GetBlogs</span><span>(</span><span>)</span>\n        <span>{</span>\n            <span>return</span> Select<span>.</span><span>Page</span><span>(</span><span>1</span><span>,</span> <span>10</span><span>)</span><span>.</span><span>ToList</span><span>(</span><span>)</span><span>;</span>\n        <span>}</span>\n    <span>}</span>\n</code></pre><div aria-hidden=\"true\"><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br></div></div><p>其中接口。<code>IBlogRepository.cs</code></p>\n<div><pre><code>    <span>public</span> <span>interface</span> <span>IBlogRepository</span> <span>:</span> <span><span>IBaseRepository<span>&lt;</span>Blog<span>,</span> <span>int</span><span>></span></span></span>\n    <span>{</span>\n        <span>List<span>&lt;</span>Blog<span>></span></span> <span>GetBlogs</span><span>(</span><span>)</span><span>;</span>\n    <span>}</span>\n</code></pre><div aria-hidden=\"true\"><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br></div></div><p>在 startup.cs 注入此服务</p>\n<div><pre><code>    services<span>.</span><span><span>AddScoped</span><span><span>&lt;</span>IBlogRepository<span>,</span> BlogRepository<span>></span></span></span><span>(</span><span>)</span><span>;</span>\n</code></pre><div aria-hidden=\"true\"><span>1</span><br></div></div>",
      "date_published": "2021-12-12T10:05:43.000Z",
      "date_modified": "2022-06-02T11:02:17.000Z",
      "authors": [],
      "tags": []
    },
    {
      "title": "Autofac 依赖注入小知识",
      "url": "https://igeekfan.cn/igeekfan-docs/dotnetcore/lin-cms/autofac.html",
      "id": "https://igeekfan.cn/igeekfan-docs/dotnetcore/lin-cms/autofac.html",
      "content_html": "<h1 id=\"autofac-依赖注入小知识\" tabindex=\"-1\"> Autofac 依赖注入小知识</h1>\n<h2 id=\"控制反转-依赖注入-ioc-di\" tabindex=\"-1\"> 控制反转/依赖注入 IOC/DI</h2>\n<p>依赖接口而不依赖于实现，是面向对象的六大设计原则（SOLID)之一。即依赖倒置原则(<code>Dependence Inversion Principle</code>)</p>\n<p>生命周期分为三种，具体如下</p>\n<ul>\n<li><code>Singleton</code> 单例（全局唯一实例）</li>\n<li><code>Scoped</code> 范围 （在同一个生命周期内是同一个实例）</li>\n<li><code>Transient</code> 瞬时（每次请求都是一个新的实例）</li>\n</ul>\n<h2 id=\"使用说明\" tabindex=\"-1\"> 使用说明</h2>\n<p>创建<code>ASP.NET Core 3.0+</code>的项目，并安装<code>Autofac</code>包</p>\n<div><pre><code>dotnet <span>add</span> package Autofac.Extensions.DependencyInjection\n</code></pre><div aria-hidden=\"true\"><span>1</span><br></div></div><p>在 Program 中 Host 主机指定 <code>.UseServiceProviderFactory(new AutofacServiceProviderFactory())</code>.</p>\n<p>UseServiceProviderFactory 调用 Autofac 提供程序,附加到通用宿主机制。</p>\n<div><pre><code>public class Program\n{\n<span><span> </span><span>   public static void Main(string[] args)\n</span><span> </span><span>   {\n</span><span> </span><span>       var host = Host.CreateDefaultBuilder(args)\n</span></span><span><span>+</span><span>       .UseServiceProviderFactory(new AutofacServiceProviderFactory())\n</span></span><span><span> </span><span>       .ConfigureWebHostDefaults(webHostBuilder => {\n</span><span> </span><span>           webHostBuilder\n</span><span> </span><span>           .UseContentRoot(Directory.GetCurrentDirectory())\n</span><span> </span><span>           .UseIISIntegration()\n</span><span> </span><span>           .UseStartup&lt;Startup>();\n</span><span> </span><span>       })\n</span><span> </span><span>       .Build();\n</span></span>\n<span><span> </span><span>       host.Run();\n</span><span> </span><span>   }\n</span></span>}\n</code></pre><div aria-hidden=\"true\"><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br></div></div><p>在 StartUp 中配置</p>\n<div><pre><code>public class Startup\n{\n<span><span> </span><span> public Startup(IConfiguration configuration)\n</span><span> </span><span> {\n</span><span> </span><span>   this.Configuration = configuration;\n</span><span> </span><span> }\n</span></span>\n<span><span> </span><span> public IConfiguration Configuration { get; private set; }\n</span></span>\n<span><span>+</span><span>  public ILifetimeScope AutofacContainer { get; private set; }\n</span></span>\n<span><span> </span><span> public void ConfigureServices(IServiceCollection services)\n</span><span> </span><span> {\n</span><span> </span><span>   services.AddOptions();\n</span><span> </span><span> }\n</span></span>\n<span><span> </span><span> // ConfigureContainer is where you can register things directly\n</span><span> </span><span> // with Autofac. This runs after ConfigureServices so the things\n</span><span> </span><span> // here will override registrations made in ConfigureServices.\n</span><span> </span><span> // Don't build the container; that gets done for you by the factory.\n</span><span> </span><span> public void ConfigureContainer(ContainerBuilder builder)\n</span><span> </span><span> {\n</span><span> </span><span>   // Register your own things directly with Autofac here. Don't\n</span><span> </span><span>   // call builder.Populate(), that happens in AutofacServiceProviderFactory\n</span><span> </span><span>   // for you.\n</span></span><span><span>+</span><span>    builder.RegisterModule(new MyApplicationModule());\n</span></span><span><span> </span><span> }\n</span></span>\n<span><span> </span><span> public void Configure(\n</span><span> </span><span>   IApplicationBuilder app,\n</span><span> </span><span>   ILoggerFactory loggerFactory)\n</span><span> </span><span> {\n</span></span><span><span>+</span><span>   this.AutofacContainer = app.ApplicationServices.GetAutofacRoot();\n</span></span>\n<span><span> </span><span>   loggerFactory.AddConsole(this.Configuration.GetSection(\"Logging\"));\n</span><span> </span><span>   loggerFactory.AddDebug();\n</span><span> </span><span>   app.UseMvc();\n</span><span> </span><span> }\n</span></span>}\n</code></pre><div aria-hidden=\"true\"><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br><span>24</span><br><span>25</span><br><span>26</span><br><span>27</span><br><span>28</span><br><span>29</span><br><span>30</span><br><span>31</span><br><span>32</span><br><span>33</span><br><span>34</span><br><span>35</span><br><span>36</span><br><span>37</span><br><span>38</span><br><span>39</span><br></div></div><p>定义注入实现</p>\n<div><pre><code><span>public</span> <span>class</span> <span>MyApplicationModule</span> <span>:</span> <span><span>Autofac<span>.</span>Module</span></span>\n<span>{</span>\n    <span>protected</span> <span>override</span> <span><span>void</span></span> <span>Load</span><span>(</span><span>ContainerBuilder</span> builder<span>)</span>\n    <span>{</span>\n      builder<span>.</span><span><span>RegisterType</span><span><span>&lt;</span>HttpContextAccessor<span>></span></span></span><span>(</span><span>)</span><span>.</span><span><span>As</span><span><span>&lt;</span>IHttpContextAccessor<span>></span></span></span><span>(</span><span>)</span><span>.</span><span>SingleInstance</span><span>(</span><span>)</span><span>;</span>\n    <span>}</span>\n<span>}</span>\n</code></pre><div aria-hidden=\"true\"><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br></div></div><ul>\n<li>注册泛型仓储</li>\n</ul>\n<div><pre><code>builder<span>.</span><span>RegisterGeneric</span><span>(</span><span>typeof</span><span>(</span><span>AuditBaseRepository<span>&lt;</span><span>></span></span><span>)</span><span>)</span><span>.</span><span>As</span><span>(</span><span>typeof</span><span>(</span><span>IAuditBaseRepository<span>&lt;</span><span>></span></span><span>)</span><span>)</span><span>.</span><span>InstancePerLifetimeScope</span><span>(</span><span>)</span><span>;</span>\nbuilder<span>.</span><span>RegisterGeneric</span><span>(</span><span>typeof</span><span>(</span><span>AuditBaseRepository<span>&lt;</span><span>,</span><span>></span></span><span>)</span><span>)</span><span>.</span><span>As</span><span>(</span><span>typeof</span><span>(</span><span>IAuditBaseRepository<span>&lt;</span><span>,</span><span>></span></span><span>)</span><span>)</span><span>.</span><span>InstancePerLifetimeScope</span><span>(</span><span>)</span><span>;</span>\n</code></pre><div aria-hidden=\"true\"><span>1</span><br><span>2</span><br></div></div><ul>\n<li>一个接口多个实现,使用 Named，区分、参数为字符串即可。</li>\n</ul>\n<p>注册服务</p>\n<div><pre><code>builder<span>.</span><span><span>RegisterType</span><span><span>&lt;</span>IdentityServer4Service<span>></span></span></span><span>(</span><span>)</span><span>.</span><span><span>Named</span><span><span>&lt;</span>ITokenService<span>></span></span></span><span>(</span><span>typeof</span><span>(</span><span>IdentityServer4Service</span><span>)</span><span>.</span>Name<span>)</span><span>.</span><span>InstancePerLifetimeScope</span><span>(</span><span>)</span><span>;</span>\nbuilder<span>.</span><span><span>RegisterType</span><span><span>&lt;</span>JwtTokenService<span>></span></span></span><span>(</span><span>)</span><span>.</span><span><span>Named</span><span><span>&lt;</span>ITokenService<span>></span></span></span><span>(</span><span>typeof</span><span>(</span><span>JwtTokenService</span><span>)</span><span>.</span>Name<span>)</span><span>.</span><span>InstancePerLifetimeScope</span><span>(</span><span>)</span><span>;</span>\n</code></pre><div aria-hidden=\"true\"><span>1</span><br><span>2</span><br></div></div><p>根据 Name 获取哪个服务</p>\n<div><pre><code><span>private</span> <span>readonly</span> <span>ITokenService</span> _tokenService<span>;</span>\n<span>public</span> <span>AccountController</span><span>(</span><span>IComponentContext</span> componentContext<span>,</span> <span>IConfiguration</span> configuration<span>)</span>\n<span>{</span>\n    <span><span>bool</span></span> isIdentityServer4 <span>=</span> configuration<span>.</span><span>GetSection</span><span>(</span><span>\"Service:IdentityServer4\"</span><span>)</span><span>.</span>Value<span>?.</span><span>ToBoolean</span><span>(</span><span>)</span> <span>??</span> <span>false</span><span>;</span>\n    _tokenService <span>=</span> componentContext<span>.</span><span><span>ResolveNamed</span><span><span>&lt;</span>ITokenService<span>></span></span></span><span>(</span>isIdentityServer4 <span>?</span> <span>typeof</span><span>(</span><span>IdentityServer4Service</span><span>)</span><span>.</span>Name <span>:</span> <span>typeof</span><span>(</span><span>JwtTokenService</span><span>)</span><span>.</span>Name<span>)</span><span>;</span>\n<span>}</span>\n</code></pre><div aria-hidden=\"true\"><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br></div></div><p>可通过 appsettings.json 中配置,可决定是哪个服务</p>\n<div><pre><code>  <span>\"Service\"</span><span>:</span> <span>{</span>\n    <span>\"IdentityServer4\"</span><span>:</span> <span>false</span>\n  <span>}</span>\n</code></pre><div aria-hidden=\"true\"><span>1</span><br><span>2</span><br><span>3</span><br></div></div><ul>\n<li>基于接口的注入</li>\n</ul>\n<p><code>AsImplementedInterfaces</code> Specifies that a type from a scanned assembly is registered as providing all of its implemented interfaces.\n指定将扫描程序集中的类型注册为提供其所有实现的接口。</p>\n<p>根据接口<code>ITransientDependency</code>可以得到有哪些类继承了此接口，并判断是类，不是抽象类，不是泛型。</p>\n<p>所有继承类接口的类，将以接口的方式自动注入实例。可直接使用接口即可。</p>\n<ul>\n<li>InstancePerDependency 瞬时 （每次请求都是一个新的实例）</li>\n<li>InstancePerLifetimeScope 范围（在同一个生命周期内是同一个实例）</li>\n<li>SingleInstance 单例（全局唯一实例）</li>\n</ul>\n<div><pre><code>    <span>public</span> <span>class</span> <span>DependencyModule</span> <span>:</span> <span><span>Autofac<span>.</span>Module</span></span>\n    <span>{</span>\n        <span>protected</span> <span>override</span> <span><span>void</span></span> <span>Load</span><span>(</span><span>ContainerBuilder</span> builder<span>)</span>\n        <span>{</span>\n            <span>Assembly<span>[</span><span>]</span></span> currentAssemblies <span>=</span> AppDomain<span>.</span>CurrentDomain<span>.</span><span>GetAssemblies</span><span>(</span><span>)</span><span>.</span><span>Where</span><span>(</span>r <span>=></span> r<span>.</span>FullName<span>.</span><span>Contains</span><span>(</span><span>\"LinCms.\"</span><span>)</span><span>)</span><span>.</span><span>ToArray</span><span>(</span><span>)</span><span>;</span>\n\n            <span>//每次调用，都会重新实例化对象；每次请求都创建一个新的对象；</span>\n            <span>Type</span> transientDependency <span>=</span> <span>typeof</span><span>(</span><span>ITransientDependency</span><span>)</span><span>;</span>\n            builder<span>.</span><span>RegisterAssemblyTypes</span><span>(</span>currentAssemblies<span>)</span>\n                <span>.</span><span>Where</span><span>(</span>t <span>=></span> transientDependency<span>.</span><span>GetTypeInfo</span><span>(</span><span>)</span><span>.</span><span>IsAssignableFrom</span><span>(</span>t<span>)</span> <span>&amp;&amp;</span> t<span>.</span>IsClass <span>&amp;&amp;</span> <span>!</span>t<span>.</span>IsAbstract <span>&amp;&amp;</span> <span>!</span>t<span>.</span>IsGenericType<span>)</span>\n                <span>.</span><span>AsImplementedInterfaces</span><span>(</span><span>)</span><span>.</span><span>InstancePerDependency</span><span>(</span><span>)</span><span>;</span>\n\n            <span>//同一个Lifetime生成的对象是同一个实例</span>\n            <span>Type</span> scopeDependency <span>=</span> <span>typeof</span><span>(</span><span>IScopedDependency</span><span>)</span><span>;</span>\n            builder<span>.</span><span>RegisterAssemblyTypes</span><span>(</span>currentAssemblies<span>)</span>\n                <span>.</span><span>Where</span><span>(</span>t <span>=></span> scopeDependency<span>.</span><span>GetTypeInfo</span><span>(</span><span>)</span><span>.</span><span>IsAssignableFrom</span><span>(</span>t<span>)</span> <span>&amp;&amp;</span> t<span>.</span>IsClass <span>&amp;&amp;</span> <span>!</span>t<span>.</span>IsAbstract <span>&amp;&amp;</span> <span>!</span>t<span>.</span>IsGenericType<span>)</span>\n                <span>.</span><span>AsImplementedInterfaces</span><span>(</span><span>)</span><span>.</span><span>InstancePerLifetimeScope</span><span>(</span><span>)</span><span>;</span>\n\n            <span>//单例模式，每次调用，都会使用同一个实例化的对象；每次都用同一个对象；</span>\n            <span>Type</span> singletonDependency <span>=</span> <span>typeof</span><span>(</span><span>ISingletonDependency</span><span>)</span><span>;</span>\n            builder<span>.</span><span>RegisterAssemblyTypes</span><span>(</span>currentAssemblies<span>)</span>\n                <span>.</span><span>Where</span><span>(</span>t <span>=></span> singletonDependency<span>.</span><span>GetTypeInfo</span><span>(</span><span>)</span><span>.</span><span>IsAssignableFrom</span><span>(</span>t<span>)</span> <span>&amp;&amp;</span> t<span>.</span>IsClass <span>&amp;&amp;</span> <span>!</span>t<span>.</span>IsAbstract <span>&amp;&amp;</span><span>!</span>t<span>.</span>IsGenericType<span>)</span>\n                <span>.</span><span>AsImplementedInterfaces</span><span>(</span><span>)</span><span>.</span><span>SingleInstance</span><span>(</span><span>)</span><span>;</span>\n\n        <span>}</span>\n    <span>}</span>\n</code></pre><div aria-hidden=\"true\"><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br><span>24</span><br><span>25</span><br><span>26</span><br></div></div><p>如果不写继承，如何批量注入呢。 1.类名有规则 2.基于特殊标签 3.继承接口。</p>\n<ul>\n<li>类名有规则\n比如仓储后缀，全是<code>Repository</code>,其中<code>Assembly</code>为仓储的实现所在程序集。将自动注入所有的仓储，仓储必须有接口。</li>\n</ul>\n<div><pre><code>    <span>Assembly</span> assemblysRepository <span>=</span> Assembly<span>.</span><span>Load</span><span>(</span><span>\"LinCms.Infrastructure\"</span><span>)</span><span>;</span>\n    builder<span>.</span><span>RegisterAssemblyTypes</span><span>(</span>assemblysRepository<span>)</span>\n            <span>.</span><span>Where</span><span>(</span>a <span>=></span> a<span>.</span>Name<span>.</span><span>EndsWith</span><span>(</span><span>\"Repository\"</span><span>)</span><span>)</span>\n            <span>.</span><span>AsImplementedInterfaces</span><span>(</span><span>)</span>\n            <span>.</span><span>InstancePerLifetimeScope</span><span>(</span><span>)</span><span>;</span>\n</code></pre><div aria-hidden=\"true\"><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br></div></div><ul>\n<li>注入服务后就执行一段逻辑</li>\n</ul>\n<div><pre><code>builder<span>.</span><span><span>RegisterType</span><span><span>&lt;</span>MigrationStartupTask<span>></span></span></span><span>(</span><span>)</span><span>.</span><span>SingleInstance</span><span>(</span><span>)</span><span>;</span>\nbuilder<span>.</span><span>RegisterBuildCallback</span><span>(</span><span>async</span> <span>(</span>c<span>)</span> <span>=></span> <span>await</span> c<span>.</span><span><span>Resolve</span><span><span>&lt;</span>MigrationStartupTask<span>></span></span></span><span>(</span><span>)</span><span>.</span><span>StartAsync</span><span>(</span><span>)</span><span>)</span><span>;</span>\n</code></pre><div aria-hidden=\"true\"><span>1</span><br><span>2</span><br></div></div><h3 id=\"动态代理\" tabindex=\"-1\"> 动态代理</h3>\n<div><pre><code>dotnet <span>add</span> package Autofac<span>.</span>Extras<span>.</span>DynamicProxy\ndotnet <span>add</span> package Castle<span>.</span>Core<span>.</span>AsyncInterceptor\n</code></pre><div aria-hidden=\"true\"><span>1</span><br><span>2</span><br></div></div><ul>\n<li>服务注册</li>\n</ul>\n<p>AOP+属性注入+以后缀为 Service 的服务实现，注入 Scope 范围的生命周期+启用接口的拦截器。</p>\n<ul>\n<li>使用<code>EnableInterfaceInterceptors</code>创建执行拦截的接口代理，</li>\n<li>使用<code>EnableClassInterceptors()</code> 动态对子类进行重写, 执行 virtual 方法的拦截</li>\n</ul>\n<div><pre><code>builder<span>.</span><span><span>RegisterType</span><span><span>&lt;</span>UnitOfWorkInterceptor<span>></span></span></span><span>(</span><span>)</span><span>;</span>\nbuilder<span>.</span><span><span>RegisterType</span><span><span>&lt;</span>UnitOfWorkAsyncInterceptor<span>></span></span></span><span>(</span><span>)</span><span>;</span>\n\n\n<span>List<span>&lt;</span>Type<span>></span></span> interceptorServiceTypes <span>=</span> <span>new</span> <span>List<span>&lt;</span>Type<span>></span></span><span>(</span><span>)</span>\n<span>{</span>\n    <span>typeof</span><span>(</span><span>UnitOfWorkInterceptor</span><span>)</span><span>,</span>\n<span>}</span><span>;</span>\n\n<span>Assembly</span> servicesDllFile <span>=</span> Assembly<span>.</span><span>Load</span><span>(</span><span>\"LinCms.Application\"</span><span>)</span><span>;</span>\nbuilder<span>.</span><span>RegisterAssemblyTypes</span><span>(</span>servicesDllFile<span>)</span>\n    <span>.</span><span>Where</span><span>(</span>a <span>=></span> a<span>.</span>Name<span>.</span><span>EndsWith</span><span>(</span><span>\"Service\"</span><span>)</span> <span>&amp;&amp;</span> <span>!</span>a<span>.</span>IsAbstract <span>&amp;&amp;</span> <span>!</span>a<span>.</span>IsInterface <span>&amp;&amp;</span> a<span>.</span>IsPublic<span>)</span>\n    <span>.</span><span>AsImplementedInterfaces</span><span>(</span><span>)</span><span>//接口注入</span>\n    <span>.</span><span>InstancePerLifetimeScope</span><span>(</span><span>)</span><span>//生命周期：范围</span>\n    <span>.</span><span>PropertiesAutowired</span><span>(</span><span>)</span><span>// 属性注入</span>\n    <span>.</span><span>InterceptedBy</span><span>(</span>interceptorServiceTypes<span>.</span><span>ToArray</span><span>(</span><span>)</span><span>)</span><span>//声明拦截器</span>\n    <span>.</span><span>EnableInterfaceInterceptors</span><span>(</span><span>)</span><span>;</span><span>//启用接口的拦截器。</span>\n</code></pre><div aria-hidden=\"true\"><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br></div></div><p>这二个类，请参考如下代码</p>\n<ul>\n<li>同步：UnitOfWorkInterceptor.cs https://github.com/luoyunchong/lin-cms-dotnetcore/blob/master/src/LinCms.Web/Middleware/UnitOfWorkInterceptor.cs</li>\n<li>异步拦截：UnitOfWorkAsyncInterceptor.cs https://github.com/luoyunchong/lin-cms-dotnetcore/blob/master/src/LinCms.Web/Middleware/UnitOfWorkInterceptor.cs</li>\n</ul>\n<p><code>Autofac.Extras.DynamicProxy</code>依赖 Castle.Core,即只支持同步方法的拦截。\n异步方法的拦截需要安装包：<code>Castle.Core.AsyncInterceptor</code>。</p>\n<ul>\n<li>异步方法,分为有/无返回值：<code>async Task RunAsync()</code>,<code>asyn Task&lt;Result&gt; RunAsync()</code></li>\n<li>同步方法：<code>void Run()</code>,<code>Result Run()</code></li>\n</ul>\n<h3 id=\"同步拦截\" tabindex=\"-1\"> 同步拦截</h3>\n<p>1.定义拦截器</p>\n<div><pre><code><span>public</span> <span>class</span> <span>CallLogger</span> <span>:</span> <span><span>IInterceptor</span></span>\n<span>{</span>\n  <span>TextWriter</span> _output<span>;</span>\n\n  <span>public</span> <span>CallLogger</span><span>(</span><span>TextWriter</span> output<span>)</span>\n  <span>{</span>\n    _output <span>=</span> output<span>;</span>\n  <span>}</span>\n\n  <span>public</span> <span><span>void</span></span> <span>Intercept</span><span>(</span><span>IInvocation</span> invocation<span>)</span>\n  <span>{</span>\n    _output<span>.</span><span>Write</span><span>(</span><span>\"Calling method {0} with parameters {1}... \"</span><span>,</span>\n      invocation<span>.</span>Method<span>.</span>Name<span>,</span>\n      <span>string</span><span>.</span><span>Join</span><span>(</span><span>\", \"</span><span>,</span> invocation<span>.</span>Arguments<span>.</span><span>Select</span><span>(</span>a <span>=></span> <span>(</span>a <span>??</span> <span>\"\"</span><span>)</span><span>.</span><span>ToString</span><span>(</span><span>)</span><span>)</span><span>.</span><span>ToArray</span><span>(</span><span>)</span><span>)</span><span>)</span><span>;</span>\n\n    invocation<span>.</span><span>Proceed</span><span>(</span><span>)</span><span>;</span>\n\n    _output<span>.</span><span>WriteLine</span><span>(</span><span>\"Done: result was {0}.\"</span><span>,</span> invocation<span>.</span>ReturnValue<span>)</span><span>;</span>\n  <span>}</span>\n<span>}</span>\n</code></pre><div aria-hidden=\"true\"><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br></div></div><p>2.注册拦截器。</p>\n<div><pre><code><span>// Named registration</span>\nbuilder<span>.</span><span>Register</span><span>(</span>c <span>=></span> <span>new</span> <span>CallLogger</span><span>(</span>Console<span>.</span>Out<span>)</span><span>)</span>\n       <span>.</span><span><span>Named</span><span><span>&lt;</span>IInterceptor<span>></span></span></span><span>(</span><span>\"log-calls\"</span><span>)</span><span>;</span>\n\n<span>// Typed registration</span>\nbuilder<span>.</span><span>Register</span><span>(</span>c <span>=></span> <span>new</span> <span>CallLogger</span><span>(</span>Console<span>.</span>Out<span>)</span><span>)</span><span>;</span>\n</code></pre><div aria-hidden=\"true\"><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br></div></div><p>将拦截器与要拦截的类型 关联</p>\n<div><pre><code><span>[</span><span><span>Intercept</span><span><span>(</span><span>typeof</span><span>(</span><span>CallLogger</span><span>)</span><span>)</span></span></span><span>]</span>\n<span>public</span> <span>class</span> <span>First</span>\n<span>{</span>\n  <span>public</span> <span>virtual</span> <span><span>int</span></span> <span>GetValue</span><span>(</span><span>)</span>\n  <span>{</span>\n    <span>// Do some calculation and return a value</span>\n  <span>}</span>\n<span>}</span>\n\n<span>// This attribute will look for a NAMED</span>\n<span>// interceptor registration:</span>\n<span>[</span><span><span>Intercept</span><span><span>(</span><span>\"log-calls\"</span><span>)</span></span></span><span>]</span>\n<span>public</span> <span>class</span> <span>Second</span>\n<span>{</span>\n  <span>public</span> <span>virtual</span> <span><span>int</span></span> <span>GetValue</span><span>(</span><span>)</span>\n  <span>{</span>\n    <span>// Do some calculation and return a value</span>\n  <span>}</span>\n<span>}</span>\n</code></pre><div aria-hidden=\"true\"><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br></div></div><h2 id=\"链接\" tabindex=\"-1\"> 链接</h2>\n<ul>\n<li>官网 https://autofac.org/</li>\n<li>GitHub https://github.com/autofac/Autofac</li>\n<li>文档 https://autofac.readthedocs.io/en/latest/</li>\n</ul>\n",
      "date_published": "2021-12-12T10:05:43.000Z",
      "date_modified": "2022-06-02T11:02:17.000Z",
      "authors": [],
      "tags": []
    },
    {
      "title": "Scriban 模板语言",
      "url": "https://igeekfan.cn/igeekfan-docs/dotnetcore/lin-cms/scriban-README.html",
      "id": "https://igeekfan.cn/igeekfan-docs/dotnetcore/lin-cms/scriban-README.html",
      "content_html": "<h1 id=\"scriban-模板语言\" tabindex=\"-1\"> Scriban 模板语言</h1>\n<h3 id=\"目录\" tabindex=\"-1\"> 目录</h3>\n<ul>\n<li><a href=\"https://www.cnblogs.com/igeekfan/p/13343331.html\" target=\"_blank\" rel=\"noopener noreferrer\">【翻译】Scriban 是一种快速、强大、安全和轻量级的文本模板语言和.NET 引擎，具有解析 liquid 模板的兼容模式</a></li>\n<li><a href=\"\">【翻译】 Scriban language（ 待完成）</a></li>\n<li><a href=\"\">【翻译】Scriban runtime（ 待完成）</a></li>\n<li>原文 Github：<a href=\"https://github.com/lunet-io/scriban#readme\" target=\"_blank\" rel=\"noopener noreferrer\">https://github.com/lunet-io/scriban#readme</a></li>\n</ul>\n<p><a href=\"https://github.com/lunet-io/scriban/actions\" target=\"_blank\" rel=\"noopener noreferrer\"><img src=\"https://github.com/lunet-io/scriban/workflows/ci/badge.svg?branch=master\" alt=\"Build Status\" loading=\"lazy\"></a> <a href=\"https://coveralls.io/github/lunet-io/scriban?branch=master\" target=\"_blank\" rel=\"noopener noreferrer\"><img src=\"https://coveralls.io/repos/github/lunet-io/scriban/badge.svg?branch=master\" alt=\"Coverage Status\" loading=\"lazy\"></a> <a href=\"https://www.nuget.org/packages/Scriban/\" target=\"_blank\" rel=\"noopener noreferrer\"><img src=\"https://img.shields.io/nuget/v/Scriban.svg\" alt=\"NuGet\" loading=\"lazy\"></a></p>\n<img  width=\"160px\" height=\"160px\" src=\"@source/dotnetcore/lin-cms/images/scriban.png\">\n<p>Scriban 是一种快速、强大、安全和轻量级的文本模板语言和.NET 引擎，具有解析<code>liquid</code>模板的兼容模式</p>\n<div><pre><code><span>// Parse a scriban template</span>\n<span><span>var</span></span> template <span>=</span> Template<span>.</span><span>Parse</span><span>(</span><span>\"Hello {{name}}!\"</span><span>)</span><span>;</span>\n<span><span>var</span></span> result <span>=</span> template<span>.</span><span>Render</span><span>(</span><span>new</span> <span>{</span> Name <span>=</span> <span>\"World\"</span> <span>}</span><span>)</span><span>;</span> <span>// => \"Hello World!\"</span>\n</code></pre><div aria-hidden=\"true\"><span>1</span><br><span>2</span><br><span>3</span><br></div></div><p>使用 Liquid 语言解析 Liquid 模板：</p>\n<div><pre><code><span>// Parse a liquid template</span>\n<span><span>var</span></span> template <span>=</span> Template<span>.</span><span>ParseLiquid</span><span>(</span><span>\"Hello {{name}}!\"</span><span>)</span><span>;</span>\n<span><span>var</span></span> result <span>=</span> template<span>.</span><span>Render</span><span>(</span><span>new</span> <span>{</span> Name <span>=</span> <span>\"World\"</span> <span>}</span><span>)</span><span>;</span> <span>// => \"Hello World!\"</span>\n</code></pre><div aria-hidden=\"true\"><span>1</span><br><span>2</span><br><span>3</span><br></div></div><p>语言非常通用，易于阅读和使用，类似于<a href=\"https://shopify.github.io/liquid/\" target=\"_blank\" rel=\"noopener noreferrer\">liquid</a> 模板:</p>\n<div><pre><code><span><span>var</span></span> template <span>=</span> Template<span>.</span><span>Parse</span><span>(</span><span>@\"\n&lt;ul id='products'>\n  {{ for product in products }}\n    &lt;li>\n      &lt;h2>{{ product.name }}&lt;/h2>\n           Price: {{ product.price }}\n           {{ product.description | string.truncate 15 }}\n    &lt;/li>\n  {{ end }}\n&lt;/ul>\n\"</span><span>)</span><span>;</span>\n<span><span>var</span></span> result <span>=</span> template<span>.</span><span>Render</span><span>(</span><span>new</span> <span>{</span> Products <span>=</span> <span>this</span><span>.</span>ProductList <span>}</span><span>)</span><span>;</span>\n</code></pre><div aria-hidden=\"true\"><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br></div></div><blockquote>\n<p><strong>注意</strong></p>\n<p>默认情况下, .NET 对象的属性和方法会自动以小写和<code>_</code>命名，这意味着像<code>MyMethodIsNice</code>这样的属性将被公开为<code>my_method_is_nice</code>.这是默认约定，最初是为了匹配<code>liquid</code>模板的行为。\n如果要改变此行为，则需要使用 <a href=\"/dotnetcore/lin-cms/doc/runtime.html#member-renamer\"><code>MemberRenamer</code></a> 委托</p>\n</blockquote>\n<h2 id=\"特性\" tabindex=\"-1\"> 特性</h2>\n<ul>\n<li>非常<strong>高效</strong>,<strong>快速</strong> 解析器和<strong>轻量级</strong>的运行时. 对 CPU 和垃圾收集器友好. 查看</li>\n<li><a href=\"https://github.com/lunet-io/scriban/blob/devel-3.0/doc/benchmarks.md\" target=\"_blank\" rel=\"noopener noreferrer\">benchmarks</a>获取更多细节.</li>\n<li>由 Lexer / Parser 提供一个<strong>完整的抽象语法树，fast, versatile and robust(快速，通用且强大)</strong>, 比基于 regex 的解析器更高效\n<ul>\n<li>错误报告:能提供精确的源代码位置 ，包括(path, column and line)</li>\n<li><strong>将 AST 写入脚本文本的形式</strong>, 使用 <a href=\"https://github.com/lunet-io/scriban/blob/devel-3.0/doc/runtime.md#ast-to-text\" target=\"_blank\" rel=\"noopener noreferrer\"><code>Template.ToText</code></a>, 可以操作内存中的脚本并将其重新保存到磁盘, 对于 <strong>roundtrip（往返）的脚本更新方案</strong>是有用的</li>\n</ul>\n</li>\n<li><strong>兼容<code>liquid</code></strong> 模板 可使用<code>Template.ParseLiquid</code> 方法\n<ul>\n<li>虽然 <code>liquid</code> 语言不如<code>scriban</code>强大, 但该模式从 <code>liquid</code> 则更容易地迁移至 <code>scriban</code></li>\n<li>在 <a href=\"https://github.com/lunet-io/scriban/blob/devel-3.0/doc/runtime.md#ast-to-text\" target=\"_blank\" rel=\"noopener noreferrer\">AST to text</a> 模式下,将对模板<code>Template.ParseLiquid</code>进行解析，替换成<code>Template.ToText</code>,即可将<code>liquid</code> 脚本 转换成 <code>scriban</code> 脚本</li>\n<li>由于 liquid 语言没有严格定义 并且它有着不同版本的 liquid 语法，在使用 scriban 的 liquid 模板时会有一些限制, 查看此文档了解详情 <a href=\"https://github.com/lunet-io/scriban/blob/devel-3.0/doc/liquid-support.md\" target=\"_blank\" rel=\"noopener noreferrer\">liquid support in scriban</a></li>\n</ul>\n</li>\n<li><strong>可扩展的运行时</strong> 提供许多扩展点</li>\n<li>支持 <code>async</code>/<code>await</code> 的脚本支持 (e.g <code>Template.RenderAsync</code>)</li>\n<li><a href=\"https://github.com/lunet-io/scriban/blob/devel-3.0/doc/language.md#14-whitespace-control\" target=\"_blank\" rel=\"noopener noreferrer\">精确控制空白文本输出</a></li>\n<li><a href=\"https://github.com/lunet-io/scriban/blob/devel-3.0/doc/language.md\" target=\"_blank\" rel=\"noopener noreferrer\">完整的语言特性</a> 包括 <code>if</code>/<code>else</code>/<code>for</code>/<code>while</code>, <a href=\"/dotnetcore/lin-cms/doc/language.html#8-expressions\">expressions</a> (<code>x = 1 + 2</code>), conditions... etc.</li>\n<li><a href=\"https://github.com/lunet-io/scriban/blob/devel-3.0/doc/language.md#89-function-call-expression\" target=\"_blank\" rel=\"noopener noreferrer\">函数调用和管道</a> (<code>myvar | string.capitalize</code>)\n<ul>\n<li><a href=\"https://github.com/lunet-io/scriban/blob/devel-3.0/doc/language.md#7-functions\" target=\"_blank\" rel=\"noopener noreferrer\">自定义函数</a> 通过<code>func</code>语句直接将函数自定义到语言中 通过<code>alias @ directive</code>可使用<strong>function pointers/delegates</strong></li>\n<li>从 runtime API 绑定 <a href=\"https://github.com/lunet-io/scriban/blob/devel-3.0/doc/runtime.md#imports-functions-from-a-net-class\" target=\"_blank\" rel=\"noopener noreferrer\">.NET 自定义函数</a>，并提供许多与.NET 对象接口的<a href=\"https://github.com/lunet-io/scriban/blob/devel-3.0/doc/runtime.md#the-scriptobject\" target=\"_blank\" rel=\"noopener noreferrer\">选项</a> 。</li>\n</ul>\n</li>\n<li><a href=\"/dotnetcore/lin-cms/doc/language.html#5-objects\">Complex objects (复杂对象)</a> (javascript/json like objects <code>x = {mymember: 1}</code>) and <a href=\"https://github.com/lunet-io/scriban/blob/devel-3.0/doc/language.md#6-arrays\" target=\"_blank\" rel=\"noopener noreferrer\">arrays</a> (e.g <code>x = [1,2,3,4]</code>)</li>\n<li>通常由<code>wrap</code>语句使用可以将 <a href=\"https://github.com/lunet-io/scriban/blob/devel-3.0/doc/language.md#98-wrap-function-arg1argn--end\" target=\"_blank\" rel=\"noopener noreferrer\">a block of statements （语句块）</a> 传递给函数,</li>\n<li>一些<a href=\"https://github.com/lunet-io/scriban/blob/devel-3.0/doc/builtins.md\" target=\"_blank\" rel=\"noopener noreferrer\">内置函数</a>:\n<ul>\n<li><a href=\"https://github.com/lunet-io/scriban/blob/devel-3.0/doc/builtins.md#array-functions\" target=\"_blank\" rel=\"noopener noreferrer\"><code>arrays functions</code></a></li>\n<li><a href=\"https://github.com/lunet-io/scriban/blob/devel-3.0/doc/builtins.md#date-functions\" target=\"_blank\" rel=\"noopener noreferrer\"><code>date</code></a></li>\n<li><a href=\"https://github.com/lunet-io/scriban/blob/devel-3.0/doc/builtins.md#html-functions\" target=\"_blank\" rel=\"noopener noreferrer\"><code>html</code></a></li>\n<li><a href=\"https://github.com/lunet-io/scriban/blob/devel-3.0/doc/builtins.md#math-functions\" target=\"_blank\" rel=\"noopener noreferrer\"><code>maths functions</code></a></li>\n<li><a href=\"/dotnetcore/lin-cms/doc/builtins.html#object-functions\"><code>object</code></a></li>\n<li><a href=\"https://github.com/lunet-io/scriban/blob/devel-3.0/doc/builtins.md#regex-functions\" target=\"_blank\" rel=\"noopener noreferrer\"><code>regex functions</code></a></li>\n<li><a href=\"https://github.com/lunet-io/scriban/blob/devel-3.0/doc/builtins.md#string-functions\" target=\"_blank\" rel=\"noopener noreferrer\"><code>string functions</code></a></li>\n<li><a href=\"/dotnetcore/lin-cms/doc/builtins.html#timespan-functions\"><code>timespan</code></a></li>\n</ul>\n</li>\n<li><a href=\"https://github.com/lunet-io/scriban/blob/devel-3.0/doc/language.md#11-code-block\" target=\"_blank\" rel=\"noopener noreferrer\">Multi-line statements 多行语句</a> 不必在每行都使用</li>\n</ul>\n<div><pre><code><span>{</span><span>{</span><span>..</span><span>.</span><span>}</span><span>}</span>\n</code></pre><div aria-hidden=\"true\"><span>1</span><br></div></div><ul>\n<li><a href=\"https://github.com/lunet-io/scriban/blob/devel-3.0/doc/runtime.md#the-lexer-and-parser\" target=\"_blank\" rel=\"noopener noreferrer\">Safe parser</a> and <a href=\"https://github.com/lunet-io/scriban/blob/devel-3.0/doc/runtime.md#safe-runtime\" target=\"_blank\" rel=\"noopener noreferrer\">safe runtime</a>, 使您可以控制公开哪些对象和功能</li>\n</ul>\n<h2 id=\"syntax-coloring-语法着色\" tabindex=\"-1\"> Syntax Coloring(语法着色)</h2>\n<p>您可以安装 <a href=\"https://marketplace.visualstudio.com/items?itemName=xoofx.scriban\" target=\"_blank\" rel=\"noopener noreferrer\">Scriban Extension for Visual Studio Code</a> 获取 scriban 脚本 (without HTML) 和 scriban html 文件的语法颜色提示</p>\n<h2 id=\"文档\" tabindex=\"-1\"> 文档</h2>\n<ul>\n<li>有关<a href=\"https://github.com/lunet-io/scriban/blob/devel-3.0/doc/language.md\" target=\"_blank\" rel=\"noopener noreferrer\">语言语法</a>的说明，请参阅语言文档。</li>\n<li>内置函数见文档<a href=\"https://github.com/lunet-io/scriban/blob/devel-3.0/doc/builtins.md\" target=\"_blank\" rel=\"noopener noreferrer\">内置函数</a>列表。</li>\n<li>有关编译和运行模板的.NET 运行时 API 的说明，请参阅<a href=\"https://github.com/lunet-io/scriban/blob/devel-3.0/doc/runtime.md\" target=\"_blank\" rel=\"noopener noreferrer\">运行时</a>文档。</li>\n<li>有关支持 liquid 模板的更多详细信息，请参阅[Liquid support]文档。</li>\n<li>请参阅我的博客文章&quot;<a href=\"http://xoofx.com/blog/2017/11/13/implementing-a-text-templating-language-and-engine-for-dotnet/\" target=\"_blank\" rel=\"noopener noreferrer\">实现.NET 的文本模板引擎</a>&quot;，了解一些幕后细节。</li>\n</ul>\n<h2 id=\"二进制包\" tabindex=\"-1\"> 二进制包</h2>\n<p>Scriban 提供一个可获取的 NuGet 包: <a href=\"https://www.nuget.org/packages/Scriban/\" target=\"_blank\" rel=\"noopener noreferrer\"><img src=\"https://img.shields.io/nuget/v/Scriban.svg\" alt=\"NuGet\" loading=\"lazy\"></a></p>\n<p>兼容以下 .NET framework 版本:</p>\n<ul>\n<li>.NET Framework 3.5</li>\n<li>.NET Framework 4.0</li>\n<li>.NET Framework 4.5+ (supports asynchronous code and timeouts for regular expressions)</li>\n<li>.NET Standard1.1+ (some features are not available)</li>\n<li>.NET Standard1.3+ (which means .NET Core, Xamarin, UWP, Unity etc.)</li>\n</ul>\n<p>还有提供签名的 NuGet 包 <a href=\"https://www.nuget.org/packages/Scriban.Signed/\" target=\"_blank\" rel=\"noopener noreferrer\">Scriban.Signed</a></p>\n<h2 id=\"benchmarks-基准测试\" tabindex=\"-1\"> Benchmarks（基准测试）</h2>\n<p><strong>Scriban 速度极快</strong>! 更多细节, 你可以查看此文档 <a href=\"https://github.com/lunet-io/scriban/blob/devel-3.0/doc/benchmarks.md\" target=\"_blank\" rel=\"noopener noreferrer\">benchmarks（基准测试） 文档</a>.</p>\n<h2 id=\"license\" tabindex=\"-1\"> License</h2>\n<p>该软件是在<a href=\"https://opensource.org/licenses/BSD-2-Clause\" target=\"_blank\" rel=\"noopener noreferrer\">BSD-Clause 2 license</a>协议下发布的</p>\n<h2 id=\"相关项目\" tabindex=\"-1\"> 相关项目</h2>\n<ul>\n<li><a href=\"https://github.com/dotliquid/dotliquid\" target=\"_blank\" rel=\"noopener noreferrer\">dotliquid</a>: Liquid 模板语言的.NET 端口。</li>\n<li><a href=\"https://github.com/sebastienros/fluid/\" target=\"_blank\" rel=\"noopener noreferrer\">Fluid</a> .NET liquid 模板引擎</li>\n<li><a href=\"https://github.com/jdiamond/Nustache\" target=\"_blank\" rel=\"noopener noreferrer\">Nustache</a>: .NET 无逻辑模板（Logic-less templates for .NET）</li>\n<li><a href=\"https://github.com/rexm/Handlebars.Net\" target=\"_blank\" rel=\"noopener noreferrer\">Handlebars.Net</a>: .NET port of handlebars.js</li>\n</ul>\n<h2 id=\"在线示例\" tabindex=\"-1\"> 在线示例</h2>\n<ul>\n<li><a href=\"https://scribanonline.azurewebsites.net/\" target=\"_blank\" rel=\"noopener noreferrer\">https://scribanonline.azurewebsites.net/)</a>: ASP.NET Core Sample.</li>\n</ul>\n<h2 id=\"credits\" tabindex=\"-1\"> Credits</h2>\n<p>Adapted logo <code>Puzzle</code> by <a href=\"https://thenounproject.com/andydoane/\" target=\"_blank\" rel=\"noopener noreferrer\">Andrew Doane</a> from the Noun Project</p>\n<h2 id=\"作者\" tabindex=\"-1\"> 作者</h2>\n<p>Alexandre Mutel aka <a href=\"http://xoofx.com\" target=\"_blank\" rel=\"noopener noreferrer\">xoofx</a>.</p>\n",
      "image": "https://github.com/lunet-io/scriban/workflows/ci/badge.svg?branch=master",
      "date_published": "2021-12-12T10:05:43.000Z",
      "date_modified": "2022-06-02T11:02:17.000Z",
      "authors": [],
      "tags": []
    },
    {
      "title": "LinCms.Scaffolding 代码生成器",
      "url": "https://igeekfan.cn/igeekfan-docs/dotnetcore/lin-cms/lincms-scaffolding.html",
      "id": "https://igeekfan.cn/igeekfan-docs/dotnetcore/lin-cms/lincms-scaffolding.html",
      "content_html": "<h1 id=\"lincms-scaffolding-代码生成器\" tabindex=\"-1\"> LinCms.Scaffolding 代码生成器</h1>\n<p><a href=\"https://github.com/luoyunchong/lin-cms-dotnetcore/tree/dev\" target=\"_blank\" rel=\"noopener noreferrer\">https://github.com/luoyunchong/lin-cms-dotnetcore/tree/dev</a></p>\n<p>打开项目 LinCms.Scaffolding.sln。</p>\n<p>看到 appsettings.json 配置如下</p>\n<div><pre><code><span>{</span>\n  <span>\"SettingOptions\"</span><span>:</span> <span>{</span>\n    <span>\"ProjectName\"</span><span>:</span> <span>\"LinCms\"</span><span>,</span>\n    <span>\"BaseDirectory\"</span><span>:</span> <span>\"D:/code/github/lin-cms-dotnetcore/src/LinCms.Core/\"</span>\n    <span>\"EntityFilePath\"</span><span>:</span> <span>\"Entities/Base/Doc.cs\"</span><span>,</span>\n    <span>\"Areas\"</span><span>:</span> <span>\"Base\"</span><span>,</span>\n    <span>\"TemplatePath\"</span><span>:</span> <span>\"./Templates\"</span><span>,</span>\n    <span>\"OutputDirectory\"</span><span>:</span> <span>\"D:/code/github/lin-cms-dotnetcore/code-scaffolding\"</span>\n  <span>}</span>\n<span>}</span>\n</code></pre><div aria-hidden=\"true\"><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br></div></div><p>完成一个简单的表的 CRUD，只需要，创建一个实体类，修改一下上面的配置项，即可生成代码。</p>\n<ul>\n<li>BaseDirectory:BaseDirectory 请配置成 LinCms.Core 的项目路径。后缀要加/</li>\n</ul>\n<p>由于项目使用<strong>Microsoft.CodeAnalysis.CSharp</strong>解析出类的属性，需要知道项目的在哪个位置。</p>\n<p>另外，本项目，会根据 LinCms.Core.xml 中的内容解析出类和属性的注释。</p>\n<ul>\n<li>EntityFilePath 实体类所在文件位置</li>\n<li>Areas 区域模块名,eg:(Base)</li>\n<li>TemplatePath 相对路径，当前项目下的 Templates 目录,不需要修改</li>\n<li>OutputDirectory 生成的代码路径。可以是相对路径，也可以是绝对路径</li>\n</ul>\n<p>我们在 LinCms.Core 中的 Entities 中 Base 目录，新建一个类 Doc.cs，并写上注释信息，以便生成列表和表单。</p>\n<div><pre><code><span>using</span> <span>FreeSql<span>.</span>DataAnnotations</span><span>;</span>\n<span>using</span> <span>System</span><span>;</span>\n<span>using</span> <span>System<span>.</span>Collections<span>.</span>Generic</span><span>;</span>\n<span>using</span> <span>System<span>.</span>Text</span><span>;</span>\n\n<span>namespace</span> <span>LinCms<span>.</span>Entities<span>.</span>Base</span>\n<span>{</span>\n    <span>/// <span><span><span>&lt;</span>summary</span><span>></span></span></span>\n    <span>/// 文档</span>\n    <span>/// <span><span><span>&lt;/</span>summary</span><span>></span></span></span>\n    <span>public</span> <span>class</span> <span>Doc</span> <span>:</span> <span><span>FullAduitEntity</span></span>\n    <span>{</span>\n        <span>/// <span><span><span>&lt;</span>summary</span><span>></span></span></span>\n        <span>/// 文档名</span>\n        <span>/// <span><span><span>&lt;/</span>summary</span><span>></span></span></span>\n        <span>[</span><span>Column</span><span>(</span>StringLength <span>=</span> <span>50</span><span>)</span><span>]</span>\n        <span>public</span> <span><span>string</span></span> Name <span>{</span> <span>get</span><span>;</span> <span>set</span><span>;</span> <span>}</span>\n\n        <span>/// <span><span><span>&lt;</span>summary</span><span>></span></span></span>\n        <span>/// 显示名</span>\n        <span>/// <span><span><span>&lt;/</span>summary</span><span>></span></span></span>\n        <span>[</span><span>Column</span><span>(</span>StringLength <span>=</span> <span>50</span><span>)</span><span>]</span>\n        <span>public</span> <span><span>string</span></span> DisplayName <span>{</span> <span>get</span><span>;</span> <span>set</span><span>;</span> <span>}</span>\n\n    <span>}</span>\n<span>}</span>\n</code></pre><div aria-hidden=\"true\"><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br><span>24</span><br><span>25</span><br><span>26</span><br></div></div><p>我们可以根据需要，修改上面的配置信息。</p>\n<p>我们可以打开 Lincms 的项目。删除所有的 Docs 相关的代码。</p>\n<p>然后运行此代码生成器。即可生成所有 CRUD 代码。然后。代码会输出到此目录 <strong>&quot;D:/code/github/lin-cms-dotnetcore/code-scaffolding&quot;</strong>,</p>\n<p><img src=\"https://pic.downk.cc/item/5f1da73014195aa594ee9888.jpg\" alt=\"\" loading=\"lazy\"></p>\n<p>然后。我们将前五个代码，依次复制到项目中，因为可能覆盖现有的代码，所以不推荐将此代码的输出目录写成<strong>D:/code/github/lin-cms-dotnetcore/src</strong>。</p>\n<p>然后将最后一个 lin-cms-vue。按模块复制到自己项目中即可。</p>\n",
      "image": "https://pic.downk.cc/item/5f1da73014195aa594ee9888.jpg",
      "date_published": "2020-07-26T16:18:09.000Z",
      "date_modified": "2022-06-02T11:02:17.000Z",
      "authors": [],
      "tags": []
    },
    {
      "title": "后端快速上手",
      "url": "https://igeekfan.cn/igeekfan-docs/dotnetcore/lin-cms/cms-start.html",
      "id": "https://igeekfan.cn/igeekfan-docs/dotnetcore/lin-cms/cms-start.html",
      "content_html": "<h1 id=\"后端快速上手\" tabindex=\"-1\"> 后端快速上手</h1>\n<p>本小节我们将在 lin-cms 的基础上开发一个简单的图书管理 demo,帮助大家来熟悉和入门 lin-cms。</p>\n<p>lin-cms 是一个 lin 团队经数打磨的模板项目，本人是 c#的开发者，为 lin-cms 完善在.net 下的生态，是基于 asp.netcore 的基础上，沉淀下来的一套实践， 帮助开发者节约时间。</p>\n<blockquote>\n<p>注意：本小节建立在你有一定的 asp.net mvc，freesql，.net core 的基础上。</p>\n</blockquote>\n<h2 id=\"数据层\" tabindex=\"-1\"> 数据层</h2>\n<p>由于我们用的.net core 中优秀的开源项目 FreeSql,codefirst 模式，他能根据类生成表结构。所以，不需要我们手动创建表结构。</p>\n<h3 id=\"book-书\" tabindex=\"-1\"> book 书</h3>\n<table>\n<thead>\n<tr>\n<th>字段</th>\n<th>类型</th>\n<th>备注</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>id</td>\n<td>bigint</td>\n<td>主键 Id</td>\n</tr>\n<tr>\n<td>author</td>\n<td>varchar</td>\n<td>作者</td>\n</tr>\n<tr>\n<td>image</td>\n<td>varchar</td>\n<td>图片</td>\n</tr>\n<tr>\n<td>summary</td>\n<td>varchar</td>\n<td>简介</td>\n</tr>\n<tr>\n<td>title</td>\n<td>varchar</td>\n<td>标题</td>\n</tr>\n</tbody>\n</table>\n<p>可增加一些审计字段，如</p>\n<table>\n<thead>\n<tr>\n<th>字段</th>\n<th>类型</th>\n<th>备注</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>create_time</td>\n<td>datetime</td>\n<td>创建时间</td>\n</tr>\n<tr>\n<td>create_user_id</td>\n<td>datetime</td>\n<td>创建者 ID</td>\n</tr>\n<tr>\n<td>update_time</td>\n<td>datetime</td>\n<td>修改时间</td>\n</tr>\n<tr>\n<td>update_user_id</td>\n<td>datetime</td>\n<td>最后修改人 Id</td>\n</tr>\n<tr>\n<td>delete_time</td>\n<td>datetime</td>\n<td>删除时间</td>\n</tr>\n<tr>\n<td>delete_user_id</td>\n<td>datetime</td>\n<td>删除人 id</td>\n</tr>\n<tr>\n<td>is_deleted</td>\n<td>datetime</td>\n<td>是否删除</td>\n</tr>\n</tbody>\n</table>\n<p>审计字段可通过继承父类<strong>FullAduitEntity</strong>即可,当然，也可只有创建时间，创建人二个字段，继承<strong>ICreateAduitEntity</strong>接口，实现二个字段即可。如果不想要这些记录，只需要继承<strong>Entity</strong>类，仅有一个 ID 字段，支持泛型。</p>\n<p><strong>is_deleted</strong>字段本身没有什么稀奇的，但我们可以配合 FreeSql 实现逻辑删除（软删除），在 LinCms.Web/Configs/DependencyInjectionExtensions.cs 文件中。配置 了如下内容，如果我们筛选数据时，会全局启用 <a href=\"https://github.com/dotnetcore/FreeSql/wiki/%E8%BF%87%E6%BB%A4%E5%99%A8\" target=\"_blank\" rel=\"noopener noreferrer\">过滤器</a>。像创建时间，创建人。这些字段都不需要我们赋值，如果我们全部使用仓储<strong>IAuditBaseRepository</strong>访问数据库，这些字段会自动赋值。</p>\n<div><pre><code>fsql.GlobalFilter.Apply&lt;IDeleteAduitEntity>(\"IsDeleted\", a => a.IsDeleted == false);\n</code></pre><div aria-hidden=\"true\"><span>1</span><br></div></div><h2 id=\"模型层\" tabindex=\"-1\"> 模型层</h2>\n<p>我们建立单纯的实体类（Entities)，在路径<strong>lin-cms-dotnetcore\\src\\LinCms.Core\\Entities</strong>,名为 Book.cs 的实体类</p>\n<div><pre><code><span>using</span> <span>FreeSql<span>.</span>DataAnnotations</span><span>;</span>\n\n<span>namespace</span> <span>LinCms<span>.</span>Core<span>.</span>Entities</span>\n<span>{</span>\n    <span>[</span><span><span>Table</span><span><span>(</span>Name <span>=</span> <span>\"book\"</span><span>)</span></span></span><span>]</span>\n    <span>public</span> <span>class</span> <span>Book</span> <span>:</span> <span><span>FullAduitEntity</span></span>\n    <span>{</span>\n        <span>[</span><span><span>Column</span><span><span>(</span>DbType <span>=</span> <span>\"varchar(30)\"</span><span>)</span></span></span><span>]</span>\n        <span>public</span> <span><span>string</span></span> Author <span>{</span> <span>get</span><span>;</span> <span>set</span><span>;</span> <span>}</span> <span>=</span> <span>string</span><span>.</span>Empty<span>;</span>\n\n        <span>[</span><span><span>Column</span><span><span>(</span>DbType <span>=</span> <span>\"varchar(50)\"</span><span>)</span></span></span><span>]</span>\n        <span>public</span> <span><span>string</span></span> Image <span>{</span> <span>get</span><span>;</span> <span>set</span><span>;</span> <span>}</span> <span>=</span> <span>string</span><span>.</span>Empty<span>;</span>\n\n        <span>[</span><span><span>Column</span><span><span>(</span>DbType <span>=</span> <span>\"varchar(1000)\"</span><span>)</span></span></span><span>]</span>\n        <span>public</span> <span><span>string</span></span> Summary <span>{</span> <span>get</span><span>;</span> <span>set</span><span>;</span> <span>}</span> <span>=</span> <span>string</span><span>.</span>Empty<span>;</span>\n\n        <span>[</span><span><span>Column</span><span><span>(</span>DbType <span>=</span> <span>\"varchar(50)\"</span><span>)</span></span></span><span>]</span>\n        <span>public</span> <span><span>string</span></span> Title <span>{</span> <span>get</span><span>;</span> <span>set</span><span>;</span> <span>}</span> <span>=</span> <span>string</span><span>.</span>Empty<span>;</span>\n    <span>}</span>\n<span>}</span>\n</code></pre><div aria-hidden=\"true\"><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br></div></div><p>更多特性标签支持情况，请查看<a href=\"https://github.com/dotnetcore/FreeSql/wiki/%E5%AE%9E%E4%BD%93%E7%89%B9%E6%80%A7\" target=\"_blank\" rel=\"noopener noreferrer\">FreeSql 官方文档实体特性</a>。</p>\n<p>由于默认 FreeSql,只有访问到这个类时才会生成表，但我们可以手动扫描所有带有 Table 特性标签的类，同步表结构。仅建议开发时启动表结构全部同步。</p>\n<p>LinCms.Web/Configs/DependencyInjectionExtensions.cs\n中的 AddContext 配置项中.</p>\n<div><pre><code>//在运行时直接生成表结构\nfsql.CodeFirst.SyncStructure(ReflexHelper.GetEntityTypes(typeof(IEntity)));\n</code></pre><div aria-hidden=\"true\"><span>1</span><br><span>2</span><br></div></div><h2 id=\"业务层\" tabindex=\"-1\"> 业务层</h2>\n<p>有了实体类，我们创建 IBookRepository<code>&lt;Book,long&gt;</code>，也可以不创建，直接使用 IAuditBaseRepository<code>&lt;Book&gt;</code>在 Service 层写相应的业务。这里我们就不创建仓储服务了，框架中携带的仓储已经满足我们的要求。</p>\n<p>仓储是什么呢。在这里我们可以理解 DAL,也理解为仓库，他提供了对单个表的 CURD 操作方法，有了一个统一的规范。</p>\n<p>作用即数据的持久化，应用服务通过仓储对数据进行操作，让开发者不用关注仓储内部的实现。</p>\n<p>业务层 Services，我们直接使用仓储访问数据库。</p>\n<p>在 LinCms.Application.Contracts 项目中，在 v1 文件夹新建一个 Books 的文件夹,用于存放书的相关接口，创建 IBookService 的接口</p>\n<div><pre><code>using System.Threading.Tasks;\nusing LinCms.Application.Contracts.v1.Books.Dtos;\nusing LinCms.Core.Data;\n\nnamespace LinCms.Application.Contracts.v1.Books\n{\n    public interface IBookService\n    {\n        Task&lt;BookDto> GetAsync(long id);\n    }\n}\n</code></pre><div aria-hidden=\"true\"><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br></div></div><p>新建一个 Dtos 文件夹，用于存放业务传输的数据对象，再创建一个 BookDto，仅包含必要的字段，而非全部。该类以 Dto 结尾，代表数据传输对象。</p>\n<div><pre><code>using System;\nusing LinCms.Core.Entities;\n\nnamespace LinCms.Application.Contracts.v1.Books.Dtos\n{\n    public class BookDto:EntityDto\n    {\n        public string Author { get; set; }\n        public string Image { get; set; }\n        public string Summary { get; set; }\n        public string Title { get; set; }\n        public DateTime CreateTime { get; set; }\n        public DateTime UpdateTime { get; set; }\n    }\n}\n\n</code></pre><div aria-hidden=\"true\"><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br></div></div><p>在 BookService 实现如下，在这里我们注入 IAuditBaseRepository，通过 调用 <strong>_bookRepository.Select.Where(a =&gt; a.Id == id).ToOneAsync();</strong> ,根据 id 得到书的实体对象。然后使用 AutoMappeer,将 Book 类转换成 BookDto 类，然后返回。\n至于为什么 这里我们可以注入 IAuditBaseRepository，IMapper 类，后面我们会讲到。</p>\n<div><pre><code>using System.Collections.Generic;\nusing System.Linq;\nusing System.Threading.Tasks;\nusing AutoMapper;\nusing LinCms.Application.Contracts.v1.Books;\nusing LinCms.Application.Contracts.v1.Books.Dtos;\nusing LinCms.Core.Data;\nusing LinCms.Core.Entities;\nusing LinCms.Core.Exceptions;\nusing LinCms.Core.Extensions;\nusing LinCms.Core.IRepositories;\n\nnamespace LinCms.Application.v1.Books\n{\n    public class BookService : IBookService\n    {\n        private readonly IAuditBaseRepository&lt;Book> _bookRepository;\n        private readonly IMapper _mapper;\n        public BookService(IAuditBaseRepository&lt;Book> bookRepository, IMapper mapper)\n        {\n            _bookRepository = bookRepository;\n            _mapper = mapper;\n        }\n\n\n        public async Task&lt;BookDto> GetAsync(long id)\n        {\n            Book book = await _bookRepository.Select.Where(a => a.Id == id).ToOneAsync();\n            return _mapper.Map&lt;BookDto>(book);\n        }\n    }\n}\n</code></pre><div aria-hidden=\"true\"><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br><span>24</span><br><span>25</span><br><span>26</span><br><span>27</span><br><span>28</span><br><span>29</span><br><span>30</span><br><span>31</span><br><span>32</span><br></div></div><p>因为使用 AutoMapper 简化二个对象的映射，我们在同一目录下，创建一个继承 Profile 类的配置项。在构造函数中，我们配置了调用 CreateMap 方法，代表，从 Book-&gt;BookDto 的映射关系。</p>\n<div><pre><code>using AutoMapper;\nusing LinCms.Application.Contracts.v1.Books.Dtos;\nusing LinCms.Core.Entities;\n\nnamespace LinCms.Application.v1.Books\n{\n    public class BookProfile:Profile\n    {\n        public BookProfile()\n        {\n            CreateMap&lt;Book, BookDto>();\n        }\n    }\n}\n\n</code></pre><div aria-hidden=\"true\"><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br></div></div><p>在 ASP.NET Core 中，我们会扫描该程序集（LinCms.Applicaiton）中所有继承了 Profile 类的子类，在 LinCms.Web 中 ConfiguartionService 配置如下，</p>\n<div><pre><code>services.AddAutoMapper(typeof(BookProfile).Assembly);\n</code></pre><div aria-hidden=\"true\"><span>1</span><br></div></div><p>一个项目即一个程序集(生成一个 dll)，仅配置一次。</p>\n<p>我们完善一下控制器的代码。</p>\n<div><pre><code>using System.Threading.Tasks;\nusing AutoMapper;\nusing LinCms.Application.Contracts.v1.Books;\nusing LinCms.Application.Contracts.v1.Books.Dtos;\nusing LinCms.Core.Aop;\nusing LinCms.Core.Aop.Filter;\nusing LinCms.Core.Data;\nusing LinCms.Core.Entities;\nusing LinCms.Core.Exceptions;\nusing LinCms.Core.Extensions;\nusing LinCms.Core.IRepositories;\nusing LinCms.Web.Data.Authorization;\nusing Microsoft.AspNetCore.Authorization;\nusing Microsoft.AspNetCore.Mvc;\n\nnamespace LinCms.Web.Controllers.v1\n{\n    [Route(\"v1/book\")]\n    [ApiController]\n    [Authorize]\n    public class BookController : ControllerBase\n    {\n        private readonly IBookService _bookService;\n        public BookController(IBookService bookService)\n        {\n            _bookService = bookService;\n        }\n\n        [HttpGet(\"{id}\")]\n        public async Task&lt;BookDto> GetAsync(int id)\n        {\n            return await _bookService.GetAsync(id);\n        }\n    }\n}\n</code></pre><div aria-hidden=\"true\"><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br><span>24</span><br><span>25</span><br><span>26</span><br><span>27</span><br><span>28</span><br><span>29</span><br><span>30</span><br><span>31</span><br><span>32</span><br><span>33</span><br><span>34</span><br><span>35</span><br></div></div><p>在 LinCms.Web/Controllers/v1 文件夹，创建我们的 Book 控制器。\n我们依旧通过构造函数注入服务<strong>IBookService</strong>,这里用到的是 async await 方法，与同步方法执行顺序一致，仅多二个关键字，并使用 Task&lt;返回值&gt;来返回数据，通常我们使用 Async 标识异步方法。</p>\n<p>启动项目，可通过 Visual Studio 点击上方的运行即可。</p>\n<p>还可通过终端运行项目</p>\n<p>先 cd 到目录 lin-cms-dotnetcore/src/LinCms.Web</p>\n<div><pre><code>dotnet run\n</code></pre><div aria-hidden=\"true\"><span>1</span><br></div></div><p>打开浏览器，https://localhost:5001/swagger/index.html， ctrl+f 搜索，book，找到 GET /v1/book/{id}，点击 try it out,输入 id，点击 Execute。</p>\n<p>因为我们没登录登录，在 BookController 上写了特性标签 <strong>[Authorize]</strong> ，所以会返回</p>\n<div><pre><code>{\n  \"code\": 10000,\n  \"message\": \"请先登录\",\n  \"request\": \"GET /v1/book/131\"\n}\n</code></pre><div aria-hidden=\"true\"><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br></div></div><p>我们可以先去掉这个特性标签，也可以走登录浏览，把 Token 放到 Header 中的 Authoriaztion 中。。</p>\n<p>这里我们先去掉这行特性标签。去掉后，需要 ctrl+c，即出运行状态，如果感觉麻烦，可以使用 <strong>dotnet run watch</strong> 命令，修改后，自动重启，不需要手动重启。。</p>\n<p>这里我们重新测试，手动给数据库加一些数据，记得 is_deleted 要是 false，然后输入对应的 id，会得到对应的值</p>\n<div><pre><code>{\n  \"author\": \"891dc185-2\",\n  \"image\": \"f6d0c1e9-fcb2-446a-9093-d773e6515579\",\n  \"summary\": \"8aea38f8-a6e0-4053-bd7a-ae4476432bdd\",\n  \"title\": \"2d0c2e44-ee02-4d40-b4b7-eed03bb48aa4\",\n  \"create_time\": 1588485910430,\n  \"update_time\": 1588485910430,\n  \"id\": 139\n}\n</code></pre><div aria-hidden=\"true\"><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br></div></div>",
      "date_published": "2020-07-24T17:10:08.000Z",
      "date_modified": "2022-06-02T11:02:17.000Z",
      "authors": [],
      "tags": []
    },
    {
      "title": "GitHub Actions",
      "url": "https://igeekfan.cn/igeekfan-docs/dotnetcore/lin-cms/github-actions.html",
      "id": "https://igeekfan.cn/igeekfan-docs/dotnetcore/lin-cms/github-actions.html",
      "content_html": "<h1 id=\"github-actions\" tabindex=\"-1\"> GitHub Actions</h1>\n<h2 id=\"gitee-与-github-自动同步\" tabindex=\"-1\"> Gitee 与 GitHub 自动同步</h2>\n<p>当 github 上的项目代码 master 分支提交后，gitee 自动同步。如何实现呢。主要通过 github action 实现</p>\n<p>我们想将 luoyunchong/lin-cms-dotnetcore 同步到 igeekfan/lin-cms-dotnetcore 上面，需要做的非常简单，只需要 2 步：</p>\n<p>1.将 Gitee 的私钥，上传到项目的 setting 的 Secrets 中。\n<a href=\"https://pic.downk.cc/item/5e9725f5c2a9a83be5dcdec3.png\" target=\"_blank\" rel=\"noopener noreferrer\"><img src=\"https://pic.downk.cc/item/5e9725f5c2a9a83be5dcdec3.png\" alt=\"\" loading=\"lazy\"></a></p>\n<p>前提，该私钥对应的公钥在 gitee 上，windows(C:\\Users\\Computer.ssh)，其中 id_rsa 是私钥，id_rsa.pub 内容是公钥，具体在 gitee 上增加 ssh 公钥的过程，请参考<a href=\"https://gitee.com/help/articles/4191\" target=\"_blank\" rel=\"noopener noreferrer\">SSH 公钥设置</a></p>\n<ol start=\"2\">\n<li>改 source-repo、destination-repo 的值</li>\n</ol>\n<h2 id=\"lin-cms-dotnetcore-gitee-同步脚本\" tabindex=\"-1\"> lin-cms-dotnetcore gitee 同步脚本</h2>\n<div><pre><code>name: Publish\non:\n    push:\n        branches:\n            - master\n\njobs:\n    build:\n        runs-on: ubuntu-latest\n        steps:\n            - name: Sync to Gitee 💕\n              uses: wearerequired/git-mirror-action@master\n              env:\n                  SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}\n              with:\n                  source-repo: \"git@github.com:luoyunchong/lin-cms-dotnetcore.git\"\n                  destination-repo: \"git@gitee.com:igeekfan/lin-cms-dotnetcore.git\"\n</code></pre><div aria-hidden=\"true\"><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br></div></div><p>每一个 steps 就是在 jobs 里执行命令，一个 jobs 可以有多个 steps,\nsteps 字段指定每个 Job 的运行步骤的介绍</p>\n<div><pre><code>jobs.&lt;job_id>.steps.name 步骤名称\njobs.&lt;job_id>.steps.env 该步骤所需的环境变量。\njobs.&lt;job_id>.steps.uses  使用的组件\njobs.&lt;job_id>.steps.with 多个值(这个参数其实是提交给容器的CMD)\n\n</code></pre><div aria-hidden=\"true\"><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br></div></div><h2 id=\"ci-cd-部署\" tabindex=\"-1\"> CI/CD 部署</h2>\n<ul>\n<li>完整的配置项</li>\n</ul>\n<div><pre><code># This workflow will do a clean install of node dependencies, build the source code and run tests across different versions of node\n# For more information see: https://help.github.com/actions/language-and-framework-guides/using-nodejs-with-github-actions\n\nname: Node.js CI\n\non:\n  push:\n    branches:\n      - master\n\njobs:\n  build:\n    name: 编译\n    runs-on: ubuntu-latest\n    strategy:\n      matrix:\n        node-version: ['8','10','12']\n    steps:\n    - uses: actions/checkout@v2\n    - name: Use Node.js ${{ matrix.node-version }}\n      uses: actions/setup-node@v1\n      with:\n        node-version: ${{ matrix.node-version }}\n    - name: 安装依赖\n      run: npm i\n    - name: 编译文件\n      run: |\n        npm run lint\n        npm run build\n  deploy:\n    name: 部署\n    runs-on: ubuntu-latest\n    steps:\n      - name: 拉取代码\n        uses: actions/checkout@v2\n      - name: 安装 Node.js 12\n        uses: actions/setup-node@v1\n        with:\n          node-version: 12\n      - name: 安装依赖\n        run: npm i\n      - name: 编译文件\n        run: |\n          npm run lint\n          npm run build\n      - name: 上传文件\n        uses: easingthemes/ssh-deploy@v2.1.4\n        env:\n          ARGS: \"-rltgoDzvO --delete\"\n          SOURCE: \"dist/\"\n          REMOTE_HOST: ${{ secrets.HOST }}\n          REMOTE_USER: ${{ secrets.USER }}\n          SSH_PRIVATE_KEY: ${{ secrets.SERVER_SSH_KEY }}\n          TARGET: ${{ secrets.REMOTE_TARGET }}\n\n</code></pre><div aria-hidden=\"true\"><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br><span>24</span><br><span>25</span><br><span>26</span><br><span>27</span><br><span>28</span><br><span>29</span><br><span>30</span><br><span>31</span><br><span>32</span><br><span>33</span><br><span>34</span><br><span>35</span><br><span>36</span><br><span>37</span><br><span>38</span><br><span>39</span><br><span>40</span><br><span>41</span><br><span>42</span><br><span>43</span><br><span>44</span><br><span>45</span><br><span>46</span><br><span>47</span><br><span>48</span><br><span>49</span><br><span>50</span><br><span>51</span><br><span>52</span><br><span>53</span><br><span>54</span><br><span>55</span><br></div></div><h3 id=\"ssh-deploy-插件\" tabindex=\"-1\"> ssh-deploy 插件</h3>\n<ul>\n<li>https://github.com/easingthemes/ssh-deploy</li>\n</ul>\n<p>可查看 README 了解具体参数</p>\n<p>以上共有四个参数需要配置</p>\n<div><pre><code>REMOTE_HOST: ${{ secrets.HOST }}\nREMOTE_USER: ${{ secrets.USER }}\nSSH_PRIVATE_KEY: ${{ secrets.SERVER_SSH_KEY }}\nTARGET: ${{ secrets.REMOTE_TARGET }}\n</code></pre><div aria-hidden=\"true\"><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br></div></div><p>打开 Settings-&gt;Secrets-&gt;New secret 配置如下内容。</p>\n<ul>\n<li>HOST eg: mydomain.com 这里我们配置了服务器的 ip 111.231.197.142</li>\n<li>USER centos 服务器的用户名</li>\n<li>REMOTE_TARGET 目标服务器的文件夹位置， eg: /var/www/lin-cms-vvlog</li>\n<li>SERVER_SSH_KEY：SSH 密钥对的私钥部分，公钥应该添加到服务器上的 authorized_keys 文件中。。eg /root/.ssh/authorized_keys</li>\n</ul>\n<p>最后一个参数说明：这个相当于把私钥给 github，让他能远程上传文件到 centos 中，公钥放到服务器上。公钥生成的过程不 BB 了，</p>\n<h3 id=\"ssh-生成\" tabindex=\"-1\"> .ssh 生成</h3>\n<ul>\n<li><a href=\"https://help.github.com/en/articles/connecting-to-github-with-ssh\" target=\"_blank\" rel=\"noopener noreferrer\">https://help.github.com/en/articles/connecting-to-github-with-ssh</a></li>\n<li>https://www.ssh.com/ssh/public-key-authentication</li>\n</ul>\n<p>本地 windows .ssh 默认生成目录</p>\n<div><pre><code>C:\\Users\\计算机名\\.ssh\n</code></pre><div aria-hidden=\"true\"><span>1</span><br></div></div><p>我的.ssh 目录位置</p>\n<div><pre><code>C:\\Users\\Computer\\.ssh\n</code></pre><div aria-hidden=\"true\"><span>1</span><br></div></div><p>dir 查看文件</p>\n<div><pre><code>C:\\Users\\Computer\\.ssh>dir\n2020/02/22  19:45             3,243 id_rsa\n2020/02/22  19:45               750 id_rsa.pub\n</code></pre><div aria-hidden=\"true\"><span>1</span><br><span>2</span><br><span>3</span><br></div></div><p>id_rsa 是私钥，用 vscode 等记事本编辑器打开，并复制配置到 github 上。New secret,id_rsa.pub 是公钥，把他复制到 linux 文件夹<code>/root/.ssh/</code>目录中，这时把他的名字由<code>id_rsa.pub</code>改成<code>authorized_keys</code>即可。</p>\n<p><code>/用户名/.ssh</code> 没有.ssh 文件夹就创建一个。</p>\n<h3 id=\"xsheel-ssh-登录\" tabindex=\"-1\"> XSheel ssh 登录</h3>\n<p>可通过 xshell 工具验证，Public Key 登录。</p>\n<p>新建会话属性-&gt;输入主机（H）即 IP 地址。</p>\n<p>选择用户身份验证-&gt;方法选择 public Key,输入用户名，比如 root</p>\n<ul>\n<li>选择私钥登录\n在用户密钥右侧点击浏览-&gt;用户密钥-&gt;导入-&gt;选择 id_rsa.pub 私钥，导入成功后，选择此密钥，确定。再在 SSH 用户身份验证界面确定,即可登录成功。表明私钥，公钥配置成功</li>\n</ul>\n<h2 id=\"参考\" tabindex=\"-1\"> 参考</h2>\n<ul>\n<li><a href=\"https://github.com/marketplace/actions/mirror-a-repository-using-ssh\" target=\"_blank\" rel=\"noopener noreferrer\">https://github.com/marketplace/actions/mirror-a-repository-using-ssh</a></li>\n<li><a href=\"https://help.github.com/en/actions\" target=\"_blank\" rel=\"noopener noreferrer\">https://help.github.com/en/actions</a></li>\n</ul>\n",
      "image": "https://pic.downk.cc/item/5e9725f5c2a9a83be5dcdec3.png",
      "date_published": "2020-07-24T17:10:08.000Z",
      "date_modified": "2022-06-02T11:02:17.000Z",
      "authors": [],
      "tags": []
    },
    {
      "title": "方法级别的权限控制（API级别）",
      "url": "https://igeekfan.cn/igeekfan-docs/dotnetcore/lin-cms/authorize.html",
      "id": "https://igeekfan.cn/igeekfan-docs/dotnetcore/lin-cms/authorize.html",
      "content_html": "<h1 id=\"方法级别的权限控制-api级别\" tabindex=\"-1\"> 方法级别的权限控制（API级别）</h1>\n<p>Lin的定位在于实现一整套 CMS的解决方案，它是一个设计方案，提供了不同的后端，不同的前端，而且也支持不同的数据库</p>\n<p>目前官方团队维护 lin-cms-vue,lin-cms-spring-boot,lin-cms-koa,lin-cms-flask\n社区维护了 lin-cms-tp5,lin-cms-react,lin-cms-dotnetcore，即已支持vue,react二种前端框架，java,nodejs,python,php,c#等五种后端语言。</p>\n<p>下面我们来讲一下.NET Core这个项目中权限控制的实现。</p>\n<p>对于CMS来说，一个完善的权限模块是必不可少的，是系统内置实现的。为了更加简单地理解权限，我们先来理解一下ASP.NET Core有哪些权限控制。</p>\n<p>1.<strong>AuthorizeAttribute</strong>的作用？</p>\n<p>这个特性标签授权通过属性参数配置，可应用于控制器或操作方法上，对用户的身份进行验证。</p>\n<p>如果没有授权，会返回403状态码，我们可以通过重写，来实现返回JSON字符串，让前台提示。前提是请求中间件配置了如下二行。</p>\n<ul>\n<li>\n<p><strong>app.UseAuthentication();</strong> 认证，明确是谁在操作，认证方式如用户名密码,登录后，可以得到一个token，或者写入cookies，这样可以确定这个用户是谁</p>\n</li>\n<li>\n<p><strong>app.UseAuthorization();</strong> 授权中间件，明确你是否有某个权限。在http请求时，中间件会在带有权限特性标签 <strong>[Authorize]</strong> 的操作，进行权限判断，包括角色，策略等。</p>\n</li>\n</ul>\n<p>该控制器下的操作都必须经过身份验证，</p>\n<div><pre><code>[Authorize]\npublic class AccountController : Controller\n{\n    public ActionResult Login()\n    {\n    }\n\n    public ActionResult Logout()\n    {\n    }\n}\n</code></pre><div aria-hidden=\"true\"><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br></div></div><p>这样只显示单个方法必须应用授权。</p>\n<div><pre><code>public class AccountController : Controller\n{\n   public ActionResult Login()\n   {\n   }\n\n   [Authorize]\n   public ActionResult Logout()\n   {\n   }\n}\n</code></pre><div aria-hidden=\"true\"><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br></div></div><p>如果我们通过<strong>AllowAnonymous</strong>特性标签去掉身份验证。Login方法无须进行验证。即可匿名访问。</p>\n<div><pre><code>[Authorize]\npublic class AccountController : Controller\n{\n    [AllowAnonymous]\n    public ActionResult Login()\n    {\n    }\n\n    public ActionResult Logout()\n    {\n    }\n}\n</code></pre><div aria-hidden=\"true\"><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br></div></div><ol start=\"2\">\n<li>基于角色的授权</li>\n</ol>\n<p>我们可以通过给这个特性标签加参数，配置，某个方法，控制器是否有这个角色，如果有此角色才能访问这些资源。</p>\n<p>单个角色</p>\n<div><pre><code>[Authorize(Roles = \"Administrator\")]\npublic class AdministrationController : Controller\n{\n}\n</code></pre><div aria-hidden=\"true\"><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br></div></div><p>多个角色，我们可以这样配置,即用逗号分隔。用户有其中一个角色即可访问。</p>\n<div><pre><code>[Authorize(Roles = \"HRManager,Finance\")]\npublic class SalaryController : Controller\n{\n}\n</code></pre><div aria-hidden=\"true\"><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br></div></div><p>当某个方法必须同时有二个角色怎么办呢。该控制器只有同时有PowerUser，和ControlPanelUser的角色才能访问这些资源了。</p>\n<div><pre><code>[Authorize(Roles = \"PowerUser\")]\n[Authorize(Roles = \"ControlPanelUser\")]\npublic class ControlPanelController : Controller\n{\n}\n</code></pre><div aria-hidden=\"true\"><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br></div></div><ul>\n<li>3.更多。请看官网 <a href=\"https://docs.microsoft.com/zh-cn/aspnet/core/security/authorization/roles?view=aspnetcore-3.1\" target=\"_blank\" rel=\"noopener noreferrer\">https://docs.microsoft.com/zh-cn/aspnet/core/security/authorization/roles?view=aspnetcore-3.1</a></li>\n</ul>\n<p>更多该特性标签的介绍，也可参考官网，这里就不展开了。</p>\n<p>那这个角色，到底在哪配置的？？</p>\n<p>登录时生成的Token,是基于JWT的，其中的Claim的type为<strong>ClaimTypes.Role</strong>（枚举值），角色名称为字符串，与特性标签中的Roles属性值相同。\n如</p>\n<div><pre><code>new Claim(ClaimTypes.Role, \"Administrator\");\n</code></pre><div aria-hidden=\"true\"><span>1</span><br></div></div><p>有多个角色时，**List Claim ** 多加几个 <strong>new Claim(ClaimTypes.Role, &quot;PowerUser&quot;);</strong> 也是支持的。user为用户信息，LinGroups为当前用户的分组（多个）</p>\n<p>即如下代码示例，多个分组（角色）</p>\n<div><pre><code>var claims = new List&lt;Claim>()\n{\n    new Claim(ClaimTypes.NameIdentifier, user.Email ?? \"\"),\n    new Claim(ClaimTypes.GivenName, user.Nickname ?? \"\"),\n    new Claim(ClaimTypes.Name, user.Username ?? \"\"),\n};\n\nuser.LinGroups?.ForEach(r =>\n {\n     claims.Add(new Claim(ClaimTypes.Role, r.Name));\n });\n</code></pre><div aria-hidden=\"true\"><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br></div></div><h3 id=\"authorizeattribute源码\" tabindex=\"-1\"> AuthorizeAttribute源码</h3>\n<div><pre><code> [AttributeUsage(AttributeTargets.Class | AttributeTargets.Method, AllowMultiple = true, Inherited = true)]\n  public class AuthorizeAttribute : Attribute, IAuthorizeData\n  {\n    public AuthorizeAttribute()\n    {\n    }\n\n    public AuthorizeAttribute(string policy)\n    {\n      this.Policy = policy;\n    }\n\n    public string Policy { get; set; }\n\n    public string Roles { get; set; }\n\n    public string AuthenticationSchemes { get; set; }\n  }\n</code></pre><div aria-hidden=\"true\"><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br></div></div><p>我们可以看到，它继承了Attribute，说明这是一个特性标签，IAuthorizeData是一个接口，有这三个属性，约束了 一个规范，即有角色Roles，有策略Policy，有身份验证方案AuthenticationSchemes，该特性支持Class,支持方法，该特性标签支持多个共用，该特性标签支持被继承。</p>\n<p>基于角色的授权和基于声明的授权是一种预配置的策略，即固定的角色，固定的Claims验证。</p>\n<p>我们可以基于自定义策略的实现更多的权限验证或某些规则验证。</p>\n<p>AuthorizeAttribute能做的权限控制如下</p>\n<ul>\n<li>基于角色级别的权限控制（多个角色，单个角色）</li>\n<li>基于声明的授权：可自定义声明特性。</li>\n<li>基于策略的授权：</li>\n</ul>\n<h2 id=\"lin-cms-dotnetcore中的权限设计\" tabindex=\"-1\"> lin-cms-dotnetcore中的权限设计</h2>\n<p>说了这么多官方提供的，我们讲一下lin-cms-dotnetcore中的权限设计</p>\n<p>完整的表结构如下\n<a href=\"https://luoyunchong.github.io/igeekfan-docs/dotnetcore/lin-cms/table.html\" target=\"_blank\" rel=\"noopener noreferrer\">https://luoyunchong.github.io/igeekfan-docs/dotnetcore/lin-cms/table.html</a></p>\n<h4 id=\"lincmsauthorizeattribute\" tabindex=\"-1\"> LinCmsAuthorizeAttribute</h4>\n<div><pre><code> [AttributeUsage(AttributeTargets.Class | AttributeTargets.Method, AllowMultiple = true)]\n    public class LinCmsAuthorizeAttribute : Attribute, IAsyncAuthorizationFilter\n    {\n        public string Permission { get; }\n        public string Module { get; }\n\n        public LinCmsAuthorizeAttribute(string permission, string module)\n        {\n            Permission = permission;\n            Module = module;\n        }\n\n        public async Task OnAuthorizationAsync(AuthorizationFilterContext context)\n        {\n            ClaimsPrincipal claimsPrincipal = context.HttpContext.User;\n\n            if (!claimsPrincipal.Identity.IsAuthenticated)\n            {\n                HandlerAuthenticationFailed(context, \"认证失败，请检查请求头或者重新登陆\", ErrorCode.AuthenticationFailed);\n                return;\n            }\n\n            IAuthorizationService authorizationService = (IAuthorizationService)context.HttpContext.RequestServices.GetService(typeof(IAuthorizationService));\n            AuthorizationResult authorizationResult = await authorizationService.AuthorizeAsync(context.HttpContext.User, null, new OperationAuthorizationRequirement() { Name = Permission });\n            if (!authorizationResult.Succeeded)\n            {\n                HandlerAuthenticationFailed(context, $\"您没有权限：{Module}-{Permission}\", ErrorCode.NoPermission);\n            }\n        }\n\n        public void HandlerAuthenticationFailed(AuthorizationFilterContext context, string errorMsg, ErrorCode errorCode)\n        {\n            context.HttpContext.Response.StatusCode = StatusCodes.Status401Unauthorized;\n            context.Result = new JsonResult(new UnifyResponseDto(errorCode, errorMsg, context.HttpContext));\n        }\n    }\n</code></pre><div aria-hidden=\"true\"><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br><span>24</span><br><span>25</span><br><span>26</span><br><span>27</span><br><span>28</span><br><span>29</span><br><span>30</span><br><span>31</span><br><span>32</span><br><span>33</span><br><span>34</span><br><span>35</span><br><span>36</span><br></div></div><p>上面的实现非常简单,LinCmsAuthorizeAttribute继承于Attribute，说明是一个特性标签，有二个属性Permission，Module，代表权限名，模块名（用于区分哪个功能模块），然后将权限名称转化为OperationAuthorizationRequirement，然后调用authorizationService中的方法AuthorizeAsync来完成授权。</p>\n<p>接下来，我们在控制器上使用LinCmsAuthorizeAttribute,那么我们</p>\n<div><pre><code>[Route(\"cms/admin/group\")]\n[ApiController]\npublic class GroupController : ControllerBase\n{\n    private readonly IGroupService _groupService;\n    public GroupController(IGroupService groupService)\n    {\n        _groupService = groupService;\n    }\n\n    [HttpGet(\"all\")]\n    [LinCmsAuthorize(\"查询所有权限组\",\"管理员\")]\n    public Task&lt;List&lt;LinGroup>> GetListAsync()\n    {\n        return _groupService.GetListAsync();\n    }\n\n    [HttpGet(\"{id}\")]\n    [LinCmsAuthorize(\"查询一个权限组及其权限\",\"管理员\")]\n    public async Task&lt;GroupDto> GetAsync(long id)\n    {\n        GroupDto groupDto = await _groupService.GetAsync(id);\n        return groupDto;\n    }\n\n    [HttpPost]\n    [LinCmsAuthorize(\"新建权限组\",\"管理员\")]\n    public async Task&lt;UnifyResponseDto> CreateAsync([FromBody] CreateGroupDto inputDto)\n    {\n        await _groupService.CreateAsync(inputDto);\n        return UnifyResponseDto.Success(\"新建分组成功\");\n    }\n\n    [HttpPut(\"{id}\")]\n    [LinCmsAuthorize(\"更新一个权限组\",\"管理员\")]\n    public async Task&lt;UnifyResponseDto> UpdateAsync(long id, [FromBody] UpdateGroupDto updateGroupDto)\n    {\n        await _groupService.UpdateAsync(id, updateGroupDto);\n        return UnifyResponseDto.Success(\"更新分组成功\");\n    }\n\n    [HttpDelete(\"{id}\")]\n    [LinCmsAuthorize(\"删除一个权限组\",\"管理员\")]\n    public async Task&lt;UnifyResponseDto> DeleteAsync(long id)\n    {\n        await _groupService.DeleteAsync(id);\n        return UnifyResponseDto.Success(\"删除分组成功\");\n    }\n\n}\n</code></pre><div aria-hidden=\"true\"><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br><span>24</span><br><span>25</span><br><span>26</span><br><span>27</span><br><span>28</span><br><span>29</span><br><span>30</span><br><span>31</span><br><span>32</span><br><span>33</span><br><span>34</span><br><span>35</span><br><span>36</span><br><span>37</span><br><span>38</span><br><span>39</span><br><span>40</span><br><span>41</span><br><span>42</span><br><span>43</span><br><span>44</span><br><span>45</span><br><span>46</span><br><span>47</span><br><span>48</span><br><span>49</span><br><span>50</span><br></div></div><p>这样在方法上已经加了权限的标签，但我们怎么得到系统中的所有权限，让用户配置呢。\n<a href=\"https://igeekfan.gitee.io/igeekfan-docs/dotnetcore/lin-cms/reflex-assembly-get-controller-methods-attribute.html#%E8%8E%B7%E5%8F%96%E6%8E%A7%E5%88%B6%E5%99%A8%E5%8F%8A%E6%96%B9%E6%B3%95%E7%89%B9%E6%80%A7%E6%A0%87%E7%AD%BE\" target=\"_blank\" rel=\"noopener noreferrer\">获取控制器及方法特性标签</a>。本质上，是通过反射,扫描当前程序集，会获取到一个List，我们可以在系统启动时把这些数据存到数据库中。</p>\n<p>最新的方式是采用此方法，原理都相同。name，module唯一值。存入lin_permission表中，这时就有id值了。lin_group_permission就能用分组关联了。</p>\n<div><pre><code>public async Task SeedAsync()\n{\n    List&lt;PermissionDefinition> linCmsAttributes = ReflexHelper.GeAssemblyLinCmsAttributes();\n\n    List&lt;LinPermission> insertPermissions = new List&lt;LinPermission>();\n    List&lt;LinPermission>allPermissions=await  _permissionRepository.Select.ToListAsync();\n    \n    linCmsAttributes.ForEach(r =>\n    {\n        bool exist = allPermissions.Any(u => u.Module == r.Module &amp;&amp; u.Name == r.Permission);\n        if (!exist)\n        {\n            insertPermissions.Add(new LinPermission(r.Permission, r.Module));\n        }\n    });\n    await _permissionRepository.InsertAsync(insertPermissions);\n }\n</code></pre><div aria-hidden=\"true\"><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br></div></div><h3 id=\"实现方法级的权限控制源码解析\" tabindex=\"-1\"> 实现方法级的权限控制源码解析</h3>\n<p>原理可以看这个文章<a href=\"https://www.cnblogs.com/RainingNight/p/dynamic-authorization-in-asp-net-core.html\" target=\"_blank\" rel=\"noopener noreferrer\">ASP.NET Core 认证与授权[7]:动态授权</a>中的<strong>自定义授权过滤器</strong></p>\n<p>我们需要了解一下这些类/接口/抽象类</p>\n<div><pre><code>- IAuthorizationService(interface)\n- AuthorizationService(class)\n- IAuthorizationHandler(interface)\n- AuthorizationHandler&lt;TRequirement>(abstract class)\n- PermissionAuthorizationHandler（class 自定义的类,继承AuthorizationHandler）\n</code></pre><div aria-hidden=\"true\"><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br></div></div><h3 id=\"总结调用链如下\" tabindex=\"-1\"> 总结调用链如下</h3>\n<div><pre><code>LinCmsAuthorizeAttribute（继承了IAsyncAuthorizationFilter的特性标签）\n调用了---->\nIAuthorizationService中的AuthorizeAsync方法\n调用了---->\nIAuthorizationHandler中的HandleAsync\n调用了---->\nAuthorizationHandler中的HandleRequirementAsync抽象方法\n相当于调用---->\nPermissionAuthorizationHandler类中的实现方法HandleRequirementAsync\n调用了---->\nIPermissionService类中的CheckPermissionAsync方法。\n调用了---->\nIAuditBaseRepository&lt;LinPermission,long>\nIAuditBaseRepository&lt;LinGroupPermission, long>\n使用FreeSql,判断当前用户所在分组是否拥有此权限。\n</code></pre><div aria-hidden=\"true\"><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br></div></div><p>IAuthorizationService是什么呢。我们可以理解为，验证当前用户是否拥有对应的资源权限。系统默认实现了该方法</p>\n<div><pre><code>public interface IAuthorizationService\n{\n    Task&lt;AuthorizationResult> AuthorizeAsync(ClaimsPrincipal user, object resource, IEnumerable&lt;IAuthorizationRequirement> requirements);\n\n    Task&lt;AuthorizationResult> AuthorizeAsync(ClaimsPrincipal user, object resource, string policyName);\n}\n</code></pre><div aria-hidden=\"true\"><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br></div></div><p>AuthorizationService是什么呢.他实现了IAuthorizationService接口.\n通过源码我们知道，它调用 <strong>await authorizationHandler.HandleAsync(authContext);</strong></p>\n<div><pre><code> public async Task&lt;AuthorizationResult> AuthorizeAsync(\n  ClaimsPrincipal user,\n  object resource,\n  IEnumerable&lt;IAuthorizationRequirement> requirements)\n{\n  if (requirements == null)\n    throw new ArgumentNullException(nameof (requirements));\n  AuthorizationHandlerContext authContext = this._contextFactory.CreateContext(requirements, user, resource);\n  foreach (IAuthorizationHandler authorizationHandler in await this._handlers.GetHandlersAsync(authContext))\n  {\n    await authorizationHandler.HandleAsync(authContext);\n    if (!this._options.InvokeHandlersAfterFailure)\n    {\n      if (authContext.HasFailed)\n        break;\n    }\n  }\n  AuthorizationResult authorizationResult = this._evaluator.Evaluate(authContext);\n  if (authorizationResult.Succeeded)\n    this._logger.UserAuthorizationSucceeded();\n  else\n    this._logger.UserAuthorizationFailed();\n  return authorizationResult;\n}\n</code></pre><div aria-hidden=\"true\"><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br><span>24</span><br></div></div><p>IAuthorizationHandler 仅一个接口。</p>\n<div><pre><code>public interface IAuthorizationHandler\n{\n    /// &lt;summary>\n    /// Makes a decision if authorization is allowed.\n    /// &lt;/summary>\n    /// &lt;param name=\"context\">The authorization information.&lt;/param>\n    Task HandleAsync(AuthorizationHandlerContext context);\n}\n</code></pre><div aria-hidden=\"true\"><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br></div></div><p>AuthorizationHandler，它继承<strong>IAuthorizationHandler</strong>\n而且他是一个抽象类，默认实现了HandleAsync方法，子类只用实现HandleRequirementAsync即可。</p>\n<div><pre><code>  public abstract class AuthorizationHandler&lt;TRequirement> : IAuthorizationHandler\n    where TRequirement : IAuthorizationRequirement\n  {\n    public virtual async Task HandleAsync(AuthorizationHandlerContext context)\n    {\n      foreach (TRequirement requirement in context.Requirements.OfType&lt;TRequirement>())\n        await this.HandleRequirementAsync(context, requirement);\n    }\n\n    protected abstract Task HandleRequirementAsync(\n      AuthorizationHandlerContext context,\n      TRequirement requirement);\n  }\n</code></pre><div aria-hidden=\"true\"><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br></div></div><p>我们就可以继承AuthorizationHandler，子类实现从数据库中取数据做对比，其中泛型参数使用系统内置的一个只有Name的类OperationAuthorizationRequirement，当然，如果我们需要更多的参数，可以继承IAuthorizationRequirement，增加更多的参数。</p>\n<p>判断当前用户是否不为null,当调用CheckPermissionAsync，判断是否有此权限。</p>\n<div><pre><code>   public class PermissionAuthorizationHandler : AuthorizationHandler&lt;OperationAuthorizationRequirement>\n    {\n        private readonly IPermissionService _permissionService;\n\n        public PermissionAuthorizationHandler(IPermissionService permissionService)\n        {\n            _permissionService = permissionService;\n        }\n\n        protected override async Task HandleRequirementAsync(AuthorizationHandlerContext context, OperationAuthorizationRequirement requirement)\n        {\n            Claim userIdClaim = context.User?.FindFirst(_ => _.Type == ClaimTypes.NameIdentifier);\n            if (userIdClaim != null)\n            {\n                if (await _permissionService.CheckPermissionAsync(requirement.Name))\n                {\n                    context.Succeed(requirement);\n                }\n            }\n        }\n    }\n</code></pre><div aria-hidden=\"true\"><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br></div></div><p>另外我们还需要把这个Handler注入到我们的DI中，在ConfigureServices中替换如下服务</p>\n<div><pre><code>services.AddScoped&lt;IAuthorizationHandler, PermissionAuthorizationHandler>();\n</code></pre><div aria-hidden=\"true\"><span>1</span><br></div></div><p>其中的PermssionAppService中的实现,检查当前登录的用户的是否有此权限</p>\n<div><pre><code>public async Task&lt;bool> CheckPermissionAsync(string permission)\n{\n    long[] groups = _currentUser.Groups;\n\n    LinPermission linPermission = await _permissionRepository.Where(r => r.Name == permission).FirstAsync();\n\n    bool existPermission = await _groupPermissionRepository.Select\n        .AnyAsync(r => groups.Contains(r.GroupId) &amp;&amp; r.PermissionId == linPermission.Id);\n\n    return existPermission;\n}\n</code></pre><div aria-hidden=\"true\"><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br></div></div><h3 id=\"更多参考\" tabindex=\"-1\"> 更多参考</h3>\n<ul>\n<li><a href=\"https://www.cnblogs.com/RainingNight/p/introduce-basic-authentication-in-asp-net-core.html\" target=\"_blank\" rel=\"noopener noreferrer\">ASP.NET Core 认证与授权[1]:初识认证</a></li>\n</ul>\n<h2 id=\"开源地址\" tabindex=\"-1\"> 开源地址</h2>\n<ul>\n<li>后端接口Gitee 链接 <a href=\"https://gitee.com/igeekfan/lin-cms-dotnetcore\" target=\"_blank\" rel=\"noopener noreferrer\">https://gitee.com/igeekfan/lin-cms-dotnetcore</a></li>\n<li>后端接口GitHub 链接 <a href=\"https://github.com/luoyunchong/lin-cms-dotnetcore\" target=\"_blank\" rel=\"noopener noreferrer\">https://github.com/luoyunchong/lin-cms-dotnetcore</a></li>\n<li>管理端UI <a href=\"https://github.com/luoyunchong/lin-cms-vue\" target=\"_blank\" rel=\"noopener noreferrer\">https://github.com/luoyunchong/lin-cms-vue</a></li>\n<li>用户端UI <a href=\"https://github.com/luoyunchong/lin-cms-vvlog\" target=\"_blank\" rel=\"noopener noreferrer\">https://github.com/luoyunchong/lin-cms-vvlog</a></li>\n</ul>\n",
      "date_published": "2020-05-28T06:06:11.000Z",
      "date_modified": "2022-06-02T11:02:17.000Z",
      "authors": [],
      "tags": []
    },
    {
      "title": "文件上传系统",
      "url": "https://igeekfan.cn/igeekfan-docs/dotnetcore/lin-cms/file-upload.html",
      "id": "https://igeekfan.cn/igeekfan-docs/dotnetcore/lin-cms/file-upload.html",
      "content_html": "<h1 id=\"文件上传系统\" tabindex=\"-1\"> 文件上传系统</h1>\n<p>lin-cms-dotnetcore 默认集成了文件上传功能，并可自由切换存储位置，前端也有相应的组件匹配使用.</p>\n<p>目前后端实现了七牛云文件（QiniuService）上传，本地文件（LocalFileService）上传。</p>\n<p>接口 <strong>IFileService</strong></p>\n<div><pre><code>public interface IFileService\n{\n    /// &lt;summary>\n    /// 单文件上传，键为file\n    /// &lt;/summary>\n    /// &lt;param name=\"file\">&lt;/param>\n    /// &lt;param name=\"key\">&lt;/param>\n    /// &lt;returns>&lt;/returns>\n    Task&lt;FileDto> UploadAsync(IFormFile file, int key = 0);\n}\n</code></pre><div aria-hidden=\"true\"><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br></div></div><p>配置项 appsettings.json</p>\n<h2 id=\"本地文件上传\" tabindex=\"-1\"> 本地文件上传</h2>\n<ul>\n<li>PrefixPath：默认为wwwroot下的文件目录配置项，assets，多级目录，前后不要加**/**，如assets/file</li>\n<li>Host:  文件上传后，访问域名配置，这里配置https://localhost:5001/</li>\n<li>ServiceName :配置当前系统上传时使用哪个实现，可选配置项（LocalFileService、QiniuService）\n<ul>\n<li>当为LocalFileService时，文件保存路径为<strong>wwwroot</strong>静态文件目录下，上传至本地，</li>\n<li>QiniuService 上传至七牛云</li>\n</ul>\n</li>\n</ul>\n<p>实际文件路径</p>\n<p><strong>/assets/2020/5/8/xxxxxx-1111-12-12-12--1-21.png</strong></p>\n<p>参数化</p>\n<p><strong>/{STORE_DIR}/{year}/{month}/{day}/{guid}.文件后缀</strong></p>\n<div><pre><code>  \"FileStorage\": {\n    \"ServiceName\": \"LocalFileService\",//LocalFileService、QiniuService\n    \"LocalFile\":{\n      \"PrefixPath\": \"assets\",\n      \"Host\": \"https://localhost:5001/\"\n    }\n  },\n</code></pre><div aria-hidden=\"true\"><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br></div></div><h2 id=\"七牛云文件上传\" tabindex=\"-1\"> 七牛云文件上传</h2>\n<p>SERVICE为QiniuService时，系统将需要使用如下配置项，</p>\n<ul>\n<li>AK :七牛云密钥AccessKey</li>\n<li>SK :七牛云密钥SecretKey</li>\n<li>Bucket :七牛云新建存储空间的名称（唯一值）</li>\n<li>PrefixPath 文件根目录前缀</li>\n<li>Host:七牛云配置的CDN 加速域名，可使用临时分配的域名，仅一个月有效期，绑定自己的域名，可配置泛子域名</li>\n<li>UseHttps：使用https，这个参数好像没啥用。</li>\n</ul>\n<p>上传文件名</p>\n<p><strong>assets/20191218150043868887.jpg</strong></p>\n<p>参数</p>\n<p><strong>{PrefixPath}/{yyyyMMddHHmmssffffff}.文件后缀</strong></p>\n<div><pre><code>  \"FileStorage\": {\n   \"ServiceName\": \"QiniuService\",\n    \"Qiniu\": {\n      \"AK\": \"\",\n      \"SK\": \"\",\n      \"Bucket\": \"vvv\",\n      \"PrefixPath\": \"assets\",\n      \"Host\": \"http://images.igeekfan.cn/\",\n      \"UseHttps\": false\n    }\n  },\n</code></pre><div aria-hidden=\"true\"><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br></div></div><p>lin-cms 默认对外暴露了cms/file/作为文件上传接口，通过该接口可以直接使用 HTTP post 方法上传文件。</p>\n<p>运行项目后，我们可以看到swagger，找到cms/file\n<a href=\"https://localhost:5001/swagger/index.html\" target=\"_blank\" rel=\"noopener noreferrer\">https://localhost:5001/swagger/index.html</a></p>\n<table>\n<thead>\n<tr>\n<th>请求方式</th>\n<th>路径</th>\n<th>功能</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>HttpPost</td>\n<td>/cms/file/upload</td>\n<td>单文件上传</td>\n</tr>\n</tbody>\n</table>\n<p>直接可通过swagger选择文件后，输入key为0，执行Execute</p>\n<div><pre><code>{\n  \"key\": \"file_0\",\n  \"path\": \"assets/2020/05/08/64263e57-9a24-4933-9116-25616c801e93.png\",\n  \"url\": \"https://localhost:5001/assets/2020/05/08/64263e57-9a24-4933-9116-25616c801e93.png\",\n  \"id\": 19\n}\n</code></pre><div aria-hidden=\"true\"><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br></div></div><table>\n<thead>\n<tr>\n<th>请求方式</th>\n<th>路径</th>\n<th>功能</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>HttpPost</td>\n<td>/cms/file</td>\n<td>多文件上传</td>\n</tr>\n</tbody>\n</table>\n<p>由于swagger-ui的规范，目前多文件无法正确显示，即时正常显示出选择多文件，后台却得不到请求的数据。。</p>\n<p>我们通过postman上传多文件。</p>\n<p><a href=\"https://pic.downk.cc/item/5ebaba6bc2a9a83be5afe50b.png\" target=\"_blank\" rel=\"noopener noreferrer\"><img src=\"https://pic.downk.cc/item/5ebaba6bc2a9a83be5afe50b.png\" alt=\"\" loading=\"lazy\"></a></p>\n<p>由于上传了两个文件，因此我们得到了两个元素的数组，它们的结构如下：</p>\n<div><pre><code>[\n    {\n        \"key\": \"file_0\",\n        \"path\": \"assets/20200512234540511428.png\",\n        \"url\": \"http://images.igeekfan.cn/assets/20200512234540511428.png\",\n        \"id\": 38\n    },\n    {\n        \"key\": \"file_1\",\n        \"path\": \"assets/20200512234540321269.jpg\",\n        \"url\": \"http://images.igeekfan.cn/assets/20200512234540321269.jpg\",\n        \"id\": 37\n    }\n]\n</code></pre><div aria-hidden=\"true\"><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br></div></div><table>\n<thead>\n<tr>\n<th>name</th>\n<th>说明</th>\n<th>类型</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>key</td>\n<td>文件上传的key</td>\n<td>string</td>\n</tr>\n<tr>\n<td>id</td>\n<td>文件存储到数据库的id</td>\n<td>string</td>\n</tr>\n<tr>\n<td>path</td>\n<td>文件存储的路径path</td>\n<td>string</td>\n</tr>\n<tr>\n<td>url</td>\n<td>可访问的 url</td>\n<td>string</td>\n</tr>\n</tbody>\n</table>\n<blockquote>\n<p>TIP\n系统会自动帮助我们上传的文件做md5，因此你大可不必担心文件重复上传，如果你上传了 重复的文件，服务器会返回已传文件的数据。</p>\n</blockquote>\n<h2 id=\"其他特性\" tabindex=\"-1\"> 其他特性</h2>\n<p>Kestrel是内置的ASP.NET Core的内置WEB服务器，是一个中间件，支持跨平台</p>\n<p>1.运行示意：Internet---(通过HTTP访问)---&gt;Kestrel(Kestrel WEB Server Port 5001)--内部HttpContext通过---&gt;&gt;访问到ApplicationCode</p>\n<ol start=\"2\">\n<li>在Internet到Kesterl中间加一个反向代理（nginx,iis,apache)</li>\n</ol>\n<p>第一种方式，文件大小的配置与Kestrel有关。也和应用代码有关。</p>\n<p>Kestrel默认的最大请求正文大小为 30,000,000 个字节，约为 28.6 MB.</p>\n<p>在Program.cs中配置Kestrel的文件大小</p>\n<div><pre><code>webBuilder.ConfigureKestrel((context, options) =>\n{\n    //设置应用服务器Kestrel请求体最大为8MB\n    \n    options.Limits.MaxRequestBodySize = 1024*1024*8;\n});\n</code></pre><div aria-hidden=\"true\"><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br></div></div><p>或者在StartUp中配置应用程序级别的设置</p>\n<div><pre><code>services.Configure&lt;FormOptions>(options =>\n{\n    //单个文件上传的大小限制为8 MB      默认134217728 应该是128MB\n    options.MultipartBodyLengthLimit = 1024 * 1024 * 8;     //8MB\n});\n</code></pre><div aria-hidden=\"true\"><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br></div></div><p>如果部署在反向代理后，还与代理服务器有关。</p>\n<h2 id=\"文件上传其他配置项\" tabindex=\"-1\"> 文件上传其他配置项</h2>\n<ul>\n<li>MaxFileSize:上传文件总大小,<code>1024*1024*80=83886080=80MB</code></li>\n<li>NumLimit:上传文件总数量</li>\n<li>Include，允许某些类型文件上传,文件格式以,隔开</li>\n<li>Exclude：禁止某些类型文件上传，文件格式以,隔开</li>\n</ul>\n<div><pre><code>\"FileStorage\": {\n    \"MaxFileSize\": 83886080,\n    \"NumLimit\": 3,\n    \"Include\": \"\",\n    \"Exclude\": \".exe,.dll\",\n}\n</code></pre><div aria-hidden=\"true\"><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br></div></div><p><strong>exclude</strong>和<strong>include</strong>这两项配置，默认情况下，这两者只会有一 项生效；若这二者中有一项为空，则另一项不为空的配置会生效；如果两项皆为空的话，会 通过所有文件类型；如果二者都不为空，则<strong>include</strong>为有效配置，而exclude会失效；总 而言之，系统只会支持使用一项，二者都为为空的情况下，则通过所有文件类型。</p>\n<p>完整配置项</p>\n<div><pre><code> \"FileStorage\": {\n    \"MaxFileSize\": 83886080,\n    \"NumLimit\": 3,\n    \"Include\": \".png,.jpg\",\n    \"Exclude\": \".exe,.dll\",\n    \"ServiceName\": \"LocalFileService\",//LocalFileService、QiniuService\n    \"LocalFile\":{\n      \"PrefixPath\": \"assets\",\n      \"Host\": \"https://localhost:5001/\"\n    },\n    \"Qiniu\": {\n      \"AK\": \"eUH1O-ft66S4XM2GIK7FGmj7czuYkcAyNGDAc-wq\",\n      \"SK\": \"4dOi1daSr2-YgofhAfWb8JaLrbgozCmgD6AUmmM9\",\n      \"Bucket\": \"vvv\",\n      \"PrefixPath\": \"assets\",\n      \"Host\": \"http://images.igeekfan.cn/\",\n      \"UseHttps\": false\n    }\n  },\n</code></pre><div aria-hidden=\"true\"><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br></div></div><ul>\n<li>官网 https://docs.microsoft.com/zh-cn/aspnet/core/mvc/models/file-uploads?view=aspnetcore-3.1</li>\n</ul>\n",
      "image": "https://pic.downk.cc/item/5ebaba6bc2a9a83be5afe50b.png",
      "date_published": "2020-05-13T11:18:08.000Z",
      "date_modified": "2020-07-24T17:10:08.000Z",
      "authors": [],
      "tags": []
    },
    {
      "title": "行为日志",
      "url": "https://igeekfan.cn/igeekfan-docs/dotnetcore/lin-cms/logger.html",
      "id": "https://igeekfan.cn/igeekfan-docs/dotnetcore/lin-cms/logger.html",
      "content_html": "<h1 id=\"行为日志\" tabindex=\"-1\"> 行为日志</h1>\n",
      "date_published": "2020-05-13T11:18:08.000Z",
      "date_modified": "2022-06-02T11:02:17.000Z",
      "authors": [],
      "tags": []
    },
    {
      "title": "开源介绍",
      "url": "https://igeekfan.cn/igeekfan-docs/dotnetcore/lin-cms/open-source-road.html",
      "id": "https://igeekfan.cn/igeekfan-docs/dotnetcore/lin-cms/open-source-road.html",
      "content_html": "<h1 id=\"开源介绍\" tabindex=\"-1\"> 开源介绍</h1>\n<ul>\n<li>地址：<a href=\"https://github.com/luoyunchong/lin-cms-dotnetcore\" target=\"_blank\" rel=\"noopener noreferrer\">https://github.com/luoyunchong/lin-cms-dotnetcore</a></li>\n</ul>\n<p>1.什么是cms？</p>\n<p>Content Management System，内容管理系统。</p>\n<p>2.dotnetcore是什么</p>\n<p>.NET Core，是由Microsoft开发，目前在.NET Foundation(一个非营利的开源组织)下进行管理，采用宽松的MIT协议，可构建各种软件，包括Web应用程序、移动应用程序、桌面应用程序、云服务、微服务、API、游戏和物联网应用程序</p>\n<p>3.lin-cms 是什么</p>\n<p>Lin-CMS 是林间有风团队经过大量项目实践所提炼出的一套内容管理系统框架。Lin-CMS 可以有效的帮助开发者提高 CMS 的开发效率, 需要前端？请访问前端仓库。官方团队产品了解请访问TaleLin</p>\n<p>4.lin-cms-dotnetcore有哪些特点？</p>\n<p>前后端分离，提供后端接口，更少的依赖，后续将实现模块化安装与卸载。</p>\n<ul>\n<li>用户管理、分组管理、分组权限管理、日志系统、文件上传等</li>\n<li>更多功能（自定义扩展-模块系统）</li>\n<li>博客模块，类掘金专栏，用户中心，标签、个人专栏、技术频道（首页分类）</li>\n</ul>\n<h2 id=\"设计如下\" tabindex=\"-1\"> 设计如下</h2>\n<h4 id=\"字典管理\" tabindex=\"-1\"> 字典管理</h4>\n<h3 id=\"我原本想实现这样的功能\" tabindex=\"-1\"> 我原本想实现这样的功能：</h3>\n<p>BaseType 1 对BaseItem多。</p>\n<p>如：标签管理，一个文章下可以设置多个标签，原本需要设计表Tag,字段也大抵为Id,Name,Sort及关联表。\n我们使用BaseType、BaseItem实现。\nBaseType中TypeCode为tag,FullName为标签，id为1时。\nBaseItem中BaseTypeId为1，ItemCode为编码,ItemName为标签。ItemCode为不重复的字符串即可。</p>\n<p>另Tag与Article的关联表，需要另设计一个表。</p>\n<p>当我们要实现文章类别的下拉，原本需要设计一个表ArticleType，有字段,id,name,sort等。\n我们可以通过BaseType、BaseItem来实现，从而简化这些基础数据。\nBaseType有一条数据，TypeCode为 字符串category、FullName文章类别，BaseItem存多个文章类别(Java、大数据、Python、C#等)，编码不同即可。</p>\n<ol>\n<li>表结构</li>\n</ol>\n<h4 id=\"base-type-字典类别管理\" tabindex=\"-1\"> base_type （字典类别管理）</h4>\n<table>\n<thead>\n<tr>\n<th>字段</th>\n<th>类型</th>\n<th>备注</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>id</td>\n<td>int</td>\n<td></td>\n</tr>\n<tr>\n<td>type_code</td>\n<td>varchar(50)</td>\n<td>类别编码</td>\n</tr>\n<tr>\n<td>full_name</td>\n<td>varchar(50)</td>\n<td>全称</td>\n</tr>\n<tr>\n<td>sort_code</td>\n<td>int</td>\n<td>排序码</td>\n</tr>\n</tbody>\n</table>\n<h4 id=\"base-item-字典管理\" tabindex=\"-1\"> base_item （字典管理）</h4>\n<table>\n<thead>\n<tr>\n<th>字段</th>\n<th>类型</th>\n<th>备注</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>id</td>\n<td>int</td>\n<td></td>\n</tr>\n<tr>\n<td>base_type_id</td>\n<td>int</td>\n<td>类别id(关联base_type的id)</td>\n</tr>\n<tr>\n<td>item_code</td>\n<td>varchar(50)</td>\n<td>字典编码</td>\n</tr>\n<tr>\n<td>item_name</td>\n<td>varchar(50)</td>\n<td>字典全称</td>\n</tr>\n<tr>\n<td>sort_code</td>\n<td>int</td>\n<td>排序码</td>\n</tr>\n</tbody>\n</table>\n<h4 id=\"但现实总是事与愿违\" tabindex=\"-1\"> 但现实总是事与愿违</h4>\n<blockquote>\n<p>后台取文章列表时，想要取出文章对应的分类，手动join时，总觉得join的表会有些奇怪。</p>\n</blockquote>\n<p>当然还有其他原因，<strong>局限性</strong>：</p>\n<ol>\n<li>比如使用了这个字典，分类需要增加一个图片字段，就不能满足要求，那怎么办呢，做不了。</li>\n<li>比如标签需要实现这个标签下有多少个文章，通过统计也能实现，</li>\n</ol>\n<p>使用FreeSql实现时，如果二个表之间没有导航属性，是更复杂的。</p>\n",
      "date_published": "2020-05-13T11:18:08.000Z",
      "date_modified": "2020-07-24T17:10:08.000Z",
      "authors": [],
      "tags": []
    },
    {
      "title": "QQ第三方授权登录",
      "url": "https://igeekfan.cn/igeekfan-docs/dotnetcore/lin-cms/qq-login.html",
      "id": "https://igeekfan.cn/igeekfan-docs/dotnetcore/lin-cms/qq-login.html",
      "content_html": "<h1 id=\"qq第三方授权登录\" tabindex=\"-1\"> QQ第三方授权登录</h1>\n<h2 id=\"安装包\" tabindex=\"-1\"> 安装包</h2>\n<div><pre><code>dotnet add package AspNet.Security.OAuth.QQ\n</code></pre><div aria-hidden=\"true\"><span>1</span><br></div></div><ul>\n<li><a href=\"https://luoyunchong.github.io/igeekfan-docs/dotnetcore/lin-cms/spa-github-login.html\" target=\"_blank\" rel=\"noopener noreferrer\">接上文GitHub第三方授权登录</a></li>\n</ul>\n<p>申请过程不介绍了，<a href=\"https://wiki.connect.qq.com/%E5%87%86%E5%A4%87%E5%B7%A5%E4%BD%9C_oauth2-0\" target=\"_blank\" rel=\"noopener noreferrer\">申请者资料</a>,个人也是可以申请成功的。</p>\n<p>这时候有二个参数就是clientid clientsecret</p>\n<div><pre><code>APP ID：xxxx\nAPP Key：xxxxxx\n</code></pre><div aria-hidden=\"true\"><span>1</span><br><span>2</span><br></div></div><p>其中<strong>平台信息</strong>，这个申请审核通过后，<strong>不要修改，千万不要随便修改</strong>，一修改就要重新审核。</p>\n<p>网站回调域:可以随便修改，并且可以写多个，中间用英文逗号分隔即可。\n比如，网站地址填的：https://api.igeekfan.cn，下面如果是localhost，是可以的，但如果是域名,便只能是https://api.igeekfan.cn这个域名下的路径。</p>\n<p>网站回调域配置,后台是运行在https://localhost:5001端口上。</p>\n<div><pre><code>https://api.igeekfan.cn/signin-qq;https://localhost:5001/signin-qq\n</code></pre><div aria-hidden=\"true\"><span>1</span><br></div></div><h2 id=\"接口介绍\" tabindex=\"-1\"> 接口介绍</h2>\n<p>server-side模式，是OAuth2.0认证的一种模式，又称Web Server Flow；</p>\n<p><img src=\"http://qzonestyle.gtimg.cn/qzone/vas/opensns/res/img/OAuth_guide_V2_1.png\" alt=\"image\" loading=\"lazy\"></p>\n<p>获取Authorization Code\nhttps://graph.qq.com/oauth2.0/authorize</p>\n<p>通过Authorization Code获取Access Token\nhttps://graph.qq.com/oauth2.0/token</p>\n<p>获取用户OpenID_OAuth2.0\nhttps://graph.qq.com/oauth2.0/me</p>\n<p>获取用户个人信息\nhttps://graph.qq.com/user/get_user_info</p>\n<h2 id=\"使用authorization-code获取access-token\" tabindex=\"-1\"> <a href=\"https://wiki.connect.qq.com/%E4%BD%BF%E7%94%A8authorization_code%E8%8E%B7%E5%8F%96access_token\" target=\"_blank\" rel=\"noopener noreferrer\">使用Authorization_Code获取Access_Token</a></h2>\n<p>接入流程如下：</p>\n<ol>\n<li>先获取Authorization Code；</li>\n<li>通过Authorization Code获取Access Token</li>\n</ol>\n<p>1.Step1：获取Authorization Code</p>\n<p>GET</p>\n<p>https://graph.qq.com/oauth2.0/authorize?response_type=code&amp;client_id=client_id&amp;redirect_uri=https://localhost:5001/signin-qq&amp;state=123abc</p>\n<p>具体参数可查看官网。</p>\n<p>state由用户自己创建一个随机数，以防止CSRF攻击。</p>\n<p>如果用户成功登录并授权，则会跳转到指定的回调地址，并在redirect_uri地址后带上Authorization Code和原始的state值。如：</p>\n<p>https://localhost:5001/signin-qq?code=B6D497755EACE4635115FC82BE24F280&amp;state=123abc</p>\n<p>后台先根据state验证是自己发出的请求，判断是否相同，不相同，则代表非本项目发出的授权登录请求。</p>\n<ol start=\"2\">\n<li>根据code获取access_token</li>\n</ol>\n<p>GET</p>\n<p>https://graph.qq.com/oauth2.0/token?grant_type=authorization_code&amp;client_id=client_id&amp;client_secret=client_secret&amp;code=B6D497755EACE4635115FC82BE24F280&amp;redirect_uri=https://localhost:5001/signin-qq</p>\n<p>这时候你会得到</p>\n<div><pre><code>access_token=1B6E45FA99BA3D6B347713440C9BCEFE&amp;expires_in=7776000&amp;refresh_token=8DB1D48D95C85D3EF593936B8ACE5EE0\n</code></pre><div aria-hidden=\"true\"><span>1</span><br></div></div><h2 id=\"获取用户openid-oauth2-0\" tabindex=\"-1\"> 获取用户OpenID_OAuth2.0</h2>\n<p>GET</p>\n<p>https://graph.qq.com/oauth2.0/me?access_token=1B6E45FA99BA3D6B347713440C9BCEFE</p>\n<p>openid是此网站上唯一对应用户身份的标识</p>\n<div><pre><code>callback( {\"client_id\":\"101867513\",\"openid\":\"951560F5C7A5AA9E5E599CF9B4ECFFB2\"} );\n</code></pre><div aria-hidden=\"true\"><span>1</span><br></div></div><h2 id=\"获取用户的其他信息\" tabindex=\"-1\"> 获取用户的其他信息</h2>\n<p>用户信息</p>\n<p>https://graph.qq.com/user/get_user_info?access_token=1B6E45FA99BA3D6B347713440C9BCEFE&amp;oauth_consumer_key=YOUR_APP_ID&amp;openid=951560F5C7A5AA9E5E599CF9B4ECFFB2</p>\n<div><pre><code><span>{</span>\n<span>\"ret\"</span><span>:</span> <span>0</span><span>,</span> \n<span>\"msg\"</span><span>:</span> <span>\"\"</span><span>,</span> \n<span>\"is_lost\"</span><span>:</span><span>0</span><span>,</span> \n<span>\"nickname\"</span><span>:</span> <span>\"、天上有木月OvO\"</span><span>,</span> \n<span>\"gender\"</span><span>:</span> <span>\"xxx\"</span><span>,</span> \n<span>\"gender_type\"</span><span>:</span> <span>1</span><span>,</span> \n<span>\"province\"</span><span>:</span> <span>\"xxx\"</span><span>,</span> \n<span>\"city\"</span><span>:</span> <span>\"xxx\"</span><span>,</span> \n<span>\"year\"</span><span>:</span> <span>\"2019\"</span><span>,</span> \n<span>\"constellation\"</span><span>:</span> <span>\"\"</span><span>,</span> \n<span>\"figureurl\"</span><span>:</span> <span>\"http:\\/\\/qzapp.qlogo.cn\\/qzapp\\/101867513\\/951560F5C7A5AA9E5E599CF9B4ECFFB2\\/30\"</span><span>,</span> \n<span>\"figureurl_1\"</span><span>:</span> <span>\"http:\\/\\/qzapp.qlogo.cn\\/qzapp\\/101867513\\/951560F5C7A5AA9E5E599CF9B4ECFFB2\\/50\"</span><span>,</span> \n<span>\"figureurl_2\"</span><span>:</span> <span>\"http:\\/\\/qzapp.qlogo.cn\\/qzapp\\/101867513\\/951560F5C7A5AA9E5E599CF9B4ECFFB2\\/100\"</span><span>,</span> \n<span>\"figureurl_qq_1\"</span><span>:</span> <span>\"http://thirdqq.qlogo.cn/g?b=oidb&amp;k=bjXoWmdlu8fk1m80MCkibMg&amp;s=40&amp;t=1559108425\"</span><span>,</span> \n<span>\"figureurl_qq_2\"</span><span>:</span> <span>\"http://thirdqq.qlogo.cn/g?b=oidb&amp;k=bjXoWmdlu8fk1m80MCkibMg&amp;s=100&amp;t=1559108425\"</span><span>,</span> <span>\"figureurl_qq\"</span><span>:</span> <span>\"http://thirdqq.qlogo.cn/g?b=oidb&amp;k=bjXoWmdlu8fk1m80MCkibMg&amp;s=640&amp;t=1559108425\"</span>\n<span>}</span>\n</code></pre><div aria-hidden=\"true\"><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br></div></div><h2 id=\"代码\" tabindex=\"-1\"> 代码</h2>\n<div><pre><code>services.AddAuthentication(xxx)\n.AddGitHub(xxx)\n加上AddQQ的配置项\n.AddQQ(options =>\n{\n   options.ClientId = Configuration[\"Authentication:QQ:ClientId\"];\n   options.ClientSecret = Configuration[\"Authentication:QQ:ClientSecret\"];\n})\n</code></pre><div aria-hidden=\"true\"><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br></div></div><p>appsettings.json中配置项</p>\n<div><pre><code>  \"Authentication\": {\n   //下面为新增项\n   \"QQ\": {\n     \"ClientId\": \"xx\",\n     \"ClientSecret\": \"xxx\"\n   }\n }\n</code></pre><div aria-hidden=\"true\"><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br></div></div><p>对，没错，QQ登录，已经结束了。接下来就是把这些用户的信息保存到数据库，生成token的过程。</p>\n<p>这里</p>\n<div><pre><code>[HttpGet(\"signin-callback\")]\npublic async Task&lt;IActionResult> Home(string provider, string redirectUrl = \"\")\n{\n\n   AuthenticateResult authenticateResult = await _contextAccessor.HttpContext.AuthenticateAsync(provider);\n   if (!authenticateResult.Succeeded) return Redirect(redirectUrl);\n   var openIdClaim = authenticateResult.Principal.FindFirst(ClaimTypes.NameIdentifier);\n   if (openIdClaim == null || string.IsNullOrWhiteSpace(openIdClaim.Value))\n       return Redirect(redirectUrl);\n       \n       \n   ClaimsPrincipal principal=authenticateResult.Principal;\n   //根据provider，处理用户的基础信息，\n   \n   long id =SaveQQAsync(principal, openIdClaim.Value)\n   \n   //xxx\n   \n}       \n</code></pre><div aria-hidden=\"true\"><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br></div></div><p>openIdClaimopenIdClaim是唯一值</p>\n<h3 id=\"lin-user表\" tabindex=\"-1\"> lin_user表</h3>\n<table>\n<thead>\n<tr>\n<th>字段</th>\n<th>类型</th>\n<th>备注</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Id</td>\n<td>long</td>\n<td>主键</td>\n</tr>\n<tr>\n<td>Username</td>\n<td>varchar(50)</td>\n<td>用户名</td>\n</tr>\n<tr>\n<td>Avatar</td>\n<td>varchar(50)</td>\n<td>头像</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"lin-user-identity表\" tabindex=\"-1\"> lin_user_identity表</h3>\n<p>用户授权信息表，用于存储不同登录类型的用户信息，如手机号、邮件、用户名、第三方应用（微信、QQ、GitHub）的登录</p>\n<table>\n<thead>\n<tr>\n<th>字段</th>\n<th>类型</th>\n<th>备注</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Id</td>\n<td>long</td>\n<td>主键</td>\n</tr>\n<tr>\n<td>IdentityType</td>\n<td>varchar(50)</td>\n<td>认证类型，如 Password，GitHub、QQ、WeiXin等</td>\n</tr>\n<tr>\n<td>Identifier</td>\n<td>varchar(24)</td>\n<td>认证者，例如 用户名（PassWord认证类型）,授权得到的昵称(QQ),授权得到的用户名（唯一，GitHub)</td>\n</tr>\n<tr>\n<td>Credential</td>\n<td>varchar(50)</td>\n<td>凭证，例如 密码,存OpenId、Id，同一IdentityType的OpenId的值是唯一的</td>\n</tr>\n<tr>\n<td>CreateUserId</td>\n<td>long</td>\n<td>绑定的用户Id</td>\n</tr>\n</tbody>\n</table>\n<p>根据openId,判断lin_user_identity表中是否存在这一第三方授权信息，如果存在，则返回当前用户lin_user表中的id，如果不存在，则创建一个新的用户信息，插入lin_user、lin_user_identity表中。</p>\n<div><pre><code>\npublic async Task&lt;long> SaveQQAsync(ClaimsPrincipal principal, string openId)\n{\n   string nickname = principal.FindFirst(ClaimTypes.Name)?.Value;\n   string gender = principal.FindFirst(ClaimTypes.Gender)?.Value;\n   string picture = principal.FindFirst(QQAuthenticationConstants.Claims.PictureUrl)?.Value;\n   string picture_medium = principal.FindFirst(QQAuthenticationConstants.Claims.PictureMediumUrl)?.Value;\n   string picture_full = principal.FindFirst(QQAuthenticationConstants.Claims.PictureFullUrl)?.Value;\n   string avatar = principal.FindFirst(QQAuthenticationConstants.Claims.AvatarUrl)?.Value;\n   string avatar_full = principal.FindFirst(QQAuthenticationConstants.Claims.AvatarFullUrl)?.Value;\n   \n    Expression&lt;Func&lt;LinUserIdentity, bool>> expression = r => \n               r.IdentityType == LinUserIdentity.QQ&amp;&amp; r.Credential == openId;\n\n   LinUserIdentity linUserIdentity =await _userIdentityRepository.Where(expression).FirstAsync();\n\n   long userId = 0;\n   if (linUserIdentity == null)\n   {\n       LinUser user = new LinUser\n       {\n           Avatar = avatar_full,\n           Nickname = nickname,\n           Username = \"\",\n           LinUserIdentitys = new List&lt;LinUserIdentity>()\n           {\n               new LinUserIdentity\n               {\n                   CreateTime = DateTime.Now,\n                   Credential = openId,\n                   IdentityType = LinUserIdentity.GitHub,\n                   Identifier = nickname,\n               }\n           }\n       };\n       await _userRepository.InsertAsync(user);\n       userId = user.Id;\n   }\n   else\n   {\n       userId = linUserIdentity.CreateUserId;\n   }\n   return userId;\n}\n\n</code></pre><div aria-hidden=\"true\"><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br><span>24</span><br><span>25</span><br><span>26</span><br><span>27</span><br><span>28</span><br><span>29</span><br><span>30</span><br><span>31</span><br><span>32</span><br><span>33</span><br><span>34</span><br><span>35</span><br><span>36</span><br><span>37</span><br><span>38</span><br><span>39</span><br><span>40</span><br><span>41</span><br><span>42</span><br><span>43</span><br><span>44</span><br><span>45</span><br></div></div><p>上文中的CreateToken，直接将 authenticateResult.Principal.Claims.ToList()，生成token值，会缺少一些系统需要的值，比如键为ClaimTypes.NameIdentifier，应为用户的id，用户的其他信息，如角色/分组，昵称。不同平台的授权登录，键有所不同，所以这里需要二次处理。</p>\n<div><pre><code>[HttpGet(\"signin-callback\")]\npublic async Task&lt;IActionResult> Home(string provider, string redirectUrl = \"\")\n{\n \n    //xxx\n        \n        \n    ClaimsPrincipal principal=authenticateResult.Principal;\n    \n    List&lt;Claim> authClaims = principal.Claims.ToList();\n    \n    long id =SaveQQAsync(principal, openIdClaim.Value)\n    \n    LinUser user =await _userRepository.Select.IncludeMany(r => r.LinGroups)\n        .WhereCascade(r => r.IsDeleted == false).Where(r => r.Id == id).FirstAsync();\n\n    List&lt;Claim> claims = new List&lt;Claim>()\n    {\n        new Claim(ClaimTypes.NameIdentifier,user.Id.ToString()),\n        new Claim(ClaimTypes.GivenName,user.Nickname??\"\"),\n        new Claim(ClaimTypes.Name,user.Username??\"\"),\n    };\n        \n    user.LinGroups?.ForEach(r =>\n    {\n        claims.Add(new Claim(LinCmsClaimTypes.Groups, r.Id.ToString()));\n    });\n\n    claims.AddRange(authClaims);\n    string token = this.CreateToken(claims);\n    return Redirect($\"{redirectUrl}?token={token}#login-result\");\n }       \n</code></pre><div aria-hidden=\"true\"><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br><span>24</span><br><span>25</span><br><span>26</span><br><span>27</span><br><span>28</span><br><span>29</span><br><span>30</span><br><span>31</span><br><span>32</span><br></div></div><p>前台login-result路由，解析到token值，并保存起来，与用户密码登录后的流程相同。</p>\n<h2 id=\"项目源码\" tabindex=\"-1\"> <a href=\"https://github.com/luoyunchong/lin-cms-dotnetcore/blob/master/src/LinCms.Web/Controllers/Cms/Oauth2Controller.cs\" target=\"_blank\" rel=\"noopener noreferrer\">项目源码</a></h2>\n",
      "image": "http://qzonestyle.gtimg.cn/qzone/vas/opensns/res/img/OAuth_guide_V2_1.png",
      "date_published": "2020-05-13T11:18:08.000Z",
      "date_modified": "2022-06-02T11:02:17.000Z",
      "authors": [],
      "tags": []
    },
    {
      "title": "基于 RBAC 实现权限设计",
      "url": "https://igeekfan.cn/igeekfan-docs/dotnetcore/lin-cms/table.html",
      "id": "https://igeekfan.cn/igeekfan-docs/dotnetcore/lin-cms/table.html",
      "content_html": "<h1 id=\"基于-rbac-实现权限设计\" tabindex=\"-1\"> 基于 RBAC 实现权限设计</h1>\n<p>功能：实现一个用户设置多个分组，分组可以设置多个权限，权限与后台 API 方法对应，前端菜单绑定权限编码，前端按钮绑定权限编码，从而实现用户可配置权限，从而控制界面上的元素等。</p>\n<h3 id=\"_1-用户表-lin-user\" tabindex=\"-1\"> 1. 用户表 lin_user</h3>\n<table>\n<thead>\n<tr>\n<th>字段</th>\n<th>备注</th>\n<th>类型</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>id</td>\n<td>主键 Id</td>\n<td>bigint</td>\n</tr>\n<tr>\n<td>username</td>\n<td>用户名</td>\n<td>varchar</td>\n</tr>\n<tr>\n<td>nickname</td>\n<td>昵称</td>\n<td>varchar</td>\n</tr>\n<tr>\n<td>phone_number</td>\n<td>手机号</td>\n<td>varchar</td>\n</tr>\n<tr>\n<td>avatar</td>\n<td>用户默认生成图像，为 null、头像 url</td>\n<td>varchar</td>\n</tr>\n<tr>\n<td>email</td>\n<td>电子邮箱</td>\n<td>varchar</td>\n</tr>\n<tr>\n<td>active</td>\n<td>1 激活 2 非激活</td>\n<td>int</td>\n</tr>\n</tbody>\n</table>\n\n<h3 id=\"_2-分组表-lin-group\" tabindex=\"-1\"> 2. 分组表 lin_group</h3>\n<table>\n<thead>\n<tr>\n<th>字段</th>\n<th>备注</th>\n<th>类型</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>id</td>\n<td>主键 Id</td>\n<td>bigint</td>\n</tr>\n<tr>\n<td>name</td>\n<td>权限组名称</td>\n<td>varchar</td>\n</tr>\n<tr>\n<td>info</td>\n<td>权限组描述</td>\n<td>varchar</td>\n</tr>\n<tr>\n<td>is_static</td>\n<td>是否是静态分组</td>\n<td>bit</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"_3-用户分组表-lin-user-group\" tabindex=\"-1\"> 3. 用户分组表 lin_user_group</h3>\n<p>用户分组表。用于用户和分组表的关联。可配置一个用户属于多个分组。</p>\n<table>\n<thead>\n<tr>\n<th>字段</th>\n<th>备注</th>\n<th>类型</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>id</td>\n<td>主键 Id</td>\n<td>bigint</td>\n</tr>\n<tr>\n<td>user_id</td>\n<td>用户 ID</td>\n<td>bigint</td>\n</tr>\n<tr>\n<td>group_id</td>\n<td>分组 ID</td>\n<td>bigint</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"_4-权限表-lin-permission\" tabindex=\"-1\"> 4. 权限表 lin_permission</h3>\n<p>权限表，本系统通过反射在系统初次启动时，启动异步任务，将不存在的权限新增到此表中。</p>\n<table>\n<thead>\n<tr>\n<th>字段</th>\n<th>备注</th>\n<th>类型</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>id</td>\n<td>主键 Id</td>\n<td>bigint</td>\n</tr>\n<tr>\n<td>module</td>\n<td>权限所属模块，例如：人员管理</td>\n<td>varchar</td>\n</tr>\n<tr>\n<td>name</td>\n<td>所属权限、权限名称，例如：访问首页</td>\n<td>varchar</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"_5-分组权限表-lin-group-permission\" tabindex=\"-1\"> 5. 分组权限表 lin_group_permission</h3>\n<p>分组权限表，用于分组与权限表的关联</p>\n<table>\n<thead>\n<tr>\n<th>字段</th>\n<th>备注</th>\n<th>类型</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>id</td>\n<td>主键 Id</td>\n<td>bigint</td>\n</tr>\n<tr>\n<td>group_id</td>\n<td>分组 Id</td>\n<td>bigint</td>\n</tr>\n<tr>\n<td>permission_id</td>\n<td>权限 Id</td>\n<td>bigint</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"_6-用户身份认证登录表-lin-user-identity\" tabindex=\"-1\"> 6. 用户身份认证登录表 lin_user_identity</h3>\n<p>用户授权信息表，用于存储不同登录类型的用户信息，如手机号、邮件、用户名、第三方应用（微信、QQ、GitHub）的登录</p>\n<table>\n<thead>\n<tr>\n<th>字段</th>\n<th>备注</th>\n<th>类型</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>id</td>\n<td>char</td>\n<td>主键 Id</td>\n</tr>\n<tr>\n<td>identity_type</td>\n<td>varchar</td>\n<td>认证类型 Password，GitHub、QQ、WeiXin 等</td>\n</tr>\n<tr>\n<td>identifier</td>\n<td>varchar</td>\n<td>认证者，例如 用户名,手机号，邮件等，</td>\n</tr>\n<tr>\n<td>credential</td>\n<td>varchar</td>\n<td>凭证，例如 密码,存 OpenId、Id，同一 IdentityType 的 OpenId 的值是唯一的</td>\n</tr>\n<tr>\n<td>create_user_id</td>\n<td>bigint</td>\n<td>绑定的用户 Id</td>\n</tr>\n<tr>\n<td>create_time</td>\n<td>datetime</td>\n<td></td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"字典管理\" tabindex=\"-1\"> 字典管理</h2>\n<p>主要功能：仅限于通用的下拉列表选择，有变化的可能性。抽象成统一的配置项。</p>\n<p>比如：文章是（原创，转载，翻译),性别是（男，女）。当然更多，在下文会有介绍。</p>\n<h3 id=\"_1-base-type-字典类别管理\" tabindex=\"-1\"> 1.base_type （字典类别管理）</h3>\n<table>\n<thead>\n<tr>\n<th>字段</th>\n<th>类型</th>\n<th>备注</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>id</td>\n<td>int</td>\n<td></td>\n</tr>\n<tr>\n<td>type_code</td>\n<td>varchar(50)</td>\n<td>类别编码</td>\n</tr>\n<tr>\n<td>full_name</td>\n<td>varchar(50)</td>\n<td>全称</td>\n</tr>\n<tr>\n<td>sort_code</td>\n<td>int</td>\n<td>排序码</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"_2-base-item-字典管理\" tabindex=\"-1\"> 2.base_item （字典管理）</h3>\n<table>\n<thead>\n<tr>\n<th>字段</th>\n<th>类型</th>\n<th>备注</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>id</td>\n<td>int</td>\n<td></td>\n</tr>\n<tr>\n<td>base_type_id</td>\n<td>int</td>\n<td>类别 id(关联 base_type 的 id)</td>\n</tr>\n<tr>\n<td>item_code</td>\n<td>varchar(50)</td>\n<td>字典编码</td>\n</tr>\n<tr>\n<td>item_name</td>\n<td>varchar(50)</td>\n<td>字典全称</td>\n</tr>\n<tr>\n<td>sort_code</td>\n<td>int</td>\n<td>排序码</td>\n</tr>\n</tbody>\n</table>\n<p>BaseType 1 对 BaseItem 多。</p>\n<p>如：标签管理，一个文章下可以设置多个标签，原本需要设计表 Tag,字段也大抵为 Id,Name,Sort 及关联表。\n我们使用 BaseType、BaseItem 实现。\nBaseType 中 TypeCode 为 tag,FullName 为标签，id 为 1 时。\nBaseItem 中 BaseTypeId 为 1，ItemCode 为编码,ItemName 为标签。ItemCode 为不重复的字符串即可。</p>\n<p>另 Tag 与 Article 的关联表，需要另设计一个表。</p>\n<p>当我们要实现文章类别的下拉，原本需要设计一个表 ArticleType，有字段,id,name,sort 等。\n我们可以通过 BaseType、BaseItem 来实现，从而简化这些基础数据。\nBaseType 有一条数据，TypeCode 为 字符串 category、FullName 文章类别，BaseItem 存多个文章类别(Java、大数据、Python、C#等)，编码不同即可。</p>\n<p><strong>但现实总是事与愿违</strong>,后台取文章列表时，想要取出文章对应的分类，手动 join 时，总觉得 join 的表会有些奇怪。</p>\n<p>当然还有其他原因，<strong>局限性</strong>：</p>\n<ol>\n<li>比如使用了这个字典，分类需要增加一个图片字段，就不能满足要求，那怎么办呢，做不了。</li>\n<li>比如标签需要实现这个标签下有多少个文章，通过统计也能实现，</li>\n</ol>\n<p>使用 FreeSql 实现时，如果二个表之间没有导航属性，是更复杂的。</p>\n<h2 id=\"\" tabindex=\"-1\"> </h2>\n<h3 id=\"lin-file-文件存储\" tabindex=\"-1\"> lin_file 文件存储</h3>\n<p>| 字段           | 类型     | 备注                                     |\n| -------------- | -------- | ---------------------------------------- | ------- |\n| id             |          | bigint                                   | 主键 Id |\n| extension      | varchar  | 后缀                                     |\n| md5            | varchar  | 图片 md5 值，防止上传重复图片            |\n| name           | varchar  | 名称                                     |\n| path           | varchar  | 路径                                     |\n| size           | bigint   | 大小                                     |\n| type           | smallint | 1 local，2 代表七牛云 3 其他表示其他地方 |\n| create_user_id | bigint   | 创建者 ID                                |</p>\n<h3 id=\"lin-log-日志记录\" tabindex=\"-1\"> lin_log 日志记录</h3>\n<table>\n<thead>\n<tr>\n<th>字段</th>\n<th>类型</th>\n<th>备注</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>id</td>\n<td>bigint</td>\n<td>主键 Id</td>\n</tr>\n<tr>\n<td>authority</td>\n<td>varchar</td>\n<td>访问哪个权限</td>\n</tr>\n<tr>\n<td>message</td>\n<td>varchar</td>\n<td>日志信息</td>\n</tr>\n<tr>\n<td>method</td>\n<td>varchar</td>\n<td>请求方法</td>\n</tr>\n<tr>\n<td>path</td>\n<td>varchar</td>\n<td>请求路径</td>\n</tr>\n<tr>\n<td>status_code</td>\n<td>int</td>\n<td>请求的 http 返回码</td>\n</tr>\n<tr>\n<td>time</td>\n<td>datetime</td>\n<td>日志创建时间</td>\n</tr>\n<tr>\n<td>user_id</td>\n<td>bigint</td>\n<td>用户 id</td>\n</tr>\n<tr>\n<td>user_name</td>\n<td>varchar</td>\n<td>用户当时的昵称</td>\n</tr>\n<tr>\n<td>other_message</td>\n<td>longtext</td>\n<td></td>\n</tr>\n</tbody>\n</table>\n",
      "date_published": "2020-05-13T11:18:08.000Z",
      "date_modified": "2022-06-02T11:02:17.000Z",
      "authors": [],
      "tags": []
    },
    {
      "title": "FreeSql+ASP.NET Core",
      "url": "https://igeekfan.cn/igeekfan-docs/dotnetcore/examples/freesql-in-aspnetcore-webapi-how-to-use.html",
      "id": "https://igeekfan.cn/igeekfan-docs/dotnetcore/examples/freesql-in-aspnetcore-webapi-how-to-use.html",
      "content_html": "<h1 id=\"freesql-asp-net-core\" tabindex=\"-1\"> FreeSql+ASP.NET Core</h1>\n<h2 id=\"文章概述\" tabindex=\"-1\"> 文章概述</h2>\n<p>主要在介绍FreeSql在ASP.NTE Core WebApi中如何使用的过程，完成一个最简单的博客系统的后端接口。</p>\n<h2 id=\"freesql-简介\" tabindex=\"-1\"> FreeSql 简介</h2>\n<p>国人写的一个功能强大的ORM,FreeSql 支持 MySql/SqlServer/PostgreSQL/Oracle/Sqlite，特点：轻量级、可扩展、基于 .NET Standard 跨平台。</p>\n<h2 id=\"源码\" tabindex=\"-1\"> 源码</h2>\n<p>代码托管在GitHub上 <a href=\"https://github.com/luoyunchong/dotnetcore-examples/blob/master/ORM/FreeSql/OvOv.FreeSql.Repository/Controllers/BlogController.cs\" target=\"_blank\" rel=\"noopener noreferrer\">https://github.com/luoyunchong/dotnetcore-examples</a></p>\n<h2 id=\"参考\" tabindex=\"-1\"> 参考</h2>\n<ul>\n<li>FreeSql github <a href=\"https://github.com/2881099/FreeSql\" target=\"_blank\" rel=\"noopener noreferrer\">https://github.com/2881099/FreeSql</a></li>\n<li><a href=\"https://docs.microsoft.com/zh-cn/dotnet/core/tools/dotnet-new?tabs=netcore22\" target=\"_blank\" rel=\"noopener noreferrer\">关于.net core cli中如何使用dotnet new</a></li>\n<li><a href=\"https://docs.microsoft.com/zh-cn/aspnet/core/web-api/?view=aspnetcore-2.2\" target=\"_blank\" rel=\"noopener noreferrer\">使用 ASP.NET Core 创建 Web API</a></li>\n<li><a href=\"https://docs.microsoft.com/zh-cn/aspnet/core/tutorials/web-api-help-pages-using-swagger?view=aspnetcore-2.2\" target=\"_blank\" rel=\"noopener noreferrer\">Swagger/OpenAPI 生成接口文档</a></li>\n<li><a href=\"https://github.com/domaindrivendev/Swashbuckle.AspNetCore\" target=\"_blank\" rel=\"noopener noreferrer\">Swagger GitHub (Swashbuckle.AspNetCore)</a></li>\n</ul>\n<h2 id=\"项目准备\" tabindex=\"-1\"> 项目准备</h2>\n<ul>\n<li>Mysql 5.6</li>\n<li>Visual Studio 2019或2017、Visual Studio code</li>\n<li>.NET Core 3.1+</li>\n<li>PowerShell</li>\n<li>懂点mvc，该教程不会教你如何使用 ASP .NET Core MVC、RESTful</li>\n</ul>\n<h3 id=\"创建项目\" tabindex=\"-1\"> 创建项目</h3>\n<p>使用dotnet 命令行创建一个webapi项目，起名为OvOv.FreeSql</p>\n<div><pre><code>PS dotnetcore-examples\\aspnetcore-freesql> dotnet new webapi -n OvOv.FreeSql\nThe template \"ASP.NET Core Web API\" was created successfully.\n</code></pre><div aria-hidden=\"true\"><span>1</span><br><span>2</span><br></div></div><p>然后cd 到OvOv.FreeSql目录，通过dotnet run 命令运行项目</p>\n<div><pre><code>PS dotnetcore-examples\\aspnetcore-freesql&gt; cd .\\OvOv.FreeSql\\\nPS dotnetcore-examples\\aspnetcore-freesql\\OvOv.FreeSql&gt; dotnet run\n\ninfo: Microsoft.Hosting.Lifetime[0]\n      Now listening on: https://localhost:5001\ninfo: Microsoft.Hosting.Lifetime[0]\n      Now listening on: http://localhost:5000\ninfo: Microsoft.Hosting.Lifetime[0]\n      Application started. Press Ctrl+C to shut down.\ninfo: Microsoft.Hosting.Lifetime[0]\n      Hosting environment: Development\ninfo: Microsoft.Hosting.Lifetime[0]\n      Content root path: D:\\code\\github\\dotnetcore-examples\\aspnetcore-freesql\\OvOv.FreeSql\n</code></pre><div aria-hidden=\"true\"><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br></div></div><p>打开浏览器 https://localhost:5001 会出现404</p>\n<p>请打开这个地址 https://localhost:5001/api/values ，可看到如下内容。</p>\n<div><pre><code>[\"value1\",\"value2\"]\n</code></pre><div aria-hidden=\"true\"><span>1</span><br></div></div><p>接下来我们来集成FreeSql，我们以最简单的命令和说明，详细内容去官网看具体内容</p>\n<ul>\n<li>官网文档 <a href=\"http://freesql.net/doc\" target=\"_blank\" rel=\"noopener noreferrer\">http://freesql.net/doc</a></li>\n</ul>\n<h2 id=\"install\" tabindex=\"-1\"> Install</h2>\n<p>要先cd到OvOv.FreeSql目录中。</p>\n<div><pre><code>PS \\aspnetcore-freesql\\OvOv.FreeSql&gt; dotnet add package FreeSql\nPS \\aspnetcore-freesql\\OvOv.FreeSql&gt; dotnet add package FreeSql.Provider.MySql\n</code></pre><div aria-hidden=\"true\"><span>1</span><br><span>2</span><br></div></div><h2 id=\"code-first\" tabindex=\"-1\"> code first</h2>\n<ul>\n<li><a href=\"https://github.com/2881099/FreeSql/blob/master/Docs/codefirst.md\" target=\"_blank\" rel=\"noopener noreferrer\">关于CodeFirst，官方文档的介绍</a></li>\n</ul>\n<p>代码优先，使用过EntityFramework的应该很清楚这一概念，我的理解就是：在分析数据库表关系时，不通过在数据库中设计表，而是直接在代码中声明对应的类，使用导航属性代替外键关联，通过数据表字段与C#中的类库对应，从而自动生成数据表。</p>\n<h2 id=\"db-first\" tabindex=\"-1\"> db first</h2>\n<p>数据库优先：需求分析后，直接设计数据库，通过数据库中的表，直接生成代码，类。</p>\n<h2 id=\"开始\" tabindex=\"-1\"> 开始</h2>\n<h3 id=\"分析需求\" tabindex=\"-1\"> 分析需求</h3>\n<p>我们以code first 为示例，学习如何使用freesql，实现一个简单的博客。将表内容分为博客表（Blog)和评论表（Post)</p>\n<h4 id=\"blog-表\" tabindex=\"-1\"> Blog 表</h4>\n<table>\n<thead>\n<tr>\n<th>字段名</th>\n<th>字段类型</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>BlogId</td>\n<td>int</td>\n<td>博客id</td>\n</tr>\n<tr>\n<td>Title</td>\n<td>varchar(50)</td>\n<td>博客标题</td>\n</tr>\n<tr>\n<td>Content</td>\n<td>varchar(500)</td>\n<td>博客内容</td>\n</tr>\n<tr>\n<td>CreateTime</td>\n<td>DateTime</td>\n<td>发布时间</td>\n</tr>\n</tbody>\n</table>\n<h4 id=\"post-表\" tabindex=\"-1\"> Post 表</h4>\n<table>\n<thead>\n<tr>\n<th>字段名</th>\n<th>字段类型</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>PostId</td>\n<td>int</td>\n<td>评论id</td>\n</tr>\n<tr>\n<td>ReplyContent</td>\n<td>varchar(50)</td>\n<td>标题</td>\n</tr>\n<tr>\n<td>BlogId</td>\n<td>int</td>\n<td>博客id</td>\n</tr>\n<tr>\n<td>ReplyTime</td>\n<td>DateTime</td>\n<td>回复时间</td>\n</tr>\n</tbody>\n</table>\n<p>建一个Domain文件夹,用于存放数据库表中对应的实体类。</p>\n<h3 id=\"基础介绍\" tabindex=\"-1\"> 基础介绍</h3>\n<h4 id=\"_1-column属性介绍-大家可以看源码-解析\" tabindex=\"-1\"> 1. Column属性介绍，大家可以看<a href=\"https://github.com/2881099/FreeSql/blob/f8c3608fdac2933b528605cc46b21b71c79eaacb/FreeSql/DataAnnotations/ColumnAttribute.cs\" target=\"_blank\" rel=\"noopener noreferrer\">源码，解析</a></h4>\n<p>1). 比如：Blog表中指定了Title为varchar(50),我们如何通过代码指定了主键，唯一值，字形。</p>\n<div><pre><code>    <span>public</span> <span>class</span> <span>Blog</span>\n    <span>{</span>\n        <span>[</span><span><span>Column</span><span><span>(</span>IsIdentity <span>=</span> <span>true</span><span>,</span> IsPrimary <span>=</span> <span>true</span><span>)</span></span></span><span>]</span>\n        <span>public</span> <span><span>int</span></span> BlogId <span>{</span> <span>get</span><span>;</span> <span>set</span><span>;</span> <span>}</span>\n        <span>[</span><span><span>Column</span><span><span>(</span>DbType <span>=</span> <span>\"varchar(50)\"</span><span>)</span></span></span><span>]</span>\n        <span>public</span> <span><span>string</span></span> Title <span>{</span> <span>get</span><span>;</span> <span>set</span><span>;</span> <span>}</span>\n    <span>}</span>\n</code></pre><div aria-hidden=\"true\"><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br></div></div><p>2). Column的命名空间在</p>\n<div><pre><code><span>using</span> <span>FreeSql<span>.</span>DataAnnotations</span><span>;</span>\n</code></pre><div aria-hidden=\"true\"><span>1</span><br></div></div><p>更多属性介绍</p>\n<table>\n<thead>\n<tr>\n<th>字段</th>\n<th>备注</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Name</td>\n<td>数据库列名</td>\n</tr>\n<tr>\n<td>OldName</td>\n<td>指定数据库旧的列名，修改实体属性命名时，同时设置此参数为修改之前的值，CodeFirst才可以正确修改数据库字段；否则将视为【新增字段】</td>\n</tr>\n<tr>\n<td>DbType</td>\n<td>数据库类型，如： varchar(255)</td>\n</tr>\n<tr>\n<td>IsPrimary</td>\n<td>主键</td>\n</tr>\n<tr>\n<td>IsIdentity</td>\n<td>自增标识</td>\n</tr>\n<tr>\n<td>IsNullable</td>\n<td>是否可DBNull</td>\n</tr>\n<tr>\n<td>IsIgnore</td>\n<td>忽略此列，不迁移、不插入</td>\n</tr>\n<tr>\n<td>IsVersion</td>\n<td>设置行锁（乐观锁）版本号，每次更新累加版本号，若更新整个实体时会附带当前的版本号判断（修改失败时抛出异常）</td>\n</tr>\n<tr>\n<td>DbDefautValue</td>\n<td>数据库默认值</td>\n</tr>\n<tr>\n<td>MapType</td>\n<td>类型映射，比如：可将 enum 属性映射成 typeof(string)</td>\n</tr>\n<tr>\n<td>Uniques</td>\n<td>唯一键，在多个属性指定相同的标识，代表联合键；可使用逗号分割多个 UniqueKey 名。</td>\n</tr>\n</tbody>\n</table>\n<h4 id=\"_2-table-的使用-用于在类的上面指定这个表的属性\" tabindex=\"-1\"> 2. Table 的使用：用于在类的上面指定这个表的属性</h4>\n<div><pre><code><span>[</span><span><span>Table</span><span><span>(</span>Name <span>=</span> <span>\"t_blog\"</span><span>)</span></span></span><span>]</span>\n<span>public</span> <span>class</span> <span>Blog</span> <span>{</span>\n  <span>//...</span>\n<span>}</span>\n</code></pre><div aria-hidden=\"true\"><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br></div></div><p>更多属性介绍</p>\n<table>\n<thead>\n<tr>\n<th>字段</th>\n<th>备注</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Name</td>\n<td>数据库表名</td>\n</tr>\n<tr>\n<td>OldName</td>\n<td>指定数据库旧的表名，修改实体命名时，同时设置此参数为修改之前的值，CodeFirst才可以正确修改数据库表；否则将视为【创建新表】</td>\n</tr>\n<tr>\n<td>SelectFilter</td>\n<td>查询过滤SQL，实现类似 a.IsDeleted = 1 功能</td>\n</tr>\n<tr>\n<td>DisableSyncStructure</td>\n<td>禁用 CodeFirst 同步结构迁移</td>\n</tr>\n</tbody>\n</table>\n<h4 id=\"_3-其他的还是看-https-github-com-2881099-freesql-blob-master-docs-codefirst-md\" tabindex=\"-1\"> 3. 其他的还是看 https://github.com/2881099/FreeSql/blob/master/Docs/codefirst.md</h4>\n<h4 id=\"blog-cs\" tabindex=\"-1\"> Blog.cs</h4>\n<div><pre><code><span>using</span> <span>FreeSql<span>.</span>DataAnnotations</span><span>;</span>\n<span>using</span> <span>System</span><span>;</span>\n\n<span>namespace</span> <span>OvOv<span>.</span>FreeSql<span>.</span>Domain</span>\n<span>{</span>\n    <span>public</span> <span>class</span> <span>Blog</span>\n    <span>{</span>\n        <span>[</span><span><span>Column</span><span><span>(</span>IsIdentity <span>=</span> <span>true</span><span>,</span> IsPrimary <span>=</span> <span>true</span><span>)</span></span></span><span>]</span>\n        <span>public</span> <span><span>int</span></span> BlogId <span>{</span> <span>get</span><span>;</span> <span>set</span><span>;</span> <span>}</span>\n        <span>[</span><span><span>Column</span><span><span>(</span>DbType <span>=</span> <span>\"varchar(50)\"</span><span>)</span></span></span><span>]</span>\n        <span>public</span> <span><span>string</span></span> Title <span>{</span> <span>get</span><span>;</span> <span>set</span><span>;</span> <span>}</span>\n        <span>[</span><span><span>Column</span><span><span>(</span>DbType <span>=</span> <span>\"varchar(500)\"</span><span>)</span></span></span><span>]</span>\n        <span>public</span> <span><span>string</span></span> Content <span>{</span> <span>get</span><span>;</span> <span>set</span><span>;</span> <span>}</span>\n        <span>public</span> <span>DateTime</span> CreateTime <span>{</span> <span>get</span><span>;</span> <span>set</span><span>;</span> <span>}</span>\n\n\n    <span>}</span>\n<span>}</span>\n</code></pre><div aria-hidden=\"true\"><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br></div></div><h4 id=\"post-cs\" tabindex=\"-1\"> Post.cs</h4>\n<div><pre><code>\n<span>using</span> <span>FreeSql<span>.</span>DataAnnotations</span><span>;</span>\n<span>using</span> <span>System</span><span>;</span>\n\n<span>namespace</span> <span>OvOv<span>.</span>FreeSql<span>.</span>Domain</span>\n<span>{</span>\n    <span>public</span> <span>class</span> <span>Post</span>\n    <span>{</span>\n        <span>[</span><span><span>Column</span><span><span>(</span>IsIdentity <span>=</span> <span>true</span><span>,</span> IsPrimary <span>=</span> <span>true</span><span>)</span></span></span><span>]</span>\n        <span>public</span> <span><span>int</span></span> PostId <span>{</span> <span>get</span><span>;</span> <span>set</span><span>;</span> <span>}</span>\n        <span>[</span><span><span>Column</span><span><span>(</span>DbType <span>=</span> <span>\"varchar(50)\"</span><span>)</span></span></span><span>]</span>\n        <span>public</span> <span><span>string</span></span> ReplyContent <span>{</span> <span>get</span><span>;</span> <span>set</span><span>;</span> <span>}</span>\n        <span>public</span> <span><span>int</span></span> BlogId <span>{</span> <span>get</span><span>;</span> <span>set</span><span>;</span> <span>}</span>\n        <span>public</span> <span>DateTime</span> ReplyTime <span>{</span> <span>get</span><span>;</span> <span>set</span><span>;</span> <span>}</span>\n        <span>public</span> <span>Blog</span> Blog <span>{</span> <span>get</span><span>;</span> <span>set</span><span>;</span> <span>}</span>\n    <span>}</span>\n<span>}</span>\n</code></pre><div aria-hidden=\"true\"><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br></div></div><h4 id=\"startup-cs\" tabindex=\"-1\"> Startup.cs</h4>\n<p>非全部代码，这里注意点：要先在mysql中创建数据库<strong>FreeSql_Blog</strong>，否则一直提示<strong>主库xxxxx</strong>,官网未找到相关描述。</p>\n<p>这里初始化FreeSql，并使用单例模式，注入到默认的依赖中，这样在Controller中即可直接注入。</p>\n<div><pre><code><span>namespace</span> <span>OvOv<span>.</span>FreeSql</span>\n<span>{</span>\n    <span>public</span> <span>class</span> <span>Startup</span>\n    <span>{</span>\n        <span>public</span> <span>Startup</span><span>(</span><span>IConfiguration</span> configuration<span>)</span>\n        <span>{</span>\n            Fsql <span>=</span> <span>new</span> <span>FreeSqlBuilder</span><span>(</span><span>)</span>\n                        <span>.</span><span>UseConnectionString</span><span>(</span>DataType<span>.</span>MySql<span>,</span> <span>@\"Data Source=127.0.0.1;Port=3306;User ID=root;Password=123456;Initial Catalog=FreeSql_Blog;Charset=utf8;SslMode=none;Max pool size=10\"</span><span>)</span>\n                        <span>.</span><span>UseAutoSyncStructure</span><span>(</span><span>true</span><span>)</span>\n                        <span>.</span><span>Build</span><span>(</span><span>)</span><span>;</span>\n        <span>}</span>\n\n        <span>public</span> <span>IFreeSql</span> Fsql <span>{</span> <span>get</span><span>;</span> <span>}</span>\n\n        <span>public</span> <span><span>void</span></span> <span>ConfigureServices</span><span>(</span><span>IServiceCollection</span> services<span>)</span>\n        <span>{</span>\n            services<span>.</span><span><span>AddSingleton</span><span><span>&lt;</span>IFreeSql<span>></span></span></span><span>(</span>Fsql<span>)</span><span>;</span>\n\n        <span>}</span>\n    <span>}</span>\n<span>}</span>\n</code></pre><div aria-hidden=\"true\"><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br></div></div><h4 id=\"blogcontroller\" tabindex=\"-1\"> BlogController</h4>\n<p>在controllers文件夹新建一个控制器BlogController</p>\n<div><pre><code><span>using</span> <span>System</span><span>;</span>\n<span>using</span> <span>System<span>.</span>Collections<span>.</span>Generic</span><span>;</span>\n<span>using</span> <span>System<span>.</span>Linq</span><span>;</span>\n<span>using</span> <span>System<span>.</span>Threading<span>.</span>Tasks</span><span>;</span>\n<span>using</span> <span>FreeSql</span><span>;</span>\n<span>using</span> <span>Microsoft<span>.</span>AspNetCore<span>.</span>Mvc</span><span>;</span>\n<span>using</span> <span>OvOv<span>.</span>FreeSql<span>.</span>Domain</span><span>;</span>\n\n<span>namespace</span> <span>OvOv<span>.</span>FreeSql<span>.</span>Controllers</span>\n<span>{</span>\n    <span>[</span><span><span>Route</span><span><span>(</span><span>\"api/[controller]\"</span><span>)</span></span></span><span>]</span>\n    <span>[</span><span><span>ApiController</span></span><span>]</span>\n    <span>public</span> <span>class</span> <span>BlogController</span> <span>:</span> <span><span>ControllerBase</span></span>\n    <span>{</span>\n        <span>// GET api/Blog</span>\n\n        <span>IFreeSql</span> _fsql<span>;</span>\n        <span>public</span> <span>BlogController</span><span>(</span><span>IFreeSql</span> fsql<span>)</span>\n        <span>{</span>\n            _fsql <span>=</span> fsql<span>;</span>\n        <span>}</span>\n\n        <span>[</span><span><span>HttpGet</span></span><span>]</span>\n        <span>public</span> <span>ActionResult<span>&lt;</span>IEnumerable<span>&lt;</span>Blog<span>></span><span>></span></span> <span>Get</span><span>(</span><span>)</span>\n        <span>{</span>\n            <span>List<span>&lt;</span>Blog<span>></span></span> blogs <span>=</span> _fsql<span>.</span><span><span>Select</span><span><span>&lt;</span>Blog<span>></span></span></span><span>(</span><span>)</span><span>.</span><span>OrderByDescending</span><span>(</span>r <span>=></span> r<span>.</span>CreateTime<span>)</span><span>.</span><span>ToList</span><span>(</span><span>)</span><span>;</span>\n\n            <span>return</span> blogs<span>;</span>\n        <span>}</span>\n\n        <span>// GET api/blog/5</span>\n        <span>[</span><span>HttpGet</span><span>(</span><span>\"{id}\"</span><span>)</span><span>]</span>\n        <span>public</span> <span>ActionResult<span>&lt;</span>Blog<span>></span></span> <span>Get</span><span>(</span><span><span>int</span></span> id<span>)</span>\n        <span>{</span>\n            <span>return</span> _fsql<span>.</span><span><span>Select</span><span><span>&lt;</span>Blog<span>></span></span></span><span>(</span>id<span>)</span><span>.</span><span>ToOne</span><span>(</span><span>)</span><span>;</span>\n        <span>}</span>\n\n\n        <span>// DELETE api/blog/5</span>\n        <span>[</span><span>HttpDelete</span><span>(</span><span>\"{id}\"</span><span>)</span><span>]</span>\n        <span>public</span> <span><span>void</span></span> <span>Delete</span><span>(</span><span><span>int</span></span> id<span>)</span>\n        <span>{</span>\n            _fsql<span>.</span><span><span>Delete</span><span><span>&lt;</span>Blog<span>></span></span></span><span>(</span><span>new</span> <span>{</span> BlogId <span>=</span> id <span>}</span><span>)</span><span>.</span><span>ExecuteAffrows</span><span>(</span><span>)</span><span>;</span>\n        <span>}</span>\n    <span>}</span>\n<span>}</span>\n</code></pre><div aria-hidden=\"true\"><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br><span>24</span><br><span>25</span><br><span>26</span><br><span>27</span><br><span>28</span><br><span>29</span><br><span>30</span><br><span>31</span><br><span>32</span><br><span>33</span><br><span>34</span><br><span>35</span><br><span>36</span><br><span>37</span><br><span>38</span><br><span>39</span><br><span>40</span><br><span>41</span><br><span>42</span><br><span>43</span><br><span>44</span><br><span>45</span><br><span>46</span><br></div></div><p>重新运行，打开地址 http://localhost:5001/api/blog 会发现数据库中生成了表blog，这时候表post并没有生成。所以我们判断，只有在访问到实体类才检查是否存在表结构，然后执行相应的处理。</p>\n<p>手动向blog表中加一些数据，然后再次请求</p>\n<ul>\n<li>http://localhost:5001/api/blog， 可看到相应的数据。</li>\n<li>http://localhost:5001/api/blog/1  可得到单个数据。</li>\n</ul>\n<h3 id=\"自动同步实体结构【开发环境必备】\" tabindex=\"-1\"> 自动同步实体结构【开发环境必备】</h3>\n<p>此功能默认为开启状态，发布正式环境后，请修改此设置</p>\n<div><pre><code>Fsql = new FreeSqlBuilder()\n          .UseConnectionString(DataType.MySql, @\"连接字符串\")\n          .UseAutoSyncStructure(true)\n          .Build();\n                      \n//UseAutoSyncStructure(true/false)【开发环境必备】自动同步实体结构到数据库，程序运行中检查实体表是否存在，然后创建或修改\n\n// 也可使用此方法指定是否自动同步结构。                  \nFsql.CodeFirst.IsAutoSyncStructure = true;\n</code></pre><div aria-hidden=\"true\"><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br></div></div>",
      "date_published": "2020-05-08T15:01:00.000Z",
      "date_modified": "2022-06-29T19:17:23.000Z",
      "authors": [],
      "tags": []
    },
    {
      "title": "依赖注入scrutor",
      "url": "https://igeekfan.cn/igeekfan-docs/dotnetcore/lin-cms/dependency-injection-scrutor.html",
      "id": "https://igeekfan.cn/igeekfan-docs/dotnetcore/lin-cms/dependency-injection-scrutor.html",
      "content_html": "<h1 id=\"依赖注入scrutor\" tabindex=\"-1\"> 依赖注入scrutor</h1>\n<p>官网介绍</p>\n<p><a href=\"https://docs.microsoft.com/zh-cn/aspnet/core/fundamentals/dependency-injection?view=aspnetcore-2.2\" target=\"_blank\" rel=\"noopener noreferrer\">https://docs.microsoft.com/zh-cn/aspnet/core/fundamentals/dependency-injection?view=aspnetcore-2.2</a></p>\n<ul>\n<li>开源地址<a href=\"https://github.com/khellang/Scrutor\" target=\"_blank\" rel=\"noopener noreferrer\">https://github.com/khellang/Scrutor</a></li>\n<li>参考文档 <a href=\"https://www.cnblogs.com/catcher1994/p/10316928.html\" target=\"_blank\" rel=\"noopener noreferrer\">https://www.cnblogs.com/catcher1994/p/10316928.html</a>\n手动管理依赖注入过于麻烦,当有多个仓储，服务，无法统一注入，Scrutor能帮助我们简化ASP.NET Core的DI注册。</li>\n</ul>\n<p>在ConfigServices中，我们原本需要这样子依次注入仓储，服务和其他接口及实现，当有多个仓储时，这样就过于繁琐。</p>\n<div><pre><code>services.AddTransient&lt;IUserRepository, UserRepository>();\nservices.AddTransient&lt;IUserService, UserService>();\nservices.AddTransient&lt;ICurrentUser, CurrentUser>();\n</code></pre><div aria-hidden=\"true\"><span>1</span><br><span>2</span><br><span>3</span><br></div></div><h2 id=\"serivce后缀服务注入di\" tabindex=\"-1\"> Serivce后缀服务注入DI</h2>\n<p>当我们有多个Service后缀的服务时，使用以下方法，可将服务扫描只留下以Serivce结尾的类，将其类型注册为提供所有公共接口生成服务，其生命周期为Transient，</p>\n<div><pre><code>services.Scan(scan => scan\n        //加载Startup这个类所在的程序集\n        .FromAssemblyOf&lt;Startup>()\n        // 表示要注册那些类，上面的代码还做了过滤，只留下了以 Service 结尾的类\n        .AddClasses(classes => classes.Where(t => t.Name.EndsWith(\"Service\", StringComparison.OrdinalIgnoreCase)))\n        //表示将类型注册为提供其所有公共接口作为服务\n        .AsImplementedInterfaces()\n        //表示注册的生命周期为 Transient\n        .WithTransientLifetime()\n         );\n\n</code></pre><div aria-hidden=\"true\"><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br></div></div><h2 id=\"itransientdependency\" tabindex=\"-1\"> ITransientDependency</h2>\n<p>新建一个空接口，当其他类继承此接口后，统一注入到DI中，以Transient的生命周期。</p>\n<div><pre><code>namespace LinCms.Zero.Dependency\n{\n    public interface ITransientDependency\n    {\n    }\n}\n</code></pre><div aria-hidden=\"true\"><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br></div></div><h2 id=\"接口\" tabindex=\"-1\"> 接口</h2>\n<div><pre><code>public interface ICurrentUser\n{\n    int? Id { get; }\n\n    int? GroupId { get; }\n\n    bool? IsAdmin { get; }\n}\n</code></pre><div aria-hidden=\"true\"><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br></div></div><h2 id=\"模拟实现\" tabindex=\"-1\"> 模拟实现</h2>\n<div><pre><code>    public class CurrentUser : ICurrentUser, ITransientDependency\n    {\n     \n        public int? Id => 1;\n        public int? GroupId => 2;\n        public bool? IsAdmin => true;\n    }\n</code></pre><div aria-hidden=\"true\"><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br></div></div><p>扫描所有继承ITransientDependency的实现。</p>\n<div><pre><code>   services.Scan(scan => scan\n       // We start out with all types in the assembly of ITransientService\n        .FromAssemblyOf&lt;ITransientDependency>()\n        // AddClasses starts out with all public, non-abstract types in this assembly.\n        // These types are then filtered by the delegate passed to the method.\n        // In this case, we filter out only the classes that are assignable to ITransientService.\n        .AddClasses(classes => classes.AssignableTo&lt;ITransientDependency>())\n        // We then specify what type we want to register these classes as.\n        // In this case, we want to register the types as all of its implemented interfaces.\n        // So if a type implements 3 interfaces; A, B, C, we'd end up with three separate registrations.\n        .AsImplementedInterfaces()\n        // And lastly, we specify the lifetime of these registrations.\n        .WithTransientLifetime()\n         );\n\n</code></pre><div aria-hidden=\"true\"><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br></div></div><h2 id=\"如何使用\" tabindex=\"-1\"> 如何使用</h2>\n<p>在其他类中使用此接口</p>\n<div><pre><code>[ApiController]\n[Route(\"cms/user\")]\npublic class UserController : ControllerBase\n{\n    private readonly ICurrentUser _currentUser;\n\n    public UserController(ICurrentUser currentUser)\n    {\n        _currentUser = currentUser;\n    }\n\n    [HttpGet]\n    public int GetUser()\n    {\n        return _currentUser.Id;\n    }\n}\n</code></pre><div aria-hidden=\"true\"><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br></div></div><h2 id=\"统一注入\" tabindex=\"-1\"> 统一注入</h2>\n<p>当然，我们可以统一注入，而非写二次servics.Scan</p>\n<div><pre><code>services.Scan(scan => scan\n            .FromAssemblyOf&lt;Startup>()\n            .AddClasses(classes => classes.Where(t => t.Name.EndsWith(\"Service\",StringComparison.OrdinalIgnoreCase)))\n            .AsImplementedInterfaces()\n            .WithTransientLifetime()\n            .FromAssemblyOf&lt;ITransientDependency>()\n            .AddClasses(classes => classes.AssignableTo&lt;ITransientDependency>())\n            .AsImplementedInterfaces()\n            .WithTransientLifetime()\n      );\n</code></pre><div aria-hidden=\"true\"><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br></div></div>",
      "date_published": "2020-05-08T15:01:00.000Z",
      "date_modified": "2020-05-08T15:01:00.000Z",
      "authors": [],
      "tags": []
    },
    {
      "title": "认证与授权",
      "url": "https://igeekfan.cn/igeekfan-docs/dotnetcore/lin-cms/dynamic-authorization-in-aspnetcore.html",
      "id": "https://igeekfan.cn/igeekfan-docs/dotnetcore/lin-cms/dynamic-authorization-in-aspnetcore.html",
      "content_html": "<h1 id=\"认证与授权\" tabindex=\"-1\"> 认证与授权</h1>\n<p>主要就<strong>基于权限的授权</strong>的实现进行研究，实现方法级别的权限验证。</p>\n<ul>\n<li><a href=\"https://www.cnblogs.com/RainingNight/p/dynamic-authorization-in-asp-net-core.html\" target=\"_blank\" rel=\"noopener noreferrer\">https://www.cnblogs.com/RainingNight/p/dynamic-authorization-in-asp-net-core.html</a></li>\n</ul>\n<h2 id=\"认证鉴权相关\" tabindex=\"-1\"> 认证鉴权相关</h2>\n<p>IdentityServer4</p>\n<ul>\n<li><a href=\"https://blog.csdn.net/jasonsong2008/article/details/89226705\" target=\"_blank\" rel=\"noopener noreferrer\">ASP.NET Core WebAPI JWT Bearer 认证失败返回自定义数据 Json</a></li>\n<li><a href=\"https://www.cnblogs.com/stulzq/p/8119928.html\" target=\"_blank\" rel=\"noopener noreferrer\">IdentityServer4 中文文档与实战</a></li>\n</ul>\n<h2 id=\"jwt\" tabindex=\"-1\"> JWT</h2>\n<p>json web token</p>\n",
      "date_published": "2020-05-08T15:01:00.000Z",
      "date_modified": "2022-06-02T11:02:17.000Z",
      "authors": [],
      "tags": []
    },
    {
      "title": "CAP实现EventBus",
      "url": "https://igeekfan.cn/igeekfan-docs/dotnetcore/lin-cms/rabbitmq.html",
      "id": "https://igeekfan.cn/igeekfan-docs/dotnetcore/lin-cms/rabbitmq.html",
      "content_html": "<h1 id=\"cap实现eventbus\" tabindex=\"-1\"> CAP实现EventBus</h1>\n<p>分布式事务一致性，使用的是 <a href=\"https://github.com/dotnetcore/cap\" target=\"_blank\" rel=\"noopener noreferrer\">CAP</a>，那么我们在什么情况下使用它呢。</p>\n<p>EventBus:事件总线，是一个基于观察者模块的事件发布/订阅框架，可以将一些复杂的，重复的操作，异步的操作，交给系统去处理，当前系统直接返回成功的操作。</p>\n<p>简单的说就是解耦，</p>\n<p>比如用户发布文章后，需要将消息推送给关注的用户，这时候，推送会浪费许多时间，本来这个操作与当前登录的用户没有关系，用户也只关注文章发布是否成功，。后续，将推送等操作，交给另一件事件去处理，这样速度更快，屏蔽了一些细节。就类似一种消息通知，我不关心后续是什么操作，只将自己的一些状态传递过去。</p>\n<p>我们先来了解一下CAP中的EventBus，主要特点是发布订阅模式，内部使用RabbitMQ实现异构系统的消息同步，通过本地消息表对信息持久化，保证由EventBus发出的消息是可靠的，即高可用。</p>\n<p>如果系统启动后在log/log200xxx.txt日志错误原因，RabbitMQ</p>\n<div><pre><code>DotNetCore.CAP.BrokerConnectionException: Broker Unreachable\n ---> RabbitMQ.Client.Exceptions.BrokerUnreachableException: None of the specified endpoints were reachable\n ---> RabbitMQ.Client.Exceptions.OperationInterruptedException: The AMQP operation was interrupted: AMQP close-reason, initiated by Peer, code=530, text=\"- to NOT_ALLOWED access vhost '/admin' refused for user 'admin'\", classId=10, methodId=40, cause=\n   at RabbitMQ.Client.Impl.SimpleBlockingRpcContinuation.GetReply(TimeSpan timeout)\n   at RabbitMQ.Client.Impl.ModelBase.ConnectionOpen(String virtualHost, String capabilities, Boolean insist)\n   at RabbitMQ.Client.Framing.Impl.Connection.Open(Boolean insist)\n   at RabbitMQ.Client.Framing.Impl.Connection..ctor(IConnectionFactory factory, Boolean insist, IFrameHandler frameHandler, String clientProvidedName)\n   at RabbitMQ.Client.Framing.Impl.AutorecoveringConnection.Init(IFrameHandler fh)\n   at RabbitMQ.Client.Framing.Impl.AutorecoveringConnection.Init(IEndpointResolver endpoints)\n   at RabbitMQ.Client.ConnectionFactory.CreateConnection(IEndpointResolver endpointResolver, String clientProvidedName)\n   --- End of inner exception stack trace ---\n   at RabbitMQ.Client.ConnectionFactory.CreateConnection(IEndpointResolver endpointResolver, String clientProvidedName)\n   at RabbitMQ.Client.ConnectionFactory.CreateConnection(String clientProvidedName)\n   at DotNetCore.CAP.RabbitMQ.ConnectionChannelPool.&lt;>c__DisplayClass19_0.&lt;CreateConnection>b__1()\n   at DotNetCore.CAP.RabbitMQ.ConnectionChannelPool.GetConnection()\n   at DotNetCore.CAP.RabbitMQ.RabbitMQConsumerClient.Connect()\n   at DotNetCore.CAP.RabbitMQ.RabbitMQConsumerClientFactory.Create(String groupId)\n   --- End of inner exception stack trace ---\n   at DotNetCore.CAP.RabbitMQ.RabbitMQConsumerClientFactory.Create(String groupId)\n   at DotNetCore.CAP.Internal.ConsumerRegister.&lt;>c__DisplayClass17_0.&lt;Start>b__0()\n2020-04-26 15:59:54.280 +08:00 [DBG] Transport connection checking...\n2020-04-26 15:59:54.281 +08:00 [WRN] Transport connection is unhealthy, reconnection...\n2020-04-26 15:59:54.467 +08:00 [ERR] Broker Unreachable\n</code></pre><div aria-hidden=\"true\"><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br></div></div><h2 id=\"安装下载\" tabindex=\"-1\"> 安装下载</h2>\n<p>我们就需要安装rabbitmq了后，配置好用户，密码，virtual_hosts，因为rabbimq是erlang写的，所以\n前提要安装erlang,官网下载比百度网盘还慢，也可自行去官网下载。</p>\n<p>erlang 安装包 链接：https://pan.baidu.com/s/1T1_dI7iPMpEgiP8QC5tlaw\n提取码：86jm</p>\n<p>rabbitmq 安装包  链接：https://pan.baidu.com/s/1wD22_gKFX2LW9oOx69rnCA\n提取码：ohea</p>\n<h2 id=\"配置rabbitmq\" tabindex=\"-1\"> 配置RabbitMQ</h2>\n<blockquote>\n<p>服务开启后，管理地址：http://localhost:15672/</p>\n</blockquote>\n<ul>\n<li>帐号：guest 密码 : guest</li>\n</ul>\n<p>如果遇到RabbitmMQ安装后，web管理端口http://localhost:15672/ 无法访问的解决</p>\n<p>先进入rabbitMQ安装目录下的sbin目录,在目录下shift+右键打开命令行</p>\n<p>使用rabbitmq-plugins.bat enable rabbitmq_management开启网页管理界面,然后重启rabbitMQ</p>\n<p>1.<a href=\"https://blog.csdn.net/sxf359/article/details/78239382\" target=\"_blank\" rel=\"noopener noreferrer\">https://blog.csdn.net/sxf359/article/details/78239382</a></p>\n<p>2.<img src=\"https://note.youdao.com/yws/api/personal/file/7FA20220D5454DF9B0788B33E3A41FED?method=download&amp;shareKey=c2e5f279b574304e3bd777a75a4e3045\" alt=\"示例\" loading=\"lazy\"></p>\n<ol start=\"3\">\n<li>此命令执行要先定位到rabbitmq的安装目录下的sbin文件夹下。</li>\n</ol>\n<div><pre><code> rabbitmq-plugins enable rabbitmq_management\n</code></pre><div aria-hidden=\"true\"><span>1</span><br></div></div><h2 id=\"docker下安装rabbitmq\" tabindex=\"-1\"> docker下安装rabbitmq</h2>\n<p>通过docker来安装rabbitmq,并启动\n1.拉取镜像</p>\n<div><pre><code><span>docker</span> pull rabbitmq:3.7.7-management\n</code></pre><div aria-hidden=\"true\"><span>1</span><br></div></div><p>2.创建和启动容器</p>\n<div><pre><code>docker run -d --name rabbitmq3.7.7 -p 5672:5672 -p 15672:15672 -v `pwd`/data:/var/lib/rabbitmq --hostname myRabbit -e RABBITMQ_DEFAULT_VHOST=my_vhost  -e RABBITMQ_DEFAULT_USER=admin -e RABBITMQ_DEFAULT_PASS=admin df80af9ca0c9\n</code></pre><div aria-hidden=\"true\"><span>1</span><br></div></div><p>说明：</p>\n<p>-d 后台运行容器；</p>\n<p>--name 指定容器名；</p>\n<p>-p 指定服务运行的端口（5672：应用访问端口；15672：控制台Web端口号）；</p>\n<p>-v 映射目录或文件；</p>\n<p>--hostname  主机名（RabbitMQ的一个重要注意事项是它根据所谓的 “节点名称” 存储数据，默认为主机名）；</p>\n<p>-e 指定环境变量；（RABBITMQ_DEFAULT_VHOST：默认虚拟机名；RABBITMQ_DEFAULT_USER：默认的用户名；RABBITMQ_DEFAULT_PASS：默认用户名的密码）</p>\n<p>其他，可查看正在运行的容器</p>\n<div><pre><code>docker ps \n</code></pre><div aria-hidden=\"true\"><span>1</span><br></div></div><p>打开浏览器，进入web管理端:http://Server-IP:15672，用户名密码都是admin</p>\n<h2 id=\"开发配置项\" tabindex=\"-1\"> 开发配置项</h2>\n<p>lin-cms-dotnetcore 中 appsettings.json中配置如下，默认guest,不太安全，所以需要我们稍微学习一下rabbitmq的工具的使用。</p>\n<div><pre><code> \"RabbitMQ\": {\n    \"HostName\": \"localhost\",\n    \"UserName\": \"admin\",\n    \"Password\": \"123456\",\n    \"Port\": 5672,\n    \"VirtualHost\": \"/admin\"\n  }\n</code></pre><div aria-hidden=\"true\"><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br></div></div><ol>\n<li>\n<p>新增一个admin用户，配置这个账号的密码是123455(好像也不安全)，配置tag,这里我们选择management\n<img src=\"https://pic.downk.cc/item/5ea54319c2a9a83be5d27c56.png\" alt=\"\" loading=\"lazy\"></p>\n</li>\n<li>\n<p>新建一个virtual hosts，啥意思就不BB了。\n<img src=\"https://pic.downk.cc/item/5ea54392c2a9a83be5d2f596.png\" alt=\"\" loading=\"lazy\"></p>\n</li>\n</ol>\n<p>3.给admin这个用户配置virtual hosts</p>\n<p>先选择第一个图中的admin用户。\n<img src=\"https://pic.downk.cc/item/5ea5446ac2a9a83be5d3ab26.jpg\" alt=\"\" loading=\"lazy\"></p>\n<p>然后set permission选择virtual hosts /admin 点击set permission，万事大吉\n<img src=\"https://pic.downk.cc/item/5ea5449bc2a9a83be5d3d674.jpg\" alt=\"\" loading=\"lazy\"></p>\n<p>重新启动项目，日志不会显示错误。</p>\n<p><img src=\"https://pic.downk.cc/item/5ea545d8c2a9a83be5d4e4e4.jpg\" alt=\"\" loading=\"lazy\"></p>\n",
      "image": "https://note.youdao.com/yws/api/personal/file/7FA20220D5454DF9B0788B33E3A41FED?method=download&shareKey=c2e5f279b574304e3bd777a75a4e3045",
      "date_published": "2020-05-08T15:01:00.000Z",
      "date_modified": "2022-06-02T11:02:17.000Z",
      "authors": [],
      "tags": []
    },
    {
      "title": "相关技术",
      "url": "https://igeekfan.cn/igeekfan-docs/dotnetcore/lin-cms/technology.html",
      "id": "https://igeekfan.cn/igeekfan-docs/dotnetcore/lin-cms/technology.html",
      "content_html": "<h1 id=\"相关技术\" tabindex=\"-1\"> 相关技术</h1>\n<ul>\n<li>数据库相关：ORM:<a href=\"https://github.com/2881099/FreeSql\" target=\"_blank\" rel=\"noopener noreferrer\">FreeSql</a>+DataBase:MySQL5.6</li>\n<li>ASP.NET Core3.1+WebAPI+RESTful</li>\n<li>简化对象映射：<a href=\"https://automapper.org/\" target=\"_blank\" rel=\"noopener noreferrer\">AutoMapper</a></li>\n<li>身份认证框架：<a href=\"https://github.com/IdentityServer/IdentityServer4\" target=\"_blank\" rel=\"noopener noreferrer\">IdentityServer4</a></li>\n<li>Json Web 令牌:JWT</li>\n<li>文档 API：Swagger(<a href=\"https://github.com/domaindrivendev/Swashbuckle.AspNetCore\" target=\"_blank\" rel=\"noopener noreferrer\">Swashbuckle.AspNetCore</a>)</li>\n<li>序列化：Newtonsoft.Json</li>\n<li>测试框架：Xunit</li>\n<li>日志 NLog</li>\n<li>依赖注入服务<a href=\"https://github.com/autofac/Autofac.Extensions.DependencyInjection\" target=\"_blank\" rel=\"noopener noreferrer\">AutoFac</a></li>\n<li>通用扩展方法 Z.ExtensionMethods</li>\n<li>云存储：七牛云 <a href=\"https://github.com/Hello-Mango/MQiniu.Core\" target=\"_blank\" rel=\"noopener noreferrer\">MQiniu.Core</a></li>\n<li>分布式事务、EventBus：<a href=\"https://github.com/dotnetcore/CAP\" target=\"_blank\" rel=\"noopener noreferrer\">DotNeteCore.CAP</a></li>\n<li>GitHub 第三方授权登录<a href=\"https://github.com/aspnet-contrib/AspNet.Security.OAuth.Providers\" target=\"_blank\" rel=\"noopener noreferrer\">AspNet.Security.OAuth.GitHub</a></li>\n<li>QQ 第三方授权登录<a href=\"https://github.com/aspnet-contrib/AspNet.Security.OAuth.Providers\" target=\"_blank\" rel=\"noopener noreferrer\">AspNet.Security.OAuth.QQ</a></li>\n<li><a href=\"https://docs.docker.com/\" target=\"_blank\" rel=\"noopener noreferrer\">Docker</a></li>\n<li><a href=\"https://dev.azure.com/\" target=\"_blank\" rel=\"noopener noreferrer\">Azure DevOps</a></li>\n<li>健康检查<a href=\"https://github.com/xabaril/AspNetCore.Diagnostics.HealthChecks\" target=\"_blank\" rel=\"noopener noreferrer\">AspNetCore.HealthChecks.UI.Client</a></li>\n<li><a href=\"https://help.github.com/en/actions\" target=\"_blank\" rel=\"noopener noreferrer\">GitHub Action</a></li>\n</ul>\n<h3 id=\"实践\" tabindex=\"-1\"> 实践</h3>\n<ul>\n<li>DDD(Domain-Driven Design)领域驱动设计</li>\n<li>Logging（日志）</li>\n<li>DevOps(CI/CD,自动化构建)</li>\n<li>Database Migrations（数据库自动迁移)</li>\n<li>Authentication(身份认证)</li>\n<li>Authorization（授权）</li>\n<li>Separation of Concerns（关注点分离）</li>\n<li>Repository Pattern（仓储模式）</li>\n<li>SOLID Principles（单一职责）</li>\n<li>Clean Code（代码整洁之道）</li>\n</ul>\n<h3 id=\"分层结构-layers\" tabindex=\"-1\"> 分层结构（Layers）</h3>\n<ul>\n<li>identityserver4\n<ul>\n<li>LinCms.IdentityServer4:使用 id4 授权登录</li>\n</ul>\n</li>\n<li>src\n<ul>\n<li>LinCms.Web：接口 API（ASP.NET Core)</li>\n<li>LinCms.Application:应用服务</li>\n<li>LinCms.Application.Contracts:DTO,数据传输对象，应用服务接口</li>\n<li>LinCms.Infrastructure:基础设施，数据库持久性的操作</li>\n<li>LinCms.Core:该应用的核心，实体类，通用操作类，AOP 扩展，分页对象，基础依赖对象接口，时间扩展方法，当前用户信息，异常类，值对象</li>\n<li>LinCms.Plugins 使用单项目实现某个业务的扩展，不需要主要项目结构，可暂时忽略。</li>\n</ul>\n</li>\n<li>test\n<ul>\n<li>LinCms.Test:对仓储，应用服务或工具类进行测试</li>\n</ul>\n</li>\n</ul>\n",
      "date_published": "2020-05-08T05:46:31.000Z",
      "date_modified": "2022-06-02T11:02:17.000Z",
      "authors": [],
      "tags": []
    },
    {
      "title": "创建简单Hello World",
      "url": "https://igeekfan.cn/igeekfan-docs/dotnetcore/examples/console-hello-world.html",
      "id": "https://igeekfan.cn/igeekfan-docs/dotnetcore/examples/console-hello-world.html",
      "content_html": "<h1 id=\"创建简单hello-world\" tabindex=\"-1\"> 创建简单Hello World</h1>\n<h2 id=\"源码\" tabindex=\"-1\"> 源码</h2>\n<p>代码托管在GitHub上 <a href=\"https://github.com/luoyunchong/dotnetcore-examples/tree/master/console-hello-world\" target=\"_blank\" rel=\"noopener noreferrer\">https://github.com/luoyunchong/dotnetcore-examples/tree/master/console-hello-world</a></p>\n<h2 id=\"相关阅读\" tabindex=\"-1\"> 相关阅读</h2>\n<ul>\n<li><a href=\"https://docs.microsoft.com/zh-cn/dotnet/core/tutorials/with-visual-studio-code\" target=\"_blank\" rel=\"noopener noreferrer\">C# 和 Visual Studio Code 入门教程</a></li>\n<li><a href=\"https://blog.csdn.net/qq_40346899/article/details/80955788\" target=\"_blank\" rel=\"noopener noreferrer\">vscode调试运行c#详细操作过程</a></li>\n<li><strong><a href=\"https://blog.csdn.net/qin_yu_2010/article/details/83978244\" target=\"_blank\" rel=\"noopener noreferrer\">使用Visual Studio Code开发.NET Core看这篇就够了</a></strong> 强烈推荐。</li>\n</ul>\n<h2 id=\"开始\" tabindex=\"-1\"> 开始</h2>\n<p>创建一个hello-word的console，会输出Hello World!</p>\n<div><pre><code><span>mkdir</span> console-hello-world\n<span>cd</span> console-hello-world\ndotnet new console\ndotnet run\n</code></pre><div aria-hidden=\"true\"><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br></div></div><p>console-hello-world.csproj</p>\n<p><strong>OutputType</strong> 标记指定我们要生成的可执行文件，即控制台应用程序。</p>\n<p><strong>TargetFramework</strong> 标记指定要定位的 .NET 实现代码。 在高级方案中，可以指定多个目标框架，并在单个操作中生成所有目标框架。</p>\n<div><pre><code><span><span><span>&lt;</span>Project</span> <span>Sdk</span><span><span>=</span><span>\"</span>Microsoft.NET.Sdk<span>\"</span></span><span>></span></span>\n\n  <span><span><span>&lt;</span>PropertyGroup</span><span>></span></span>\n    <span><span><span>&lt;</span>OutputType</span><span>></span></span>Exe<span><span><span>&lt;/</span>OutputType</span><span>></span></span>\n    <span><span><span>&lt;</span>TargetFramework</span><span>></span></span>netcoreapp3.0<span><span><span>&lt;/</span>TargetFramework</span><span>></span></span>\n    <span><span><span>&lt;</span>RootNamespace</span><span>></span></span>console_hello_world<span><span><span>&lt;/</span>RootNamespace</span><span>></span></span>\n  <span><span><span>&lt;/</span>PropertyGroup</span><span>></span></span>\n\n<span><span><span>&lt;/</span>Project</span><span>></span></span>\n\n</code></pre><div aria-hidden=\"true\"><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br></div></div><p>在 console-hello-world/bin/Debug/netcoreapp3.0中生成了console-hello-world.dll</p>\n<div><pre><code>cd console-hello-world #要先在console-hello-world目录中\ndotnet bin/Debug/netcoreapp3.0/console-hello-world.dll\nHello World\n</code></pre><div aria-hidden=\"true\"><span>1</span><br><span>2</span><br><span>3</span><br></div></div><p>修改main函数</p>\n<div><pre><code><span>using</span> <span>System</span><span>;</span>\n\n<span>namespace</span> <span>console_hello_world</span>\n<span>{</span>\n    <span>class</span> <span>Program</span>\n    <span>{</span>\n        <span>static</span> <span><span>void</span></span> <span>Main</span><span>(</span><span><span>string</span><span>[</span><span>]</span></span> args<span>)</span>\n        <span>{</span>\n            <span>if</span> <span>(</span>args<span>.</span>Length <span>></span> <span>0</span><span>)</span>\n            <span>{</span>\n                Console<span>.</span><span>WriteLine</span><span>(</span><span><span>$\"Hello </span><span><span>{</span><span>args<span>[</span><span>0</span><span>]</span></span><span>}</span></span><span>!\"</span></span><span>)</span><span>;</span>\n            <span>}</span>\n            <span>else</span>\n            <span>{</span>\n                Console<span>.</span><span>WriteLine</span><span>(</span><span>\"Hello!\"</span><span>)</span><span>;</span>\n            <span>}</span>\n        <span>}</span>\n    <span>}</span>\n<span>}</span>\n</code></pre><div aria-hidden=\"true\"><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br></div></div><div><pre><code>$ dotnet run -- John\nHello John!\n</code></pre><div aria-hidden=\"true\"><span>1</span><br><span>2</span><br></div></div>",
      "date_published": "2020-04-15T17:09:07.000Z",
      "date_modified": "2022-06-02T11:44:24.000Z",
      "authors": [],
      "tags": []
    },
    {
      "title": ".NET Core 简单测试项目",
      "url": "https://igeekfan.cn/igeekfan-docs/dotnetcore/examples/console-news-types.html",
      "id": "https://igeekfan.cn/igeekfan-docs/dotnetcore/examples/console-news-types.html",
      "content_html": "<h1 id=\"net-core-简单测试项目\" tabindex=\"-1\"> .NET Core 简单测试项目</h1>\n<p>使用PowerShell的dotnet cli命令行创建控制台项目，测试项目，测试项目引用控制台项目。</p>\n<h2 id=\"源码\" tabindex=\"-1\"> 源码</h2>\n<p>代码托管在GitHub上 <a href=\"https://github.com/luoyunchong/dotnetcore-examples/tree/master/console-news-types\" target=\"_blank\" rel=\"noopener noreferrer\">https://github.com/luoyunchong/dotnetcore-examples/tree/master/console-news-types</a></p>\n<h2 id=\"相关参考\" tabindex=\"-1\"> 相关参考</h2>\n<p>code :<a href=\"https://github.com/dotnet/samples/blob/master/core/console-apps/NewTypesMsBuild/README.md\" target=\"_blank\" rel=\"noopener noreferrer\">https://github.com/dotnet/samples/blob/master/core/console-apps/NewTypesMsBuild/README.md</a></p>\n<p>docs: <a href=\"https://docs.microsoft.com/zh-cn/dotnet/core/tutorials/testing-with-cli\" target=\"_blank\" rel=\"noopener noreferrer\">https://docs.microsoft.com/zh-cn/dotnet/core/tutorials/testing-with-cli</a></p>\n<p>dotnet-add-reference 使用文档 <a href=\"https://docs.microsoft.com/zh-cn/dotnet/core/tools/dotnet-add-reference\" target=\"_blank\" rel=\"noopener noreferrer\">https://docs.microsoft.com/zh-cn/dotnet/core/tools/dotnet-add-reference</a></p>\n<p>总结如下命令行</p>\n<div><pre><code>PS dotnetcore-examples&gt; mkdir console-news-types\nPS dotnetcore-examples&gt; cd .\\console-news-types\\ \nPS dotnetcore-examples\\console-news-types&gt; mkdir src\n\nPS dotnetcore-examples\\console-news-types&gt; mkdir test\nPS dotnetcore-examples\\console-news-types&gt; ls\nMode                 LastWriteTime         Length Name\n----                 -------------         ------ ----\nd----           2019/6/27    20:51                src\nd----           2019/6/27    20:51                test\n\nPS dotnetcore-examples\\console-news-types&gt; cd .\\src\\\nPS dotnetcore-examples\\console-news-types\\src&gt; dotnet new console -n NewTypes\nPS dotnetcore-examples\\console-news-types\\src&gt; cd ..\\test\\  \nPS dotnetcore-examples\\console-news-types\\test&gt; dotnet new xunit -n NewTypesTests \nPS dotnetcore-examples\\console-news-types\\test&gt; cd .\\NewTypesTests\\\nPS dotnetcore-examples\\console-news-types\\test\\NewTypesTests&gt; dotnet add reference ../../src/NewTypes/NewTypes.csproj\n#Reference `..\\..\\src\\NewTypes\\NewTypes.csproj` added to the project.\n</code></pre><div aria-hidden=\"true\"><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br></div></div><p>其他的代码就看上面的二个链接，把代码复制进去，代码很简单，一个接口，二个实现，main函数调用，测试项目引用控制台项目，</p>\n<p>先cd 到src\\NewTypes目录中，执行 <strong>dotnet run</strong></p>\n<div><pre><code>PS dotnetcore-examples\\console-news-types\\src\\NewTypes&gt; dotnet run\nWoof!\nMeow!\n</code></pre><div aria-hidden=\"true\"><span>1</span><br><span>2</span><br><span>3</span><br></div></div><p>先cd 到test\\NewTypesTests目录中，执行 <strong>dotnet test</strong>，看好代码，测试类 Assert.Equal() 是成功的，如果是Assert.NotEqual() 则Failure</p>\n<div><pre><code>PS dotnetcore-examples\\console-news-types\\test\\NewTypesTests&gt; dotnet test\ndotnetcore-examples\\console-news-types\\test\\NewTypesTests\\bin\\Debug\\netcoreapp3.0\\NewTypesTests.dll 的测试运行(.NETCoreApp,Version=v3.0)\nMicrosoft (R) 测试执行命令行工具版本 16.0.1\n版权所有 (C) Microsoft Corporation。保留所有权利。\n\n正在启动测试执行，请稍候...\n\n总测试: 2。已通过: 2。失败: 0。已跳过: 0。\n测试运行成功。\n测试执行时间: 1.5134 秒\n</code></pre><div aria-hidden=\"true\"><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br></div></div>",
      "date_published": "2020-04-15T17:09:07.000Z",
      "date_modified": "2022-06-02T11:44:24.000Z",
      "authors": [],
      "tags": []
    },
    {
      "title": "RESTful+FreeSql+AutoMapper",
      "url": "https://igeekfan.cn/igeekfan-docs/dotnetcore/examples/freesql-sample-blog-restful-use-automapper.html",
      "id": "https://igeekfan.cn/igeekfan-docs/dotnetcore/examples/freesql-sample-blog-restful-use-automapper.html",
      "summary": " RESTful+FreeSql+AutoMapper\n 文章概述\n本文使用ASP .NET Core的WEB API，构建一个RESTful风格的接口，使用Freesql访问MySQL数据库，实现二个表的简单博客，并集成AutoMapper。\n接上一篇\n\n\nFreeSql在ASP.NTE Core WebApi中如何使用的教程\n\n\n项目源码 https://github.com/luoyunchong/dotnetcore-examples/tree/master/aspnetcore-freesql\n\n\n",
      "content_html": "<h1 id=\"restful-freesql-automapper\" tabindex=\"-1\"> RESTful+FreeSql+AutoMapper</h1>\n<h2 id=\"文章概述\" tabindex=\"-1\"> 文章概述</h2>\n<p>本文使用ASP .NET Core的WEB API，构建一个RESTful风格的接口，使用Freesql访问MySQL数据库，实现二个表的简单博客，并集成AutoMapper。</p>\n<p>接上一篇</p>\n<ul>\n<li>\n<p><a href=\"http://blog.igeekfan.cn/2019/06/30/re-start/FreeSql-aspnetcore-how-to-use/\" target=\"_blank\" rel=\"noopener noreferrer\">FreeSql在ASP.NTE Core WebApi中如何使用的教程</a></p>\n</li>\n<li>\n<p>项目源码 <a href=\"https://github.com/luoyunchong/dotnetcore-examples/tree/master/aspnetcore-freesql\" target=\"_blank\" rel=\"noopener noreferrer\">https://github.com/luoyunchong/dotnetcore-examples/tree/master/aspnetcore-freesql</a></p>\n</li>\n</ul>\n\n<h2 id=\"dto作用\" tabindex=\"-1\"> Dto作用</h2>\n<p>当我们使用RESTful提供接口时，比如创建一个博客，修改一下博客内容时，他们的参数是有区别的。良好的设计应该是</p>\n<p>创建一个博客</p>\n<div><pre><code>POST /api/blog\ndata<span>:</span>\n<span>{</span>\n  <span>\"title\"</span><span>:</span> <span>\"string\"</span><span>,</span>\n  <span>\"content\"</span><span>:</span> <span>\"string\"</span>\n<span>}</span>\n</code></pre><div aria-hidden=\"true\"><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br></div></div><p>修改一个博客内容</p>\n<div><pre><code>PUT /api/blog\ndata<span>:</span>\n<span>{</span>\n  <span>\"blogId\"</span><span>:</span><span>\"int\"</span><span>,</span>\n  <span>\"title\"</span><span>:</span> <span>\"string\"</span><span>,</span>\n  <span>\"content\"</span><span>:</span> <span>\"string\"</span>\n<span>}</span>\n</code></pre><div aria-hidden=\"true\"><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br></div></div><p>但一个blog 实体如下</p>\n<div><pre><code>    <span>public</span> <span>class</span> <span>Blog</span>\n    <span>{</span>\n        <span>[</span><span><span>Column</span><span><span>(</span>IsIdentity <span>=</span> <span>true</span><span>,</span> IsPrimary <span>=</span> <span>true</span><span>)</span></span></span><span>]</span>\n        <span>public</span> <span><span>int</span></span> BlogId <span>{</span> <span>get</span><span>;</span> <span>set</span><span>;</span> <span>}</span>\n        <span>public</span> <span><span>string</span></span> Title <span>{</span> <span>get</span><span>;</span> <span>set</span><span>;</span> <span>}</span>\n        <span>public</span> <span><span>string</span></span> Content <span>{</span> <span>get</span><span>;</span> <span>set</span><span>;</span> <span>}</span>\n        <span>public</span> <span>DateTime</span> CreateTime <span>{</span> <span>get</span><span>;</span> <span>set</span><span>;</span> <span>}</span>\n        <span>public</span> <span>virtual</span> <span>List<span>&lt;</span>Post<span>></span></span> Posts <span>{</span> <span>get</span><span>;</span> <span>set</span><span>;</span> <span>}</span>\n    <span>}</span>\n</code></pre><div aria-hidden=\"true\"><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br></div></div><p>如果我们以Blog作为controllers中的参数时</p>\n<div><pre><code>       <span>// POST api/blog</span>\n        <span>[</span>HttpPost<span>]</span>\n        <span>public</span> <span><span>void</span></span> <span>Post</span><span>(</span><span>[</span><span><span>FromBody</span></span><span>]</span> <span>Blog</span> blog<span>)</span>\n        <span>{</span>\n            blog<span>.</span>CreateTime<span>=</span>DateTime<span>.</span>Now<span>;</span>\n            _fsql<span>.</span><span><span>Insert</span><span><span>&lt;</span>Blog<span>></span></span></span><span>(</span>blog<span>)</span><span>.</span><span>ExecuteAffrows</span><span>(</span><span>)</span><span>;</span>\n        <span>}</span>\n</code></pre><div aria-hidden=\"true\"><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br></div></div><p>这时修改swagger显示的默认参数是</p>\n<div><pre><code><span>{</span>\n  <span>\"blogId\"</span><span>:</span> <span>0</span><span>,</span>\n  <span>\"title\"</span><span>:</span> <span>\"string\"</span><span>,</span>\n  <span>\"content\"</span><span>:</span> <span>\"string\"</span><span>,</span>\n  <span>\"createTime\"</span><span>:</span> <span>\"2019-06-30T07:33:05.524Z\"</span><span>,</span>\n  <span>\"posts\"</span><span>:</span> <span>[</span>\n    <span>{</span>\n      <span>\"postId\"</span><span>:</span> <span>0</span><span>,</span>\n      <span>\"replyContent\"</span><span>:</span> <span>\"string\"</span><span>,</span>\n      <span>\"blogId\"</span><span>:</span> <span>0</span><span>,</span>\n      <span>\"replyTime\"</span><span>:</span> <span>\"2019-06-30T07:33:05.524Z\"</span>\n    <span>}</span>\n  <span>]</span>\n<span>}</span>\n</code></pre><div aria-hidden=\"true\"><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br></div></div><p>如果我们不传递createTime，会出现异常，应该createTime是DateTime，不能为null，只有DateTime?才能为null,有?为可空类型。</p>\n<p>所以我们应该为POST方式传递过来时，新建一个实体类，我们称之为DTO(Data Transfer Object)，即数据传输对象，因为createTime即使传递，后端为他赋了值，前台传了也无效。有了DTO，这样可让前端清楚他们应该传递的参数，而不会出现没有作用的参数。</p>\n<p>在根目录创建Models/Blogs文件夹，在Blogs文件夹中创建</p>\n<h3 id=\"createblogdto-cs\" tabindex=\"-1\"> CreateBlogDto.cs</h3>\n<div><pre><code><span>namespace</span> <span>RESTful<span>.</span>FreeSql<span>.</span>Models<span>.</span>Blogs</span>\n<span>{</span>\n    <span>public</span> <span>class</span> <span>CreateBlogDto</span>\n    <span>{</span>\n        <span>public</span> <span><span>string</span></span> Title <span>{</span> <span>get</span><span>;</span> <span>set</span><span>;</span> <span>}</span>\n        <span>public</span> <span><span>string</span></span> Content <span>{</span> <span>get</span><span>;</span> <span>set</span><span>;</span> <span>}</span>\n\n    <span>}</span>\n<span>}</span>\n\n</code></pre><div aria-hidden=\"true\"><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br></div></div><h3 id=\"updateblogdto-cs\" tabindex=\"-1\"> UpdateBlogDto.cs</h3>\n<div><pre><code><span>namespace</span> <span>RESTful<span>.</span>FreeSql<span>.</span>Models<span>.</span>Blogs</span>\n<span>{</span>\n    <span>public</span> <span>class</span> <span>UpdateBlogDto</span>\n    <span>{</span>\n        <span>public</span> <span><span>int</span></span> BlogId <span>{</span> <span>get</span><span>;</span> <span>set</span><span>;</span> <span>}</span>\n        <span>public</span> <span><span>string</span></span> Title <span>{</span> <span>get</span><span>;</span> <span>set</span><span>;</span> <span>}</span>\n        <span>public</span> <span><span>string</span></span> Content <span>{</span> <span>get</span><span>;</span> <span>set</span><span>;</span> <span>}</span>\n    <span>}</span>\n<span>}</span>\n\n\n</code></pre><div aria-hidden=\"true\"><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br></div></div><p>有了Dto后，我们会发现了新的问题，往数据库插入时，往往使用了一些ORM,他们只支持原本的实体类，如Blog，Post。但不支持CreateBlogDto、UpdateBlogDto,我们可以手动，将一个类的值，赋值给另一个类。\n如</p>\n<div><pre><code>    <span>CreateBlogDto</span> createBlogDto <span>=</span> <span>new</span> <span>CreateBlogDto</span><span>(</span><span>)</span>\n    <span>{</span>\n        Title <span>=</span> <span>\"我是title\"</span><span>,</span>\n        Content <span>=</span> <span>\"我是content\"</span>\n    <span>}</span><span>;</span>\n\n    <span>Blog</span> newBlog<span>=</span><span>new</span> <span>Blog</span><span>(</span><span>)</span>\n    <span>{</span>\n        Title <span>=</span> createBlogDto<span>.</span>Title<span>,</span>\n        Content <span>=</span> createBlogDto<span>.</span>Content\n    <span>}</span><span>;</span>\n</code></pre><div aria-hidden=\"true\"><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br></div></div><p>现在只是非常简单的二个属性，我们还能忍受，但如果是十个属性、而且有着大量的类与类之间的转换呢。这时修改AutoMapper就闪亮登场了。</p>\n<h2 id=\"automapper\" tabindex=\"-1\"> AutoMapper</h2>\n<blockquote>\n<p>作用：A convention-based object-object mapper.</p>\n</blockquote>\n<p>我们是在ASP .NET Core下使用AutoMapper <a href=\"https://automapper.readthedocs.io/en/latest/Dependency-injection.html\" target=\"_blank\" rel=\"noopener noreferrer\">官网介绍，如何依赖注入中使用</a></p>\n<h3 id=\"setup\" tabindex=\"-1\"> Setup</h3>\n<p>先cd到dotnetcore-examples\\aspnetcore-freesql\\RESTful.FreeSql目录</p>\n<div><pre><code>PS &gt; dotnet add package AutoMapper\nPS &gt; dotnet add package AutoMapper.Extensions.Microsoft.DependencyInjection --version 6.1.1\n</code></pre><div aria-hidden=\"true\"><span>1</span><br><span>2</span><br></div></div><p>在StartUp.cs中的ConfigureServices配置如下</p>\n<div><pre><code>   public void ConfigureServices(IServiceCollection services)\n    {\n        // .... Ignore code before this\n        \n        //AddAutoMapper会去找继承Profile的类，\n        services.AddAutoMapper(AppDomain.CurrentDomain.GetAssemblies());\n\n        // .... Ignore code after this\n    }\n</code></pre><div aria-hidden=\"true\"><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br></div></div><h3 id=\"adding-profiles\" tabindex=\"-1\"> Adding Profiles</h3>\n<p>AutoMapper/BlogProfile.cs</p>\n<div><pre><code><span>using</span> <span>AutoMapper</span><span>;</span>\n<span>using</span> <span>RESTful<span>.</span>FreeSql<span>.</span>Domain</span><span>;</span>\n<span>using</span> <span>RESTful<span>.</span>FreeSql<span>.</span>Models<span>.</span>Blogs</span><span>;</span>\n\n<span>namespace</span> <span>RESTful<span>.</span>FreeSql<span>.</span>AutoMapper</span>\n<span>{</span>\n    <span>public</span> <span>class</span> <span>BlogProfile</span> <span>:</span> <span><span>Profile</span></span>\n    <span>{</span>\n        <span>public</span> <span>BlogProfile</span><span>(</span><span>)</span> \n        <span>{</span>\n            <span><span>CreateMap</span><span><span>&lt;</span>CreateBlogDto<span>,</span> Blog<span>></span></span></span><span>(</span><span>)</span><span>;</span>\n            <span><span>CreateMap</span><span><span>&lt;</span>UpdateBlogDto<span>,</span> Blog<span>></span></span></span><span>(</span><span>)</span><span>;</span>\n        <span>}</span>\n    <span>}</span>\n<span>}</span>\n</code></pre><div aria-hidden=\"true\"><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br></div></div><p>AutoMapper/BlogProfile.cs</p>\n<div><pre><code><span>using</span> <span>AutoMapper</span><span>;</span>\n<span>using</span> <span>RESTful<span>.</span>FreeSql<span>.</span>Domain</span><span>;</span>\n<span>using</span> <span>RESTful<span>.</span>FreeSql<span>.</span>Models<span>.</span>Blogs</span><span>;</span>\n\n<span>namespace</span> <span>RESTful<span>.</span>FreeSql<span>.</span>AutoMapper</span>\n<span>{</span>\n    <span>public</span> <span>class</span> <span>PostProfile</span> <span>:</span> <span><span>Profile</span></span>\n    <span>{</span>\n        <span>public</span> <span>PostProfile</span><span>(</span><span>)</span>\n        <span>{</span>\n            <span><span>CreateMap</span><span><span>&lt;</span>CreatePostDto<span>,</span>Post<span>></span></span></span><span>(</span><span>)</span><span>;</span>\n        <span>}</span>\n    <span>}</span>\n<span>}</span>\n</code></pre><div aria-hidden=\"true\"><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br></div></div><p>Models/Posts/SearchPostDto.cs根据博客id，得到分页的评论时，集成分页类</p>\n<div><pre><code><span>using</span> <span>RESTful<span>.</span>FreeSql<span>.</span>Web</span><span>;</span>\n\n<span>namespace</span> <span>RESTful<span>.</span>FreeSql<span>.</span>Models<span>.</span>Posts</span>\n<span>{</span>\n    <span>public</span> <span>class</span> <span>SearchPostDto</span><span>:</span><span><span>PageDto</span></span>\n    <span>{</span>\n        <span>public</span> <span><span>int</span></span> BlogId <span>{</span> <span>get</span><span>;</span> <span>set</span><span>;</span> <span>}</span>\n    <span>}</span>\n<span>}</span>\n\n</code></pre><div aria-hidden=\"true\"><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br></div></div><p>Controlers/BlogController.cs文件中，注入IMapper,</p>\n<div><pre><code><span>using</span> <span>AutoMapper</span><span>;</span>\n<span>using</span> <span>Microsoft<span>.</span>AspNetCore<span>.</span>Mvc</span><span>;</span>\n<span>using</span> <span>System</span><span>;</span>\n<span>using</span> <span>System<span>.</span>Collections<span>.</span>Generic</span><span>;</span>\n<span>using</span> <span>RESTful<span>.</span>FreeSql<span>.</span>Domain</span><span>;</span>\n<span>using</span> <span>RESTful<span>.</span>FreeSql<span>.</span>Models<span>.</span>Blogs</span><span>;</span>\n<span>using</span> <span>RESTful<span>.</span>FreeSql<span>.</span>Web</span><span>;</span>\n\n<span>namespace</span> <span>RESTful<span>.</span>FreeSql<span>.</span>Controllers</span>\n<span>{</span>\n    <span>[</span><span><span>Route</span><span><span>(</span><span>\"api/[controller]\"</span><span>)</span></span></span><span>]</span>\n    <span>[</span><span><span>ApiController</span></span><span>]</span>\n    <span>public</span> <span>class</span> <span>BlogController</span> <span>:</span> <span><span>ControllerBase</span></span>\n    <span>{</span>\n        <span>// GET api/Blog</span>\n\n        <span>private</span> <span>readonly</span> <span>IFreeSql</span> _fsql<span>;</span>\n        <span>private</span> <span>readonly</span> <span>IMapper</span> _mapper<span>;</span>\n        <span>public</span> <span>BlogController</span><span>(</span><span>IFreeSql</span> fsql<span>,</span> <span>IMapper</span> mapper<span>)</span>\n        <span>{</span>\n            _fsql <span>=</span> fsql<span>;</span>\n            _mapper <span>=</span> mapper<span>;</span>\n        <span>}</span>\n\n        <span>/// <span><span><span>&lt;</span>summary</span><span>></span></span></span>\n        <span>/// 博客列表页 </span>\n        <span>/// <span><span><span>&lt;/</span>summary</span><span>></span></span></span>\n        <span>/// <span><span><span>&lt;</span>param</span> <span>name</span><span><span>=</span><span>\"</span>pageDto<span>\"</span></span><span>></span></span>分页参数<span><span><span>&lt;/</span>param</span><span>></span></span></span>\n        <span>/// <span><span><span>&lt;</span>returns</span><span>></span></span><span><span><span>&lt;/</span>returns</span><span>></span></span></span>\n        <span>[</span>HttpGet<span>]</span>\n        <span>public</span> <span>ActionResult<span>&lt;</span>PagedResultDto<span>&lt;</span>Blog<span>></span><span>></span></span> <span>Get</span><span>(</span><span>[</span><span><span>FromQuery</span></span><span>]</span><span>PageDto</span> pageDto<span>)</span>\n        <span>{</span>\n            <span>List<span>&lt;</span>Blog<span>></span></span> blogs <span>=</span> _fsql<span>.</span><span><span>Select</span><span><span>&lt;</span>Blog<span>></span></span></span><span>(</span><span>)</span><span>.</span><span>OrderByDescending</span><span>(</span>r <span>=></span> r<span>.</span>CreateTime<span>)</span><span>.</span><span>Page</span><span>(</span>pageDto<span>.</span>PageNumber<span>,</span> pageDto<span>.</span>PageSize<span>)</span><span>.</span><span>ToList</span><span>(</span><span>)</span><span>;</span>\n            <span><span>long</span></span> count <span>=</span> _fsql<span>.</span><span><span>Select</span><span><span>&lt;</span>Blog<span>></span></span></span><span>(</span><span>)</span><span>.</span><span>Count</span><span>(</span><span>)</span><span>;</span>\n            <span>return</span> <span>new</span> <span>PagedResultDto<span>&lt;</span>Blog<span>></span></span><span>(</span>count<span>,</span> blogs<span>)</span><span>;</span>\n        <span>}</span>\n\n        <span>// GET api/blog/5</span>\n        <span>[</span><span>HttpGet</span><span>(</span><span>\"{id}\"</span><span>)</span><span>]</span>\n        <span>public</span> <span>ActionResult<span>&lt;</span>Blog<span>></span></span> <span>Get</span><span>(</span><span><span>int</span></span> id<span>)</span>\n        <span>{</span>\n            <span>// eg.1 return _fsql.Select&lt;Blog>().Where(a => a.Id == id).ToOne();</span>\n            <span>// eg.2</span>\n            <span>return</span> _fsql<span>.</span><span><span>Select</span><span><span>&lt;</span>Blog<span>></span></span></span><span>(</span>id<span>)</span><span>.</span><span>ToOne</span><span>(</span><span>)</span><span>;</span>\n        <span>}</span>\n\n        <span>// POST api/blog</span>\n        <span>[</span>HttpPost<span>]</span>\n        <span>public</span> <span><span>void</span></span> <span>Post</span><span>(</span><span>[</span><span><span>FromBody</span></span><span>]</span> <span>CreateBlogDto</span> createBlogDto<span>)</span>\n        <span>{</span>\n            <span>Blog</span> blog <span>=</span> _mapper<span>.</span><span><span>Map</span><span><span>&lt;</span>Blog<span>></span></span></span><span>(</span>createBlogDto<span>)</span><span>;</span>\n            blog<span>.</span>CreateTime <span>=</span> DateTime<span>.</span>Now<span>;</span>\n            _fsql<span>.</span><span><span>Insert</span><span><span>&lt;</span>Blog<span>></span></span></span><span>(</span>blog<span>)</span><span>.</span><span>ExecuteAffrows</span><span>(</span><span>)</span><span>;</span>\n        <span>}</span>\n\n        <span>// PUT api/blog</span>\n        <span>[</span>HttpPut<span>]</span>\n        <span>public</span> <span><span>void</span></span> <span>Put</span><span>(</span><span>[</span><span><span>FromBody</span></span><span>]</span> <span>UpdateBlogDto</span> updateBlogDto<span>)</span>\n        <span>{</span>\n\n            <span>//eg.1 更新指定列</span>\n            <span>//_fsql.Update&lt;Blog>(updateBlogDto.BlogId).Set(a => new Blog()</span>\n            <span>//{</span>\n            <span>//    Title = updateBlogDto.Title,</span>\n            <span>//    Content = updateBlogDto.Content</span>\n            <span>//}).ExecuteAffrows();</span>\n\n            <span>//eg.2将这个实体更新到数据库中。当更新时，会把其他列的值，如CreateTime也更新掉。</span>\n            <span>//使用IgnoreColumns可忽略某一些列。</span>\n\n            <span>Blog</span> blog <span>=</span> _mapper<span>.</span><span><span>Map</span><span><span>&lt;</span>Blog<span>></span></span></span><span>(</span>updateBlogDto<span>)</span><span>;</span>\n            _fsql<span>.</span><span><span>Update</span><span><span>&lt;</span>Blog<span>></span></span></span><span>(</span><span>)</span><span>.</span><span>SetSource</span><span>(</span>blog<span>)</span><span>.</span><span>IgnoreColumns</span><span>(</span>r <span>=></span> r<span>.</span>CreateTime<span>)</span><span>.</span><span>ExecuteAffrows</span><span>(</span><span>)</span><span>;</span>\n        <span>}</span>\n\n        <span>// DELETE api/blog/5</span>\n        <span>[</span><span>HttpDelete</span><span>(</span><span>\"{id}\"</span><span>)</span><span>]</span>\n        <span>public</span> <span><span>void</span></span> <span>Delete</span><span>(</span><span><span>int</span></span> id<span>)</span>\n        <span>{</span>\n            _fsql<span>.</span><span><span>Delete</span><span><span>&lt;</span>Blog<span>></span></span></span><span>(</span><span>new</span> <span>{</span> BlogId <span>=</span> id <span>}</span><span>)</span><span>.</span><span>ExecuteAffrows</span><span>(</span><span>)</span><span>;</span>\n        <span>}</span>\n    <span>}</span>\n<span>}</span>\n</code></pre><div aria-hidden=\"true\"><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br><span>24</span><br><span>25</span><br><span>26</span><br><span>27</span><br><span>28</span><br><span>29</span><br><span>30</span><br><span>31</span><br><span>32</span><br><span>33</span><br><span>34</span><br><span>35</span><br><span>36</span><br><span>37</span><br><span>38</span><br><span>39</span><br><span>40</span><br><span>41</span><br><span>42</span><br><span>43</span><br><span>44</span><br><span>45</span><br><span>46</span><br><span>47</span><br><span>48</span><br><span>49</span><br><span>50</span><br><span>51</span><br><span>52</span><br><span>53</span><br><span>54</span><br><span>55</span><br><span>56</span><br><span>57</span><br><span>58</span><br><span>59</span><br><span>60</span><br><span>61</span><br><span>62</span><br><span>63</span><br><span>64</span><br><span>65</span><br><span>66</span><br><span>67</span><br><span>68</span><br><span>69</span><br><span>70</span><br><span>71</span><br><span>72</span><br><span>73</span><br><span>74</span><br><span>75</span><br><span>76</span><br><span>77</span><br><span>78</span><br><span>79</span><br><span>80</span><br><span>81</span><br><span>82</span><br></div></div><p>Controlers/BlogController.cs文件中，注入IMapper,</p>\n<div><pre><code><span>using</span> <span>FreeSql</span><span>;</span>\n<span>using</span> <span>Microsoft<span>.</span>AspNetCore<span>.</span>Mvc</span><span>;</span>\n<span>using</span> <span>System</span><span>;</span>\n<span>using</span> <span>System<span>.</span>Collections<span>.</span>Generic</span><span>;</span>\n<span>using</span> <span>System<span>.</span>Threading<span>.</span>Tasks</span><span>;</span>\n<span>using</span> <span>AutoMapper</span><span>;</span>\n<span>using</span> <span>RESTful<span>.</span>FreeSql<span>.</span>Domain</span><span>;</span>\n<span>using</span> <span>RESTful<span>.</span>FreeSql<span>.</span>Models<span>.</span>Posts</span><span>;</span>\n<span>using</span> <span>RESTful<span>.</span>FreeSql<span>.</span>Web</span><span>;</span>\n\n<span>namespace</span> <span>RESTful<span>.</span>FreeSql<span>.</span>Controllers</span>\n<span>{</span>\n    <span>[</span><span><span>Route</span><span><span>(</span><span>\"api/[controller]\"</span><span>)</span></span></span><span>]</span>\n    <span>[</span><span><span>ApiController</span></span><span>]</span>\n    <span>public</span> <span>class</span> <span>PostController</span> <span>:</span> <span><span>ControllerBase</span></span>\n    <span>{</span>\n        <span>// GET: api/Post</span>\n        <span>private</span> <span>readonly</span> <span>IFreeSql</span> _fsql<span>;</span>\n        <span>private</span> <span>readonly</span> <span>IMapper</span> _mapper<span>;</span>\n        <span>public</span> <span>PostController</span><span>(</span><span>IFreeSql</span> fsql<span>,</span> <span>IMapper</span> mapper<span>)</span>\n        <span>{</span>\n            _fsql <span>=</span> fsql<span>;</span>\n            _mapper <span>=</span> mapper<span>;</span>\n        <span>}</span>\n\n        <span>/// <span><span><span>&lt;</span>summary</span><span>></span></span></span>\n        <span>/// 根据博客id、分页条件查询评论信息</span>\n        <span>/// <span><span><span>&lt;/</span>summary</span><span>></span></span></span>\n        <span>/// <span><span><span>&lt;</span>param</span> <span>name</span><span><span>=</span><span>\"</span>searchPostDto<span>\"</span></span><span>></span></span><span><span><span>&lt;/</span>param</span><span>></span></span></span>\n        <span>/// <span><span><span>&lt;</span>returns</span><span>></span></span><span><span><span>&lt;/</span>returns</span><span>></span></span></span>\n        <span>[</span>HttpGet<span>]</span>\n        <span>public</span> <span>PagedResultDto<span>&lt;</span>Post<span>></span></span> <span>Get</span><span>(</span><span>SearchPostDto</span> searchPostDto<span>)</span>\n        <span>{</span>\n            <span>ISelect<span>&lt;</span>Post<span>></span></span> selectPost <span>=</span> _fsql\n                <span>.</span><span><span>Select</span><span><span>&lt;</span>Post<span>></span></span></span><span>(</span><span>)</span>\n                <span>.</span><span>Where</span><span>(</span>r <span>=></span> r<span>.</span>BlogId <span>==</span> searchPostDto<span>.</span>BlogId<span>)</span><span>;</span>\n\n            <span>List<span>&lt;</span>Post<span>></span></span> posts <span>=</span> selectPost<span>.</span><span>OrderByDescending</span><span>(</span>r <span>=></span> r<span>.</span>ReplyTime<span>)</span>\n                <span>.</span><span>Page</span><span>(</span>searchPostDto<span>.</span>PageNumber<span>,</span> searchPostDto<span>.</span>PageSize<span>)</span>\n                <span>.</span><span>ToList</span><span>(</span><span>)</span><span>;</span>\n\n            <span><span>long</span></span> total <span>=</span> selectPost<span>.</span><span>Count</span><span>(</span><span>)</span><span>;</span>\n\n            <span>return</span> <span>new</span> <span>PagedResultDto<span>&lt;</span>Post<span>></span></span><span>(</span>total<span>,</span> posts<span>)</span><span>;</span>\n        <span>}</span>\n\n        <span>// GET: api/Post/5</span>\n        <span>[</span><span>HttpGet</span><span>(</span><span>\"{id}\"</span><span>,</span> Name <span>=</span> <span>\"Get\"</span><span>)</span><span>]</span>\n        <span>public</span> <span>Post</span> <span>Get</span><span>(</span><span><span>int</span></span> id<span>)</span>\n        <span>{</span>\n            <span>return</span> _fsql<span>.</span><span><span>Select</span><span><span>&lt;</span>Post<span>></span></span></span><span>(</span><span>)</span><span>.</span><span>Where</span><span>(</span>a <span>=></span> a<span>.</span>PostId <span>==</span> id<span>)</span><span>.</span><span>ToOne</span><span>(</span><span>)</span><span>;</span>\n        <span>}</span>\n\n        <span>// POST: api/Post</span>\n        <span>[</span>HttpPost<span>]</span>\n        <span>public</span> <span><span>void</span></span> <span>Post</span><span>(</span><span>[</span><span><span>FromBody</span></span><span>]</span> <span>CreatePostDto</span> createPostDto<span>)</span>\n        <span>{</span>\n            <span>Post</span> post <span>=</span> _mapper<span>.</span><span><span>Map</span><span><span>&lt;</span>Post<span>></span></span></span><span>(</span>createPostDto<span>)</span><span>;</span>\n            post<span>.</span>ReplyTime <span>=</span> DateTime<span>.</span>Now<span>;</span>\n            _fsql<span>.</span><span>Insert</span><span>(</span>post<span>)</span><span>.</span><span>ExecuteAffrows</span><span>(</span><span>)</span><span>;</span>\n        <span>}</span>\n\n\n        <span>// DELETE: api/Post/</span>\n        <span>[</span><span><span>HttpDelete</span><span><span>(</span><span>\"{id}\"</span><span>)</span></span></span><span>]</span>\n        <span>public</span> <span>async</span> <span>Task</span> <span>DeleteAsync</span><span>(</span><span><span>int</span></span> id<span>)</span>\n        <span>{</span>\n            <span>await</span> _fsql<span>.</span><span><span>Delete</span><span><span>&lt;</span>Post<span>></span></span></span><span>(</span><span>new</span> <span>Post</span> <span>{</span> PostId <span>=</span> id <span>}</span><span>)</span><span>.</span><span>ExecuteAffrowsAsync</span><span>(</span><span>)</span><span>;</span>\n        <span>}</span>\n    <span>}</span>\n<span>}</span>\n\n</code></pre><div aria-hidden=\"true\"><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br><span>24</span><br><span>25</span><br><span>26</span><br><span>27</span><br><span>28</span><br><span>29</span><br><span>30</span><br><span>31</span><br><span>32</span><br><span>33</span><br><span>34</span><br><span>35</span><br><span>36</span><br><span>37</span><br><span>38</span><br><span>39</span><br><span>40</span><br><span>41</span><br><span>42</span><br><span>43</span><br><span>44</span><br><span>45</span><br><span>46</span><br><span>47</span><br><span>48</span><br><span>49</span><br><span>50</span><br><span>51</span><br><span>52</span><br><span>53</span><br><span>54</span><br><span>55</span><br><span>56</span><br><span>57</span><br><span>58</span><br><span>59</span><br><span>60</span><br><span>61</span><br><span>62</span><br><span>63</span><br><span>64</span><br><span>65</span><br><span>66</span><br><span>67</span><br><span>68</span><br><span>69</span><br><span>70</span><br><span>71</span><br><span>72</span><br></div></div><h3 id=\"参考\" tabindex=\"-1\"> 参考</h3>\n<ul>\n<li>建议大家先看官网 <a href=\"http://automapper.org/\" target=\"_blank\" rel=\"noopener noreferrer\">http://automapper.org/</a></li>\n<li>开源地址 <a href=\"https://github.com/AutoMapper/AutoMapper\" target=\"_blank\" rel=\"noopener noreferrer\">https://github.com/AutoMapper/AutoMapper</a></li>\n<li>Getting-started 文档 <a href=\"https://automapper.readthedocs.io/en/latest/Getting-started.html#what-is-automapper\" target=\"_blank\" rel=\"noopener noreferrer\">https://automapper.readthedocs.io/en/latest/Getting-started.html#what-is-automapper</a></li>\n</ul>\n",
      "date_published": "2020-04-15T17:09:07.000Z",
      "date_modified": "2020-05-08T15:01:00.000Z",
      "authors": [],
      "tags": []
    },
    {
      "title": "IdentityServer4",
      "url": "https://igeekfan.cn/igeekfan-docs/dotnetcore/examples/identityserver4.html",
      "id": "https://igeekfan.cn/igeekfan-docs/dotnetcore/examples/identityserver4.html",
      "content_html": "<h1 id=\"identityserver4\" tabindex=\"-1\"> IdentityServer4</h1>\n<h2 id=\"写的一些identityserver4的示例\" tabindex=\"-1\"> 写的一些IdentityServer4的示例</h2>\n<p>IdentityServer4 实现单点登录授权token验证</p>\n<h2 id=\"源码\" tabindex=\"-1\"> 源码</h2>\n<p>代码托管在GitHub上 <a href=\"https://github.com/luoyunchong/dotnetcore-examples/tree/master/aspnetcore-identityserver4\" target=\"_blank\" rel=\"noopener noreferrer\">https://github.com/luoyunchong/dotnetcore-examples/tree/master/aspnetcore-identityserver4</a></p>\n<h2 id=\"参考\" tabindex=\"-1\"> 参考</h2>\n<ul>\n<li><a href=\"https://www.cnblogs.com/edisonchou/p/identityserver4_foundation_and_quickstart_01.html\" target=\"_blank\" rel=\"noopener noreferrer\">.NET Core微服务之基于IdentityServer建立授权与验证服务</a></li>\n</ul>\n",
      "date_published": "2020-04-15T17:09:07.000Z",
      "date_modified": "2022-06-02T11:44:24.000Z",
      "authors": [],
      "tags": []
    },
    {
      "title": "ImCore 即时通讯",
      "url": "https://igeekfan.cn/igeekfan-docs/dotnetcore/examples/imcore-chat.html",
      "id": "https://igeekfan.cn/igeekfan-docs/dotnetcore/examples/imcore-chat.html",
      "content_html": "<h1 id=\"imcore-即时通讯\" tabindex=\"-1\"> ImCore 即时通讯</h1>\n<h2 id=\"简介\" tabindex=\"-1\"> 简介</h2>\n<p>利用 webSocket 协议实现简易、高性能、集群即时通讯组件，支持点对点通讯、群聊通讯、上线下线事件消息等众多实用性功能。</p>\n<h2 id=\"开源地址\" tabindex=\"-1\"> 开源地址</h2>\n<p><a href=\"https://github.com/2881099/im\" target=\"_blank\" rel=\"noopener noreferrer\">https://github.com/2881099/im</a></p>\n<h2 id=\"示例\" tabindex=\"-1\"> 示例</h2>\n<p><a href=\"https://github.com/luoyunchong/dotnetcore-examples/tree/master/dotnet-core-im\" target=\"_blank\" rel=\"noopener noreferrer\">https://github.com/luoyunchong/dotnetcore-examples/tree/master/dotnet-core-im</a></p>\n<h2 id=\"演示效果\" tabindex=\"-1\"> 演示效果</h2>\n<p><img src=\"https://ae01.alicdn.com/kf/Hf8b31f05dbb94f8da565fce29f78aa78Y.png\" alt=\"https://ae01.alicdn.com/kf/Hf8b31f05dbb94f8da565fce29f78aa78Y.png\" loading=\"lazy\"></p>\n",
      "image": "https://ae01.alicdn.com/kf/Hf8b31f05dbb94f8da565fce29f78aa78Y.png",
      "date_published": "2020-04-15T17:09:07.000Z",
      "date_modified": "2022-06-02T11:44:24.000Z",
      "authors": [],
      "tags": []
    },
    {
      "title": "认证鉴权状态",
      "url": "https://igeekfan.cn/igeekfan-docs/dotnetcore/lin-cms/identityserver4-jwt.html",
      "id": "https://igeekfan.cn/igeekfan-docs/dotnetcore/lin-cms/identityserver4-jwt.html",
      "content_html": "<h1 id=\"认证鉴权状态\" tabindex=\"-1\"> 认证鉴权状态</h1>\n<p>认证分为以下情况：当前角色为管理员，该分组配置了权限，该分组未分配某一方法的权限.</p>\n<p>状态码（StatusCode):401 UnAuthorized</p>\n<table>\n<thead>\n<tr>\n<th>StatusCode</th>\n<th>含义</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>401 UnAuthorized</td>\n<td>未授权、无权限、未登录</td>\n</tr>\n<tr>\n<td>422  UNPROCESSABLE ENTITY</td>\n<td>令牌失效</td>\n</tr>\n<tr>\n<td>200</td>\n<td>访问正常</td>\n</tr>\n</tbody>\n</table>\n<ol>\n<li>未登录，不带access_token，直接请求需要登录的接口、管理员接口结果一样。</li>\n</ol>\n<p>返回结果应为：状态码：401 UNAUTHORIZED</p>\n<div><pre><code>{\n    \"error_code\": 10000,\n    \"msg\": \"认证失败，请检查请求头或者重新登陆\",\n    \"request\": \"GET  /cms/admin/authority\"\n}\n</code></pre><div aria-hidden=\"true\"><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br></div></div><ol start=\"2\">\n<li>携带access_token，但非超级管理员(admin字段为2),访问的方法为角色为超管才有权限的方法。</li>\n</ol>\n<div><pre><code>[LinCmsAuthorize(Roles = LinGroup.Administrator)]\n</code></pre><div aria-hidden=\"true\"><span>1</span><br></div></div><p>返回结果应为：：状态码：401 UNAUTHORIZED</p>\n<div><pre><code>{\n    \"error_code\": 10000,\n    \"msg\": \"只有超级管理员可操作\",\n    \"request\": \"GET  /cms/admin/authority\"\n}\n</code></pre><div aria-hidden=\"true\"><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br></div></div><ol start=\"3\">\n<li>携带access_token ，访问只需要登录的接口（/cms/user/auths）</li>\n</ol>\n<p>控制器或方法上指定 <strong>[Authorize]</strong> 或 <strong>[LinCmsAuthorize]</strong> 特性标签时，必须登录才能访问，否则返回第一种结果。</p>\n<p>返回结果应为：状态码：200</p>\n<div><pre><code>{\n    \"active\": 1,\n    \"admin\": 1,\n    \"auths\": [\n        {\n            \"信息\": [\n                {\n                    \"auth\": \"查看lin的信息\",\n                    \"module\": \"信息\"\n                }\n            ]\n        }\n    ],\n    \"avatar\": null,\n    \"create_time\": 1564372600000,\n    \"email\": \"acs@acs.com\",\n    \"group_id\": 54,\n    \"id\": 112,\n    \"nickname\": \"alan\",\n    \"update_time\": 1564487059000\n}\n</code></pre><div aria-hidden=\"true\"><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br></div></div><ol start=\"4\">\n<li>携带access_token，但此用户无访问此方法的权限（即该用户的组别未配置此权限）。</li>\n</ol>\n<p>返回结果应为：状态码：401 UNAUTHORIZED</p>\n<div><pre><code>{\n    \"error_code\": 10000,\n    \"msg\": \"权限不够，请联系超级管理员获得权限\",\n    \"request\": \"GET  /cms/log/search\"\n}\n</code></pre><div aria-hidden=\"true\"><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br></div></div><ol start=\"5\">\n<li>携带过期的access_token值\n返回结果应为：状态码：401 UNAUTHORIZED</li>\n</ol>\n<div><pre><code>{\n    \"error_code\": 10050,\n    \"msg\": \"令牌过期\",\n    \"request\": \"GET  /cms/admin/users\"\n}\n</code></pre><div aria-hidden=\"true\"><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br></div></div><ol start=\"6\">\n<li>携带不正常的access_token值，后台无法下正常解析出用户信息\n返回结果应为：状态码：422 UNPROCESSABLE ENTITY</li>\n</ol>\n<div><pre><code>{\n    \"error_code\": 10040,\n    \"msg\": \"令牌失效\",\n    \"request\": \"GET  /cms/admin/users\"\n}\n</code></pre><div aria-hidden=\"true\"><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br></div></div>",
      "date_published": "2020-04-15T17:09:07.000Z",
      "date_modified": "2022-06-02T11:44:24.000Z",
      "authors": [],
      "tags": []
    },
    {
      "title": "产品设计",
      "url": "https://igeekfan.cn/igeekfan-docs/dotnetcore/lin-cms/production-design.html",
      "id": "https://igeekfan.cn/igeekfan-docs/dotnetcore/lin-cms/production-design.html",
      "content_html": "<h1 id=\"产品设计\" tabindex=\"-1\"> 产品设计</h1>\n<h2 id=\"产品设计-评论模块的设计\" tabindex=\"-1\"> 产品设计-评论模块的设计</h2>\n<h3 id=\"_1-主题式\" tabindex=\"-1\"> 1.主题式</h3>\n<p>将评论分为二级，第一级采用时间倒序，二级按照时间正序，有助于理解上下文关系。</p>\n<p>用户操作：</p>\n<ul>\n<li><input type=\"checkbox\" checked=\"checked\" disabled=\"disabled\" id=\"task-item-0\"><label for=\"task-item-0\"> 评论随笔(内容支持超链接、emoji)</label></li>\n<li><input type=\"checkbox\" checked=\"checked\" disabled=\"disabled\" id=\"task-item-1\"><label for=\"task-item-1\">  点赞评论/取消点赞</label></li>\n<li><input type=\"checkbox\" checked=\"checked\" disabled=\"disabled\" id=\"task-item-2\"><label for=\"task-item-2\">  回复评论</label></li>\n<li><input type=\"checkbox\" checked=\"checked\" disabled=\"disabled\" id=\"task-item-3\"><label for=\"task-item-3\">  删除自己的评论</label></li>\n</ul>\n<p>运营操作：</p>\n<ul>\n<li><input type=\"checkbox\" checked=\"checked\" disabled=\"disabled\" id=\"task-item-4\"><label for=\"task-item-4\">  审核通过/拉黑评论</label></li>\n<li><input type=\"checkbox\" checked=\"checked\" disabled=\"disabled\" id=\"task-item-5\"><label for=\"task-item-5\">  删除任何评论</label></li>\n<li><input type=\"checkbox\" checked=\"checked\" disabled=\"disabled\" id=\"task-item-6\"><label for=\"task-item-6\">  拉黑后的显示逻辑。（保留当前区块、显示内容为：该评论因违规被拉黑）</label></li>\n<li>删除：（如果是二级评论，直接软删除，如果是一级评论，软删除子评论和当前评论-需要提前提醒用户）\n交互设计</li>\n<li>评论的字数长度（500）、emoji。</li>\n<li>点赞交互-动画、消息通知/推送</li>\n<li>评论区域元素，需要有明确可点击的区域，会跳转到哪个地方。</li>\n</ul>\n<h3 id=\"优化\" tabindex=\"-1\"> 优化</h3>\n<ul>\n<li>精选评论</li>\n</ul>\n<h2 id=\"排行榜见解\" tabindex=\"-1\"> 排行榜见解</h2>\n<p>排行榜从心理学上分析，主要从四个方面影响着您：<strong>寻找权威 、参与比较 、关注主流 、自我确认。</strong></p>\n<p>如何设计一个简单的排行榜呢。。</p>\n<p>在一个博客随笔中，我们设计一个3天、七天（周榜）、30天（月榜）、全部的榜单。以浏览量（权重1）、点赞量（20）、评论量（30)。权重可自己定义。</p>\n<p>1.默认取最新的随笔</p>\n<p>前台传create_time时，使用如下sql</p>\n<div><pre><code>select * from `blog_article` order by create_time desc;\n</code></pre><div aria-hidden=\"true\"><span>1</span><br></div></div><p>2.传排序方式为最近n天的热榜时。</p>\n<p>参数：THREE_DAYS_HOTTEST（三天）、WEEKLY_HOTTEST(七天）、MONTHLY_HOTTEST（一个月）、HOTTEST（全部）</p>\n<p>mysql 查询当前日期时间前三天数据</p>\n<div><pre><code>select date_sub(now() ,interval 3 day);\n</code></pre><div aria-hidden=\"true\"><span>1</span><br></div></div><p>根据权重查询</p>\n<div><pre><code>select * from `blog_article` a \nwhere a.`create_time`>(select date_sub(now() ,interval 3 day))\norder by (a.`view_hits` + a.`likes_quantity` * 20 + a.`comment_quantity` * 30) DESC, a.`create_time` DESC\n\n</code></pre><div aria-hidden=\"true\"><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br></div></div><h2 id=\"创作者中心\" tabindex=\"-1\"> 创作者中心</h2>\n<h3 id=\"用户主页\" tabindex=\"-1\"> 用户主页</h3>\n<p>统计值：阅读总数，点赞总数，关注者总数</p>\n<h3 id=\"个人设置\" tabindex=\"-1\"> 个人设置</h3>\n<p>用户信息、密码修改</p>\n<h2 id=\"更多参考\" tabindex=\"-1\"> 更多参考</h2>\n<ul>\n<li><a href=\"http://www.woshipm.com/pd/1255548.html\" target=\"_blank\" rel=\"noopener noreferrer\">万字长文深度分析：产品排行榜的设计和玩法</a></li>\n<li><a href=\"https://zhuanlan.zhihu.com/p/52322777\" target=\"_blank\" rel=\"noopener noreferrer\">想知道谁是你的最佳用户？基于Redis实现排行榜周期榜与最近N期榜</a></li>\n</ul>\n",
      "date_published": "2020-04-15T17:09:07.000Z",
      "date_modified": "2022-06-02T11:44:24.000Z",
      "authors": [],
      "tags": []
    },
    {
      "title": "全局敏感词处理",
      "url": "https://igeekfan.cn/igeekfan-docs/dotnetcore/lin-cms/stopwords.html",
      "id": "https://igeekfan.cn/igeekfan-docs/dotnetcore/lin-cms/stopwords.html",
      "content_html": "<h1 id=\"全局敏感词处理\" tabindex=\"-1\"> 全局敏感词处理</h1>\n<p>基于ToolGood.Words类库，配合敏感字的文本文件，写的API接口。</p>\n<ul>\n<li><a href=\"https://github.com/luoyunchong/dotnetcore-examples/tree/master/aspnetcore-stopwords\" target=\"_blank\" rel=\"noopener noreferrer\">https://github.com/luoyunchong/dotnetcore-examples/tree/master/aspnetcore-stopwords</a></li>\n</ul>\n<p>一共二种方式</p>\n<h2 id=\"_1-toolgood-words\" tabindex=\"-1\"> 1.ToolGood.Words</h2>\n<p>类库配合敏感库</p>\n<ul>\n<li><a href=\"https://github.com/toolgood/ToolGood.Words\" target=\"_blank\" rel=\"noopener noreferrer\">ToolGood.Words</a></li>\n</ul>\n<p>简单用法</p>\n<div><pre><code>[Fact]\npublic void IssuesTest_17()\n{\n    var illegalWordsSearch = new IllegalWordsSearch();\n    string s = \"中国|zg人|abc\";\n    illegalWordsSearch.SetKeywords(s.Split('|'));\n    var str = illegalWordsSearch.Replace(\"我是中美国人厉害中国完美ａｂｃddb好的\", '*');\n\n    Assert.Equal(\"我是中美国人厉害**完美***ddb好的\", str);\n}\n</code></pre><div aria-hidden=\"true\"><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br></div></div><p>配合敏感库文本文件，写的工具类</p>\n<p>二个文件放到wwwroot/_Illegal目录下，通过ReplaceStopWords方法调用即可对</p>\n<ul>\n<li><a href=\"https://github.com/toolgood/ToolGood.Words/blob/master/csharp/ToolGood.Words.Test/_Illegal/IllegalKeywords.txt\" target=\"_blank\" rel=\"noopener noreferrer\">https://github.com/toolgood/ToolGood.Words/blob/master/csharp/ToolGood.Words.Test/_Illegal/IllegalKeywords.txt</a></li>\n<li><a href=\"https://github.com/toolgood/ToolGood.Words/blob/master/csharp/ToolGood.Words.Test/_Illegal/IllegalUrls.txt\" target=\"_blank\" rel=\"noopener noreferrer\">https://github.com/toolgood/ToolGood.Words/blob/master/csharp/ToolGood.Words.Test/_Illegal/IllegalUrls.txt</a></li>\n</ul>\n<div><pre><code>public class ToolGoodUtils\n{\n    //敏感库只要这二个文件存在即可\n    //本地敏感库缓存-https://github.com/toolgood/ToolGood.Words/tree/master/csharp/ToolGood.Words.Test/_Illegal\n    //因为需要上传至github并同步gitee,安全起见，所以未上传至git，需要自行下载并复制\n    private const string KeywordsPath = \"wwwroot/_Illegal/IllegalKeywords.txt\";\n    private const string UrlsPath = \"wwwroot/_Illegal/IllegalUrls.txt\";\n\n    private const string InfoPath = \"wwwroot/_Illegal/IllegalInfo.txt\";\n    private const string BitPath = \"wwwroot/_Illegal/IllegalBit.iws\";\n\n    private static IllegalWordsSearch _search;\n    /// &lt;summary>\n    /// 本地敏感库,文件修改后，重新创建缓存Bit\n    /// &lt;/summary>\n    /// &lt;returns>&lt;/returns>\n    public static IllegalWordsSearch GetIllegalWordsSearch()\n    {\n        if (_search == null)\n        {\n            string ipath = Path.GetFullPath(InfoPath);\n            if (File.Exists(ipath) == false)\n            {\n                _search = CreateIllegalWordsSearch();\n            }\n            else\n            {\n                var texts = File.ReadAllText(ipath).Split('|');\n                if (new FileInfo(Path.GetFullPath(KeywordsPath)).LastWriteTime.ToString(\"yyyy-MM-dd HH:mm:ss\") !=\n                    texts[0] ||\n                    new FileInfo(Path.GetFullPath(UrlsPath)).LastWriteTime.ToString(\"yyyy-MM-dd HH:mm:ss\") !=\n                    texts[1]\n                )\n                {\n                    _search = CreateIllegalWordsSearch();\n                }\n                else\n                {\n                    var s = new IllegalWordsSearch();\n                    s.Load(Path.GetFullPath(BitPath));\n                    _search = s;\n                }\n            }\n        }\n        return _search;\n    }\n\n    private static IllegalWordsSearch CreateIllegalWordsSearch()\n    {\n        string[] words1 = File.ReadAllLines(Path.GetFullPath(KeywordsPath), Encoding.UTF8);\n        string[] words2 = File.ReadAllLines(Path.GetFullPath(UrlsPath), Encoding.UTF8);\n        var words = new List&lt;string>();\n        foreach (var item in words1)\n        {\n            words.Add(item.Trim());\n        }\n        foreach (var item in words2)\n        {\n            words.Add(item.Trim());\n        }\n\n        var search = new IllegalWordsSearch();\n        search.SetKeywords(words);\n\n        search.Save(Path.GetFullPath(BitPath));\n\n        var text = new FileInfo(Path.GetFullPath(KeywordsPath)).LastWriteTime.ToString(\"yyyy-MM-dd HH:mm:ss\") + \"|\"+ new FileInfo(Path.GetFullPath(UrlsPath)).LastWriteTime.ToString(\"yyyy-MM-dd HH:mm:ss\");\n        File.WriteAllText(Path.GetFullPath(InfoPath), text);\n\n        return search;\n    }\n}\n</code></pre><div aria-hidden=\"true\"><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br><span>24</span><br><span>25</span><br><span>26</span><br><span>27</span><br><span>28</span><br><span>29</span><br><span>30</span><br><span>31</span><br><span>32</span><br><span>33</span><br><span>34</span><br><span>35</span><br><span>36</span><br><span>37</span><br><span>38</span><br><span>39</span><br><span>40</span><br><span>41</span><br><span>42</span><br><span>43</span><br><span>44</span><br><span>45</span><br><span>46</span><br><span>47</span><br><span>48</span><br><span>49</span><br><span>50</span><br><span>51</span><br><span>52</span><br><span>53</span><br><span>54</span><br><span>55</span><br><span>56</span><br><span>57</span><br><span>58</span><br><span>59</span><br><span>60</span><br><span>61</span><br><span>62</span><br><span>63</span><br><span>64</span><br><span>65</span><br><span>66</span><br><span>67</span><br><span>68</span><br><span>69</span><br><span>70</span><br><span>71</span><br><span>72</span><br></div></div><h2 id=\"_2-循环使用replace\" tabindex=\"-1\"> 2. 循环使用Replace</h2>\n<p>方案：通过维护敏感库，循环replace\n大佬分享给我的，稍微改成了从文件中获取敏感字。</p>\n<div><pre><code>public static class StopWords\n{\n\n    static readonly ConcurrentDictionary&lt;string, bool> FunNlpDataSensitive = new ConcurrentDictionary&lt;string, bool>();\n    static readonly ConcurrentDictionary&lt;int, string> ReplaceNewValue = new ConcurrentDictionary&lt;int, string>();\n\n    private const string KeywordsPath = \"wwwroot/_Illegal/IllegalKeywords.txt\";\n    private const string UrlsPath = \"wwwroot/_Illegal/IllegalUrls.txt\";\n\n\n    static StopWords()\n    {\n        LoadDataFromFile();\n    }\n\n    public static void LoadDataFromFile()\n    {\n        string words1 = File.ReadAllText(Path.GetFullPath(KeywordsPath), Encoding.UTF8);\n        string words2 = File.ReadAllText(Path.GetFullPath(UrlsPath), Encoding.UTF8);\n        LoadDataFromText(words1);\n        LoadDataFromText(words2);\n    }\n\n\n    public static void LoadDataFromText(string text)\n    {\n        int oldcount = FunNlpDataSensitive.Count;\n        foreach (string wd in text.Split('\\n'))\n        {\n            string keykey = wd.Trim().Trim('\\r', '\\n').Trim();\n            if (string.IsNullOrEmpty(keykey)) continue;\n            FunNlpDataSensitive.TryAdd(keykey, true);\n            if (ReplaceNewValue.ContainsKey(keykey.Length) == false)\n                ReplaceNewValue.TryAdd(keykey.Length, \"\".PadRight(keykey.Length, '*'));\n        }\n        Console.WriteLine($\"敏感词加载完毕，增加数量：{FunNlpDataSensitive.Count - oldcount}\");\n    }\n\n\n    /// &lt;summary>\n    /// 替换所有敏感词为 *\n    /// &lt;/summary>\n    /// &lt;param name=\"that\">&lt;/param>\n    /// &lt;returns>&lt;/returns>\n    public static string ReplaceStopWords(this string that)\n    {\n        foreach (var wd in FunNlpDataSensitive.Keys)\n            that = that.Replace(wd, ReplaceNewValue.TryGetValue(wd.Length, out var tryval) ? tryval : \"\".PadRight(wd.Length, '*'));\n        return that;\n    }\n}\n</code></pre><div aria-hidden=\"true\"><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br><span>24</span><br><span>25</span><br><span>26</span><br><span>27</span><br><span>28</span><br><span>29</span><br><span>30</span><br><span>31</span><br><span>32</span><br><span>33</span><br><span>34</span><br><span>35</span><br><span>36</span><br><span>37</span><br><span>38</span><br><span>39</span><br><span>40</span><br><span>41</span><br><span>42</span><br><span>43</span><br><span>44</span><br><span>45</span><br><span>46</span><br><span>47</span><br><span>48</span><br><span>49</span><br><span>50</span><br><span>51</span><br></div></div><h2 id=\"freesql全局处理敏感词\" tabindex=\"-1\"> FreeSql全局处理敏感词</h2>\n<p>使用FreeSql这个ORM时，全局处理string类型的值，进行敏感词处理。代码在StartUp.cs的构造函数中。</p>\n<div><pre><code>//敏感词处理\nIllegalWordsSearch illegalWords = ToolGoodUtils.GetIllegalWordsSearch();\n\nFsql.Aop.AuditValue += (s, e) =>\n{\n    if (e.Column.CsType == typeof(string) &amp;&amp; e.Value != null)\n    {\n        string oldVal = (string)e.Value;\n        string newVal = illegalWords.Replace(oldVal);\n        //第二种处理敏感词的方式\n        //string newVal = oldVal.ReplaceStopWords();\n        if (newVal != oldVal)\n        {\n            e.Value = newVal;\n        }\n    }\n};\n</code></pre><div aria-hidden=\"true\"><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br></div></div>",
      "date_published": "2020-04-15T17:09:07.000Z",
      "date_modified": "2022-06-02T11:44:24.000Z",
      "authors": [],
      "tags": []
    },
    {
      "title": "Newtonsoft.Json基础问题",
      "url": "https://igeekfan.cn/igeekfan-docs/dotnetcore/lin-cms/newtonsoft-json-question.html",
      "id": "https://igeekfan.cn/igeekfan-docs/dotnetcore/lin-cms/newtonsoft-json-question.html",
      "content_html": "<h1 id=\"newtonsoft-json基础问题\" tabindex=\"-1\"> Newtonsoft.Json基础问题</h1>\n<p>它是.NET下的一个序列化、反序化的基础类库，更基础的用法还是看别人的吧，这里只说一些遇到的问题。</p>\n<h2 id=\"设置下划线\" tabindex=\"-1\"> 设置下划线</h2>\n<p>ContractResolver  默认是小驼峰，我想改成下划线方式，遇到了一些问题，dictionary的键未格式化</p>\n<p>in controller 创建一个控制器</p>\n<div><pre><code><span>[</span><span><span>HttpGet</span><span><span>(</span><span>\"getDictionary\"</span><span>)</span></span></span><span>]</span>\n<span>public</span> <span>IDictionary<span>&lt;</span><span>string</span><span>,</span> <span>string</span><span>></span></span> <span>GetDictionary</span><span>(</span><span>)</span>\n<span>{</span>\n    <span>IDictionary<span>&lt;</span><span>string</span><span>,</span> <span>string</span><span>></span></span> dics <span>=</span> <span>new</span> <span>Dictionary<span>&lt;</span><span>string</span><span>,</span> <span>string</span><span>></span></span><span>(</span><span>)</span><span>;</span>\n\n    dics<span>.</span><span>Add</span><span>(</span><span>\"Key\"</span><span>,</span> <span>\"Value\"</span><span>)</span><span>;</span>\n    dics<span>.</span><span>Add</span><span>(</span><span>\"KeyTest\"</span><span>,</span> <span>\"Value_Test\"</span><span>)</span><span>;</span>\n    <span>return</span> dics<span>;</span>\n<span>}</span>\n</code></pre><div aria-hidden=\"true\"><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br></div></div><p>In Startup.cs</p>\n<div><pre><code>services\n<span>.</span><span>AddMvc</span><span>(</span><span>)</span>\n<span>.</span><span>SetCompatibilityVersion</span><span>(</span>CompatibilityVersion<span>.</span>Version_2_2<span>)</span>\n<span>.</span><span>AddJsonOptions</span><span>(</span>opt <span>=></span>\n<span>{</span>\n    \n    <span>// 设置下划线方式，首字母是小写</span>\n    opt<span>.</span>SerializerSettings<span>.</span>ContractResolver <span>=</span> <span>new</span> <span>DefaultContractResolver</span><span>(</span><span>)</span>\n    <span>{</span>\n        NamingStrategy <span>=</span> <span>new</span> <span>SnakeCaseNamingStrategy</span><span>(</span><span>)</span>\n    <span>}</span><span>;</span>\n<span>}</span><span>)</span><span>;</span>\n</code></pre><div aria-hidden=\"true\"><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br></div></div><p>此时运行后，得到的是Key,而不是key，我想他的键都变成下划线方式的小写</p>\n<div><pre><code><span>{</span>\n  <span>\"Key\"</span><span>:</span> <span>\"Value\"</span><span>,</span>\n  <span>\"KeyTest\"</span><span>:</span> <span>\"Value_Test\"</span>\n<span>}</span>\n</code></pre><div aria-hidden=\"true\"><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br></div></div><p>其他测试，增加多级，测试正常</p>\n<div><pre><code><span>[</span><span><span>HttpGet</span><span><span>(</span><span>\"get\"</span><span>)</span></span></span><span>]</span>\n<span>public</span> <span><span>dynamic</span></span> <span>Get</span><span>(</span><span>)</span>\n<span>{</span>\n <span>return</span> <span>new</span> <span>{</span>\n            Content <span>=</span> <span>new</span> <span>{</span>\n                Url<span>=</span>Request<span>.</span>Path<span>.</span>Value<span>,</span>\n                NewUrlTest<span>=</span><span>\"test in new url test\"</span>\n            <span>}</span>\n        <span>}</span><span>;</span>\n<span>}</span>\n</code></pre><div aria-hidden=\"true\"><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br></div></div><p>此时运行后，满足要求，多层结构也不会影响</p>\n<div><pre><code><span>{</span>\n  <span>\"content\"</span><span>:</span> <span>{</span>\n    <span>\"url\"</span><span>:</span> <span>\"/test/get\"</span><span>,</span>\n    <span>\"new_url_test\"</span><span>:</span> <span>\"test in new url test\"</span>\n  <span>}</span>\n<span>}</span>\n\n</code></pre><div aria-hidden=\"true\"><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br></div></div><p>看了Newtonsoft.Json的github，并在in this repository 搜索Dictionary，看issues中的配置项如下即可满足dictionary的键也转小写,\nProcessDictionaryKeys 功能：A flag indicating whether dictionary keys should be processed. Defaults to false.</p>\n<div><pre><code>services\n<span>.</span><span>AddMvc</span><span>(</span><span>)</span>\n<span>.</span><span>SetCompatibilityVersion</span><span>(</span>CompatibilityVersion<span>.</span>Version_2_2<span>)</span>\n<span>.</span><span>AddJsonOptions</span><span>(</span>opt <span>=></span>\n<span>{</span>\n    \n    <span>// 设置下划线方式，首字母是小写</span>\n    opt<span>.</span>SerializerSettings<span>.</span>ContractResolver <span>=</span> <span>new</span> <span>DefaultContractResolver</span><span>(</span><span>)</span>\n    <span>{</span>\n        NamingStrategy <span>=</span> <span>new</span> <span>SnakeCaseNamingStrategy</span>\n        <span>{</span>\n            ProcessDictionaryKeys <span>=</span> <span>true</span>\n        <span>}</span>\n    <span>}</span><span>;</span>\n<span>}</span><span>)</span><span>;</span>\n</code></pre><div aria-hidden=\"true\"><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br></div></div><div><pre><code><span>{</span>\n  <span>\"key\"</span><span>:</span> <span>\"Value\"</span><span>,</span>\n  <span>\"key_test\"</span><span>:</span> <span>\"Value_Test\"</span>\n<span>}</span>\n</code></pre><div aria-hidden=\"true\"><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br></div></div><h2 id=\"实现时间戳\" tabindex=\"-1\"> 实现时间戳</h2>\n<p>前台要的格式为  <strong>1562904163734</strong>,只有一个数字，我搜索了一下，也没找到相关的文档，本身这个类库有一些时间戳，不过他们都包含特殊字符，如/Date(1562904163734)/,好像类似这样，他好像在逗我，为啥他要加Date，怕是有毒吧。看到\n他有Converters属性可配置，即配置自己的序列化返回格式。</p>\n<div><pre><code>services<span>.</span><span>AddMvc</span><span>(</span><span>)</span>\n<span>.</span><span>SetCompatibilityVersion</span><span>(</span>CompatibilityVersion<span>.</span>Version_2_2<span>)</span>\n<span>.</span><span>AddJsonOptions</span><span>(</span>opt <span>=></span>\n<span>{</span>\n    <span>//opt.SerializerSettings.DateFormatString = \"yyyy-MM-dd HH:MM:ss\";</span>\n    <span>//设置时间戳格式</span>\n    opt<span>.</span>SerializerSettings<span>.</span>Converters <span>=</span> <span>new</span> <span>List<span>&lt;</span>JsonConverter<span>></span></span><span>(</span><span>)</span>\n    <span>{</span>\n        <span>new</span> <span>LinCmsTimeConverter</span><span>(</span><span>)</span>\n    <span>}</span><span>;</span>\n<span>}</span><span>)</span><span>;</span>\n</code></pre><div aria-hidden=\"true\"><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br></div></div><p>这里的时间戳是毫秒级别</p>\n<div><pre><code><span>/// <span><span><span>&lt;</span>summary</span><span>></span></span></span>\n<span>/// 配合LinCMS中的时间戳 后台只返回 1562904163734</span>\n<span>/// <span><span><span>&lt;/</span>summary</span><span>></span></span></span>\n<span>public</span> <span>class</span> <span>LinCmsTimeConverter</span> <span>:</span> <span><span>DateTimeConverterBase</span></span>\n<span>{</span>\n    <span>public</span> <span>override</span> <span><span>void</span></span> <span>WriteJson</span><span>(</span><span>JsonWriter</span> writer<span>,</span> <span><span>object</span></span> <span>value</span><span>,</span> <span>JsonSerializer</span> serializer<span>)</span>\n    <span>{</span>\n        <span><span>double</span></span> javaScriptTicks <span>=</span> <span>0</span><span>;</span>\n        <span>if</span> <span>(</span><span>value</span> <span>is</span> <span>DateTime</span> dateTime<span>)</span>\n        <span>{</span>\n            javaScriptTicks <span>=</span> <span>ConvertDateTimeInt</span><span>(</span>dateTime<span>)</span><span>;</span>\n        <span>}</span>\n        <span>else</span>\n        <span>{</span>\n            <span>if</span> <span>(</span><span>!</span><span>(</span><span>value</span> <span>is</span> <span>DateTimeOffset</span> dateTimeOffset<span>)</span><span>)</span>\n                <span>throw</span> <span>new</span> <span>JsonSerializationException</span><span>(</span><span>\"Expected date object value.\"</span><span>)</span><span>;</span>\n            javaScriptTicks <span>=</span> <span>ConvertDateTimeInt</span><span>(</span>dateTimeOffset<span>.</span><span>ToUniversalTime</span><span>(</span><span>)</span><span>.</span>UtcDateTime<span>)</span><span>;</span>\n\n        <span>}</span>\n        writer<span>.</span><span>WriteValue</span><span>(</span>javaScriptTicks<span>)</span><span>;</span>\n    <span>}</span>\n\n    <span>public</span> <span>override</span> <span><span>object</span></span> <span>ReadJson</span><span>(</span><span>JsonReader</span> reader<span>,</span> <span>Type</span> objectType<span>,</span> <span><span>object</span></span> existingValue<span>,</span> <span>JsonSerializer</span> serializer<span>)</span>\n    <span>{</span>\n        <span>return</span> <span>ConvertIntDateTime</span><span>(</span><span>double</span><span>.</span><span>Parse</span><span>(</span>reader<span>.</span>Value<span>.</span><span>ToString</span><span>(</span><span>)</span><span>)</span><span>)</span><span>;</span>\n    <span>}</span>\n    \n    <span>/// <span><span><span>&lt;</span>summary</span><span>></span></span></span>\n    <span>/// 日期转换为时间戳（时间戳单位毫秒）</span>\n    <span>/// <span><span><span>&lt;/</span>summary</span><span>></span></span></span>\n    <span>/// <span><span><span>&lt;</span>param</span> <span>name</span><span><span>=</span><span>\"</span>TimeStamp<span>\"</span></span><span>></span></span><span><span><span>&lt;/</span>param</span><span>></span></span></span>\n    <span>/// <span><span><span>&lt;</span>returns</span><span>></span></span><span><span><span>&lt;/</span>returns</span><span>></span></span> </span>\n    <span>public</span> <span>static</span> <span>DateTime</span> <span>ConvertIntDateTime</span><span>(</span><span><span>double</span></span> milliseconds<span>)</span>\n    <span>{</span>\n        <span>return</span> <span>new</span> <span>DateTime</span><span>(</span><span>1970</span><span>,</span> <span>1</span><span>,</span> <span>1</span><span>)</span><span>.</span><span>AddMilliseconds</span><span>(</span>milliseconds<span>)</span><span>;</span>\n    <span>}</span>\n\n\n    <span>public</span> <span>static</span> <span><span>double</span></span> <span>ConvertDateTimeInt</span><span>(</span><span>DateTime</span> aDt<span>)</span>\n    <span>{</span>\n        <span>return</span> <span>(</span>aDt <span>-</span> <span>new</span> <span>DateTime</span><span>(</span><span>1970</span><span>,</span> <span>1</span><span>,</span> <span>1</span><span>)</span><span>)</span><span>.</span>TotalMilliseconds<span>;</span>\n    <span>}</span>\n<span>}</span>\n</code></pre><div aria-hidden=\"true\"><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br><span>24</span><br><span>25</span><br><span>26</span><br><span>27</span><br><span>28</span><br><span>29</span><br><span>30</span><br><span>31</span><br><span>32</span><br><span>33</span><br><span>34</span><br><span>35</span><br><span>36</span><br><span>37</span><br><span>38</span><br><span>39</span><br><span>40</span><br><span>41</span><br><span>42</span><br><span>43</span><br></div></div><h2 id=\"参考\" tabindex=\"-1\"> 参考</h2>\n<ul>\n<li><a href=\"https://github.com/JamesNK/Newtonsoft.Json/issues/2088\" target=\"_blank\" rel=\"noopener noreferrer\">https://github.com/JamesNK/Newtonsoft.Json/issues/2088</a></li>\n<li><a href=\"https://www.newtonsoft.com/json/help/html/P_Newtonsoft_Json_Serialization_NamingStrategy_ProcessDictionaryKeys.htm\" target=\"_blank\" rel=\"noopener noreferrer\">https://www.newtonsoft.com/json/help/html/P_Newtonsoft_Json_Serialization_NamingStrategy_ProcessDictionaryKeys.htm</a></li>\n<li><a href=\"https://blog.csdn.net/yw1688/article/details/38492583\" target=\"_blank\" rel=\"noopener noreferrer\">https://blog.csdn.net/yw1688/article/details/38492583</a></li>\n<li><a href=\"https://www.jianshu.com/p/c53b1a2a121d\" target=\"_blank\" rel=\"noopener noreferrer\">https://www.jianshu.com/p/c53b1a2a121d</a></li>\n</ul>\n",
      "date_published": "2020-04-15T16:23:14.000Z",
      "date_modified": "2020-04-15T16:23:14.000Z",
      "authors": [],
      "tags": []
    },
    {
      "title": "About",
      "url": "https://igeekfan.cn/igeekfan-docs/about/",
      "id": "https://igeekfan.cn/igeekfan-docs/about/",
      "content_html": "<h1 id=\"about\" tabindex=\"-1\"> About</h1>\n<h2 id=\"欢迎\" tabindex=\"-1\"> 欢迎</h2>\n<p>👋 你好，我是 <code>IGeekFan</code> ，我会写<code>c#</code>，会写一点点<code>javascript</code>。</p>\n<p><img src=\"https://img.shields.io/badge/OS-Win11-informational?style=flat&amp;logo=&lt;LOGO_NAME&gt;&amp;logoColor=white&amp;color=2bbc8a\" alt=\"\" loading=\"lazy\">\n<img src=\"https://img.shields.io/badge/OS-MAC-informational?style=flat&amp;logo=&lt;LOGO_NAME&gt;&amp;logoColor=white&amp;color=fff5e8\" alt=\"\" loading=\"lazy\">\n<img src=\"https://img.shields.io/badge/Editor-VisualStudio2022-informational?style=flat&amp;logo=&lt;LOGO_NAME&gt;&amp;logoColor=white&amp;color=80ccff\" alt=\"\" loading=\"lazy\">\n<img src=\"https://img.shields.io/badge/Editor-VisualStudioCode-informational?style=flat&amp;logo=&lt;LOGO_NAME&gt;&amp;logoColor=white&amp;color=424a53\" alt=\"\" loading=\"lazy\">\n<img src=\"https://img.shields.io/badge/Editor-VisualStudioForMAC-informational?style=flat&amp;logo=&lt;LOGO_NAME&gt;&amp;logoColor=white&amp;color=80ccff\" alt=\"\" loading=\"lazy\">\n<img src=\"https://img.shields.io/badge/Code-Csharp-informational?style=flat&amp;logo=&lt;LOGO_NAME&gt;&amp;logoColor=white&amp;color=FD8C73\" alt=\"\" loading=\"lazy\">\n<img src=\"https://img.shields.io/badge/Code-JavaScript-informational?style=flat&amp;logo=&lt;LOGO_NAME&gt;&amp;logoColor=white&amp;color=0969da\" alt=\"\" loading=\"lazy\">\n<img src=\"https://img.shields.io/badge/Code-Vue-informational?style=flat&amp;logo=&lt;LOGO_NAME&gt;&amp;logoColor=white&amp;color=b6e3ff\" alt=\"\" loading=\"lazy\">\n<img src=\"https://img.shields.io/badge/Code-Python-informational?style=flat&amp;logo=&lt;LOGO_NAME&gt;&amp;logoColor=white&amp;color=2bbc8a\" alt=\"\" loading=\"lazy\">\n<img src=\"https://img.shields.io/badge/Code-Go-informational?style=flat&amp;logo=&lt;LOGO_NAME&gt;&amp;logoColor=white&amp;color=80ccff\" alt=\"\" loading=\"lazy\">\n<img src=\"https://img.shields.io/badge/Tools-Docker-informational?style=flat&amp;logo=&lt;LOGO_NAME&gt;&amp;logoColor=white&amp;color=eac54f\" alt=\"\" loading=\"lazy\">\n<img src=\"https://img.shields.io/badge/Tools-AzureDevops-informational?style=flat&amp;logo=&lt;LOGO_NAME&gt;&amp;logoColor=white&amp;color=ffddb0\" alt=\"\" loading=\"lazy\">\n<img src=\"https://img.shields.io/badge/Shell-PowerShell-informational?style=flat&amp;logo=&lt;LOGO_NAME&gt;&amp;logoColor=white&amp;color=f79939\" alt=\"\" loading=\"lazy\">\n<img src=\"https://img.shields.io/badge/FrameWork-ASPNETCore-informational?style=flat&amp;logo=&lt;LOGO_NAME&gt;&amp;logoColor=white&amp;color=d8b9ff\" alt=\"\" loading=\"lazy\">\n<img src=\"https://img.shields.io/badge/FrameWork-ABP-informational?style=flat&amp;logo=&lt;LOGO_NAME&gt;&amp;logoColor=white&amp;color=ffadda\" alt=\"\" loading=\"lazy\"></p>\n<h2 id=\"推荐项目\" tabindex=\"-1\"> 推荐项目</h2>\n<a href=\"https://github.com/luoyunchong/freekit\">\n  <img align=\"center\" src=\"https://github-readme-stats.vercel.app/api/pin/?username=luoyunchong&repo=freekit&title_color=fff&icon_color=f9f9f9&text_color=9f9f9f&bg_color=151515\" />\n</a>\n<a href=\"https://github.com/luoyunchong/igeekfan-docs\">\n  <img align=\"center\" src=\"https://github-readme-stats.vercel.app/api/pin/?username=luoyunchong&repo=igeekfan-docs&title_color=fff&icon_color=f9f9f9&text_color=9f9f9f&bg_color=151515\" />\n</a>\n<h2 id=\"联系我-💬\" tabindex=\"-1\"> 联系我 💬</h2>\n<ul>\n<li><a href=\"https://github.com/luoyunchong\" target=\"_blank\" rel=\"noopener noreferrer\">https://github.com/luoyunchong</a></li>\n<li><a href=\"https://www.cnblogs.com/igeekfan\" target=\"_blank\" rel=\"noopener noreferrer\">https://www.cnblogs.com/igeekfan</a></li>\n<li><a href=\"mailto:luoyunchong@foxmail.com\">luoyunchong@foxmail.com</a></li>\n</ul>\n<p><img src=\"https://github-readme-stats.vercel.app/api?username=luoyunchong&amp;show_icons=true&amp;theme=radical\" alt=\"Anurag's github stats\" loading=\"lazy\">\n<img src=\"https://github-readme-stats.vercel.app/api/top-langs/?username=luoyunchong&amp;theme=dark&amp;layout=compact\" alt=\"Most Used Languages\" loading=\"lazy\"></p>\n<h2 id=\"欢迎加入-qq-群\" tabindex=\"-1\"> 欢迎加入 QQ 群</h2>\n<img  width=\"258\" height=\"300\" src=\"/images/qq.png\">\n<h2 id=\"欢迎微信关注-dotnet-搬砖队\" tabindex=\"-1\"> 欢迎微信关注 dotNET 搬砖队</h2>\n<p>微信搜索：dotNET 搬砖队</p>\n<img src=\"/images/wechat.png\">\n",
      "image": "https://img.shields.io/badge/OS-Win11-informational?style=flat&logo=<LOGO_NAME>&logoColor=white&color=2bbc8a",
      "date_published": "2020-02-28T11:10:31.000Z",
      "date_modified": "2022-06-03T14:30:48.000Z",
      "authors": [],
      "tags": []
    },
    {
      "title": "ColorUI",
      "url": "https://igeekfan.cn/igeekfan-docs/colorui/docs/",
      "id": "https://igeekfan.cn/igeekfan-docs/colorui/docs/",
      "content_html": "<h1 id=\"colorui\" tabindex=\"-1\"> ColorUI</h1>\n<h2 id=\"github\" tabindex=\"-1\"> github</h2>\n<ul>\n<li><a href=\"https://github.com/weilanwl/ColorUI\" target=\"_blank\" rel=\"noopener noreferrer\">https://github.com/weilanwl/ColorUI</a></li>\n</ul>\n<h2 id=\"特点\" tabindex=\"-1\"> 特点</h2>\n<p>*　这是一个css库，相比其他vant-weapp、mpvue都是不一样的,非组件化，主要定位我觉得是美化主题，非组件化，支持uni-app、mpvue，可结合vant-weapp一起使用。</p>\n<h2 id=\"该文档作用\" tabindex=\"-1\"> 该文档作用</h2>\n<p>很简单，官方还没出文档，使用起来，需要开发者自行去看main.css，打开手机看小程序的demo,然后再去找项目源码，我觉得太麻烦，不知道其他人的感受如何。</p>\n",
      "date_published": "2020-02-28T11:10:31.000Z",
      "date_modified": "2020-02-28T11:10:31.000Z",
      "authors": [],
      "tags": []
    },
    {
      "title": "Button 按钮",
      "url": "https://igeekfan.cn/igeekfan-docs/colorui/docs/button.html",
      "id": "https://igeekfan.cn/igeekfan-docs/colorui/docs/button.html",
      "content_html": "<h1 id=\"button-按钮\" tabindex=\"-1\"> Button 按钮</h1>\n<div><pre><code>&lt;button>默认&lt;/button>\n&lt;button>圆角&lt;/button>\n&lt;button>\n\t&lt;text>&lt;/text>\n&lt;/button>\n</code></pre><div aria-hidden=\"true\"><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br></div></div><div><pre><code>.cu-btn \n.cu-btn::after\n.cu-btn:not([class*=\"bg-\"]) \n.cu-btn[class*=\"line\"] \n.cu-btn[class*=\"line\"]::after\n.cu-btn.round[class*=\"line\"]::after \n.cu-btn[class*=\"lines\"]::after \n.cu-btn[class*=\"bg-\"]::after \n.cu-btn.sm \n.cu-btn.lg \n.cu-btn.cuIcon.sm \n.cu-btn.cuIcon \nbutton.cuIcon.lg \n.cu-btn.shadow-blur::before \n.cu-btn.button-hover \n.block \n.cu-btn.block \n.cu-btn[disabled] \n</code></pre><div aria-hidden=\"true\"><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br></div></div><div><pre><code>.cu-bar.btn-group\n.cu-bar.btn-group button\n.cu-bar.btn-group button\n</code></pre><div aria-hidden=\"true\"><span>1</span><br><span>2</span><br><span>3</span><br></div></div>",
      "date_published": "2020-02-28T11:10:31.000Z",
      "date_modified": "2020-02-28T11:10:31.000Z",
      "authors": [],
      "tags": []
    },
    {
      "title": "Text 文本",
      "url": "https://igeekfan.cn/igeekfan-docs/colorui/docs/text.html",
      "id": "https://igeekfan.cn/igeekfan-docs/colorui/docs/text.html",
      "content_html": "<h1 id=\"text-文本\" tabindex=\"-1\"> Text 文本</h1>\n<div><pre><code>.text-xs \n.text-sm \n.text-df \n.text-lg \n.text-xl \n.text-xxl \n.text-sl \n.text-xsl \n.text-Abc \n.text-ABC \n.text-abc \n.text-price::before \n.text-cut \n.text-bold \n.text-center \n.text-content \n.text-left \n.text-right\n.text-red\n.line-red\n.lines-red \n.text-orange\n.line-orange\n.lines-orange\n.text-yellow\n.line-yellow\n.lines-yellow \n.text-olive\n.line-olive\n.lines-olive\n.text-green\n.line-green\n.lines-green \n.text-cyan\n.line-cyan\n.lines-cyan \n.text-blue\n.line-blue\n.lines-blue \n.text-purple\n.line-purple\n.lines-purple \n.text-mauve\n.line-mauve\n.lines-mauve \n.text-pink\n.line-pink\n.lines-pink \n.text-brown\n.line-brown\n.lines-brown\n.text-grey\n.line-grey\n.lines-grey \n.text-gray\n.line-gray\n.lines-gray\n.text-black\n.line-black\n.lines-black \n.text-white\n.line-white\n.lines-white\n</code></pre><div aria-hidden=\"true\"><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br><span>24</span><br><span>25</span><br><span>26</span><br><span>27</span><br><span>28</span><br><span>29</span><br><span>30</span><br><span>31</span><br><span>32</span><br><span>33</span><br><span>34</span><br><span>35</span><br><span>36</span><br><span>37</span><br><span>38</span><br><span>39</span><br><span>40</span><br><span>41</span><br><span>42</span><br><span>43</span><br><span>44</span><br><span>45</span><br><span>46</span><br><span>47</span><br><span>48</span><br><span>49</span><br><span>50</span><br><span>51</span><br><span>52</span><br><span>53</span><br><span>54</span><br><span>55</span><br><span>56</span><br><span>57</span><br><span>58</span><br><span>59</span><br><span>60</span><br><span>61</span><br><span>62</span><br><span>63</span><br></div></div>",
      "date_published": "2020-02-28T11:10:31.000Z",
      "date_modified": "2020-02-28T11:10:31.000Z",
      "authors": [],
      "tags": []
    },
    {
      "title": "创建简单Hello World",
      "url": "https://igeekfan.cn/igeekfan-docs/dotnetcore/examples/Console-Hello-World.html",
      "id": "https://igeekfan.cn/igeekfan-docs/dotnetcore/examples/Console-Hello-World.html",
      "content_html": "<h1 id=\"创建简单hello-world\" tabindex=\"-1\"> 创建简单Hello World</h1>\n<h2 id=\"源码\" tabindex=\"-1\"> 源码</h2>\n<p>代码托管在GitHub上 <a href=\"https://github.com/luoyunchong/dotnetcore-examples/tree/master/console-hello-world\" target=\"_blank\" rel=\"noopener noreferrer\">https://github.com/luoyunchong/dotnetcore-examples/tree/master/console-hello-world</a></p>\n<h2 id=\"相关阅读\" tabindex=\"-1\"> 相关阅读</h2>\n<ul>\n<li><a href=\"https://docs.microsoft.com/zh-cn/dotnet/core/tutorials/with-visual-studio-code\" target=\"_blank\" rel=\"noopener noreferrer\">C# 和 Visual Studio Code 入门教程</a></li>\n<li><a href=\"https://blog.csdn.net/qq_40346899/article/details/80955788\" target=\"_blank\" rel=\"noopener noreferrer\">vscode调试运行c#详细操作过程</a></li>\n<li><strong><a href=\"https://blog.csdn.net/qin_yu_2010/article/details/83978244\" target=\"_blank\" rel=\"noopener noreferrer\">使用Visual Studio Code开发.NET Core看这篇就够了</a></strong> 强烈推荐。</li>\n</ul>\n<h2 id=\"开始\" tabindex=\"-1\"> 开始</h2>\n<p>创建一个hello-word的console，会输出Hello World!</p>\n<div><pre><code><span>mkdir</span> console-hello-world\n<span>cd</span> console-hello-world\ndotnet new console\ndotnet run\n</code></pre><div aria-hidden=\"true\"><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br></div></div><p>console-hello-world.csproj</p>\n<p><strong>OutputType</strong> 标记指定我们要生成的可执行文件，即控制台应用程序。</p>\n<p><strong>TargetFramework</strong> 标记指定要定位的 .NET 实现代码。 在高级方案中，可以指定多个目标框架，并在单个操作中生成所有目标框架。</p>\n<div><pre><code><span><span><span>&lt;</span>Project</span> <span>Sdk</span><span><span>=</span><span>\"</span>Microsoft.NET.Sdk<span>\"</span></span><span>></span></span>\n\n  <span><span><span>&lt;</span>PropertyGroup</span><span>></span></span>\n    <span><span><span>&lt;</span>OutputType</span><span>></span></span>Exe<span><span><span>&lt;/</span>OutputType</span><span>></span></span>\n    <span><span><span>&lt;</span>TargetFramework</span><span>></span></span>netcoreapp3.0<span><span><span>&lt;/</span>TargetFramework</span><span>></span></span>\n    <span><span><span>&lt;</span>RootNamespace</span><span>></span></span>console_hello_world<span><span><span>&lt;/</span>RootNamespace</span><span>></span></span>\n  <span><span><span>&lt;/</span>PropertyGroup</span><span>></span></span>\n\n<span><span><span>&lt;/</span>Project</span><span>></span></span>\n\n</code></pre><div aria-hidden=\"true\"><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br></div></div><p>在 console-hello-world/bin/Debug/netcoreapp3.0中生成了console-hello-world.dll</p>\n<div><pre><code>cd console-hello-world #要先在console-hello-world目录中\ndotnet bin/Debug/netcoreapp3.0/console-hello-world.dll\nHello World\n</code></pre><div aria-hidden=\"true\"><span>1</span><br><span>2</span><br><span>3</span><br></div></div><p>修改main函数</p>\n<div><pre><code><span>using</span> <span>System</span><span>;</span>\n\n<span>namespace</span> <span>console_hello_world</span>\n<span>{</span>\n    <span>class</span> <span>Program</span>\n    <span>{</span>\n        <span>static</span> <span><span>void</span></span> <span>Main</span><span>(</span><span><span>string</span><span>[</span><span>]</span></span> args<span>)</span>\n        <span>{</span>\n            <span>if</span> <span>(</span>args<span>.</span>Length <span>></span> <span>0</span><span>)</span>\n            <span>{</span>\n                Console<span>.</span><span>WriteLine</span><span>(</span><span><span>$\"Hello </span><span><span>{</span><span>args<span>[</span><span>0</span><span>]</span></span><span>}</span></span><span>!\"</span></span><span>)</span><span>;</span>\n            <span>}</span>\n            <span>else</span>\n            <span>{</span>\n                Console<span>.</span><span>WriteLine</span><span>(</span><span>\"Hello!\"</span><span>)</span><span>;</span>\n            <span>}</span>\n        <span>}</span>\n    <span>}</span>\n<span>}</span>\n</code></pre><div aria-hidden=\"true\"><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br></div></div><div><pre><code>$ dotnet run -- John\nHello John!\n</code></pre><div aria-hidden=\"true\"><span>1</span><br><span>2</span><br></div></div>",
      "date_published": "2020-02-28T11:10:31.000Z",
      "date_modified": "2020-02-28T11:10:31.000Z",
      "authors": [],
      "tags": []
    },
    {
      "title": ".NET Core 简单测试项目",
      "url": "https://igeekfan.cn/igeekfan-docs/dotnetcore/examples/Console-News-Types.html",
      "id": "https://igeekfan.cn/igeekfan-docs/dotnetcore/examples/Console-News-Types.html",
      "content_html": "<h1 id=\"net-core-简单测试项目\" tabindex=\"-1\"> .NET Core 简单测试项目</h1>\n<p>使用PowerShell的dotnet cli命令行创建控制台项目，测试项目，测试项目引用控制台项目。</p>\n<h2 id=\"源码\" tabindex=\"-1\"> 源码</h2>\n<p>代码托管在GitHub上 <a href=\"https://github.com/luoyunchong/dotnetcore-examples/tree/master/console-news-types\" target=\"_blank\" rel=\"noopener noreferrer\">https://github.com/luoyunchong/dotnetcore-examples/tree/master/console-news-types</a></p>\n<h2 id=\"相关参考\" tabindex=\"-1\"> 相关参考</h2>\n<p>code :<a href=\"https://github.com/dotnet/samples/blob/master/core/console-apps/NewTypesMsBuild/README.md\" target=\"_blank\" rel=\"noopener noreferrer\">https://github.com/dotnet/samples/blob/master/core/console-apps/NewTypesMsBuild/README.md</a></p>\n<p>docs: <a href=\"https://docs.microsoft.com/zh-cn/dotnet/core/tutorials/testing-with-cli\" target=\"_blank\" rel=\"noopener noreferrer\">https://docs.microsoft.com/zh-cn/dotnet/core/tutorials/testing-with-cli</a></p>\n<p>dotnet-add-reference 使用文档 <a href=\"https://docs.microsoft.com/zh-cn/dotnet/core/tools/dotnet-add-reference\" target=\"_blank\" rel=\"noopener noreferrer\">https://docs.microsoft.com/zh-cn/dotnet/core/tools/dotnet-add-reference</a></p>\n<p>总结如下命令行</p>\n<div><pre><code>PS dotnetcore-examples&gt; mkdir console-news-types\nPS dotnetcore-examples&gt; cd .\\console-news-types\\ \nPS dotnetcore-examples\\console-news-types&gt; mkdir src\n\nPS dotnetcore-examples\\console-news-types&gt; mkdir test\nPS dotnetcore-examples\\console-news-types&gt; ls\nMode                 LastWriteTime         Length Name\n----                 -------------         ------ ----\nd----           2019/6/27    20:51                src\nd----           2019/6/27    20:51                test\n\nPS dotnetcore-examples\\console-news-types&gt; cd .\\src\\\nPS dotnetcore-examples\\console-news-types\\src&gt; dotnet new console -n NewTypes\nPS dotnetcore-examples\\console-news-types\\src&gt; cd ..\\test\\  \nPS dotnetcore-examples\\console-news-types\\test&gt; dotnet new xunit -n NewTypesTests \nPS dotnetcore-examples\\console-news-types\\test&gt; cd .\\NewTypesTests\\\nPS dotnetcore-examples\\console-news-types\\test\\NewTypesTests&gt; dotnet add reference ../../src/NewTypes/NewTypes.csproj\n#Reference `..\\..\\src\\NewTypes\\NewTypes.csproj` added to the project.\n</code></pre><div aria-hidden=\"true\"><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br></div></div><p>其他的代码就看上面的二个链接，把代码复制进去，代码很简单，一个接口，二个实现，main函数调用，测试项目引用控制台项目，</p>\n<p>先cd 到src\\NewTypes目录中，执行 <strong>dotnet run</strong></p>\n<div><pre><code>PS dotnetcore-examples\\console-news-types\\src\\NewTypes&gt; dotnet run\nWoof!\nMeow!\n</code></pre><div aria-hidden=\"true\"><span>1</span><br><span>2</span><br><span>3</span><br></div></div><p>先cd 到test\\NewTypesTests目录中，执行 <strong>dotnet test</strong>，看好代码，测试类 Assert.Equal() 是成功的，如果是Assert.NotEqual() 则Failure</p>\n<div><pre><code>PS dotnetcore-examples\\console-news-types\\test\\NewTypesTests&gt; dotnet test\ndotnetcore-examples\\console-news-types\\test\\NewTypesTests\\bin\\Debug\\netcoreapp3.0\\NewTypesTests.dll 的测试运行(.NETCoreApp,Version=v3.0)\nMicrosoft (R) 测试执行命令行工具版本 16.0.1\n版权所有 (C) Microsoft Corporation。保留所有权利。\n\n正在启动测试执行，请稍候...\n\n总测试: 2。已通过: 2。失败: 0。已跳过: 0。\n测试运行成功。\n测试执行时间: 1.5134 秒\n</code></pre><div aria-hidden=\"true\"><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br></div></div>",
      "date_published": "2020-02-28T11:10:31.000Z",
      "date_modified": "2020-02-28T11:10:31.000Z",
      "authors": [],
      "tags": []
    },
    {
      "title": "RESTful+FreeSql+AutoMapper",
      "url": "https://igeekfan.cn/igeekfan-docs/dotnetcore/examples/FreeSql-sample-blog-RESTful-use-automapper.html",
      "id": "https://igeekfan.cn/igeekfan-docs/dotnetcore/examples/FreeSql-sample-blog-RESTful-use-automapper.html",
      "summary": " RESTful+FreeSql+AutoMapper\n 文章概述\n本文使用ASP .NET Core的WEB API，构建一个RESTful风格的接口，使用Freesql访问MySQL数据库，实现二个表的简单博客，并集成AutoMapper。\n接上一篇\n\n\nFreeSql在ASP.NTE Core WebApi中如何使用的教程\n\n\n项目源码 https://github.com/luoyunchong/dotnetcore-examples/tree/master/aspnetcore-freesql\n\n\n",
      "content_html": "<h1 id=\"restful-freesql-automapper\" tabindex=\"-1\"> RESTful+FreeSql+AutoMapper</h1>\n<h2 id=\"文章概述\" tabindex=\"-1\"> 文章概述</h2>\n<p>本文使用ASP .NET Core的WEB API，构建一个RESTful风格的接口，使用Freesql访问MySQL数据库，实现二个表的简单博客，并集成AutoMapper。</p>\n<p>接上一篇</p>\n<ul>\n<li>\n<p><a href=\"http://blog.igeekfan.cn/2019/06/30/re-start/FreeSql-aspnetcore-how-to-use/\" target=\"_blank\" rel=\"noopener noreferrer\">FreeSql在ASP.NTE Core WebApi中如何使用的教程</a></p>\n</li>\n<li>\n<p>项目源码 <a href=\"https://github.com/luoyunchong/dotnetcore-examples/tree/master/aspnetcore-freesql\" target=\"_blank\" rel=\"noopener noreferrer\">https://github.com/luoyunchong/dotnetcore-examples/tree/master/aspnetcore-freesql</a></p>\n</li>\n</ul>\n\n<h2 id=\"dto作用\" tabindex=\"-1\"> Dto作用</h2>\n<p>当我们使用RESTful提供接口时，比如创建一个博客，修改一下博客内容时，他们的参数是有区别的。良好的设计应该是</p>\n<p>创建一个博客</p>\n<div><pre><code>POST /api/blog\ndata<span>:</span>\n<span>{</span>\n  <span>\"title\"</span><span>:</span> <span>\"string\"</span><span>,</span>\n  <span>\"content\"</span><span>:</span> <span>\"string\"</span>\n<span>}</span>\n</code></pre><div aria-hidden=\"true\"><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br></div></div><p>修改一个博客内容</p>\n<div><pre><code>PUT /api/blog\ndata<span>:</span>\n<span>{</span>\n  <span>\"blogId\"</span><span>:</span><span>\"int\"</span><span>,</span>\n  <span>\"title\"</span><span>:</span> <span>\"string\"</span><span>,</span>\n  <span>\"content\"</span><span>:</span> <span>\"string\"</span>\n<span>}</span>\n</code></pre><div aria-hidden=\"true\"><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br></div></div><p>但一个blog 实体如下</p>\n<div><pre><code>    <span>public</span> <span>class</span> <span>Blog</span>\n    <span>{</span>\n        <span>[</span><span><span>Column</span><span><span>(</span>IsIdentity <span>=</span> <span>true</span><span>,</span> IsPrimary <span>=</span> <span>true</span><span>)</span></span></span><span>]</span>\n        <span>public</span> <span><span>int</span></span> BlogId <span>{</span> <span>get</span><span>;</span> <span>set</span><span>;</span> <span>}</span>\n        <span>public</span> <span><span>string</span></span> Title <span>{</span> <span>get</span><span>;</span> <span>set</span><span>;</span> <span>}</span>\n        <span>public</span> <span><span>string</span></span> Content <span>{</span> <span>get</span><span>;</span> <span>set</span><span>;</span> <span>}</span>\n        <span>public</span> <span>DateTime</span> CreateTime <span>{</span> <span>get</span><span>;</span> <span>set</span><span>;</span> <span>}</span>\n        <span>public</span> <span>virtual</span> <span>List<span>&lt;</span>Post<span>></span></span> Posts <span>{</span> <span>get</span><span>;</span> <span>set</span><span>;</span> <span>}</span>\n    <span>}</span>\n</code></pre><div aria-hidden=\"true\"><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br></div></div><p>如果我们以Blog作为controllers中的参数时</p>\n<div><pre><code>       <span>// POST api/blog</span>\n        <span>[</span>HttpPost<span>]</span>\n        <span>public</span> <span><span>void</span></span> <span>Post</span><span>(</span><span>[</span><span><span>FromBody</span></span><span>]</span> <span>Blog</span> blog<span>)</span>\n        <span>{</span>\n            blog<span>.</span>CreateTime<span>=</span>DateTime<span>.</span>Now<span>;</span>\n            _fsql<span>.</span><span><span>Insert</span><span><span>&lt;</span>Blog<span>></span></span></span><span>(</span>blog<span>)</span><span>.</span><span>ExecuteAffrows</span><span>(</span><span>)</span><span>;</span>\n        <span>}</span>\n</code></pre><div aria-hidden=\"true\"><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br></div></div><p>这时修改swagger显示的默认参数是</p>\n<div><pre><code><span>{</span>\n  <span>\"blogId\"</span><span>:</span> <span>0</span><span>,</span>\n  <span>\"title\"</span><span>:</span> <span>\"string\"</span><span>,</span>\n  <span>\"content\"</span><span>:</span> <span>\"string\"</span><span>,</span>\n  <span>\"createTime\"</span><span>:</span> <span>\"2019-06-30T07:33:05.524Z\"</span><span>,</span>\n  <span>\"posts\"</span><span>:</span> <span>[</span>\n    <span>{</span>\n      <span>\"postId\"</span><span>:</span> <span>0</span><span>,</span>\n      <span>\"replyContent\"</span><span>:</span> <span>\"string\"</span><span>,</span>\n      <span>\"blogId\"</span><span>:</span> <span>0</span><span>,</span>\n      <span>\"replyTime\"</span><span>:</span> <span>\"2019-06-30T07:33:05.524Z\"</span>\n    <span>}</span>\n  <span>]</span>\n<span>}</span>\n</code></pre><div aria-hidden=\"true\"><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br></div></div><p>如果我们不传递createTime，会出现异常，应该createTime是DateTime，不能为null，只有DateTime?才能为null,有?为可空类型。</p>\n<p>所以我们应该为POST方式传递过来时，新建一个实体类，我们称之为DTO(Data Transfer Object)，即数据传输对象，因为createTime即使传递，后端为他赋了值，前台传了也无效。有了DTO，这样可让前端清楚他们应该传递的参数，而不会出现没有作用的参数。</p>\n<p>在根目录创建Models/Blogs文件夹，在Blogs文件夹中创建</p>\n<h3 id=\"createblogdto-cs\" tabindex=\"-1\"> CreateBlogDto.cs</h3>\n<div><pre><code><span>namespace</span> <span>RESTful<span>.</span>FreeSql<span>.</span>Models<span>.</span>Blogs</span>\n<span>{</span>\n    <span>public</span> <span>class</span> <span>CreateBlogDto</span>\n    <span>{</span>\n        <span>public</span> <span><span>string</span></span> Title <span>{</span> <span>get</span><span>;</span> <span>set</span><span>;</span> <span>}</span>\n        <span>public</span> <span><span>string</span></span> Content <span>{</span> <span>get</span><span>;</span> <span>set</span><span>;</span> <span>}</span>\n\n    <span>}</span>\n<span>}</span>\n\n</code></pre><div aria-hidden=\"true\"><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br></div></div><h3 id=\"updateblogdto-cs\" tabindex=\"-1\"> UpdateBlogDto.cs</h3>\n<div><pre><code><span>namespace</span> <span>RESTful<span>.</span>FreeSql<span>.</span>Models<span>.</span>Blogs</span>\n<span>{</span>\n    <span>public</span> <span>class</span> <span>UpdateBlogDto</span>\n    <span>{</span>\n        <span>public</span> <span><span>int</span></span> BlogId <span>{</span> <span>get</span><span>;</span> <span>set</span><span>;</span> <span>}</span>\n        <span>public</span> <span><span>string</span></span> Title <span>{</span> <span>get</span><span>;</span> <span>set</span><span>;</span> <span>}</span>\n        <span>public</span> <span><span>string</span></span> Content <span>{</span> <span>get</span><span>;</span> <span>set</span><span>;</span> <span>}</span>\n    <span>}</span>\n<span>}</span>\n\n\n</code></pre><div aria-hidden=\"true\"><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br></div></div><p>有了Dto后，我们会发现了新的问题，往数据库插入时，往往使用了一些ORM,他们只支持原本的实体类，如Blog，Post。但不支持CreateBlogDto、UpdateBlogDto,我们可以手动，将一个类的值，赋值给另一个类。\n如</p>\n<div><pre><code>    <span>CreateBlogDto</span> createBlogDto <span>=</span> <span>new</span> <span>CreateBlogDto</span><span>(</span><span>)</span>\n    <span>{</span>\n        Title <span>=</span> <span>\"我是title\"</span><span>,</span>\n        Content <span>=</span> <span>\"我是content\"</span>\n    <span>}</span><span>;</span>\n\n    <span>Blog</span> newBlog<span>=</span><span>new</span> <span>Blog</span><span>(</span><span>)</span>\n    <span>{</span>\n        Title <span>=</span> createBlogDto<span>.</span>Title<span>,</span>\n        Content <span>=</span> createBlogDto<span>.</span>Content\n    <span>}</span><span>;</span>\n</code></pre><div aria-hidden=\"true\"><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br></div></div><p>现在只是非常简单的二个属性，我们还能忍受，但如果是十个属性、而且有着大量的类与类之间的转换呢。这时修改AutoMapper就闪亮登场了。</p>\n<h2 id=\"automapper\" tabindex=\"-1\"> AutoMapper</h2>\n<blockquote>\n<p>作用：A convention-based object-object mapper.</p>\n</blockquote>\n<p>我们是在ASP .NET Core下使用AutoMapper <a href=\"https://automapper.readthedocs.io/en/latest/Dependency-injection.html\" target=\"_blank\" rel=\"noopener noreferrer\">官网介绍，如何依赖注入中使用</a></p>\n<h3 id=\"setup\" tabindex=\"-1\"> Setup</h3>\n<p>先cd到dotnetcore-examples\\aspnetcore-freesql\\RESTful.FreeSql目录</p>\n<div><pre><code>PS &gt; dotnet add package AutoMapper\nPS &gt; dotnet add package AutoMapper.Extensions.Microsoft.DependencyInjection --version 6.1.1\n</code></pre><div aria-hidden=\"true\"><span>1</span><br><span>2</span><br></div></div><p>在StartUp.cs中的ConfigureServices配置如下</p>\n<div><pre><code>   public void ConfigureServices(IServiceCollection services)\n    {\n        // .... Ignore code before this\n        \n        //AddAutoMapper会去找继承Profile的类，\n        services.AddAutoMapper(AppDomain.CurrentDomain.GetAssemblies());\n\n        // .... Ignore code after this\n    }\n</code></pre><div aria-hidden=\"true\"><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br></div></div><h3 id=\"adding-profiles\" tabindex=\"-1\"> Adding Profiles</h3>\n<p>AutoMapper/BlogProfile.cs</p>\n<div><pre><code><span>using</span> <span>AutoMapper</span><span>;</span>\n<span>using</span> <span>RESTful<span>.</span>FreeSql<span>.</span>Domain</span><span>;</span>\n<span>using</span> <span>RESTful<span>.</span>FreeSql<span>.</span>Models<span>.</span>Blogs</span><span>;</span>\n\n<span>namespace</span> <span>RESTful<span>.</span>FreeSql<span>.</span>AutoMapper</span>\n<span>{</span>\n    <span>public</span> <span>class</span> <span>BlogProfile</span> <span>:</span> <span><span>Profile</span></span>\n    <span>{</span>\n        <span>public</span> <span>BlogProfile</span><span>(</span><span>)</span> \n        <span>{</span>\n            <span><span>CreateMap</span><span><span>&lt;</span>CreateBlogDto<span>,</span> Blog<span>></span></span></span><span>(</span><span>)</span><span>;</span>\n            <span><span>CreateMap</span><span><span>&lt;</span>UpdateBlogDto<span>,</span> Blog<span>></span></span></span><span>(</span><span>)</span><span>;</span>\n        <span>}</span>\n    <span>}</span>\n<span>}</span>\n</code></pre><div aria-hidden=\"true\"><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br></div></div><p>AutoMapper/BlogProfile.cs</p>\n<div><pre><code><span>using</span> <span>AutoMapper</span><span>;</span>\n<span>using</span> <span>RESTful<span>.</span>FreeSql<span>.</span>Domain</span><span>;</span>\n<span>using</span> <span>RESTful<span>.</span>FreeSql<span>.</span>Models<span>.</span>Blogs</span><span>;</span>\n\n<span>namespace</span> <span>RESTful<span>.</span>FreeSql<span>.</span>AutoMapper</span>\n<span>{</span>\n    <span>public</span> <span>class</span> <span>PostProfile</span> <span>:</span> <span><span>Profile</span></span>\n    <span>{</span>\n        <span>public</span> <span>PostProfile</span><span>(</span><span>)</span>\n        <span>{</span>\n            <span><span>CreateMap</span><span><span>&lt;</span>CreatePostDto<span>,</span>Post<span>></span></span></span><span>(</span><span>)</span><span>;</span>\n        <span>}</span>\n    <span>}</span>\n<span>}</span>\n</code></pre><div aria-hidden=\"true\"><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br></div></div><p>Models/Posts/SearchPostDto.cs根据博客id，得到分页的评论时，集成分页类</p>\n<div><pre><code><span>using</span> <span>RESTful<span>.</span>FreeSql<span>.</span>Web</span><span>;</span>\n\n<span>namespace</span> <span>RESTful<span>.</span>FreeSql<span>.</span>Models<span>.</span>Posts</span>\n<span>{</span>\n    <span>public</span> <span>class</span> <span>SearchPostDto</span><span>:</span><span><span>PageDto</span></span>\n    <span>{</span>\n        <span>public</span> <span><span>int</span></span> BlogId <span>{</span> <span>get</span><span>;</span> <span>set</span><span>;</span> <span>}</span>\n    <span>}</span>\n<span>}</span>\n\n</code></pre><div aria-hidden=\"true\"><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br></div></div><p>Controlers/BlogController.cs文件中，注入IMapper,</p>\n<div><pre><code><span>using</span> <span>AutoMapper</span><span>;</span>\n<span>using</span> <span>Microsoft<span>.</span>AspNetCore<span>.</span>Mvc</span><span>;</span>\n<span>using</span> <span>System</span><span>;</span>\n<span>using</span> <span>System<span>.</span>Collections<span>.</span>Generic</span><span>;</span>\n<span>using</span> <span>RESTful<span>.</span>FreeSql<span>.</span>Domain</span><span>;</span>\n<span>using</span> <span>RESTful<span>.</span>FreeSql<span>.</span>Models<span>.</span>Blogs</span><span>;</span>\n<span>using</span> <span>RESTful<span>.</span>FreeSql<span>.</span>Web</span><span>;</span>\n\n<span>namespace</span> <span>RESTful<span>.</span>FreeSql<span>.</span>Controllers</span>\n<span>{</span>\n    <span>[</span><span><span>Route</span><span><span>(</span><span>\"api/[controller]\"</span><span>)</span></span></span><span>]</span>\n    <span>[</span><span><span>ApiController</span></span><span>]</span>\n    <span>public</span> <span>class</span> <span>BlogController</span> <span>:</span> <span><span>ControllerBase</span></span>\n    <span>{</span>\n        <span>// GET api/Blog</span>\n\n        <span>private</span> <span>readonly</span> <span>IFreeSql</span> _fsql<span>;</span>\n        <span>private</span> <span>readonly</span> <span>IMapper</span> _mapper<span>;</span>\n        <span>public</span> <span>BlogController</span><span>(</span><span>IFreeSql</span> fsql<span>,</span> <span>IMapper</span> mapper<span>)</span>\n        <span>{</span>\n            _fsql <span>=</span> fsql<span>;</span>\n            _mapper <span>=</span> mapper<span>;</span>\n        <span>}</span>\n\n        <span>/// <span><span><span>&lt;</span>summary</span><span>></span></span></span>\n        <span>/// 博客列表页 </span>\n        <span>/// <span><span><span>&lt;/</span>summary</span><span>></span></span></span>\n        <span>/// <span><span><span>&lt;</span>param</span> <span>name</span><span><span>=</span><span>\"</span>pageDto<span>\"</span></span><span>></span></span>分页参数<span><span><span>&lt;/</span>param</span><span>></span></span></span>\n        <span>/// <span><span><span>&lt;</span>returns</span><span>></span></span><span><span><span>&lt;/</span>returns</span><span>></span></span></span>\n        <span>[</span>HttpGet<span>]</span>\n        <span>public</span> <span>ActionResult<span>&lt;</span>PagedResultDto<span>&lt;</span>Blog<span>></span><span>></span></span> <span>Get</span><span>(</span><span>[</span><span><span>FromQuery</span></span><span>]</span><span>PageDto</span> pageDto<span>)</span>\n        <span>{</span>\n            <span>List<span>&lt;</span>Blog<span>></span></span> blogs <span>=</span> _fsql<span>.</span><span><span>Select</span><span><span>&lt;</span>Blog<span>></span></span></span><span>(</span><span>)</span><span>.</span><span>OrderByDescending</span><span>(</span>r <span>=></span> r<span>.</span>CreateTime<span>)</span><span>.</span><span>Page</span><span>(</span>pageDto<span>.</span>PageNumber<span>,</span> pageDto<span>.</span>PageSize<span>)</span><span>.</span><span>ToList</span><span>(</span><span>)</span><span>;</span>\n            <span><span>long</span></span> count <span>=</span> _fsql<span>.</span><span><span>Select</span><span><span>&lt;</span>Blog<span>></span></span></span><span>(</span><span>)</span><span>.</span><span>Count</span><span>(</span><span>)</span><span>;</span>\n            <span>return</span> <span>new</span> <span>PagedResultDto<span>&lt;</span>Blog<span>></span></span><span>(</span>count<span>,</span> blogs<span>)</span><span>;</span>\n        <span>}</span>\n\n        <span>// GET api/blog/5</span>\n        <span>[</span><span>HttpGet</span><span>(</span><span>\"{id}\"</span><span>)</span><span>]</span>\n        <span>public</span> <span>ActionResult<span>&lt;</span>Blog<span>></span></span> <span>Get</span><span>(</span><span><span>int</span></span> id<span>)</span>\n        <span>{</span>\n            <span>// eg.1 return _fsql.Select&lt;Blog>().Where(a => a.Id == id).ToOne();</span>\n            <span>// eg.2</span>\n            <span>return</span> _fsql<span>.</span><span><span>Select</span><span><span>&lt;</span>Blog<span>></span></span></span><span>(</span>id<span>)</span><span>.</span><span>ToOne</span><span>(</span><span>)</span><span>;</span>\n        <span>}</span>\n\n        <span>// POST api/blog</span>\n        <span>[</span>HttpPost<span>]</span>\n        <span>public</span> <span><span>void</span></span> <span>Post</span><span>(</span><span>[</span><span><span>FromBody</span></span><span>]</span> <span>CreateBlogDto</span> createBlogDto<span>)</span>\n        <span>{</span>\n            <span>Blog</span> blog <span>=</span> _mapper<span>.</span><span><span>Map</span><span><span>&lt;</span>Blog<span>></span></span></span><span>(</span>createBlogDto<span>)</span><span>;</span>\n            blog<span>.</span>CreateTime <span>=</span> DateTime<span>.</span>Now<span>;</span>\n            _fsql<span>.</span><span><span>Insert</span><span><span>&lt;</span>Blog<span>></span></span></span><span>(</span>blog<span>)</span><span>.</span><span>ExecuteAffrows</span><span>(</span><span>)</span><span>;</span>\n        <span>}</span>\n\n        <span>// PUT api/blog</span>\n        <span>[</span>HttpPut<span>]</span>\n        <span>public</span> <span><span>void</span></span> <span>Put</span><span>(</span><span>[</span><span><span>FromBody</span></span><span>]</span> <span>UpdateBlogDto</span> updateBlogDto<span>)</span>\n        <span>{</span>\n\n            <span>//eg.1 更新指定列</span>\n            <span>//_fsql.Update&lt;Blog>(updateBlogDto.BlogId).Set(a => new Blog()</span>\n            <span>//{</span>\n            <span>//    Title = updateBlogDto.Title,</span>\n            <span>//    Content = updateBlogDto.Content</span>\n            <span>//}).ExecuteAffrows();</span>\n\n            <span>//eg.2将这个实体更新到数据库中。当更新时，会把其他列的值，如CreateTime也更新掉。</span>\n            <span>//使用IgnoreColumns可忽略某一些列。</span>\n\n            <span>Blog</span> blog <span>=</span> _mapper<span>.</span><span><span>Map</span><span><span>&lt;</span>Blog<span>></span></span></span><span>(</span>updateBlogDto<span>)</span><span>;</span>\n            _fsql<span>.</span><span><span>Update</span><span><span>&lt;</span>Blog<span>></span></span></span><span>(</span><span>)</span><span>.</span><span>SetSource</span><span>(</span>blog<span>)</span><span>.</span><span>IgnoreColumns</span><span>(</span>r <span>=></span> r<span>.</span>CreateTime<span>)</span><span>.</span><span>ExecuteAffrows</span><span>(</span><span>)</span><span>;</span>\n        <span>}</span>\n\n        <span>// DELETE api/blog/5</span>\n        <span>[</span><span>HttpDelete</span><span>(</span><span>\"{id}\"</span><span>)</span><span>]</span>\n        <span>public</span> <span><span>void</span></span> <span>Delete</span><span>(</span><span><span>int</span></span> id<span>)</span>\n        <span>{</span>\n            _fsql<span>.</span><span><span>Delete</span><span><span>&lt;</span>Blog<span>></span></span></span><span>(</span><span>new</span> <span>{</span> BlogId <span>=</span> id <span>}</span><span>)</span><span>.</span><span>ExecuteAffrows</span><span>(</span><span>)</span><span>;</span>\n        <span>}</span>\n    <span>}</span>\n<span>}</span>\n</code></pre><div aria-hidden=\"true\"><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br><span>24</span><br><span>25</span><br><span>26</span><br><span>27</span><br><span>28</span><br><span>29</span><br><span>30</span><br><span>31</span><br><span>32</span><br><span>33</span><br><span>34</span><br><span>35</span><br><span>36</span><br><span>37</span><br><span>38</span><br><span>39</span><br><span>40</span><br><span>41</span><br><span>42</span><br><span>43</span><br><span>44</span><br><span>45</span><br><span>46</span><br><span>47</span><br><span>48</span><br><span>49</span><br><span>50</span><br><span>51</span><br><span>52</span><br><span>53</span><br><span>54</span><br><span>55</span><br><span>56</span><br><span>57</span><br><span>58</span><br><span>59</span><br><span>60</span><br><span>61</span><br><span>62</span><br><span>63</span><br><span>64</span><br><span>65</span><br><span>66</span><br><span>67</span><br><span>68</span><br><span>69</span><br><span>70</span><br><span>71</span><br><span>72</span><br><span>73</span><br><span>74</span><br><span>75</span><br><span>76</span><br><span>77</span><br><span>78</span><br><span>79</span><br><span>80</span><br><span>81</span><br><span>82</span><br></div></div><p>Controlers/BlogController.cs文件中，注入IMapper,</p>\n<div><pre><code><span>using</span> <span>FreeSql</span><span>;</span>\n<span>using</span> <span>Microsoft<span>.</span>AspNetCore<span>.</span>Mvc</span><span>;</span>\n<span>using</span> <span>System</span><span>;</span>\n<span>using</span> <span>System<span>.</span>Collections<span>.</span>Generic</span><span>;</span>\n<span>using</span> <span>System<span>.</span>Threading<span>.</span>Tasks</span><span>;</span>\n<span>using</span> <span>AutoMapper</span><span>;</span>\n<span>using</span> <span>RESTful<span>.</span>FreeSql<span>.</span>Domain</span><span>;</span>\n<span>using</span> <span>RESTful<span>.</span>FreeSql<span>.</span>Models<span>.</span>Posts</span><span>;</span>\n<span>using</span> <span>RESTful<span>.</span>FreeSql<span>.</span>Web</span><span>;</span>\n\n<span>namespace</span> <span>RESTful<span>.</span>FreeSql<span>.</span>Controllers</span>\n<span>{</span>\n    <span>[</span><span><span>Route</span><span><span>(</span><span>\"api/[controller]\"</span><span>)</span></span></span><span>]</span>\n    <span>[</span><span><span>ApiController</span></span><span>]</span>\n    <span>public</span> <span>class</span> <span>PostController</span> <span>:</span> <span><span>ControllerBase</span></span>\n    <span>{</span>\n        <span>// GET: api/Post</span>\n        <span>private</span> <span>readonly</span> <span>IFreeSql</span> _fsql<span>;</span>\n        <span>private</span> <span>readonly</span> <span>IMapper</span> _mapper<span>;</span>\n        <span>public</span> <span>PostController</span><span>(</span><span>IFreeSql</span> fsql<span>,</span> <span>IMapper</span> mapper<span>)</span>\n        <span>{</span>\n            _fsql <span>=</span> fsql<span>;</span>\n            _mapper <span>=</span> mapper<span>;</span>\n        <span>}</span>\n\n        <span>/// <span><span><span>&lt;</span>summary</span><span>></span></span></span>\n        <span>/// 根据博客id、分页条件查询评论信息</span>\n        <span>/// <span><span><span>&lt;/</span>summary</span><span>></span></span></span>\n        <span>/// <span><span><span>&lt;</span>param</span> <span>name</span><span><span>=</span><span>\"</span>searchPostDto<span>\"</span></span><span>></span></span><span><span><span>&lt;/</span>param</span><span>></span></span></span>\n        <span>/// <span><span><span>&lt;</span>returns</span><span>></span></span><span><span><span>&lt;/</span>returns</span><span>></span></span></span>\n        <span>[</span>HttpGet<span>]</span>\n        <span>public</span> <span>PagedResultDto<span>&lt;</span>Post<span>></span></span> <span>Get</span><span>(</span><span>SearchPostDto</span> searchPostDto<span>)</span>\n        <span>{</span>\n            <span>ISelect<span>&lt;</span>Post<span>></span></span> selectPost <span>=</span> _fsql\n                <span>.</span><span><span>Select</span><span><span>&lt;</span>Post<span>></span></span></span><span>(</span><span>)</span>\n                <span>.</span><span>Where</span><span>(</span>r <span>=></span> r<span>.</span>BlogId <span>==</span> searchPostDto<span>.</span>BlogId<span>)</span><span>;</span>\n\n            <span>List<span>&lt;</span>Post<span>></span></span> posts <span>=</span> selectPost<span>.</span><span>OrderByDescending</span><span>(</span>r <span>=></span> r<span>.</span>ReplyTime<span>)</span>\n                <span>.</span><span>Page</span><span>(</span>searchPostDto<span>.</span>PageNumber<span>,</span> searchPostDto<span>.</span>PageSize<span>)</span>\n                <span>.</span><span>ToList</span><span>(</span><span>)</span><span>;</span>\n\n            <span><span>long</span></span> total <span>=</span> selectPost<span>.</span><span>Count</span><span>(</span><span>)</span><span>;</span>\n\n            <span>return</span> <span>new</span> <span>PagedResultDto<span>&lt;</span>Post<span>></span></span><span>(</span>total<span>,</span> posts<span>)</span><span>;</span>\n        <span>}</span>\n\n        <span>// GET: api/Post/5</span>\n        <span>[</span><span>HttpGet</span><span>(</span><span>\"{id}\"</span><span>,</span> Name <span>=</span> <span>\"Get\"</span><span>)</span><span>]</span>\n        <span>public</span> <span>Post</span> <span>Get</span><span>(</span><span><span>int</span></span> id<span>)</span>\n        <span>{</span>\n            <span>return</span> _fsql<span>.</span><span><span>Select</span><span><span>&lt;</span>Post<span>></span></span></span><span>(</span><span>)</span><span>.</span><span>Where</span><span>(</span>a <span>=></span> a<span>.</span>PostId <span>==</span> id<span>)</span><span>.</span><span>ToOne</span><span>(</span><span>)</span><span>;</span>\n        <span>}</span>\n\n        <span>// POST: api/Post</span>\n        <span>[</span>HttpPost<span>]</span>\n        <span>public</span> <span><span>void</span></span> <span>Post</span><span>(</span><span>[</span><span><span>FromBody</span></span><span>]</span> <span>CreatePostDto</span> createPostDto<span>)</span>\n        <span>{</span>\n            <span>Post</span> post <span>=</span> _mapper<span>.</span><span><span>Map</span><span><span>&lt;</span>Post<span>></span></span></span><span>(</span>createPostDto<span>)</span><span>;</span>\n            post<span>.</span>ReplyTime <span>=</span> DateTime<span>.</span>Now<span>;</span>\n            _fsql<span>.</span><span>Insert</span><span>(</span>post<span>)</span><span>.</span><span>ExecuteAffrows</span><span>(</span><span>)</span><span>;</span>\n        <span>}</span>\n\n\n        <span>// DELETE: api/Post/</span>\n        <span>[</span><span><span>HttpDelete</span><span><span>(</span><span>\"{id}\"</span><span>)</span></span></span><span>]</span>\n        <span>public</span> <span>async</span> <span>Task</span> <span>DeleteAsync</span><span>(</span><span><span>int</span></span> id<span>)</span>\n        <span>{</span>\n            <span>await</span> _fsql<span>.</span><span><span>Delete</span><span><span>&lt;</span>Post<span>></span></span></span><span>(</span><span>new</span> <span>Post</span> <span>{</span> PostId <span>=</span> id <span>}</span><span>)</span><span>.</span><span>ExecuteAffrowsAsync</span><span>(</span><span>)</span><span>;</span>\n        <span>}</span>\n    <span>}</span>\n<span>}</span>\n\n</code></pre><div aria-hidden=\"true\"><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br><span>24</span><br><span>25</span><br><span>26</span><br><span>27</span><br><span>28</span><br><span>29</span><br><span>30</span><br><span>31</span><br><span>32</span><br><span>33</span><br><span>34</span><br><span>35</span><br><span>36</span><br><span>37</span><br><span>38</span><br><span>39</span><br><span>40</span><br><span>41</span><br><span>42</span><br><span>43</span><br><span>44</span><br><span>45</span><br><span>46</span><br><span>47</span><br><span>48</span><br><span>49</span><br><span>50</span><br><span>51</span><br><span>52</span><br><span>53</span><br><span>54</span><br><span>55</span><br><span>56</span><br><span>57</span><br><span>58</span><br><span>59</span><br><span>60</span><br><span>61</span><br><span>62</span><br><span>63</span><br><span>64</span><br><span>65</span><br><span>66</span><br><span>67</span><br><span>68</span><br><span>69</span><br><span>70</span><br><span>71</span><br><span>72</span><br></div></div><h3 id=\"参考\" tabindex=\"-1\"> 参考</h3>\n<ul>\n<li>建议大家先看官网 <a href=\"http://automapper.org/\" target=\"_blank\" rel=\"noopener noreferrer\">http://automapper.org/</a></li>\n<li>开源地址 <a href=\"https://github.com/AutoMapper/AutoMapper\" target=\"_blank\" rel=\"noopener noreferrer\">https://github.com/AutoMapper/AutoMapper</a></li>\n<li>Getting-started 文档 <a href=\"https://automapper.readthedocs.io/en/latest/Getting-started.html#what-is-automapper\" target=\"_blank\" rel=\"noopener noreferrer\">https://automapper.readthedocs.io/en/latest/Getting-started.html#what-is-automapper</a></li>\n</ul>\n",
      "date_published": "2020-02-28T11:10:31.000Z",
      "date_modified": "2020-05-08T15:01:00.000Z",
      "authors": [],
      "tags": []
    },
    {
      "title": "IdentityServer4",
      "url": "https://igeekfan.cn/igeekfan-docs/dotnetcore/examples/IdentityServer4.html",
      "id": "https://igeekfan.cn/igeekfan-docs/dotnetcore/examples/IdentityServer4.html",
      "content_html": "<h1 id=\"identityserver4\" tabindex=\"-1\"> IdentityServer4</h1>\n<h2 id=\"写的一些identityserver4的示例\" tabindex=\"-1\"> 写的一些IdentityServer4的示例</h2>\n<p>IdentityServer4 实现单点登录授权token验证</p>\n<h2 id=\"源码\" tabindex=\"-1\"> 源码</h2>\n<p>代码托管在GitHub上 <a href=\"https://github.com/luoyunchong/dotnetcore-examples/tree/master/aspnetcore-identityserver4\" target=\"_blank\" rel=\"noopener noreferrer\">https://github.com/luoyunchong/dotnetcore-examples/tree/master/aspnetcore-identityserver4</a></p>\n<h2 id=\"参考\" tabindex=\"-1\"> 参考</h2>\n<ul>\n<li><a href=\"https://www.cnblogs.com/edisonchou/p/identityserver4_foundation_and_quickstart_01.html\" target=\"_blank\" rel=\"noopener noreferrer\">.NET Core微服务之基于IdentityServer建立授权与验证服务</a></li>\n</ul>\n",
      "date_published": "2020-02-28T11:10:31.000Z",
      "date_modified": "2020-05-08T15:01:00.000Z",
      "authors": [],
      "tags": []
    },
    {
      "title": "ImCore 即时通讯",
      "url": "https://igeekfan.cn/igeekfan-docs/dotnetcore/examples/ImCore-Chat.html",
      "id": "https://igeekfan.cn/igeekfan-docs/dotnetcore/examples/ImCore-Chat.html",
      "content_html": "<h1 id=\"imcore-即时通讯\" tabindex=\"-1\"> ImCore 即时通讯</h1>\n<h2 id=\"简介\" tabindex=\"-1\"> 简介</h2>\n<p>利用 webSocket 协议实现简易、高性能、集群即时通讯组件，支持点对点通讯、群聊通讯、上线下线事件消息等众多实用性功能。</p>\n<h2 id=\"开源地址\" tabindex=\"-1\"> 开源地址</h2>\n<p><a href=\"https://github.com/2881099/im\" target=\"_blank\" rel=\"noopener noreferrer\">https://github.com/2881099/im</a></p>\n<h2 id=\"示例\" tabindex=\"-1\"> 示例</h2>\n<p><a href=\"https://github.com/luoyunchong/dotnetcore-examples/tree/master/dotnet-core-im\" target=\"_blank\" rel=\"noopener noreferrer\">https://github.com/luoyunchong/dotnetcore-examples/tree/master/dotnet-core-im</a></p>\n<h2 id=\"演示效果\" tabindex=\"-1\"> 演示效果</h2>\n<p><img src=\"https://ae01.alicdn.com/kf/Hf8b31f05dbb94f8da565fce29f78aa78Y.png\" alt=\"https://ae01.alicdn.com/kf/Hf8b31f05dbb94f8da565fce29f78aa78Y.png\" loading=\"lazy\"></p>\n",
      "image": "https://ae01.alicdn.com/kf/Hf8b31f05dbb94f8da565fce29f78aa78Y.png",
      "date_published": "2020-02-28T11:10:31.000Z",
      "date_modified": "2020-02-28T11:10:31.000Z",
      "authors": [],
      "tags": []
    },
    {
      "title": ".NET Core 学习示例文档",
      "url": "https://igeekfan.cn/igeekfan-docs/dotnetcore/examples/",
      "id": "https://igeekfan.cn/igeekfan-docs/dotnetcore/examples/",
      "content_html": "<h1 id=\"net-core-学习示例文档\" tabindex=\"-1\"> .NET Core 学习示例文档</h1>\n<p>浏览左侧导航菜单以深入了解文档.</p>\n<p>.NET Core 学习示例文档主要是结合 ASP .NET Core，集成第三方类库的示例，运用基础组件，写好 Demo。</p>\n<h2 id=\"源码\" tabindex=\"-1\"> 源码</h2>\n<p>代码托管在 GitHub 上 <a href=\"https://github.com/luoyunchong/dotnetcore-examples\" target=\"_blank\" rel=\"noopener noreferrer\">https://github.com/luoyunchong/dotnetcore-examples</a></p>\n<h2 id=\"推荐阅读\" tabindex=\"-1\"> 推荐阅读</h2>\n<ul>\n<li>Microsoft Docs <a href=\"https://docs.microsoft.com/zh-cn\" target=\"_blank\" rel=\"noopener noreferrer\">https://docs.microsoft.com/zh-cn</a>\n其中包含如下\n<ul>\n<li>.NET Core 指南 https://docs.microsoft.com/zh-cn/dotnet/core/</li>\n<li>ASP .NET 文档 https://docs.microsoft.com/zh-cn/aspnet/</li>\n<li>.NET Core CLI 文档 https://docs.microsoft.com/zh-cn/dotnet/core/tools/?tabs=netcore2x</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"本地环境说明\" tabindex=\"-1\"> 本地环境说明</h2>\n<ul>\n<li>Windows 10 (18922.rs_prerelease.190614-1427)</li>\n<li>.NET Core 3.0.100-preview6-012264</li>\n<li>Visual Studio Code 1.35.1、Microsoft Visual Studio 2019 16.1.3</li>\n<li>PowerSheel</li>\n<li>MySQL 5.7.25</li>\n<li>Navicat Premium 12 <a href=\"http://blog.igeekfan.cn/2018/06/02/%E5%A4%A7%E5%90%8E%E7%AB%AF/Navicat%20Premium%2012%20%20%E7%A0%B4%E8%A7%A3%E7%89%88%E5%85%8D%E8%B4%B9%E4%B8%8B%E8%BD%BD/\" target=\"_blank\" rel=\"noopener noreferrer\">欢迎下载</a></li>\n</ul>\n<h2 id=\"install\" tabindex=\"-1\"> Install</h2>\n<p>本地开发选择 SDK 安装即可，还是安装 2.2 的吧，3.0（19.6.29）目前还没有发布稳定版本。</p>\n<ul>\n<li>安装这个 <strong>https://dotnet.microsoft.com/download/dotnet-core/2.2</strong></li>\n<li>https://dotnet.microsoft.com/download/dotnet-core/3.0</li>\n</ul>\n<p>安装后，在 PowerShell 中任一目录查看安装后的版本</p>\n<div><pre><code>PS C:\\WINDOWS\\system32&gt; dotnet --version\n3.0.100-preview6-012264\n# 本地安装了好几个.net core sdk版本\nPS C:\\WINDOWS\\system32&gt; dotnet --list-sdks\n2.1.700 [C:\\Program Files\\dotnet\\sdk]\n2.2.300 [C:\\Program Files\\dotnet\\sdk]\n3.0.100-preview6-012264 [C:\\Program Files\\dotnet\\sdk]\n</code></pre><div aria-hidden=\"true\"><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br></div></div><h2 id=\"cli\" tabindex=\"-1\"> CLI</h2>\n<p>全称：command-line interface，命令行界面，主要是 cmd、bash(sh 等等)、powershell 等。</p>\n<blockquote>\n<p>说明 <strong>所有命令行都在 windows10 自带的 powershell 中执行。</strong></p>\n</blockquote>\n<h3 id=\"指定-sdk-版本\" tabindex=\"-1\"> 指定 SDK 版本</h3>\n<p>.NET Core 项目默认使用最新版本的 .NET Core，在根目录使用 PowerShell 中执行如下命令，</p>\n<p>语法 ：dotnet new global.json --sdk-version &lt;SDK 版本号&gt;</p>\n<div><pre><code>dotnet new globaljson --sdk-version 2.2.300\n</code></pre><div aria-hidden=\"true\"><span>1</span><br></div></div><p>参考</p>\n<ul>\n<li><a href=\"https://docs.microsoft.com/zh-cn/dotnet/core/tools/dotnet-new?tabs=netcore22\" target=\"_blank\" rel=\"noopener noreferrer\">dotnet new 命令行</a></li>\n<li><a href=\"https://docs.microsoft.com/zh-cn/dotnet/core/versions/selection?view=dotnet-plat-ext-2.1\" target=\"_blank\" rel=\"noopener noreferrer\">选择要使用的 .NET Core 版本</a></li>\n</ul>\n<h2 id=\"net-core\" tabindex=\"-1\"> .NET Core</h2>\n<p>.NET Core 是什么？ 官网说的太高大上了 https://docs.microsoft.com/zh-cn/dotnet/core/about</p>\n<p>总结，.NET Core 包含如下</p>\n<ul>\n<li>二个 RunTime\n<ul>\n<li>.NET Core RunTime：基础类型系统 、垃圾回收、基元类型等，</li>\n<li>ASP .NET RunTime ：提供 WEB、LOT 等应用程序的框架支持。</li>\n</ul>\n</li>\n<li>.NET Core CLI 工具：各种命令行工具，创建项目、编译项目，发布项目等；</li>\n<li>语言编译器：（支持 C#、F#、VB 等语言）</li>\n<li>dotnet 工具：.NET Core 运行时和库的安装程序包</li>\n</ul>\n<p>三个发布包：</p>\n<ul>\n<li>.NET Core 运行时</li>\n<li>ASP .NET Core 运行时</li>\n<li>.NET Core SDK：包括上面二个内容，再加上 .NET CLI 工具等</li>\n</ul>\n<p>所以本地调试时，可直接安装最全的 SDK 即可。</p>\n<h2 id=\"项目文档\" tabindex=\"-1\"> 项目文档</h2>\n<p>目前 关于此项目的文档放到 docs 文件夹中，zh-Hans 为中文，这样可支持多语言，欢迎翻译 PR，之后会发布至</p>\n<ul>\n<li>文档官网 <a href=\"https://luoyunchong.github.io/vuepress-docs/\" target=\"_blank\" rel=\"noopener noreferrer\">https://luoyunchong.github.io/vuepress-docs/</a></li>\n</ul>\n<p>将使用 abp vnext 下的 modules 的<a href=\"https://github.com/abpframework/abp/blob/dev/modules/docs/README.md\" target=\"_blank\" rel=\"noopener noreferrer\">docs 模块</a>。不过 abp vnext 现在也不稳定，0.18.1，还是有各种问题，我还是写基础模块的使用文档吧，后期完善后，发布文档网站。</p>\n<h2 id=\"说明\" tabindex=\"-1\"> 说明</h2>\n<p>本项目也是我的学习记录，，用于测试不同类库集成的解决方案，所以用最基础的方案，<strong>命令行</strong>来创建项目，引用包，运行，测试等。让自己对 .net core 的原理结构了解地更加深入一些。</p>\n<ul>\n<li>采用的都是 Visual Studio Code/VS2019 +PowerShell 运行，关于如何采用 Visual Studio 2019 创建项目，引用包是非常简单的，不再说明。</li>\n</ul>\n",
      "date_published": "2020-02-28T11:10:31.000Z",
      "date_modified": "2022-06-02T11:02:17.000Z",
      "authors": [],
      "tags": []
    },
    {
      "title": "认证鉴权状态",
      "url": "https://igeekfan.cn/igeekfan-docs/dotnetcore/lin-cms/IdentityServer4-JWT.html",
      "id": "https://igeekfan.cn/igeekfan-docs/dotnetcore/lin-cms/IdentityServer4-JWT.html",
      "content_html": "<h1 id=\"认证鉴权状态\" tabindex=\"-1\"> 认证鉴权状态</h1>\n<p>认证分为以下情况：当前角色为管理员，该分组配置了权限，该分组未分配某一方法的权限.</p>\n<p>状态码（StatusCode):401 UnAuthorized</p>\n<table>\n<thead>\n<tr>\n<th>StatusCode</th>\n<th>含义</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>401 UnAuthorized</td>\n<td>未授权、无权限、未登录</td>\n</tr>\n<tr>\n<td>422  UNPROCESSABLE ENTITY</td>\n<td>令牌失效</td>\n</tr>\n<tr>\n<td>200</td>\n<td>访问正常</td>\n</tr>\n</tbody>\n</table>\n<ol>\n<li>未登录，不带access_token，直接请求需要登录的接口、管理员接口结果一样。</li>\n</ol>\n<p>返回结果应为：状态码：401 UNAUTHORIZED</p>\n<div><pre><code>{\n    \"error_code\": 10000,\n    \"msg\": \"认证失败，请检查请求头或者重新登陆\",\n    \"request\": \"GET  /cms/admin/authority\"\n}\n</code></pre><div aria-hidden=\"true\"><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br></div></div><ol start=\"2\">\n<li>携带access_token，但非超级管理员(admin字段为2),访问的方法为角色为超管才有权限的方法。</li>\n</ol>\n<div><pre><code>[LinCmsAuthorize(Roles = LinGroup.Administrator)]\n</code></pre><div aria-hidden=\"true\"><span>1</span><br></div></div><p>返回结果应为：：状态码：401 UNAUTHORIZED</p>\n<div><pre><code>{\n    \"error_code\": 10000,\n    \"msg\": \"只有超级管理员可操作\",\n    \"request\": \"GET  /cms/admin/authority\"\n}\n</code></pre><div aria-hidden=\"true\"><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br></div></div><ol start=\"3\">\n<li>携带access_token ，访问只需要登录的接口（/cms/user/auths）</li>\n</ol>\n<p>控制器或方法上指定 <strong>[Authorize]</strong> 或 <strong>[LinCmsAuthorize]</strong> 特性标签时，必须登录才能访问，否则返回第一种结果。</p>\n<p>返回结果应为：状态码：200</p>\n<div><pre><code>{\n    \"active\": 1,\n    \"admin\": 1,\n    \"auths\": [\n        {\n            \"信息\": [\n                {\n                    \"auth\": \"查看lin的信息\",\n                    \"module\": \"信息\"\n                }\n            ]\n        }\n    ],\n    \"avatar\": null,\n    \"create_time\": 1564372600000,\n    \"email\": \"acs@acs.com\",\n    \"group_id\": 54,\n    \"id\": 112,\n    \"nickname\": \"alan\",\n    \"update_time\": 1564487059000\n}\n</code></pre><div aria-hidden=\"true\"><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br></div></div><ol start=\"4\">\n<li>携带access_token，但此用户无访问此方法的权限（即该用户的组别未配置此权限）。</li>\n</ol>\n<p>返回结果应为：状态码：401 UNAUTHORIZED</p>\n<div><pre><code>{\n    \"error_code\": 10000,\n    \"msg\": \"权限不够，请联系超级管理员获得权限\",\n    \"request\": \"GET  /cms/log/search\"\n}\n</code></pre><div aria-hidden=\"true\"><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br></div></div><ol start=\"5\">\n<li>携带过期的access_token值\n返回结果应为：状态码：401 UNAUTHORIZED</li>\n</ol>\n<div><pre><code>{\n    \"error_code\": 10050,\n    \"msg\": \"令牌过期\",\n    \"request\": \"GET  /cms/admin/users\"\n}\n</code></pre><div aria-hidden=\"true\"><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br></div></div><ol start=\"6\">\n<li>携带不正常的access_token值，后台无法下正常解析出用户信息\n返回结果应为：状态码：422 UNPROCESSABLE ENTITY</li>\n</ol>\n<div><pre><code>{\n    \"error_code\": 10040,\n    \"msg\": \"令牌失效\",\n    \"request\": \"GET  /cms/admin/users\"\n}\n</code></pre><div aria-hidden=\"true\"><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br></div></div>",
      "date_published": "2020-02-28T11:10:31.000Z",
      "date_modified": "2020-07-24T17:10:08.000Z",
      "authors": [],
      "tags": []
    },
    {
      "title": "产品设计",
      "url": "https://igeekfan.cn/igeekfan-docs/dotnetcore/lin-cms/Production-Design.html",
      "id": "https://igeekfan.cn/igeekfan-docs/dotnetcore/lin-cms/Production-Design.html",
      "content_html": "<h1 id=\"产品设计\" tabindex=\"-1\"> 产品设计</h1>\n<h2 id=\"产品设计-评论模块的设计\" tabindex=\"-1\"> 产品设计-评论模块的设计</h2>\n<h3 id=\"_1-主题式\" tabindex=\"-1\"> 1.主题式</h3>\n<p>将评论分为二级，第一级采用时间倒序，二级按照时间正序，有助于理解上下文关系。</p>\n<p>用户操作：</p>\n<ul>\n<li><input type=\"checkbox\" checked=\"checked\" disabled=\"disabled\" id=\"task-item-0\"><label for=\"task-item-0\"> 评论随笔(内容支持超链接、emoji)</label></li>\n<li><input type=\"checkbox\" checked=\"checked\" disabled=\"disabled\" id=\"task-item-1\"><label for=\"task-item-1\">  点赞评论/取消点赞</label></li>\n<li><input type=\"checkbox\" checked=\"checked\" disabled=\"disabled\" id=\"task-item-2\"><label for=\"task-item-2\">  回复评论</label></li>\n<li><input type=\"checkbox\" checked=\"checked\" disabled=\"disabled\" id=\"task-item-3\"><label for=\"task-item-3\">  删除自己的评论</label></li>\n</ul>\n<p>运营操作：</p>\n<ul>\n<li><input type=\"checkbox\" checked=\"checked\" disabled=\"disabled\" id=\"task-item-4\"><label for=\"task-item-4\">  审核通过/拉黑评论</label></li>\n<li><input type=\"checkbox\" checked=\"checked\" disabled=\"disabled\" id=\"task-item-5\"><label for=\"task-item-5\">  删除任何评论</label></li>\n<li><input type=\"checkbox\" checked=\"checked\" disabled=\"disabled\" id=\"task-item-6\"><label for=\"task-item-6\">  拉黑后的显示逻辑。（保留当前区块、显示内容为：该评论因违规被拉黑）</label></li>\n<li>删除：（如果是二级评论，直接软删除，如果是一级评论，软删除子评论和当前评论-需要提前提醒用户）\n交互设计</li>\n<li>评论的字数长度（500）、emoji。</li>\n<li>点赞交互-动画、消息通知/推送</li>\n<li>评论区域元素，需要有明确可点击的区域，会跳转到哪个地方。</li>\n</ul>\n<h3 id=\"优化\" tabindex=\"-1\"> 优化</h3>\n<ul>\n<li>精选评论</li>\n</ul>\n<h2 id=\"排行榜见解\" tabindex=\"-1\"> 排行榜见解</h2>\n<p>排行榜从心理学上分析，主要从四个方面影响着您：<strong>寻找权威 、参与比较 、关注主流 、自我确认。</strong></p>\n<p>如何设计一个简单的排行榜呢。。</p>\n<p>在一个博客随笔中，我们设计一个3天、七天（周榜）、30天（月榜）、全部的榜单。以浏览量（权重1）、点赞量（20）、评论量（30)。权重可自己定义。</p>\n<p>1.默认取最新的随笔</p>\n<p>前台传create_time时，使用如下sql</p>\n<div><pre><code>select * from `blog_article` order by create_time desc;\n</code></pre><div aria-hidden=\"true\"><span>1</span><br></div></div><p>2.传排序方式为最近n天的热榜时。</p>\n<p>参数：THREE_DAYS_HOTTEST（三天）、WEEKLY_HOTTEST(七天）、MONTHLY_HOTTEST（一个月）、HOTTEST（全部）</p>\n<p>mysql 查询当前日期时间前三天数据</p>\n<div><pre><code>select date_sub(now() ,interval 3 day);\n</code></pre><div aria-hidden=\"true\"><span>1</span><br></div></div><p>根据权重查询</p>\n<div><pre><code>select * from `blog_article` a \nwhere a.`create_time`>(select date_sub(now() ,interval 3 day))\norder by (a.`view_hits` + a.`likes_quantity` * 20 + a.`comment_quantity` * 30) DESC, a.`create_time` DESC\n\n</code></pre><div aria-hidden=\"true\"><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br></div></div><h2 id=\"创作者中心\" tabindex=\"-1\"> 创作者中心</h2>\n<h3 id=\"用户主页\" tabindex=\"-1\"> 用户主页</h3>\n<p>统计值：阅读总数，点赞总数，关注者总数</p>\n<h3 id=\"个人设置\" tabindex=\"-1\"> 个人设置</h3>\n<p>用户信息、密码修改</p>\n<h2 id=\"更多参考\" tabindex=\"-1\"> 更多参考</h2>\n<ul>\n<li><a href=\"http://www.woshipm.com/pd/1255548.html\" target=\"_blank\" rel=\"noopener noreferrer\">万字长文深度分析：产品排行榜的设计和玩法</a></li>\n<li><a href=\"https://zhuanlan.zhihu.com/p/52322777\" target=\"_blank\" rel=\"noopener noreferrer\">想知道谁是你的最佳用户？基于Redis实现排行榜周期榜与最近N期榜</a></li>\n</ul>\n",
      "date_published": "2020-02-28T11:10:31.000Z",
      "date_modified": "2020-07-24T17:10:08.000Z",
      "authors": [],
      "tags": []
    },
    {
      "title": "Lin CMS By .NET",
      "url": "https://igeekfan.cn/igeekfan-docs/dotnetcore/lin-cms/",
      "id": "https://igeekfan.cn/igeekfan-docs/dotnetcore/lin-cms/",
      "content_html": "<p></p>\n<h1 id=\"lin-cms-by-net\" tabindex=\"-1\"> Lin CMS By .NET</h1>\n<h1  align=\"center\">\n  <a href=\"http://doc.cms.7yue.pro/\">\n    <img width=\"200\" src=\"https://consumerminiaclprd01.blob.core.chinacloudapi.cn/miniappbackground/sfgmember/lin/left-logo.png\">\n  </a>\n  <h1>\n  </h1>\n</h1>\n<p>😃 A simple and practical CMS implemented by <a href=\"https://docs.microsoft.com/zh-cn/aspnet/core/introduction-to-aspnet-core?view=aspnetcore-6.0\" target=\"_blank\" rel=\"noopener noreferrer\">ASP.NET Core 6</a></p>\n<p>本项目是完全出于个人喜爱，看到 Lin-cms 有了 python,node.js,社区也有人出了<a href=\"https://github.com/ChenJinchuang/lin-cms-tp5\" target=\"_blank\" rel=\"noopener noreferrer\">lin-cms-tp5</a>的版本</p>\n<p>本项目是 Lin CMS 后端的 <a href=\"https://docs.microsoft.com/zh-cn/dotnet/core/introduction\" target=\"_blank\" rel=\"noopener noreferrer\">ASP.NET6</a> 的实现，通过 Vue.js 实现的前后端分离 CMS 平台，目前实现简约的权限管理系统、基础字典项管理、随笔专栏，评论点赞，消息通知，标签等仿掘金模块。</p>\n<h2 id=\"什么是-lin-cms\" tabindex=\"-1\"> 什么是 Lin CMS？</h2>\n<p>Lin-CMS 是林间有风团队经过大量项目实践所提炼出的一套<strong>内容管理系统框架</strong>。Lin-CMS 可以有效的帮助开发者提高 CMS 的开发效率, 需要前端？请访问<a href=\"https://github.com/TaleLin/lin-cms-vue\" target=\"_blank\" rel=\"noopener noreferrer\"><strong>前端仓库</strong></a>。官方团队产品了解请访问<a href=\"https://github.com/TaleLin\" target=\"_blank\" rel=\"noopener noreferrer\"><strong>TaleLin</strong></a></p>\n<h2 id=\"开源地址\" tabindex=\"-1\"> 开源地址</h2>\n<ul>\n<li>后端接口 Gitee 链接 <a href=\"https://gitee.com/igeekfan/lin-cms-dotnetcore\" target=\"_blank\" rel=\"noopener noreferrer\">https://gitee.com/igeekfan/lin-cms-dotnetcore</a></li>\n<li>后端接口 GitHub 链接 <a href=\"https://github.com/luoyunchong/lin-cms-dotnetcore\" target=\"_blank\" rel=\"noopener noreferrer\">https://github.com/luoyunchong/lin-cms-dotnetcore</a></li>\n<li>适配管理端 UI <a href=\"https://github.com/luoyunchong/lin-cms-vue\" target=\"_blank\" rel=\"noopener noreferrer\">https://github.com/luoyunchong/lin-cms-vue</a></li>\n<li>适配用户端 UI <a href=\"https://github.com/luoyunchong/lin-cms-vvlog\" target=\"_blank\" rel=\"noopener noreferrer\">https://github.com/luoyunchong/lin-cms-vvlog</a></li>\n</ul>\n<h2 id=\"线上文档地址-完善中\" tabindex=\"-1\"> 线上文档地址(完善中)</h2>\n<ul>\n<li><a href=\"https://luoyunchong.github.io/igeekfan-docs/dotnetcore/lin-cms/\" target=\"_blank\" rel=\"noopener noreferrer\">https://luoyunchong.github.io/igeekfan-docs/dotnetcore/lin-cms/</a></li>\n<li><a href=\"https://igeekfan.gitee.io/igeekfan-docs/dotnetcore/lin-cms/\" target=\"_blank\" rel=\"noopener noreferrer\">https://igeekfan.gitee.io/igeekfan-docs/dotnetcore/lin-cms/</a></li>\n</ul>\n<h2 id=\"线上-demo\" tabindex=\"-1\"> 线上 Demo</h2>\n<ul>\n<li>本项目 swagger 地址 <a href=\"https://api.igeekfan.cn/swagger/index.html\" target=\"_blank\" rel=\"noopener noreferrer\">https://api.igeekfan.cn/swagger/index.html</a></li>\n<li>用户端 lin-cms-vvlog <a href=\"https://vvlog.baimocore.cn\" target=\"_blank\" rel=\"noopener noreferrer\">https://vvlog.baimocore.cn</a>\n<ul>\n<li>普通用户：710277267@qq.com</li>\n<li>密码：123qwe</li>\n</ul>\n</li>\n<li>管理员 lin-cms-vue <a href=\"https://cms.baimocore.cn\" target=\"_blank\" rel=\"noopener noreferrer\">https://cms.baimocore.cn/</a>\n<ul>\n<li>管理员： admin</li>\n<li>密码：123qwe</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"前端\" tabindex=\"-1\"> 前端</h2>\n<ul>\n<li>在原<a href=\"https://github.com/TaleLin/lin-cms-vue\" target=\"_blank\" rel=\"noopener noreferrer\">开源项目</a>中增加了博客随笔、标签、随笔评论、关注用户、关注标签、技术频道（标签分类）、插件式功能（目前还没有）\n，具体特点查看如下<a href=\"https://blog.igeekfan.cn/2019/11/24/lin-cms-dotnetcore/design/\" target=\"_blank\" rel=\"noopener noreferrer\">lin-cms-dotnetcore 功能模块的设计</a>,开源地址见下方。</li>\n</ul>\n<h3 id=\"lin-cms-的特点\" tabindex=\"-1\"> Lin CMS 的特点</h3>\n<p>Lin CMS 的构筑思想是有其自身特点的。下面我们阐述一些 Lin 的主要特点。</p>\n<h3 id=\"lin-cms-是一个前后端分离的-cms-解决方案\" tabindex=\"-1\"> Lin CMS 是一个前后端分离的 CMS 解决方案</h3>\n<p>这意味着，Lin 既提供后台的支撑，也有一套对应的前端系统，</p>\n<p>首先，传统的网站开发更多的是采用服务端渲染的方式，需用使用一种模板语言在服务端完成页面渲染：比如 Razor 等模板技术。</p>\n<p>服务端渲染的好处在于可以比较好的支持 SEO，但作为内部使用的 CMS 管理系统，SEO 并不重要。</p>\n<p>但一个不可忽视的事实是，服务器渲染的页面到底是由前端开发者来完成，还是由服务器开发者来完成？其实都不太合适。现在已经没有多少前端开发者是了解这些服务端模板语言的，而服务器开发者本身是不太擅长开发页面的。那还是分开吧，前端用最熟悉的 Vue 写 JS 和 CSS，而服务器只关注自己的 API 即可。</p>\n<p>其次，单页面应用程序的体验本身就要好于传统网站。</p>\n<h3 id=\"框架本身已内置了-cms-常用的功能\" tabindex=\"-1\"> 框架本身已内置了 CMS 常用的功能</h3>\n<p>Lin 已经内置了 CMS 中最为常见的需求：用户管理、权限管理、日志系统等。开发者只需要集中精力开发自己的 CMS 业务即可</p>\n<p>更多关于 Lin CMS 的介绍请访问<a href=\"http://doc.cms.7yue.pro/\" target=\"_blank\" rel=\"noopener noreferrer\">Lin CMS 线上文档</a></p>\n<h2 id=\"所需基础\" tabindex=\"-1\"> 所需基础</h2>\n<p>由于 Lin 采用的是前后端分离的架构，所以你至少需要熟悉 C# 和 Vue。</p>\n<h3 id=\"后端-c\" tabindex=\"-1\"> 后端 C#</h3>\n<p>该项目的 Lin 的服务端框架是基于<a href=\"https://docs.microsoft.com/zh-cn/dotnet/core/\" target=\"_blank\" rel=\"noopener noreferrer\">.NET Core 3.1</a>构建的，所以如果你比较熟悉 Mvc、WebAPI、过滤器等概念，或者是 有.NET Framework 中 Mvc 开发经验，相信你一定很容易写出代码。</p>\n<h3 id=\"相关技术\" tabindex=\"-1\"> 相关技术</h3>\n<ul>\n<li>数据库相关：ORM:<a href=\"https://github.com/2881099/FreeSql\" target=\"_blank\" rel=\"noopener noreferrer\">FreeSql</a>+DataBase:MySQL5.6/MsSqlServer/Oracle/Sqlite/PostgreSQL</li>\n<li>ASP.NET Core 6 +WebAPI+RESTful</li>\n<li>简化对象映射：<a href=\"https://automapper.org/\" target=\"_blank\" rel=\"noopener noreferrer\">AutoMapper</a></li>\n<li>身份认证框架：<a href=\"https://github.com/IdentityServer/IdentityServer4\" target=\"_blank\" rel=\"noopener noreferrer\">IdentityServer4</a></li>\n<li>Json Web 令牌:JWT</li>\n<li>文档 API：Swagger(<a href=\"https://github.com/domaindrivendev/Swashbuckle.AspNetCore\" target=\"_blank\" rel=\"noopener noreferrer\">Swashbuckle.AspNetCore</a>)\n<ul>\n<li>RapiDoc(<a href=\"https://github.com/luoyunchong/IGeekFan.AspNetCore.RapiDoc\" target=\"_blank\" rel=\"noopener noreferrer\">RapiDoc</a>)</li>\n<li>Knife4jUI(<a href=\"https://github.com/luoyunchong/IGeekFan.AspNetCore.Knife4jUI\" target=\"_blank\" rel=\"noopener noreferrer\">Knife4jUI</a>)</li>\n</ul>\n</li>\n<li>序列化：Newtonsoft.Json</li>\n<li>测试框架：Xunit</li>\n<li>日志 <a href=\"https://github.com/serilog/serilog-aspnetcore\" target=\"_blank\" rel=\"noopener noreferrer\">Serilog</a></li>\n<li>依赖注入服务<a href=\"https://github.com/autofac/Autofac.Extensions.DependencyInjection\" target=\"_blank\" rel=\"noopener noreferrer\">AutoFac</a></li>\n<li>通用扩展方法 Z.ExtensionMethods</li>\n<li>云存储：七牛云 <a href=\"https://github.com/Hello-Mango/MQiniu.Core\" target=\"_blank\" rel=\"noopener noreferrer\">MQiniu.Core</a></li>\n<li>分布式事务、EventBus：<a href=\"https://github.com/dotnetcore/CAP\" target=\"_blank\" rel=\"noopener noreferrer\">DotNeteCore.CAP</a></li>\n<li>GitHub 第三方授权登录<a href=\"https://github.com/aspnet-contrib/AspNet.Security.OAuth.Providers/tree/dev/src/AspNet.Security.OAuth.GitHub\" target=\"_blank\" rel=\"noopener noreferrer\">AspNet.Security.OAuth.GitHub</a></li>\n<li>QQ 第三方授权登录<a href=\"https://github.com/aspnet-contrib/AspNet.Security.OAuth.Providers/tree/dev/src/AspNet.Security.OAuth.QQ\" target=\"_blank\" rel=\"noopener noreferrer\">AspNet.Security.OAuth.QQ</a></li>\n<li>Gitee 第三方授权登录<a href=\"https://github.com/aspnet-contrib/AspNet.Security.OAuth.Providers/tree/dev/src/AspNet.Security.OAuth.Gitee\" target=\"_blank\" rel=\"noopener noreferrer\">AspNet.Security.OAuth.Gitee</a></li>\n<li><a href=\"https://docs.docker.com/\" target=\"_blank\" rel=\"noopener noreferrer\">Docker</a></li>\n<li><a href=\"https://dev.azure.com/\" target=\"_blank\" rel=\"noopener noreferrer\">Azure DevOps</a></li>\n<li>健康检查<a href=\"https://github.com/xabaril/AspNetCore.Diagnostics.HealthChecks\" target=\"_blank\" rel=\"noopener noreferrer\">AspNetCore.HealthChecks.UI.Client</a></li>\n<li><a href=\"https://help.github.com/en/actions\" target=\"_blank\" rel=\"noopener noreferrer\">GitHub Action</a></li>\n</ul>\n<h3 id=\"实践\" tabindex=\"-1\"> 实践</h3>\n<ul>\n<li>DDD(Domain-Driven Design)领域驱动设计</li>\n<li>Logging（日志）</li>\n<li>DevOps(CI/CD,自动化构建)</li>\n<li>Database Migrations（数据库自动迁移)</li>\n<li>Authentication(身份认证)</li>\n<li>Authorization（授权）</li>\n<li>Separation of Concerns（关注点分离）</li>\n<li>Repository Pattern（仓储模式）</li>\n<li>SOLID Principles（单一职责）</li>\n<li>Clean Code（代码整洁之道）</li>\n</ul>\n<h3 id=\"分层结构-layers\" tabindex=\"-1\"> 分层结构（Layers）</h3>\n<ul>\n<li>identityserver4\n<ul>\n<li>LinCms.IdentityServer4:使用 id4 授权登录</li>\n</ul>\n</li>\n<li>src\n<ul>\n<li>LinCms.Web：接口 API（ASP.NET Core)</li>\n<li>LinCms.Application:应用服务</li>\n<li>LinCms.Application.Contracts:DTO,数据传输对象，应用服务接口</li>\n<li>LinCms.Infrastructure:基础设施，数据库持久性的操作</li>\n<li>LinCms.Core:该应用的核心，实体类，通用操作类，AOP 扩展，分页对象，基础依赖对象接口，时间扩展方法，当前用户信息，异常类，值对象</li>\n<li>LinCms.Plugins 使用单项目实现某个业务的扩展，不是该项目的主要结构，可暂时忽略。</li>\n<li>LinCms.Scaffolding <a href=\"https://igeekfan.gitee.io/igeekfan-docs/dotnetcore/lin-cms/lincms-scaffolding.html\" target=\"_blank\" rel=\"noopener noreferrer\">代码生成器</a></li>\n</ul>\n</li>\n<li>test\n<ul>\n<li>LinCms.Test:对仓储，应用服务或工具类进行测试</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"前端-1\" tabindex=\"-1\"> 前端</h3>\n<p>前端需要开发者比较熟悉 Vue 的，另外需要了解 ES6,axios,ElementUi、webpack、Vuex、Vue-Router 等等等</p>\n<h2 id=\"更新日志\" tabindex=\"-1\"> 更新日志</h2>\n<p><a href=\"https://github.com/luoyunchong/lin-cms-dotnetcore/wiki/%E6%9B%B4%E6%96%B0%E6%97%A5%E5%BF%97\" target=\"_blank\" rel=\"noopener noreferrer\">https://github.com/luoyunchong/lin-cms-dotnetcore/wiki/%E6%9B%B4%E6%96%B0%E6%97%A5%E5%BF%97</a></p>\n",
      "date_published": "2020-02-28T11:10:31.000Z",
      "date_modified": "2022-06-02T18:18:50.000Z",
      "authors": [],
      "tags": []
    },
    {
      "title": "全局敏感词处理",
      "url": "https://igeekfan.cn/igeekfan-docs/dotnetcore/lin-cms/StopWords.html",
      "id": "https://igeekfan.cn/igeekfan-docs/dotnetcore/lin-cms/StopWords.html",
      "content_html": "<h1 id=\"全局敏感词处理\" tabindex=\"-1\"> 全局敏感词处理</h1>\n<p>基于ToolGood.Words类库，配合敏感字的文本文件，写的API接口。</p>\n<ul>\n<li><a href=\"https://github.com/luoyunchong/dotnetcore-examples/tree/master/aspnetcore-stopwords\" target=\"_blank\" rel=\"noopener noreferrer\">https://github.com/luoyunchong/dotnetcore-examples/tree/master/aspnetcore-stopwords</a></li>\n</ul>\n<p>一共二种方式</p>\n<h2 id=\"_1-toolgood-words\" tabindex=\"-1\"> 1.ToolGood.Words</h2>\n<p>类库配合敏感库</p>\n<ul>\n<li><a href=\"https://github.com/toolgood/ToolGood.Words\" target=\"_blank\" rel=\"noopener noreferrer\">ToolGood.Words</a></li>\n</ul>\n<p>简单用法</p>\n<div><pre><code>[Fact]\npublic void IssuesTest_17()\n{\n    var illegalWordsSearch = new IllegalWordsSearch();\n    string s = \"中国|zg人|abc\";\n    illegalWordsSearch.SetKeywords(s.Split('|'));\n    var str = illegalWordsSearch.Replace(\"我是中美国人厉害中国完美ａｂｃddb好的\", '*');\n\n    Assert.Equal(\"我是中美国人厉害**完美***ddb好的\", str);\n}\n</code></pre><div aria-hidden=\"true\"><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br></div></div><p>配合敏感库文本文件，写的工具类</p>\n<p>二个文件放到wwwroot/_Illegal目录下，通过ReplaceStopWords方法调用即可对</p>\n<ul>\n<li><a href=\"https://github.com/toolgood/ToolGood.Words/blob/master/csharp/ToolGood.Words.Test/_Illegal/IllegalKeywords.txt\" target=\"_blank\" rel=\"noopener noreferrer\">https://github.com/toolgood/ToolGood.Words/blob/master/csharp/ToolGood.Words.Test/_Illegal/IllegalKeywords.txt</a></li>\n<li><a href=\"https://github.com/toolgood/ToolGood.Words/blob/master/csharp/ToolGood.Words.Test/_Illegal/IllegalUrls.txt\" target=\"_blank\" rel=\"noopener noreferrer\">https://github.com/toolgood/ToolGood.Words/blob/master/csharp/ToolGood.Words.Test/_Illegal/IllegalUrls.txt</a></li>\n</ul>\n<div><pre><code>public class ToolGoodUtils\n{\n    //敏感库只要这二个文件存在即可\n    //本地敏感库缓存-https://github.com/toolgood/ToolGood.Words/tree/master/csharp/ToolGood.Words.Test/_Illegal\n    //因为需要上传至github并同步gitee,安全起见，所以未上传至git，需要自行下载并复制\n    private const string KeywordsPath = \"wwwroot/_Illegal/IllegalKeywords.txt\";\n    private const string UrlsPath = \"wwwroot/_Illegal/IllegalUrls.txt\";\n\n    private const string InfoPath = \"wwwroot/_Illegal/IllegalInfo.txt\";\n    private const string BitPath = \"wwwroot/_Illegal/IllegalBit.iws\";\n\n    private static IllegalWordsSearch _search;\n    /// &lt;summary>\n    /// 本地敏感库,文件修改后，重新创建缓存Bit\n    /// &lt;/summary>\n    /// &lt;returns>&lt;/returns>\n    public static IllegalWordsSearch GetIllegalWordsSearch()\n    {\n        if (_search == null)\n        {\n            string ipath = Path.GetFullPath(InfoPath);\n            if (File.Exists(ipath) == false)\n            {\n                _search = CreateIllegalWordsSearch();\n            }\n            else\n            {\n                var texts = File.ReadAllText(ipath).Split('|');\n                if (new FileInfo(Path.GetFullPath(KeywordsPath)).LastWriteTime.ToString(\"yyyy-MM-dd HH:mm:ss\") !=\n                    texts[0] ||\n                    new FileInfo(Path.GetFullPath(UrlsPath)).LastWriteTime.ToString(\"yyyy-MM-dd HH:mm:ss\") !=\n                    texts[1]\n                )\n                {\n                    _search = CreateIllegalWordsSearch();\n                }\n                else\n                {\n                    var s = new IllegalWordsSearch();\n                    s.Load(Path.GetFullPath(BitPath));\n                    _search = s;\n                }\n            }\n        }\n        return _search;\n    }\n\n    private static IllegalWordsSearch CreateIllegalWordsSearch()\n    {\n        string[] words1 = File.ReadAllLines(Path.GetFullPath(KeywordsPath), Encoding.UTF8);\n        string[] words2 = File.ReadAllLines(Path.GetFullPath(UrlsPath), Encoding.UTF8);\n        var words = new List&lt;string>();\n        foreach (var item in words1)\n        {\n            words.Add(item.Trim());\n        }\n        foreach (var item in words2)\n        {\n            words.Add(item.Trim());\n        }\n\n        var search = new IllegalWordsSearch();\n        search.SetKeywords(words);\n\n        search.Save(Path.GetFullPath(BitPath));\n\n        var text = new FileInfo(Path.GetFullPath(KeywordsPath)).LastWriteTime.ToString(\"yyyy-MM-dd HH:mm:ss\") + \"|\"+ new FileInfo(Path.GetFullPath(UrlsPath)).LastWriteTime.ToString(\"yyyy-MM-dd HH:mm:ss\");\n        File.WriteAllText(Path.GetFullPath(InfoPath), text);\n\n        return search;\n    }\n}\n</code></pre><div aria-hidden=\"true\"><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br><span>24</span><br><span>25</span><br><span>26</span><br><span>27</span><br><span>28</span><br><span>29</span><br><span>30</span><br><span>31</span><br><span>32</span><br><span>33</span><br><span>34</span><br><span>35</span><br><span>36</span><br><span>37</span><br><span>38</span><br><span>39</span><br><span>40</span><br><span>41</span><br><span>42</span><br><span>43</span><br><span>44</span><br><span>45</span><br><span>46</span><br><span>47</span><br><span>48</span><br><span>49</span><br><span>50</span><br><span>51</span><br><span>52</span><br><span>53</span><br><span>54</span><br><span>55</span><br><span>56</span><br><span>57</span><br><span>58</span><br><span>59</span><br><span>60</span><br><span>61</span><br><span>62</span><br><span>63</span><br><span>64</span><br><span>65</span><br><span>66</span><br><span>67</span><br><span>68</span><br><span>69</span><br><span>70</span><br><span>71</span><br><span>72</span><br></div></div><h2 id=\"_2-循环使用replace\" tabindex=\"-1\"> 2. 循环使用Replace</h2>\n<p>方案：通过维护敏感库，循环replace\n大佬分享给我的，稍微改成了从文件中获取敏感字。</p>\n<div><pre><code>public static class StopWords\n{\n\n    static readonly ConcurrentDictionary&lt;string, bool> FunNlpDataSensitive = new ConcurrentDictionary&lt;string, bool>();\n    static readonly ConcurrentDictionary&lt;int, string> ReplaceNewValue = new ConcurrentDictionary&lt;int, string>();\n\n    private const string KeywordsPath = \"wwwroot/_Illegal/IllegalKeywords.txt\";\n    private const string UrlsPath = \"wwwroot/_Illegal/IllegalUrls.txt\";\n\n\n    static StopWords()\n    {\n        LoadDataFromFile();\n    }\n\n    public static void LoadDataFromFile()\n    {\n        string words1 = File.ReadAllText(Path.GetFullPath(KeywordsPath), Encoding.UTF8);\n        string words2 = File.ReadAllText(Path.GetFullPath(UrlsPath), Encoding.UTF8);\n        LoadDataFromText(words1);\n        LoadDataFromText(words2);\n    }\n\n\n    public static void LoadDataFromText(string text)\n    {\n        int oldcount = FunNlpDataSensitive.Count;\n        foreach (string wd in text.Split('\\n'))\n        {\n            string keykey = wd.Trim().Trim('\\r', '\\n').Trim();\n            if (string.IsNullOrEmpty(keykey)) continue;\n            FunNlpDataSensitive.TryAdd(keykey, true);\n            if (ReplaceNewValue.ContainsKey(keykey.Length) == false)\n                ReplaceNewValue.TryAdd(keykey.Length, \"\".PadRight(keykey.Length, '*'));\n        }\n        Console.WriteLine($\"敏感词加载完毕，增加数量：{FunNlpDataSensitive.Count - oldcount}\");\n    }\n\n\n    /// &lt;summary>\n    /// 替换所有敏感词为 *\n    /// &lt;/summary>\n    /// &lt;param name=\"that\">&lt;/param>\n    /// &lt;returns>&lt;/returns>\n    public static string ReplaceStopWords(this string that)\n    {\n        foreach (var wd in FunNlpDataSensitive.Keys)\n            that = that.Replace(wd, ReplaceNewValue.TryGetValue(wd.Length, out var tryval) ? tryval : \"\".PadRight(wd.Length, '*'));\n        return that;\n    }\n}\n</code></pre><div aria-hidden=\"true\"><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br><span>24</span><br><span>25</span><br><span>26</span><br><span>27</span><br><span>28</span><br><span>29</span><br><span>30</span><br><span>31</span><br><span>32</span><br><span>33</span><br><span>34</span><br><span>35</span><br><span>36</span><br><span>37</span><br><span>38</span><br><span>39</span><br><span>40</span><br><span>41</span><br><span>42</span><br><span>43</span><br><span>44</span><br><span>45</span><br><span>46</span><br><span>47</span><br><span>48</span><br><span>49</span><br><span>50</span><br><span>51</span><br></div></div><h2 id=\"freesql全局处理敏感词\" tabindex=\"-1\"> FreeSql全局处理敏感词</h2>\n<p>使用FreeSql这个ORM时，全局处理string类型的值，进行敏感词处理。代码在StartUp.cs的构造函数中。</p>\n<div><pre><code>//敏感词处理\nIllegalWordsSearch illegalWords = ToolGoodUtils.GetIllegalWordsSearch();\n\nFsql.Aop.AuditValue += (s, e) =>\n{\n    if (e.Column.CsType == typeof(string) &amp;&amp; e.Value != null)\n    {\n        string oldVal = (string)e.Value;\n        string newVal = illegalWords.Replace(oldVal);\n        //第二种处理敏感词的方式\n        //string newVal = oldVal.ReplaceStopWords();\n        if (newVal != oldVal)\n        {\n            e.Value = newVal;\n        }\n    }\n};\n</code></pre><div aria-hidden=\"true\"><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br></div></div>",
      "date_published": "2020-02-28T11:10:31.000Z",
      "date_modified": "2020-07-24T17:10:08.000Z",
      "authors": [],
      "tags": []
    },
    {
      "title": "开发起步",
      "url": "https://igeekfan.cn/igeekfan-docs/dotnetcore/lin-cms/dev-start.html",
      "id": "https://igeekfan.cn/igeekfan-docs/dotnetcore/lin-cms/dev-start.html",
      "content_html": "<h1 id=\"开发起步\" tabindex=\"-1\"> 开发起步</h1>\n<h2 id=\"项目结构\" tabindex=\"-1\"> 项目结构</h2>\n<ul>\n<li>framework\n<ul>\n<li>IGeekFan.Localization.FreeSql：使用FreeSql存储本地化数据</li>\n</ul>\n</li>\n<li>identityserver4\n<ul>\n<li>LinCms.IdentityServer4:使用id4授权登录</li>\n</ul>\n</li>\n<li>src\n<ul>\n<li>LinCms.Web：接口API（ASP.NET Core)、中间件，权限验证</li>\n<li>LinCms.Application:应用服务</li>\n<li>LinCms.Application.Contracts:DTO,数据传输对象,应用服务接口</li>\n<li>LinCms.Infrastructure:基础设施，数据库持久性的操作，仓储接口的实现</li>\n<li>LinCms.Core:该应用的核心，实体类，通用操作类，AOP扩展，分页对象，基础依赖对象接口，时间扩展方法，当前用户信息，异常类，值对象，仓储接口</li>\n<li>LinCms.Plugins 使用单项目实现某个业务的扩展，不需要主要项目结构，可暂时忽略。</li>\n</ul>\n</li>\n<li>test\n<ul>\n<li>LinCms.Test:对仓储，应用服务或工具类进行测试</li>\n</ul>\n</li>\n</ul>\n<div><pre><code>├─framework\n│  └─src\n│      └─IGeekFan.Localization.FreeSql\n├─identityserver4\n│  └─LinCms.IdentityServer4\n│      ├─Controllers\n│      ├─IdentityServer4\n├─src\n│  ├─LinCms.Application\n│  │  ├─Cms\n│  │  │  ├─Admin\n│  │  │  ├─Files\n│  │  │  ├─Groups\n│  │  │  ├─Logs\n│  │  │  ├─Permissions\n│  │  │  ├─Settings\n│  │  │  └─Users\n│  ├─LinCms.Application.Contracts\n│  │  ├─Cms\n│  │  │  ├─Account\n│  │  │  ├─Admins\n│  │  │  │  └─Dtos\n│  │  │  ├─Files\n│  │  │  │  └─Dtos\n│  │  │  ├─Groups\n│  │  │  │  └─Dtos\n│  │  │  ├─Logs\n│  │  │  │  └─Dtos\n│  │  │  ├─Permissions\n│  │  │  │  └─Dtos\n│  │  │  ├─Settings\n│  │  │  │  └─Dtos\n│  │  │  └─Users\n│  │  │      └─Dtos\n│  ├─LinCms.Core\n│  │  ├─Aop\n│  │  ├─Common\n│  │  ├─Data\n│  │  │  └─Enums\n│  │  ├─Dependency\n│  │  ├─Entities\n│  │  │  └─Settings\n│  │  ├─Exceptions\n│  │  ├─Extensions\n│  │  ├─IRepositories\n│  │  ├─LinCms\n│  │  │  └─Core\n│  │  ├─Middleware\n│  │  └─Security\n│  ├─LinCms.Infrastructure\n│  │  └─Repositories\n│  ├─LinCms.Plugins\n│  │  └─Poem\n│  │      ├─AutoMapper\n│  │      ├─Controllers\n│  │      └─Models\n│  └─LinCms.Web\n│      ├─Configs\n│      ├─Controllers\n│      │  ├─Cms\n│      ├─Data\n│      │  └─Authorization\n│      ├─Properties\n│      ├─SnakeCaseQuery\n│      ├─Uow\n│      ├─Utils\n│      └─wwwroot\n└─test\n    └─LinCms.Test\n        ├─Controller\n        │  ├─Cms\n        ├─Properties\n        ├─Service\n        │  └─Cms\n        └─Utils\n</code></pre><div aria-hidden=\"true\"><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br><span>24</span><br><span>25</span><br><span>26</span><br><span>27</span><br><span>28</span><br><span>29</span><br><span>30</span><br><span>31</span><br><span>32</span><br><span>33</span><br><span>34</span><br><span>35</span><br><span>36</span><br><span>37</span><br><span>38</span><br><span>39</span><br><span>40</span><br><span>41</span><br><span>42</span><br><span>43</span><br><span>44</span><br><span>45</span><br><span>46</span><br><span>47</span><br><span>48</span><br><span>49</span><br><span>50</span><br><span>51</span><br><span>52</span><br><span>53</span><br><span>54</span><br><span>55</span><br><span>56</span><br><span>57</span><br><span>58</span><br><span>59</span><br><span>60</span><br><span>61</span><br><span>62</span><br><span>63</span><br><span>64</span><br><span>65</span><br><span>66</span><br><span>67</span><br><span>68</span><br><span>69</span><br><span>70</span><br><span>71</span><br><span>72</span><br><span>73</span><br><span>74</span><br><span>75</span><br></div></div><h2 id=\"相关技术\" tabindex=\"-1\"> 相关技术</h2>\n<h3 id=\"freesql\" tabindex=\"-1\"> FreeSql</h3>\n<ul>\n<li>\n<p><a href=\"/dotnetcore/examples/freesql-in-aspnetcore-webapi-how-to-use.html\" target=\"_blank\" rel=\"noopener noreferrer\">主要在介绍FreeSql在ASP.NTE Core WebApi中如何使用的过程，完成一个最简单的博客系统的后端接口</a></p>\n</li>\n<li>\n<p><a href=\"/dotnetcore/examples/freesql-sample-blog-restful-use-automapper.html\" target=\"_blank\" rel=\"noopener noreferrer\">本文使用ASP .NET Core的WEB API，构建一个RESTful风格的接口，使用Freesql访问MySQL数据库，实现二个表的简单博客，并集成AutoMapper。</a></p>\n</li>\n</ul>\n<h3 id=\"identityserver4\" tabindex=\"-1\"> IdentityServer4</h3>\n<ul>\n<li><a href=\"/dotnetcore/examples/IdentityServer4.html\" target=\"_blank\" rel=\"noopener noreferrer\">IdentityServer4 在本项目中的应用</a></li>\n</ul>\n",
      "date_published": "2020-02-28T11:10:31.000Z",
      "date_modified": "2021-12-12T10:05:43.000Z",
      "authors": [],
      "tags": []
    },
    {
      "title": "后端准备",
      "url": "https://igeekfan.cn/igeekfan-docs/dotnetcore/lin-cms/dotnetcore-start.html",
      "id": "https://igeekfan.cn/igeekfan-docs/dotnetcore/lin-cms/dotnetcore-start.html",
      "content_html": "<h1 id=\"后端准备\" tabindex=\"-1\"> 后端准备</h1>\n<h2 id=\"server-端必备环境\" tabindex=\"-1\"> Server 端必备环境</h2>\n<ul>\n<li>安装软件开发包 <a href=\"https://dotnet.microsoft.com/zh-cn/download/dotnet/6.0\" target=\"_blank\" rel=\"noopener noreferrer\">.NET SDK 6.0</a></li>\n<li>安装开发工具 <a href=\"https://visualstudio.microsoft.com/zh-hans/vs/\" target=\"_blank\" rel=\"noopener noreferrer\">Visual Studio 2022</a> 或 <a href=\"https://www.jetbrains.com/rider/\" target=\"_blank\" rel=\"noopener noreferrer\">Rider</a></li>\n<li>安装 MySQL（version 5.7+)</li>\n<li>Redis 4.0.14.2 for Windows <a href=\"https://github.com/tporadowski/redis/releases\" target=\"_blank\" rel=\"noopener noreferrer\">https://github.com/tporadowski/redis/releases</a></li>\n</ul>\n<h2 id=\"获取工程项目\" tabindex=\"-1\"> 获取工程项目</h2>\n<div><pre><code><span>git</span> clone https://github.com/luoyunchong/lin-cms-dotnetcore.git\n</code></pre><div aria-hidden=\"true\"><span>1</span><br></div></div><h2 id=\"数据库配置\" tabindex=\"-1\"> 数据库配置</h2>\n<p>文件位置<code>src/LinCms.Web/appsettings.json</code>，当数据库中存储表情包是，<code>Charset</code>为<code>utf8mb4</code></p>\n<p><strong>请务必根据自己的实际情况修改此配置项</strong>，<code>DefaultDB</code>为 0 时，代表使用<code>MySQL</code>，<code>DefaultDB</code>为 1 时，代表使用<code>SqlServer</code>,以此类推。</p>\n<div><pre><code> <span>\"ConnectionStrings\"</span><span>:</span> <span>{</span>\n    <span>\"DefaultDB\"</span><span>:</span> <span>\"0\"</span><span>,</span>\n    <span>\"DataType\"</span><span>:</span> <span>{</span>\n      <span>\"MySql\"</span><span>:</span> <span>0</span><span>,</span>\n      <span>\"SqlServer\"</span><span>:</span> <span>1</span><span>,</span>\n      <span>\"PostgreSQL\"</span><span>:</span> <span>2</span><span>,</span>\n      <span>\"Oracle\"</span><span>:</span> <span>3</span><span>,</span>\n      <span>\"Sqlite\"</span><span>:</span> <span>4</span>\n    <span>}</span><span>,</span>\n    <span>\"MySql\"</span><span>:</span> <span>\"Data Source=localhost;Port=3306;User ID=root;Password=root;Initial Catalog=lincms;Charset=utf8mb4;SslMode=none;Max pool size=1;Connection LifeTime=20\"</span><span>,</span>\n    <span>\"SqlServer\"</span><span>:</span> <span>\"Data Source=.;User ID=sa;Password=123456;Integrated Security=True;Initial Catalog=LinCMS;Pooling=true;Min Pool Size=1\"</span><span>,</span>\n    <span>\"PostgreSQL\"</span><span>:</span> <span>\"Host=localhost;Port=5432;Username=postgres;Password=123456; Database=lincms;Pooling=true;Minimum Pool Size=1\"</span><span>,</span>\n    <span>\"Oracle\"</span><span>:</span> <span>null</span><span>,</span>\n    <span>\"Sqlite\"</span><span>:</span> <span>\"Data Source=|DataDirectory|\\\\lincms.db; Attachs=lincms.db; Pooling=true;Min Pool Size=1\"</span><span>,</span>\n    <span>\"CsRedis\"</span><span>:</span> <span>\"127.0.0.1:6379,password=,defaultDatabase=0\"</span>\n  <span>}</span><span>,</span>\n</code></pre><div aria-hidden=\"true\"><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br></div></div><p><code>LinCms.IdentityServer4</code> 项目不是必须的，需要需要运行，需要修改数据库配置项</p>\n<p><code>identityserver4/LinCms.IdentityServer4/appsettings.json</code> 数据库配置、同<code>LinCms.Web</code>中的配置项相同</p>\n<div><pre><code>  <span>\"ConnectionStrings\"</span><span>:</span> <span>{</span>\n    <span>\"DefaultDB\"</span><span>:</span> <span>\"0\"</span><span>,</span>\n    <span>\"DataType\"</span><span>:</span> <span>{</span>\n      <span>\"MySql\"</span><span>:</span> <span>0</span><span>,</span>\n      <span>\"SqlServer\"</span><span>:</span> <span>1</span><span>,</span>\n      <span>\"PostgreSQL\"</span><span>:</span> <span>2</span><span>,</span>\n      <span>\"Oracle\"</span><span>:</span> <span>3</span><span>,</span>\n      <span>\"Sqlite\"</span><span>:</span> <span>4</span>\n    <span>}</span><span>,</span>\n    <span>\"MySql\"</span><span>:</span> <span>\"Data Source=localhost;Port=3308;User ID=root;Password=root;Initial Catalog=lincms;Charset=utf8mb4;SslMode=none;Max pool size=1;Connection LifeTime=20\"</span><span>,</span>\n    <span>\"SqlServer\"</span><span>:</span> <span>\"Data Source=.;User ID=sa;Password=123456;Integrated Security=True;Initial Catalog=LinCMS;Pooling=true;Min Pool Size=1\"</span><span>,</span>\n    <span>\"Sqlite\"</span><span>:</span> <span>\"Data Source=|DataDirectory|\\\\lincms.db; Attachs=lincms.db; Pooling=true;Min Pool Size=1\"</span>\n  <span>}</span><span>,</span>\n</code></pre><div aria-hidden=\"true\"><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br></div></div><p>其中 MariaDB（看做 MySql）,通过<code>Serilog</code>记录日志，需要配置相应的链接串。</p>\n<div><pre><code><span>{</span>\n        <span>\"Name\"</span><span>:</span> <span>\"MariaDB\"</span><span>,</span>\n        <span>\"Args\"</span><span>:</span> <span>{</span>\n          <span>\"connectionString\"</span><span>:</span> <span>\"Data Source=localhost;Port=3306;User ID=root;Password=root;Initial Catalog=lincms;Charset=utf8mb4;SslMode=none;Max pool size=1;Connection LifeTime=20\"</span><span>,</span>\n        <span>}</span>\n</code></pre><div aria-hidden=\"true\"><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br></div></div><h2 id=\"数据迁移\" tabindex=\"-1\"> 数据迁移</h2>\n<p>该项目使用<a href=\"https://github.com/2881099/FreeSql\" target=\"_blank\" rel=\"noopener noreferrer\">FreeSql</a>，默认自动迁移数据表结构，会自动根据配置项创建数据库，初始化种子数据</p>\n<p>默认会创建用户<code>admin</code>，密码<code>123qwe</code></p>\n<h2 id=\"visual-studio-2022-运行项目\" tabindex=\"-1\"> visual studio 2022 运行项目</h2>\n<p>双击 lin-cms-dotnetcore.sln，使用 vs2022 打开项目。右键解决方案，点击生成解决方案。</p>\n<p>由于将 identityserver4 单独拆成了一个项目，所以需要同时启动二个项目，<strong>右键解决方案，属性。</strong>,选择多个启动项目，勾选二个项目同时启动。如下图所示。</p>\n<p><img src=\"https://pic.downk.cc/item/5e83fd74504f4bcb04cf5474.png\" alt=\"\" loading=\"lazy\"></p>\n<p>这时候会打开二个网页 https://localhost:5001/swagger/index.html，即可看到 swagger 页面。</p>\n<p><img src=\"https://pic.downk.cc/item/5e83ffd1504f4bcb04d0f039.jpg\" alt=\"\" loading=\"lazy\"></p>\n<p>会打开浏览器，访问<a href=\"https://localhosst:5001/swagger/index.html\" target=\"_blank\" rel=\"noopener noreferrer\">https://localhosst:5001/swagger/index.html</a>，会看到 swagger 的文档。\n访问<a href=\"https://localhosst:5001/swagger/index.html\" target=\"_blank\" rel=\"noopener noreferrer\">https://localhosst:5003/swagger/index.html</a> 是 ids4 的接口文档，什么也看不到。</p>\n<p>LinCms.Web 运行效果：\n<img src=\"https://ae01.alicdn.com/kf/He52bc4d3708242d2995419bb584e1f53Q.jpg\" alt=\"\" loading=\"lazy\"></p>\n<h2 id=\"部署\" tabindex=\"-1\"> 部署</h2>\n<ul>\n<li><a href=\"https://blog.igeekfan.cn/2022/06/09/dotnetcore/ASP.NET-Core-Deploy-To-Ubuntu\" target=\"_blank\" rel=\"noopener noreferrer\">部署至 Linux(Ubuntu16.06)</a></li>\n<li><a href=\"https://blog.igeekfan.cn/2022/06/09/dotnetcore/ASP.NET-Core-Deploy-To-Docker-Ubuntu/\" target=\"_blank\" rel=\"noopener noreferrer\">部署至 Linux(Ubuntu16.06)下的 Docker</a></li>\n</ul>\n<h2 id=\"部署前准备\" tabindex=\"-1\"> 部署前准备</h2>\n<p>因为该项目基于 IdentityServer4,实现的授权认证服务，</p>\n<p>开发阶段使用<code>AddDeveloperSigningCredential()</code>方法即可完成签名认证，但是在生产环境，我们必须使用<code>AddSigningCredential()</code>方法并且使用 OpenSSL 生成自己的签名证书</p>\n<p>Startup.cs</p>\n<div><pre><code>            services.AddIdentityServer()\n#if  DEBUG\n                .AddDeveloperSigningCredential()\n#endif\n#if !DEBUG\n                .AddSigningCredential(new X509Certificate2(Path.Combine(AppContext.BaseDirectory,\n                        Configuration[\"Certificates:Path\"]),\n                    Configuration[\"Certificates:Password\"]))\n#endif\n                .AddInMemoryIdentityResources(InMemoryConfiguration.GetIdentityResources())\n                .AddInMemoryApiResources(InMemoryConfiguration.GetApis())\n                .AddInMemoryClients(InMemoryConfiguration.GetClients())\n                .AddProfileService&lt;LinCmsProfileService>()\n                .AddResourceOwnerValidator&lt;LinCmsResourceOwnerPasswordValidator>();\n</code></pre><div aria-hidden=\"true\"><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br></div></div><p>appsettings.Production.json</p>\n<div><pre><code>{\n    \"Certificates\":\n    {\n        \"Path\":\"ids4.pfx\",\n        \"Password\":\"123qwe\"\n    }\n}\n</code></pre><div aria-hidden=\"true\"><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br></div></div><h3 id=\"使用-openssl-生成证书\" tabindex=\"-1\"> 使用 OpenSSL 生成证书</h3>\n<p>官网下载并安装 OpenSSL <a href=\"https://slproweb.com/products/Win32OpenSSL.html\" target=\"_blank\" rel=\"noopener noreferrer\">OpenSSL 官网</a></p>\n<p>下载 Win64 OpenSSL v1.1.1b 版本</p>\n<p>在 OpenSSL 的 bin 文件夹，以管理员身份打开 CMD 执行以下命令：</p>\n<div><pre><code>openssl req -newkey rsa:2048 -nodes -keyout ids4.key -x509 -days 365 -out ids4.cer\n</code></pre><div aria-hidden=\"true\"><span>1</span><br></div></div><p>下面将生成的证书和 Key 封装成一个文件，以便 IdentityServer 可以使用它们去正确地签名 tokens</p>\n<div><pre><code>openssl pkcs12 -export -in ids4.cer -inkey ids4.key -out ids4.pfx\n</code></pre><div aria-hidden=\"true\"><span>1</span><br></div></div><h5 id=\"注-在生成的过程中会让我们输入-export-password\" tabindex=\"-1\"> (注：在生成的过程中会让我们输入 Export Password)</h5>\n<p>这个 密码与 appsettings.Production.json 配置项相同。</p>\n<p>发布时，把 ids4.pfx，放到项目根目录</p>\n<h2 id=\"参考\" tabindex=\"-1\"> 参考</h2>\n<ul>\n<li><a href=\"https://www.cnblogs.com/guolianyu/p/9872661.html\" target=\"_blank\" rel=\"noopener noreferrer\">IdentityServer4 之 JWT 签名(RSA 加密证书)及验签</a></li>\n</ul>\n",
      "image": "https://pic.downk.cc/item/5e83fd74504f4bcb04cf5474.png",
      "date_published": "2020-02-28T11:10:31.000Z",
      "date_modified": "2022-06-03T14:30:48.000Z",
      "authors": [],
      "tags": []
    },
    {
      "title": "code",
      "url": "https://igeekfan.cn/igeekfan-docs/dotnetcore/lin-cms/error-code.html",
      "id": "https://igeekfan.cn/igeekfan-docs/dotnetcore/lin-cms/error-code.html",
      "content_html": "<h1 id=\"code\" tabindex=\"-1\"> code</h1>\n<h2 id=\"核心库内置已使用状态码\" tabindex=\"-1\"> 核心库内置已使用状态码</h2>\n<p>0 成功</p>\n<p>999 服务器未知错误</p>\n<p>9999 失败</p>\n<p>10000 认证失败</p>\n<p>10020 资源不存在</p>\n<p>10030 参数错误</p>\n<p>10040 令牌失效</p>\n<p>10050 令牌过期</p>\n<p>10060 字段重复</p>\n<p>10070 禁止操作</p>\n<p>10080 请求方法不允许</p>\n<p>10100 refresh token 获取失败</p>\n<p>10110 文件体积过大</p>\n<p>10120 文件数量过多</p>\n<p>10130 文件扩展名不符合规范</p>\n<p>10140 请求过于频繁，请稍后重试</p>\n",
      "date_published": "2020-02-28T11:10:31.000Z",
      "date_modified": "2020-02-28T11:10:31.000Z",
      "authors": [],
      "tags": []
    },
    {
      "title": "功能模块的设计",
      "url": "https://igeekfan.cn/igeekfan-docs/dotnetcore/lin-cms/pm-design-modules.html",
      "id": "https://igeekfan.cn/igeekfan-docs/dotnetcore/lin-cms/pm-design-modules.html",
      "content_html": "<h1 id=\"功能模块的设计\" tabindex=\"-1\"> 功能模块的设计</h1>\n<h2 id=\"基础权限模块\" tabindex=\"-1\"> 基础权限模块</h2>\n<ul>\n<li>用户信息：邮件、用户名（唯一）、昵称、头像、分组、是否激活、手机号、是否是Admin、个性签名\n<ul>\n<li><input type=\"checkbox\" checked=\"checked\" disabled=\"disabled\" id=\"task-item-0\"><label for=\"task-item-0\"> 注册/登录</label></li>\n<li><input type=\"checkbox\" checked=\"checked\" disabled=\"disabled\" id=\"task-item-1\"><label for=\"task-item-1\"> 上传头像</label></li>\n<li><input type=\"checkbox\" checked=\"checked\" disabled=\"disabled\" id=\"task-item-2\"><label for=\"task-item-2\"> 修改密码</label></li>\n<li><input type=\"checkbox\" checked=\"checked\" disabled=\"disabled\" id=\"task-item-3\"><label for=\"task-item-3\"> 用户基本信息修改</label></li>\n<li><input type=\"checkbox\" checked=\"checked\" disabled=\"disabled\" id=\"task-item-4\"><label for=\"task-item-4\"> 用户增删改，配置分组</label></li>\n</ul>\n</li>\n<li>绑定第三方账号\n<ul>\n<li><input type=\"checkbox\" checked=\"checked\" disabled=\"disabled\" id=\"task-item-5\"><label for=\"task-item-5\"> GitHub登录</label></li>\n<li><input type=\"checkbox\"  disabled=\"disabled\" id=\"task-item-6\"><label for=\"task-item-6\"> QQ 登录</label></li>\n</ul>\n</li>\n<li>分组信息：是否静态分组（无法删除，无法修改分组编码）、名称可以修改\n<ul>\n<li><input type=\"checkbox\" checked=\"checked\" disabled=\"disabled\" id=\"task-item-7\"><label for=\"task-item-7\"> 分组增删改</label></li>\n<li><input type=\"checkbox\" checked=\"checked\" disabled=\"disabled\" id=\"task-item-8\"><label for=\"task-item-8\"> 组别配置权限</label></li>\n</ul>\n</li>\n<li>文件管理\n<ul>\n<li><input type=\"checkbox\" checked=\"checked\" disabled=\"disabled\" id=\"task-item-9\"><label for=\"task-item-9\"> 本地文件上传</label></li>\n<li><input type=\"checkbox\" checked=\"checked\" disabled=\"disabled\" id=\"task-item-10\"><label for=\"task-item-10\"> 七牛云存储</label></li>\n<li><input type=\"checkbox\"  disabled=\"disabled\" id=\"task-item-11\"><label for=\"task-item-11\"> 文件去重，秒传</label></li>\n</ul>\n</li>\n<li>系统日志：请求方法、路径、http返回码、时间、用户昵称、用户id、访问哪个权限、 日志信息\n<ul>\n<li><input type=\"checkbox\" checked=\"checked\" disabled=\"disabled\" id=\"task-item-12\"><label for=\"task-item-12\"> 记录系统请求的日志</label></li>\n<li><input type=\"checkbox\"  disabled=\"disabled\" id=\"task-item-13\"><label for=\"task-item-13\"> 异常日志</label></li>\n</ul>\n</li>\n<li>设置管理：name(键）,value(值),provider_name(提供名),provider_key（提供者值）\n<ul>\n<li><input type=\"checkbox\" checked=\"checked\" disabled=\"disabled\" id=\"task-item-14\"><label for=\"task-item-14\"> 设置新增修改删除</label></li>\n<li><input type=\"checkbox\" checked=\"checked\" disabled=\"disabled\" id=\"task-item-15\"><label for=\"task-item-15\"> 所有设置</label></li>\n</ul>\n</li>\n</ul>\n<p>比如存某用户选择的是markdown还是富文本。</p>\n<div><pre><code>name=\"Article.Editor\",\nvalue=\"markdown\" 或 \"富文本\"，\nprovider_name为\"User\",\nprovider_key为用户Id\n</code></pre><div aria-hidden=\"true\"><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br></div></div><p>或存储七牛云的某一个配置</p>\n<div><pre><code>name=\"Qiniu.AK\",\nvalue=\"asfadsfadf23rft66S4XM2GIK7FGmj7czuYkcAyNGDAc\" ，\nprovider_name为\"Qiniu\"或自己定义的字符串\nprovider_key为空\n</code></pre><div aria-hidden=\"true\"><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br></div></div><h2 id=\"cms-管理员维护模块\" tabindex=\"-1\"> cms 管理员维护模块</h2>\n<ul>\n<li>标签管理：名称、图片，是否启用/禁用，排序、文章数量、用户关注数量。\n<ul>\n<li><input type=\"checkbox\" checked=\"checked\" disabled=\"disabled\" id=\"task-item-16\"><label for=\"task-item-16\"> 标签增删改</label></li>\n<li><input type=\"checkbox\" checked=\"checked\" disabled=\"disabled\" id=\"task-item-17\"><label for=\"task-item-17\"> 标签列表，禁用</label></li>\n</ul>\n</li>\n<li>技术频道：封面图、名称、是否启用/禁用、排序、编码、备注描述、下属标签.一个技术频道对应多个标签\n<ul>\n<li><input type=\"checkbox\" checked=\"checked\" disabled=\"disabled\" id=\"task-item-18\"><label for=\"task-item-18\"> 技术频道增删改</label></li>\n<li><input type=\"checkbox\" checked=\"checked\" disabled=\"disabled\" id=\"task-item-19\"><label for=\"task-item-19\"> 列表、禁用</label></li>\n</ul>\n</li>\n<li>随笔管理：\n<ul>\n<li><input type=\"checkbox\" checked=\"checked\" disabled=\"disabled\" id=\"task-item-20\"><label for=\"task-item-20\"> 审核随笔/拉黑</label></li>\n</ul>\n</li>\n<li>评论管理\n<ul>\n<li><input type=\"checkbox\" checked=\"checked\" disabled=\"disabled\" id=\"task-item-21\"><label for=\"task-item-21\"> 后台审核通过/拉黑</label></li>\n<li><input type=\"checkbox\" checked=\"checked\" disabled=\"disabled\" id=\"task-item-22\"><label for=\"task-item-22\"> 管理员删除评论</label></li>\n</ul>\n</li>\n<li>字典管理\n<ul>\n<li><input type=\"checkbox\" checked=\"checked\" disabled=\"disabled\" id=\"task-item-23\"><label for=\"task-item-23\"> 字典类别管理</label></li>\n<li><input type=\"checkbox\" checked=\"checked\" disabled=\"disabled\" id=\"task-item-24\"><label for=\"task-item-24\"> 字典管理：如随笔类型（原创、转载、翻译）</label></li>\n</ul>\n</li>\n</ul>\n<h2 id=\"cms-用户端模块\" tabindex=\"-1\"> cms 用户端模块</h2>\n<ul>\n<li>\n<p>技术频道</p>\n<ul>\n<li><input type=\"checkbox\" checked=\"checked\" disabled=\"disabled\" id=\"task-item-25\"><label for=\"task-item-25\"> 首页展示技术频道</label></li>\n<li><input type=\"checkbox\" checked=\"checked\" disabled=\"disabled\" id=\"task-item-26\"><label for=\"task-item-26\"> 选择技术频道后，可再根据标签查询文章</label></li>\n</ul>\n</li>\n<li>\n<p>分类专栏管理:发布随笔时可选择单个分类。</p>\n<ul>\n<li><input type=\"checkbox\" checked=\"checked\" disabled=\"disabled\" id=\"task-item-27\"><label for=\"task-item-27\"> 分类增删改(随笔数量、图片、名称、排序)</label></li>\n<li><input type=\"checkbox\" checked=\"checked\" disabled=\"disabled\" id=\"task-item-28\"><label for=\"task-item-28\"> 分类列表，仅查看、编辑自己创建的分类专栏</label></li>\n</ul>\n</li>\n<li>\n<p>标签：统计每个标签下多少个文章、多少人关注</p>\n<ul>\n<li><input type=\"checkbox\" checked=\"checked\" disabled=\"disabled\" id=\"task-item-29\"><label for=\"task-item-29\"> 标签列表</label></li>\n<li><input type=\"checkbox\" checked=\"checked\" disabled=\"disabled\" id=\"task-item-30\"><label for=\"task-item-30\"> 无限加载</label></li>\n<li><input type=\"checkbox\" checked=\"checked\" disabled=\"disabled\" id=\"task-item-31\"><label for=\"task-item-31\"> 最新/最热 根据标签名称模糊查询</label></li>\n<li><input type=\"checkbox\" checked=\"checked\" disabled=\"disabled\" id=\"task-item-32\"><label for=\"task-item-32\"> 已关注的标签</label></li>\n<li><input type=\"checkbox\" checked=\"checked\" disabled=\"disabled\" id=\"task-item-33\"><label for=\"task-item-33\"> 热门标签</label></li>\n</ul>\n</li>\n<li>\n<p>随笔</p>\n<ul>\n<li><input type=\"checkbox\" checked=\"checked\" disabled=\"disabled\" id=\"task-item-34\"><label for=\"task-item-34\"> 支持markdown，增删改（仅自己的随笔）,修正分类专栏中的随笔数量</label></li>\n<li><input type=\"checkbox\" checked=\"checked\" disabled=\"disabled\" id=\"task-item-35\"><label for=\"task-item-35\"> 列表无限加载，按标签查询随笔</label></li>\n<li><input type=\"checkbox\" checked=\"checked\" disabled=\"disabled\" id=\"task-item-36\"><label for=\"task-item-36\"> 点赞随笔</label></li>\n<li>随笔详情页\n<ul>\n<li><input type=\"checkbox\" checked=\"checked\" disabled=\"disabled\" id=\"task-item-37\"><label for=\"task-item-37\"> 支持目录导航（滚动时，固定至顶部位置），展示字数统计、预计阅读时长；</label></li>\n<li><input type=\"checkbox\" checked=\"checked\" disabled=\"disabled\" id=\"task-item-38\"><label for=\"task-item-38\"> 作者介绍：头像，昵称，签名，随笔数；</label></li>\n<li><input type=\"checkbox\" checked=\"checked\" disabled=\"disabled\" id=\"task-item-39\"><label for=\"task-item-39\"> 展示文章类型：原创、转载、翻译</label></li>\n<li><input type=\"checkbox\"  disabled=\"disabled\" id=\"task-item-40\"><label for=\"task-item-40\">  相关文章</label></li>\n<li><input type=\"checkbox\"  disabled=\"disabled\" id=\"task-item-41\"><label for=\"task-item-41\">  推荐文章</label></li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<p>评论</p>\n<ul>\n<li><input type=\"checkbox\"  disabled=\"disabled\" id=\"task-item-42\"><label for=\"task-item-42\"> 用户关闭评论时，无法对随笔进行评论</label></li>\n<li><input type=\"checkbox\"  disabled=\"disabled\" id=\"task-item-43\"><label for=\"task-item-43\"> 评论随笔(内容支持超链接、emoji)</label></li>\n<li><input type=\"checkbox\" checked=\"checked\" disabled=\"disabled\" id=\"task-item-44\"><label for=\"task-item-44\"> 删除自己的评论</label></li>\n<li><input type=\"checkbox\" checked=\"checked\" disabled=\"disabled\" id=\"task-item-45\"><label for=\"task-item-45\"> 点赞评论</label></li>\n<li><input type=\"checkbox\" checked=\"checked\" disabled=\"disabled\" id=\"task-item-46\"><label for=\"task-item-46\"> 回复评论</label></li>\n</ul>\n</li>\n<li>\n<p>关注</p>\n<ul>\n<li><input type=\"checkbox\" checked=\"checked\" disabled=\"disabled\" id=\"task-item-47\"><label for=\"task-item-47\"> 关注/取消关注用户</label></li>\n<li><input type=\"checkbox\" checked=\"checked\" disabled=\"disabled\" id=\"task-item-48\"><label for=\"task-item-48\"> 关注/取消关注标签</label></li>\n</ul>\n</li>\n<li>\n<p>个人主页</p>\n<ul>\n<li>随笔\n<ul>\n<li><input type=\"checkbox\" checked=\"checked\" disabled=\"disabled\" id=\"task-item-49\"><label for=\"task-item-49\"> 用户专栏分类展示</label></li>\n<li><input type=\"checkbox\" checked=\"checked\" disabled=\"disabled\" id=\"task-item-50\"><label for=\"task-item-50\"> 最新发布的随笔</label></li>\n</ul>\n</li>\n<li>关注\n<ul>\n<li><input type=\"checkbox\" checked=\"checked\" disabled=\"disabled\" id=\"task-item-51\"><label for=\"task-item-51\"> 关注的人</label></li>\n<li><input type=\"checkbox\" checked=\"checked\" disabled=\"disabled\" id=\"task-item-52\"><label for=\"task-item-52\"> 粉丝</label></li>\n<li><input type=\"checkbox\" checked=\"checked\" disabled=\"disabled\" id=\"task-item-53\"><label for=\"task-item-53\"> 关注的标签</label></li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<p>设置</p>\n<ul>\n<li>个人主页设置\n<ul>\n<li><input type=\"checkbox\" checked=\"checked\" disabled=\"disabled\" id=\"task-item-54\"><label for=\"task-item-54\"> 个人资料更新</label></li>\n</ul>\n</li>\n<li>安全设置\n<ul>\n<li><input type=\"checkbox\" checked=\"checked\" disabled=\"disabled\" id=\"task-item-55\"><label for=\"task-item-55\"> 密码修改</label></li>\n</ul>\n</li>\n<li>博客设置\n<ul>\n<li><input type=\"checkbox\" checked=\"checked\" disabled=\"disabled\" id=\"task-item-56\"><label for=\"task-item-56\"> 默认编辑器设置(markdown/富文本)</label></li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<p>消息</p>\n<ul>\n<li><input type=\"checkbox\" checked=\"checked\" disabled=\"disabled\" id=\"task-item-57\"><label for=\"task-item-57\"> 点赞随笔、点赞评论</label></li>\n<li><input type=\"checkbox\" checked=\"checked\" disabled=\"disabled\" id=\"task-item-58\"><label for=\"task-item-58\"> 评论随笔、回复评论</label></li>\n<li><input type=\"checkbox\" checked=\"checked\" disabled=\"disabled\" id=\"task-item-59\"><label for=\"task-item-59\"> 用户关注</label></li>\n</ul>\n</li>\n</ul>\n<h2 id=\"评论模块\" tabindex=\"-1\"> 评论模块</h2>\n<h3 id=\"主题式\" tabindex=\"-1\"> 主题式</h3>\n<p>将评论分为二级，第一级采用时间倒序，二级按照时间正序，有助于理解上下文关系。</p>\n<p>用户操作：</p>\n<ul>\n<li>评论随笔(内容支持超链接、emoji)</li>\n<li>点赞评论/取消点赞</li>\n<li>回复评论</li>\n<li>删除自己的评论</li>\n</ul>\n<p>运营操作：</p>\n<ul>\n<li>审核通过/拉黑评论</li>\n<li>删除任何评论</li>\n<li>拉黑后的显示逻辑。（保留当前区块、显示内容为：该评论因违规被拉黑）</li>\n<li>删除：（如果是二级评论，直接软删除，如果是一级评论，软删除子评论和当前评论-需要提前提醒用户）\n交互设计</li>\n<li>评论的字数长度（500）、emoji。</li>\n<li>点赞交互-动画、消息通知/推送</li>\n<li>评论区域元素，需要有明确可点击的区域，会跳转到哪个地方。</li>\n</ul>\n<h3 id=\"优化\" tabindex=\"-1\"> 优化</h3>\n<ul>\n<li>精选评论</li>\n</ul>\n<h3 id=\"脑图分享\" tabindex=\"-1\"> 脑图分享</h3>\n<p><a href=\"http://naotu.baidu.com/file/6532431a2e1f0c37c93c5ffd1dd5b49c?token=87690a9bc64fbae1\" target=\"_blank\" rel=\"noopener noreferrer\">http://naotu.baidu.com/file/6532431a2e1f0c37c93c5ffd1dd5b49c?token=87690a9bc64fbae1</a></p>\n<h3 id=\"分组\" tabindex=\"-1\"> 分组</h3>\n<p>分为三种</p>\n<div><pre><code>id  name        info\n1\tAdmin\t    系统管理员\n2\tCmsAdmin\t内容管理员\n3\tUser\t    普通用户\n</code></pre><div aria-hidden=\"true\"><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br></div></div><h3 id=\"审计日志\" tabindex=\"-1\"> 审计日志</h3>\n<p>大多数表存在如下8个字段，用于记录行的变化状态，is_deleted为软删除，执行删除操作时，将其状态置为true，默认实体类继承 <strong>FullAduitEntity</strong>  即可拥有以下8个字段。该设计参考ABP中的实现。FullAduitEntity为泛型，默认id为long类型，FullAduitEntity&lt;Guid&gt;,即可改变主键类型，默认LinUser表主键long，保持<strong>create_user_id</strong>,<strong>delete_user_id</strong>,<strong>update_user_id</strong>都与LinUser的主键相同</p>\n<div><pre><code>\nid\t                bigint\ncreate_user_id  \tbigint\ncreate_time\t        datetime\nis_deleted\t        bit\ndelete_user_id  \tbigint\ndelete_time\t        datetime\nupdate_user_id\t    bigint\nupdate_time\t        datetime\n\n\n</code></pre><div aria-hidden=\"true\"><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br></div></div><h2 id=\"_0-3-0版本权限功能升级\" tabindex=\"-1\"> 0.3.0版本权限功能升级</h2>\n<p>为支持一个用户多个分组，一个分组多个权限，一个用户可分多种授权登录方式，根据lin-cms-springboot项目功能模块升级，介绍如下：</p>\n<ol>\n<li>lin_permission  权限表，本系统通过反射在系统初次启动时，启动异步任务，将不存在的权限新增到此表中。</li>\n<li>lin_group_permission  分组权限表，用于分组与权限表的关联</li>\n<li>lin_user_group  用户分组表。用于用户和分组表的关联。可配置一个用户属于多个分组。</li>\n<li>lin_user_identity 用户授权信息表，用于存储不同登录类型的用户信息，如手机号、邮件、用户名、第三方应用（微信、QQ、GitHub）的登录</li>\n</ol>\n<h2 id=\"lin-cms-开源地址分享\" tabindex=\"-1\"> lin-cms 开源地址分享</h2>\n<ul>\n<li>后端接口 <a href=\"https://github.com/luoyunchong/lin-cms-dotnetcore\" target=\"_blank\" rel=\"noopener noreferrer\">https://github.com/luoyunchong/lin-cms-dotnetcore</a></li>\n<li>管理后台UI <a href=\"https://github.com/luoyunchong/lin-cms-vue\" target=\"_blank\" rel=\"noopener noreferrer\">https://github.com/luoyunchong/lin-cms-vue</a></li>\n<li>前端UI<a href=\"https://github.com/luoyunchong/lin-cms-vvlog\" target=\"_blank\" rel=\"noopener noreferrer\">https://github.com/luoyunchong/lin-cms-vvlog</a></li>\n</ul>\n",
      "date_published": "2019-11-24T12:44:22.000Z",
      "date_modified": "2022-06-13T14:06:43.000Z",
      "authors": [],
      "tags": [
        "lin-cms-dotnetcore"
      ]
    },
    {
      "title": "GitHub第三方授权登录",
      "url": "https://igeekfan.cn/igeekfan-docs/dotnetcore/lin-cms/spa-github-login.html",
      "id": "https://igeekfan.cn/igeekfan-docs/dotnetcore/lin-cms/spa-github-login.html",
      "content_html": "<p>使用 SPA+.NET Core3.1 实现 GitHub 第三方授权登录 类似使用 AspNet.Security.OAuth.GitHub，前端使用如下：VUE+Vue-Router+axios</p>\n<h2 id=\"aspnet-security-oauth-github\" tabindex=\"-1\"> AspNet.Security.OAuth.GitHub</h2>\n<ul>\n<li>GitHub <a href=\"https://github.com/aspnet-contrib/AspNet.Security.OAuth.Providers\" target=\"_blank\" rel=\"noopener noreferrer\">https://github.com/aspnet-contrib/AspNet.Security.OAuth.Providers</a></li>\n</ul>\n<h2 id=\"github-授权登录\" tabindex=\"-1\"> GitHub 授权登录</h2>\n<p>什么配置的过程不说了。。有一推。</p>\n<ul>\n<li><a href=\"https://www.jianshu.com/p/78d186aeb526\" target=\"_blank\" rel=\"noopener noreferrer\">GitHub 第三方登录</a></li>\n<li><a href=\"https://juejin.im/post/5dfb04cee51d45583a66c2f3\" target=\"_blank\" rel=\"noopener noreferrer\">给你的网站添加第三方登录以及短信验证功能</a></li>\n</ul>\n<p>下面为示例</p>\n<div><pre><code>client_id:0be6b05fc717bfc4fb67\nclient_secret:xxxxxxxxxxxxxxx\n</code></pre><div aria-hidden=\"true\"><span>1</span><br><span>2</span><br></div></div><p>Get</p>\n<div><pre><code>https://github.com/login/oauth/authorize?client_id=0be6b05fc717bfc4fb67&amp;redirect_uri=https://localhost:5001/signin-github\n</code></pre><div aria-hidden=\"true\"><span>1</span><br></div></div><p>会重定向到</p>\n<p><a href=\"https://localhost:5001/signin-github?code=07537a84d12bbae08361\" target=\"_blank\" rel=\"noopener noreferrer\">https://localhost:5001/signin-github?code=07537a84d12bbae08361</a></p>\n<p>这个 code 放到下面的请求中，获取 access_token\nPOST 方式（PostMan 去请求）</p>\n<div><pre><code>https://github.com/login/oauth/access_token?client_id=0be6b05fc717bfc4fb67&amp;client_secret=xxxxxxxxxxxxxxx&amp;code=07537a84d12bbae08361\n</code></pre><div aria-hidden=\"true\"><span>1</span><br></div></div><p>Get 方式</p>\n<div><pre><code>https://api.github.com/user?access_token=787506afa3271d077b98f18af56d7cfdc8db43b4\n</code></pre><div aria-hidden=\"true\"><span>1</span><br></div></div><p>然后就能获取用户信息</p>\n<div><pre><code><span>{</span>\n  <span>\"login\"</span><span>:</span> <span>\"luoyunchong\"</span><span>,</span>\n  <span>\"id\"</span><span>:</span> <span>18613266</span><span>,</span>\n  <span>\"node_id\"</span><span>:</span> <span>\"MDQ6VXNlcjE4NjEzMjY2\"</span><span>,</span>\n  <span>\"avatar_url\"</span><span>:</span> <span>\"https://avatars1.githubusercontent.com/u/18613266?v=4\"</span><span>,</span>\n  <span>\"gravatar_id\"</span><span>:</span> <span>\"\"</span><span>,</span>\n  <span>\"url\"</span><span>:</span> <span>\"https://api.github.com/users/luoyunchong\"</span><span>,</span>\n  <span>\"html_url\"</span><span>:</span> <span>\"https://github.com/luoyunchong\"</span><span>,</span>\n  <span>\"followers_url\"</span><span>:</span> <span>\"https://api.github.com/users/luoyunchong/followers\"</span><span>,</span>\n  <span>\"following_url\"</span><span>:</span> <span>\"https://api.github.com/users/luoyunchong/following{/other_user}\"</span><span>,</span>\n  <span>\"gists_url\"</span><span>:</span> <span>\"https://api.github.com/users/luoyunchong/gists{/gist_id}\"</span><span>,</span>\n  <span>\"starred_url\"</span><span>:</span> <span>\"https://api.github.com/users/luoyunchong/starred{/owner}{/repo}\"</span><span>,</span>\n  <span>\"subscriptions_url\"</span><span>:</span> <span>\"https://api.github.com/users/luoyunchong/subscriptions\"</span><span>,</span>\n  <span>\"organizations_url\"</span><span>:</span> <span>\"https://api.github.com/users/luoyunchong/orgs\"</span><span>,</span>\n  <span>\"repos_url\"</span><span>:</span> <span>\"https://api.github.com/users/luoyunchong/repos\"</span><span>,</span>\n  <span>\"events_url\"</span><span>:</span> <span>\"https://api.github.com/users/luoyunchong/events{/privacy}\"</span><span>,</span>\n  <span>\"received_events_url\"</span><span>:</span> <span>\"https://api.github.com/users/luoyunchong/received_events\"</span><span>,</span>\n  <span>\"type\"</span><span>:</span> <span>\"User\"</span><span>,</span>\n  <span>\"site_admin\"</span><span>:</span> <span>false</span><span>,</span>\n  <span>\"name\"</span><span>:</span> <span>\"IGeekFan\"</span><span>,</span>\n  <span>\"company\"</span><span>:</span> <span>null</span><span>,</span>\n  <span>\"blog\"</span><span>:</span> <span>\"https://igeekfan.cn\"</span><span>,</span>\n  <span>\"location\"</span><span>:</span> <span>null</span><span>,</span>\n  <span>\"email\"</span><span>:</span> <span>\"luoyunchong@foxmail.com\"</span><span>,</span>\n  <span>\"hireable\"</span><span>:</span> <span>null</span><span>,</span>\n  <span>\"bio\"</span><span>:</span> <span>\"学习之路漫漫无期。\"</span><span>,</span>\n  <span>\"public_repos\"</span><span>:</span> <span>14</span><span>,</span>\n  <span>\"public_gists\"</span><span>:</span> <span>0</span><span>,</span>\n  <span>\"followers\"</span><span>:</span> <span>16</span><span>,</span>\n  <span>\"following\"</span><span>:</span> <span>11</span><span>,</span>\n  <span>\"created_at\"</span><span>:</span> <span>\"2016-04-22T10:33:44Z\"</span><span>,</span>\n  <span>\"updated_at\"</span><span>:</span> <span>\"2019-12-21T14:49:33Z\"</span>\n<span>}</span>\n</code></pre><div aria-hidden=\"true\"><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br><span>24</span><br><span>25</span><br><span>26</span><br><span>27</span><br><span>28</span><br><span>29</span><br><span>30</span><br><span>31</span><br><span>32</span><br><span>33</span><br></div></div><h2 id=\"net-core3-1\" tabindex=\"-1\"> .NET Core3.1</h2>\n<p>以下代码为主要代码，完整代码看下面的 DEMO 链接。</p>\n<p>使用 WebApi 时，看了一些项目，全是基于 MVC 结构的，都不是我想要的。看了一些博客上面介绍 ,步骤都是千篇一律，都是配合前后端分离的。</p>\n<ul>\n<li>前端运行在:http://localhost:8081</li>\n<li>后端运行在:https://localhost:5001</li>\n</ul>\n<h3 id=\"前后端分离的-spa-配合第三方授权登录流程如下\" tabindex=\"-1\"> 前后端分离的 SPA 配合第三方授权登录流程如下</h3>\n<p>本地测试时，gitHub 回调地址设置 http(s)😕/ip:端口/signin-github</p>\n<ul>\n<li>如: https://localhost:5001/signin-github。</li>\n</ul>\n<h4 id=\"_1-上面这个明明填写的后端的地址-那后端怎么把结果通知前端呢\" tabindex=\"-1\"> 1. 上面这个明明填写的后端的地址，那后端怎么把结果通知前端呢？</h4>\n<p>前端请求<strong>https://localhost:5001/signin?provider=GitHub&amp;redirectUrl=http://localhost:8080/login-result</strong></p>\n<ul>\n<li>提供参数 provider 为 GitHub，</li>\n<li>redirectUrl 为 GitHub 授权登录后，回调 signin-github 后，后端再去重定向的地址，这里填前端的一个路由。</li>\n</ul>\n<h4 id=\"_2-后端只提供了-signin-signin-callback-路由-没有-signin-github-那-github-上配置的路由是怎么回调回来呢\" tabindex=\"-1\"> 2. 后端只提供了 signin，signin-callback 路由，没有 signin-github，那 github 上配置的路由是怎么回调回来呢？</h4>\n<p><a href=\"https://docs.microsoft.com/zh-cn/aspnet/core/security/authentication/social/google-logins?view=aspnetcore-3.1\" target=\"_blank\" rel=\"noopener noreferrer\">google-登录，微软文档</a>，其中有一个<strong>更改默认回调 URI</strong>,通过 AddGitHub 中的 CallbackPath 属性配置。</p>\n<p>介绍了回调地址应配置 signin-google,所以这里应该是 signin-github，他是可以配置的，不需要自己写程序处理 signin-google 这个路由，内部有中间件已经处理了。</p>\n<h4 id=\"_3-回调到-signin-github-后-后端怎么处理-才能让前端刷新。获取登录后的信息呢。\" tabindex=\"-1\"> 3. 回调到 signin-github 后，后端怎么处理，才能让前端刷新。获取登录后的信息呢。</h4>\n<p>具体上面的根据 code 获取 access_token，根据 access_token 获取用户的信息的过程，这些处理的过程，都不需要我们自己处理。我们可以用直接获取用户信息。</p>\n<p>一个方法 SignIn,只要<strong>return Challenge(properties, provider);</strong>，</p>\n<ul>\n<li>provider 为 GitHub，</li>\n<li>properties var properties = new AuthenticationProperties { RedirectUri = url };</li>\n</ul>\n<p>这个 url 为另一个获取用户信息的路由，只要拼接好地址即可。</p>\n<div><pre><code>var authenticateResult = await _contextAccessor.HttpContext.AuthenticateAsync(provider);\nstring email = authenticateResult.Principal.FindFirst(ClaimTypes.Email)?.Value;\nstring name = authenticateResult.Principal.FindFirst(ClaimTypes.Name)?.Value;\n</code></pre><div aria-hidden=\"true\"><span>1</span><br><span>2</span><br><span>3</span><br></div></div><p>需要注入</p>\n<div><pre><code>private readonly IHttpContextAccessor _contextAccessor;\npublic AuthenticationController( IHttpContextAccessor contextAccessor)\n{\n    _contextAccessor = contextAccessor;\n}\n</code></pre><div aria-hidden=\"true\"><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br></div></div><h3 id=\"代码部署-简化\" tabindex=\"-1\"> 代码部署（简化）</h3>\n<p>打开 NuGet 包管理,安装包</p>\n<div><pre><code>Install-Package AspNet.Security.OAuth.GitHub\n</code></pre><div aria-hidden=\"true\"><span>1</span><br></div></div><p>appSettings.json</p>\n<div><pre><code>\"Authentication\": {\n    \"GitHub\": {\n      \"ClientId\": \"0be6b05fc717bfc4fb67\",\n      \"ClientSecret\": \"xxxxxxxxxxxxxxx\"\n    }\n}\n</code></pre><div aria-hidden=\"true\"><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br></div></div><p>add 扩展方法</p>\n<div><pre><code>public static class JwtConfiguration\n{\n    public static void AddJwtConfiguration(this IServiceCollection services, IConfiguration configuration)\n    {\n\n        services.AddAuthentication(opts =>\n            {\n                opts.DefaultScheme = CookieAuthenticationDefaults.AuthenticationScheme;\n                opts.DefaultAuthenticateScheme = JwtBearerDefaults.AuthenticationScheme;\n            }).AddCookie(options =>\n        {\n            options.LoginPath = \"/signin\";\n            options.LogoutPath = \"/signout\";\n        }).AddGitHub(options =>\n        {\n            options.ClientId = configuration[\"Authentication:GitHub:ClientId\"];\n            options.ClientSecret = configuration[\"Authentication:GitHub:ClientSecret\"];\n        });\n    }\n}\n</code></pre><div aria-hidden=\"true\"><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br></div></div><p>默认情况下，如头像，email，是没有获取的。</p>\n<div><pre><code>.AddGitHub(options =>\n{\n    options.ClientId = configuration[\"Authentication:GitHub:ClientId\"];\n    options.ClientSecret = configuration[\"Authentication:GitHub:ClientSecret\"];\n    //options.CallbackPath = new PathString(\"~/signin-github\");//与GitHub上的回调地址相同，默认即是/signin-github\n    options.Scope.Add(\"user:email\");\n    //authenticateResult.Principal.FindFirst(LinConsts.Claims.AvatarUrl)?.Value;  得到GitHub头像\n    options.ClaimActions.MapJsonKey(LinConsts.Claims.AvatarUrl, \"avatar_url\");\n    options.ClaimActions.MapJsonKey(LinConsts.Claims.BIO, \"bio\");\n    options.ClaimActions.MapJsonKey(LinConsts.Claims.BlogAddress, \"blog\");\n});\n\n#其中LinConsts类为静态常量\npublic static class LinConsts\n{\n    public static class Claims\n    {\n        public const string BIO = \"urn:github:bio\";\n        public const string AvatarUrl = \"urn:github:avatar_url\";\n        public const string BlogAddress = \"urn:github:blog\";\n    }\n}\n</code></pre><div aria-hidden=\"true\"><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br></div></div><p>startup.cs</p>\n<p>ConfigureServices 中配置此服务</p>\n<div><pre><code>    services.AddSingleton&lt;IHttpContextAccessor, HttpContextAccessor>();\n    services.AddJwtConfiguration(Configuration);\n</code></pre><div aria-hidden=\"true\"><span>1</span><br><span>2</span><br></div></div><p>创建 AuthenticationController.cs\n增加 SignIn，用于处理用户授权成功后，重定回 signin-callback,并将参数带回。</p>\n<div><pre><code>        private readonly IHttpContextAccessor _contextAccessor;\n        private readonly IConfiguration _configuration;\n\n        public AuthenticationController(IHttpContextAccessor contextAccessor, IConfiguration configuration)\n        {\n            _contextAccessor = contextAccessor;\n            _configuration = configuration;\n        }\n\n        [HttpGet(\"~/signin\")]\n        public async Task&lt;IActionResult> SignIn(string provider, string redirectUrl)\n        {\n            var request = _contextAccessor.HttpContext.Request;\n            var url =\n                $\"{request.Scheme}://{request.Host}{request.PathBase}{request.Path}-callback?provider={provider}&amp;redirectUrl={redirectUrl}\";\n            var properties = new AuthenticationProperties { RedirectUri = url };\n            properties.Items[\"LoginProviderKey\"] = provider;\n            return Challenge(properties, provider);\n\n        }\n</code></pre><div aria-hidden=\"true\"><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br></div></div><p>在 signin 方法中，用户点击授权后（第一次），会根据其传递的 URL，重定向到这个地址，signin-callback,参数也会一同携带。provider 为 GitHub,redirectUrl 为：http://localhost:8081/login-result.</p>\n<div><pre><code>[HttpGet(\"~/signin-callback\")]\npublic async Task&lt;IActionResult> Home(string provider = null, string redirectUrl = \"\")\n{\n    var authenticateResult = await _contextAccessor.HttpContext.AuthenticateAsync(provider);\n    if (!authenticateResult.Succeeded) return Redirect(redirectUrl);\n    var openIdClaim = authenticateResult.Principal.FindFirst(ClaimTypes.NameIdentifier);\n    if (openIdClaim == null || string.IsNullOrWhiteSpace(openIdClaim.Value))\n        return Redirect(redirectUrl);\n\n    //TODO 记录授权成功后的信息\n\n    string email = authenticateResult.Principal.FindFirst(ClaimTypes.Email)?.Value;\n    string name = authenticateResult.Principal.FindFirst(ClaimTypes.Name)?.Value;\n    string gitHubName = authenticateResult.Principal.FindFirst(GitHubAuthenticationConstants.Claims.Name)?.Value;\n    string gitHubUrl = authenticateResult.Principal.FindFirst(GitHubAuthenticationConstants.Claims.Url)?.Value;\n    //startup 中 AddGitHub配置项  options.ClaimActions.MapJsonKey(LinConsts.Claims.AvatarUrl, \"avatar_url\");\n    string avatarUrl = authenticateResult.Principal.FindFirst(LinConsts.Claims.AvatarUrl)?.Value;\n\n    return Redirect($\"{redirectUrl}?openId={openIdClaim.Value}\");\n}\n</code></pre><div aria-hidden=\"true\"><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br></div></div><p>这时候我们能获取用户信息了。那么前端怎么办呢。我们写个方法，获取用户信息，看看效果。</p>\n<ul>\n<li>浏览器直接打开能得到 github 的 id。</li>\n<li>axios GET 请求 https://localhost:5001/OpenId 得到 null</li>\n</ul>\n<div><pre><code>[HttpGet(\"~/OpenId\")]\npublic async Task&lt;string> OpenId(string provider = null)\n{\n   var authenticateResult = await _contextAccessor.HttpContext.AuthenticateAsync(provider);\n   if (!authenticateResult.Succeeded) return null;\n   var openIdClaim = authenticateResult.Principal.FindFirst(ClaimTypes.NameIdentifier);\n   return openIdClaim?.Value;\n}\n</code></pre><div aria-hidden=\"true\"><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br></div></div><p>我记得之前传 Token 时，后台是可以这样获取的。</p>\n<div><pre><code>[HttpGet(\"~/GetOpenIdByToken\")]\npublic string GetOpenIdByToken()\n{\n    return User.FindFirst(ClaimTypes.NameIdentifier)?.Value;\n}\n</code></pre><div aria-hidden=\"true\"><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br></div></div><p>LoginResult.vue 在 created 生命周期中。都是得到 null</p>\n<div><pre><code>axios({\n  methods: \"get\",\n  url: \"https://localhost:5001/OpenId?provider=GitHub\"\n})\n  .then(function(response) {\n    // handle success\n    console.log(response);\n  })\n\naxios({\n  methods: \"get\",\n  url: \"https://localhost:5001/GetOpenIdByToken\"\n})\n  .then(function(response) {\n    // handle success\n    console.log(response);\n  })\n</code></pre><div aria-hidden=\"true\"><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br></div></div><h3 id=\"为什么呢\" tabindex=\"-1\"> 为什么呢？？？</h3>\n<p>因为前后端分离，不是基于 Cookies 的。http 是无状态的。每次请求无法区分用户的。我们可以根据当前的 ClaimsPrincipal，根据 JWT 生成相应的 Token，axios 请求时，放到 headers 中。</p>\n<p>安装包</p>\n<div><pre><code>Install-Package Microsoft.AspNetCore.Authentication.JwtBearer\n</code></pre><div aria-hidden=\"true\"><span>1</span><br></div></div><p>AppSettings.json 配置改成</p>\n<div><pre><code>\"Authentication\": {\n\"JwtBearer\": {\n  \"SecurityKey\": \"JWTStudyWebsite_DI20DXU3\",\n  \"Issuer\": \"JWTStudy\",\n  \"Audience\": \"JWTStudyWebsite\"\n},\n\"GitHub\": {\n  \"ClientId\": \"0be6b05fc717bfc4fb67\",\n  \"ClientSecret\": \"xxxxxxxxxxxxxxx\"\n}\n}\n</code></pre><div aria-hidden=\"true\"><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br></div></div><p>在 signin-callback 路由中，得到 authenticateResult.Principal，其中默认包含了(id,login,name,url)，授权得到 eamil，另外 MapJsonKey 扩展了以下字段（avatar_url、bio、blog)</p>\n<div><pre><code><span><span>var</span></span> authenticateResult <span>=</span> <span>await</span> _contextAccessor<span>.</span>HttpContext<span>.</span><span>AuthenticateAsync</span><span>(</span>provider<span>)</span><span>;</span>\n<span><span>string</span></span> token <span>=</span> <span>this</span><span>.</span><span>CreateToken</span><span>(</span>authenticateResult<span>.</span>Principal<span>)</span><span>;</span>\n</code></pre><div aria-hidden=\"true\"><span>1</span><br><span>2</span><br></div></div><p>根据 ClaimsPrincipal 值生成 token 值。</p>\n<div><pre><code><span>private</span> <span><span>string</span></span> <span>CreateToken</span><span>(</span><span>ClaimsPrincipal</span> claimsPrincipal<span>)</span>\n<span>{</span>\n\n    <span><span>var</span></span> handler <span>=</span> <span>new</span> <span>JwtSecurityTokenHandler</span><span>(</span><span>)</span><span>;</span>\n    <span><span>var</span></span> key <span>=</span> <span>new</span> <span>SymmetricSecurityKey</span><span>(</span>\n        Encoding<span>.</span>UTF8<span>.</span><span>GetBytes</span><span>(</span>_configuration<span>[</span><span>\"Authentication:JwtBearer:SecurityKey\"</span><span>]</span><span>)</span><span>)</span><span>;</span>\n    <span><span>var</span></span> credentials <span>=</span> <span>new</span> <span>SigningCredentials</span><span>(</span>key<span>,</span> SecurityAlgorithms<span>.</span>HmacSha256<span>)</span><span>;</span>\n    <span><span>var</span></span> token <span>=</span> <span>new</span> <span>JwtSecurityToken</span><span>(</span>\n        _configuration<span>[</span><span>\"Authentication:JwtBearer:Issuer\"</span><span>]</span><span>,</span>\n        _configuration<span>[</span><span>\"Authentication:JwtBearer:Audience\"</span><span>]</span><span>,</span>\n        claimsPrincipal<span>.</span>Claims<span>,</span>\n        <span>expires</span><span>:</span> DateTime<span>.</span>Now<span>.</span><span>AddMinutes</span><span>(</span><span>30</span><span>)</span><span>,</span>\n        <span>signingCredentials</span><span>:</span> credentials\n    <span>)</span><span>;</span>\n\n    <span>return</span> handler<span>.</span><span>WriteToken</span><span>(</span>token<span>)</span><span>;</span>\n<span>}</span>\n</code></pre><div aria-hidden=\"true\"><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br></div></div><p>这里的 claimsPrincipal 是什么呢。简单的说就是一个存有 github 授权信息的对象，可以解析出对应的 Clamis，这里其实就是用了 Clamis 的属性值。</p>\n<table>\n<thead>\n<tr>\n<th>Claim</th>\n<th>ClaimsIdentity</th>\n<th>ClaimsPrincipal</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>id、name,url,email,avatar_url 等</td>\n<td>由多组 Claim 组成，这里可指 GitHub 授权登录后得到的那个对象。</td>\n<td>ClaimsIdentity 的持有者</td>\n</tr>\n</tbody>\n</table>\n<p>具体 Jwt 的生成与配置项。这里不详细说明。可以看这个示例（.NET Core2.2）<a href=\"https://github.com/luoyunchong/BasicTemplate\" target=\"_blank\" rel=\"noopener noreferrer\">https://github.com/luoyunchong/BasicTemplate</a></p>\n<p>AddJwtConfiguration 改成如下内容</p>\n<div><pre><code><span>public</span> <span>static</span> <span><span>void</span></span> <span>AddJwtConfiguration</span><span>(</span><span>this</span> <span>IServiceCollection</span> services<span>,</span> <span>IConfiguration</span> configuration<span>)</span>\n<span>{</span>\n\n    services<span>.</span><span>AddAuthentication</span><span>(</span>opts <span>=></span>\n        <span>{</span>\n            opts<span>.</span>DefaultScheme <span>=</span> CookieAuthenticationDefaults<span>.</span>AuthenticationScheme<span>;</span>\n            opts<span>.</span>DefaultAuthenticateScheme <span>=</span> JwtBearerDefaults<span>.</span>AuthenticationScheme<span>;</span>\n        <span>}</span><span>)</span><span>.</span><span>AddCookie</span><span>(</span>options <span>=></span>\n    <span>{</span>\n        options<span>.</span>LoginPath <span>=</span> <span>\"/signin\"</span><span>;</span>\n        options<span>.</span>LogoutPath <span>=</span> <span>\"/signout\"</span><span>;</span>\n    <span>}</span><span>)</span><span>.</span><span>AddJwtBearer</span><span>(</span>JwtBearerDefaults<span>.</span>AuthenticationScheme<span>,</span> options <span>=></span>\n    <span>{</span>\n        options<span>.</span>Audience <span>=</span> configuration<span>[</span><span>\"Authentication:JwtBearer:Audience\"</span><span>]</span><span>;</span>\n\n        options<span>.</span>TokenValidationParameters <span>=</span> <span>new</span> <span>TokenValidationParameters</span>\n        <span>{</span>\n            <span>// The signing key must match!</span>\n            ValidateIssuerSigningKey <span>=</span> <span>true</span><span>,</span>\n            IssuerSigningKey <span>=</span> <span>new</span> <span>SymmetricSecurityKey</span><span>(</span>\n                Encoding<span>.</span>ASCII<span>.</span><span>GetBytes</span><span>(</span>configuration<span>[</span><span>\"Authentication:JwtBearer:SecurityKey\"</span><span>]</span><span>)</span><span>)</span><span>,</span>\n\n            <span>// Validate the JWT Issuer (iss) claim</span>\n            ValidateIssuer <span>=</span> <span>true</span><span>,</span>\n            ValidIssuer <span>=</span> configuration<span>[</span><span>\"Authentication:JwtBearer:Issuer\"</span><span>]</span><span>,</span>\n\n            <span>// Validate the JWT Audience (aud) claim</span>\n            ValidateAudience <span>=</span> <span>true</span><span>,</span>\n            ValidAudience <span>=</span> configuration<span>[</span><span>\"Authentication:JwtBearer:Audience\"</span><span>]</span><span>,</span>\n\n            <span>// Validate the token expiry</span>\n            ValidateLifetime <span>=</span> <span>true</span><span>,</span>\n\n            <span>// If you want to allow a certain amount of clock drift, set that here</span>\n            <span>//ClockSkew = TimeSpan.Zero</span>\n        <span>}</span><span>;</span>\n    <span>}</span><span>)</span><span>.</span><span>AddGitHub</span><span>(</span>options <span>=></span>\n    <span>{</span>\n        options<span>.</span>ClientId <span>=</span> configuration<span>[</span><span>\"Authentication:GitHub:ClientId\"</span><span>]</span><span>;</span>\n        options<span>.</span>ClientSecret <span>=</span> configuration<span>[</span><span>\"Authentication:GitHub:ClientSecret\"</span><span>]</span><span>;</span>\n        <span>//options.CallbackPath = new PathString(\"~/signin-github\");//与GitHub上的回调地址相同，默认即是/signin-github</span>\n        options<span>.</span>Scope<span>.</span><span>Add</span><span>(</span><span>\"user:email\"</span><span>)</span><span>;</span>\n        <span>//authenticateResult.Principal.FindFirst(LinConsts.Claims.AvatarUrl)?.Value;  得到GitHub头像</span>\n        options<span>.</span>ClaimActions<span>.</span><span>MapJsonKey</span><span>(</span>LinConsts<span>.</span>Claims<span>.</span>AvatarUrl<span>,</span> <span>\"avatar_url\"</span><span>)</span><span>;</span>\n        options<span>.</span>ClaimActions<span>.</span><span>MapJsonKey</span><span>(</span>LinConsts<span>.</span>Claims<span>.</span>BIO<span>,</span> <span>\"bio\"</span><span>)</span><span>;</span>\n        options<span>.</span>ClaimActions<span>.</span><span>MapJsonKey</span><span>(</span>LinConsts<span>.</span>Claims<span>.</span>BlogAddress<span>,</span> <span>\"blog\"</span><span>)</span><span>;</span>\n    <span>}</span><span>)</span><span>;</span>\n<span>}</span>\n</code></pre><div aria-hidden=\"true\"><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br><span>24</span><br><span>25</span><br><span>26</span><br><span>27</span><br><span>28</span><br><span>29</span><br><span>30</span><br><span>31</span><br><span>32</span><br><span>33</span><br><span>34</span><br><span>35</span><br><span>36</span><br><span>37</span><br><span>38</span><br><span>39</span><br><span>40</span><br><span>41</span><br><span>42</span><br><span>43</span><br><span>44</span><br><span>45</span><br><span>46</span><br><span>47</span><br><span>48</span><br></div></div><p><a href=\"https://github.com/luoyunchong/dotnetcore-examples/blob/master/aspnetcore-oatuth2/spa-vue-oauth2/src/components/LoginResult.vue\" target=\"_blank\" rel=\"noopener noreferrer\">前端 LoginResult.vue 代码</a></p>\n<p>前端运行</p>\n<div><pre><code><span>yarn</span> <span>install</span>\n<span>yarn</span> serve\n</code></pre><div aria-hidden=\"true\"><span>1</span><br><span>2</span><br></div></div><p>点击 GitHub 登录</p>\n<p>GetOpenIdByToken 根据生成的 token 值，解析出了用户 id,这样前端在 login-result 这个组件中，把 token 保存好，并重定向自己的主页，获取用户所有信息即可。</p>\n<div><pre><code>data: 18613266\nstatus: 200\nconfig: {url: \"https://localhost:5001/GetOpenIdByToken\"}\n</code></pre><div aria-hidden=\"true\"><span>1</span><br><span>2</span><br><span>3</span><br></div></div><p>OpenId?provider=GitHub 则得不到数据，只能浏览器直接请求 https://localhost:5001/OpenId?provider=GitHub，才能到 github 的 id。这个适应于前后端不分离，或者属于之前我们经常使用 MVC 结构，同一域名下，同一端口，基于 Cookies 登录的判断。</p>\n<h2 id=\"参考\" tabindex=\"-1\"> 参考</h2>\n<ul>\n<li><a href=\"https://www.cnblogs.com/rsls/p/10522649.html\" target=\"_blank\" rel=\"noopener noreferrer\">.net Core2.2 WebApi 通过 OAuth2.0 实现微信登录</a></li>\n<li><a href=\"https://blog.csdn.net/weixin_30414305/article/details/101389325\" target=\"_blank\" rel=\"noopener noreferrer\">AspNetCore3.0 和 JWT</a></li>\n<li><a href=\"http://www.woshipm.com/pd/509712.html\" target=\"_blank\" rel=\"noopener noreferrer\">用户系统设计：第三方授权、账号绑定及解绑（下）</a></li>\n</ul>\n<h2 id=\"demo-示例\" tabindex=\"-1\"> Demo 示例</h2>\n<ul>\n<li>GitHub <a href=\"https://github.com/luoyunchong/dotnetcore-examples/blob/master/aspnetcore-oatuth2\" target=\"_blank\" rel=\"noopener noreferrer\">https://github.com/luoyunchong/dotnetcore-examples/blob/master/aspnetcore-oatuth2</a></li>\n</ul>\n",
      "date_published": "2020-02-28T11:10:31.000Z",
      "date_modified": "2022-06-13T14:06:43.000Z",
      "authors": [],
      "tags": [
        "lin-cms-dotnetcore"
      ]
    },
    {
      "title": "前端准备",
      "url": "https://igeekfan.cn/igeekfan-docs/dotnetcore/lin-cms/vue-start.html",
      "id": "https://igeekfan.cn/igeekfan-docs/dotnetcore/lin-cms/vue-start.html",
      "content_html": "<h1 id=\"前端准备\" tabindex=\"-1\"> 前端准备</h1>\n<h2 id=\"开源地址\" tabindex=\"-1\"> 开源地址</h2>\n<ul>\n<li>管理端 UI <a href=\"https://github.com/luoyunchong/lin-cms-vue\" target=\"_blank\" rel=\"noopener noreferrer\">https://github.com/luoyunchong/lin-cms-vue</a></li>\n<li>用户端 UI <a href=\"https://github.com/luoyunchong/lin-cms-vvlog\" target=\"_blank\" rel=\"noopener noreferrer\">https://github.com/luoyunchong/lin-cms-vvlog</a></li>\n</ul>\n<h2 id=\"博客模块线上地址\" tabindex=\"-1\"> 博客模块线上地址</h2>\n<ul>\n<li>本项目 swagger 地址 <a href=\"https://api.igeekfan.cn/swagger/index.html\" target=\"_blank\" rel=\"noopener noreferrer\">https://api.igeekfan.cn/swagger/index.html</a></li>\n<li>用户端 lin-cms-vvlog <a href=\"https://vvlog.baimocore.cn\" target=\"_blank\" rel=\"noopener noreferrer\">https://vvlog.baimocore.cn</a>\n<ul>\n<li>普通用户：710277267@qq.com</li>\n<li>密码：123qwe</li>\n</ul>\n</li>\n<li>管理员 lin-cms-vue <a href=\"https://cms.baimocore.cn\" target=\"_blank\" rel=\"noopener noreferrer\">https://cms.baimocore.cn/</a>\n<ul>\n<li>管理员： admin</li>\n<li>密码：123qwe</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"快速上手\" tabindex=\"-1\"> 快速上手</h2>\n<p>开发必备</p>\n<ul>\n<li><a href=\"https://nodejs.org/en/\" target=\"_blank\" rel=\"noopener noreferrer\">Node.js 10+</a> 版本即可，我须安装 12.7</li>\n<li><a href=\"https://yarnpkg.com/zh-Hant/docs/install#windows-stable\" target=\"_blank\" rel=\"noopener noreferrer\">yarn</a></li>\n</ul>\n<p>如果以下命令有问题，请删除 yarn.lock，node_modules 文件夹后，重新执行 yarn，yarn serve</p>\n<div><pre><code># clone the project\ngit clone https://github.com/luoyunchong/lin-cms-vue.git\n\n# install dependency\nyarn\n\n# develop\nyarn serve\n\n# deploy\nyarn deploy\n</code></pre><div aria-hidden=\"true\"><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br></div></div><h2 id=\"deploy-发布\" tabindex=\"-1\"> deploy 发布</h2>\n<p>scp2 方便快速发布，一行命令就能快速发布成功。</p>\n<p>必备条件：（参数）</p>\n<ul>\n<li>一台 linux 的服务器，ip</li>\n<li>用户名</li>\n<li>密码</li>\n<li>端口：默认是 22</li>\n<li>发布的地址。这里放到/var/www/lin-cms-vue 目录中。</li>\n</ul>\n<h2 id=\"步骤\" tabindex=\"-1\"> 步骤</h2>\n<p>根目录新建 deploy 目录，创建 index.js 文件。</p>\n<div><pre><code>'use strict'\n// 引入scp2模块\nvar client = require('scp2');\nconst ora = require('ora')\nconst chalk = require('chalk')\nconst spinner = ora('正在发布到生产服务器...')\nspinner.start()\nclient.scp('dist/', {\n    \"host\": \"\",\n    \"username\": \"\",\n    \"password\": \"\",\n    \"port\": \"22\",\n    \"path\": \"/var/www/lin-cms-vue\"\n}, function (err) {\n    spinner.stop()\n    if (!err) {\n        console.log(\"npm run build-scp2: scp2工具上传完毕,远端服务路径：/var/www/lin-cms-vue\")\n    } else {\n        console.log(\"err\", err)\n    }\n})\n</code></pre><div aria-hidden=\"true\"><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br></div></div><p>快速发布，需要安装 scp2</p>\n<div><pre><code>cnpm install scp2\n</code></pre><div aria-hidden=\"true\"><span>1</span><br></div></div><p>package.json 中增加</p>\n<div><pre><code>  \"scripts\": {\n    \"deploy\": \"yarn build:production &amp;&amp; node ./deploy\",\n}\n</code></pre><div aria-hidden=\"true\"><span>1</span><br><span>2</span><br><span>3</span><br></div></div><div><pre><code>yarn deploy\n</code></pre><div aria-hidden=\"true\"><span>1</span><br></div></div><h2 id=\"nginx-配置\" tabindex=\"-1\"> nginx 配置</h2>\n<ul>\n<li>vue 使用 history 的配置</li>\n</ul>\n<div><pre><code>server {\n    listen 8080;\n    root /var/www/lin-cms-vue;\n\n   charset utf-8;\n   location / {\n       try_files $uri $uri/ /index.html;\n\n     }\n\n    error_page   500 502 503 504  /50x.html;\n    location = /50x.html {\n        root   html;\n    }\n\n}\n</code></pre><div aria-hidden=\"true\"><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br></div></div><h2 id=\"配置项\" tabindex=\"-1\"> 配置项</h2>\n<ol>\n<li>\n<p>配置 api 地址： 打开配置文件 src/config/index.js 配置 baseUrl ，本地开发阶段配置本地虚拟域名(https://localhost:5001/)，线上部署生产域名。</p>\n</li>\n<li>\n<p>用户名：<strong>admin</strong> 密码 <strong>123qwe</strong></p>\n</li>\n</ol>\n",
      "date_published": "2020-02-28T11:10:31.000Z",
      "date_modified": "2022-06-02T11:02:17.000Z",
      "authors": [],
      "tags": []
    }
  ]
}