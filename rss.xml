<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <atom:link href="https://igeekfan.cn/igeekfan-docs/rss.xml" rel="self" type="application/rss+xml"/>
    <title>.NET 开发指南</title>
    <link>https://igeekfan.cn/igeekfan-docs/</link>
    <description>问君能有几多愁？恰似一江春水向东流。</description>
    <language>zh-CN</language>
    <pubDate>Sat, 23 Jul 2022 15:54:05 GMT</pubDate>
    <lastBuildDate>Sat, 23 Jul 2022 15:54:05 GMT</lastBuildDate>
    <generator>vuepress-plugin-feed2</generator>
    <docs>https://validator.w3.org/feed/docs/rss2.html</docs>
    <category>ASP.NET Core</category>
    <category>lin-cms-dotnetcore</category>
    <item>
      <title>Docker 配置 Baget</title>
      <link>https://igeekfan.cn/igeekfan-docs/dotnetcore/docker/Docker-Baget.html</link>
      <guid>https://igeekfan.cn/igeekfan-docs/dotnetcore/docker/Docker-Baget.html</guid>
      <source url="https://igeekfan.cn/igeekfan-docs/rss.xml">Docker 配置 Baget</source>
      <pubDate>Wed, 29 Jun 2022 19:17:23 GMT</pubDate>
      <content:encoded><![CDATA[<h1 id="docker-配置-baget" tabindex="-1"> Docker 配置 Baget</h1>
<p>创建一个名为baget.env存储BaGet的配置：</p>
<div><pre><code><span>cd</span> /var
<span>mkdir</span> baget
<span>cd</span> /var/baget
<span>vim</span> baget.env
</code></pre><div aria-hidden="true"><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br></div></div><ul>
<li>baget.env</li>
</ul>
<div><pre><code># 以下配置是用于发布包的API密钥,您应该将其更改ApiKey的值以保护服务器。
ApiKey=Your-API-Key

Storage__Type=FileSystem
Storage__Path=/var/baget/packages
Database__Type=Sqlite
Database__ConnectionString=Data Source=/var/baget/baget.db
Search__Type=Database
Mirror__Enabled=true

</code></pre><div aria-hidden="true"><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br></div></div><p>有关配置的完整列表，请参阅<a href="https://loic-sharma.github.io/BaGet/configuration/" target="_blank" rel="noopener noreferrer">Configuration - BaGet (loic-sharma.github.io)</a>的配置指南。</p>
<h2 id="docker" tabindex="-1"> Docker</h2>
<p>在baget.env同目录创建一个<code>baget-data</code> 的目录</p>
<div><pre><code><span>mkdir</span> baget-data
</code></pre><div aria-hidden="true"><span>1</span><br></div></div><p>拉取baget最新的镜像</p>
<div><pre><code><span>docker</span> pull loicsharma/baget
</code></pre><div aria-hidden="true"><span>1</span><br></div></div><p>运行BaGet</p>
<div><pre><code><span>cd</span> /var/baget
<span>docker</span> run --name nuget-server --restart<span>=</span>always -d -p <span>5555</span>:80 --env-file baget.env -v <span>"<span><span>$(</span><span>pwd</span><span>)</span></span>/baget-data:/var/baget"</span> loicsharma/baget:latest 
</code></pre><div aria-hidden="true"><span>1</span><br><span>2</span><br></div></div><h2 id="发布包" tabindex="-1"> 发布包</h2>
<p>发布第一个nuget包</p>
<div><pre><code>dotnet nuget push -s http://localhost:5555/v3/index.json -k Your-API-Key
package.1.0.0.nupkg
</code></pre><div aria-hidden="true"><span>1</span><br><span>2</span><br></div></div><p>发布第一个symbol  package</p>
<div><pre><code>dotnet nuget push -s http://localhost:5555/v3/index.json -k Your-API-Key package.1.0.0.snupkg
</code></pre><div aria-hidden="true"><span>1</span><br></div></div><p>示例</p>
<div><pre><code>dotnet nuget push -s http://124.70.130.97:5555/v3/index.json src/IGeekFan.Localization.FreeSql/bin/Debug/IGeekFan.Localization.FreeSql.0.0.3.nupkg -k Your-API-Key

dotnet nuget push -s http://124.70.130.97:5555/v3/index.json src/IGeekFan.Localization.FreeSql/bin/Debug/IGeekFan.Localization.FreeSql.0.0.3.snupkg -k Your-API-Key

</code></pre><div aria-hidden="true"><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br></div></div><h2 id="还原包" tabindex="-1"> 还原包</h2>
<p>你可以通过以下源还原包</p>
<div><pre><code>http://localhost:5555/v3/index.json
</code></pre><div aria-hidden="true"><span>1</span><br></div></div><p>可以通过打开URL来浏览包<a href="http://localhost:5555/" target="_blank" rel="noopener noreferrer">http://localhost:5555/</a>在浏览器中。</p>
<h2 id="symbol-server" tabindex="-1"> Symbol server</h2>
<p>可以使用以下符号位置加载符号：</p>
<div><pre><code>http://localhost:5555/api/download/symbols
</code></pre><div aria-hidden="true"><span>1</span><br></div></div><h3 id="https-loic-sharma-github-io-baget-installation-docker" tabindex="-1"> <a href="https://loic-sharma.github.io/BaGet/installation/docker/" target="_blank" rel="noopener noreferrer">https://loic-sharma.github.io/BaGet/installation/docker/</a></h3>
]]></content:encoded>
    </item>
    <item>
      <title>Docker部署CMS命令</title>
      <link>https://igeekfan.cn/igeekfan-docs/dotnetcore/docker/Docker-CMS.html</link>
      <guid>https://igeekfan.cn/igeekfan-docs/dotnetcore/docker/Docker-CMS.html</guid>
      <source url="https://igeekfan.cn/igeekfan-docs/rss.xml">Docker部署CMS命令</source>
      <pubDate>Wed, 29 Jun 2022 19:17:23 GMT</pubDate>
      <content:encoded><![CDATA[<h1 id="docker部署cms命令" tabindex="-1"> Docker部署CMS命令</h1>
<h2 id="部署docker" tabindex="-1"> 部署docker</h2>
<div><pre><code><span>#判断是否存在webnotebook容器</span>
<span>docker</span> <span>ps</span> <span>|</span> <span>grep</span> lincms-web-1 <span>&amp;></span> /dev/null
<span>#如果不存在，则Remove</span>
<span>if</span> <span>[</span> <span>$?</span> -ne <span>0</span> <span>]</span>
<span>then</span>
    <span>echo</span> <span>"lincms-web container not exist continue.. "</span>
<span>else</span>
    <span>echo</span> <span>"remove lincms-web-1 container"</span>
    <span>docker</span> <span>rm</span> lincms-web-1 -f
<span>fi</span>

<span>docker</span> images <span>|</span> <span>grep</span> registry.cn-hangzhou.aliyuncs.com/igeekfan/lincms-web <span>&amp;></span> /dev/null

<span>if</span> <span>[</span> <span>$?</span> -ne <span>0</span> <span>]</span>
<span>then</span>
    <span>echo</span> <span>"image does not exist , continue..."</span>
<span>else</span>
    <span>echo</span> <span>"image exists !!! remove it"</span>
    <span>docker</span> rmi --force registry.cn-hangzhou.aliyuncs.com/igeekfan/lincms-web
<span>fi</span>
<span>#从阿里云拉取刚刚push的镜像</span>
<span>docker</span> pull registry.cn-hangzhou.aliyuncs.com/igeekfan/lincms-web

<span>docker</span> run --restart unless-stopped -p <span>5011</span>:80 --name lincms-web-1 -d registry.cn-hangzhou.aliyuncs.com/igeekfan/lincms-web

<span>docker</span> <span>rm</span> lincms-web-2 -f
<span>docker</span> <span>rm</span> lincms-web-3 -f
<span>docker</span> <span>rm</span> lincms-web-4 -f

<span>docker</span> run --restart unless-stopped -p <span>5012</span>:80 --name lincms-web-2 -d registry.cn-hangzhou.aliyuncs.com/igeekfan/lincms-web
<span>docker</span> run --restart unless-stopped -p <span>5020</span>:80 --name lincms-web-3 -d registry.cn-hangzhou.aliyuncs.com/igeekfan/lincms-web
<span>docker</span> run --restart unless-stopped -p <span>5021</span>:80 --name lincms-web-4 -d registry.cn-hangzhou.aliyuncs.com/igeekfan/lincms-web


</code></pre><div aria-hidden="true"><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br><span>24</span><br><span>25</span><br><span>26</span><br><span>27</span><br><span>28</span><br><span>29</span><br><span>30</span><br><span>31</span><br><span>32</span><br><span>33</span><br><span>34</span><br></div></div><h2 id="nuget-api-key" tabindex="-1"> nuget api key</h2>
<div><pre><code>Your-API-Key
</code></pre><div aria-hidden="true"><span>1</span><br></div></div><div><pre><code>nuget SetApiKey Your-API-Key
dotnet nuget push IGeekFan.AspNetCore.Knife4jUI.0.0.11.nupkg --api-key Your-API-Key --source https://api.nuget.org/v3/index.json

</code></pre><div aria-hidden="true"><span>1</span><br><span>2</span><br><span>3</span><br></div></div><div><pre><code><span>{</span>
  <span>//"DefaultConnection": "Data Source=|DataDirectory|\\SampleApp.db;",</span>
  <span>"Sqlite1"</span><span>:</span> <span>"Data Source=d:\\SampleApp1.db"</span><span>,</span>
  <span>"Sqlite2"</span><span>:</span> <span>"Data Source=d:\\SampleApp2.db"</span><span>,</span>
  <span>"Oracle"</span><span>:</span> <span>"user id=test;password=123qwe; data source=//127.0.0.1:1521/ORCL;Pooling=true;Min Pool Size=1"</span><span>,</span>
  <span>"MySql"</span><span>:</span> <span>"Data Source=127.0.0.1;Port=3306;User ID=root;Password=root; Initial Catalog=cccddd;Charset=utf8; SslMode=none;Min pool size=1"</span><span>,</span>
  <span>"SqlServer"</span><span>:</span> <span>"Data Source=(localdb)\\MSSQLLocalDB;Initial Catalog=cccddd;Pooling=true;Min Pool Size=1"</span><span>,</span>
  <span>"PostgreSQL"</span><span>:</span> <span>"Host=127.0.0.1;Port=5432;Username=postgres;Password=postgresql; Database=postgres;Pooling=true;Minimum Pool Size=1"</span>
<span>}</span>
</code></pre><div aria-hidden="true"><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br></div></div>]]></content:encoded>
    </item>
    <item>
      <title>Docker 命令行</title>
      <link>https://igeekfan.cn/igeekfan-docs/dotnetcore/docker/Docker-Command.html</link>
      <guid>https://igeekfan.cn/igeekfan-docs/dotnetcore/docker/Docker-Command.html</guid>
      <source url="https://igeekfan.cn/igeekfan-docs/rss.xml">Docker 命令行</source>
      <pubDate>Wed, 29 Jun 2022 19:17:23 GMT</pubDate>
      <content:encoded><![CDATA[<h1 id="docker-命令行" tabindex="-1"> Docker 命令行</h1>
<ul>
<li>Command-Line Interfaces <a href="https://docs.docker.com/engine/reference/run/" title="https://docs.docker.com/engine/reference/run/" target="_blank" rel="noopener noreferrer">https://docs.docker.com/engine/reference/run/</a></li>
</ul>
<div><pre><code><span>docker</span> images  <span># 查看所有镜像</span>

<span>docker</span> <span>ps</span> -a <span>#显示所有的容器，包括未运行的。</span>
<span>docker</span> <span>ps</span> -l <span>#最后启动的容器</span>

<span>docker</span> <span>rm</span> 容器id   <span>#删除容器</span>
<span>docker</span> <span>rm</span> <span><span>$(</span><span>docker</span> <span>ps</span> -q -a<span>)</span></span> <span>#一次性删除所有的容器</span>

<span>docker</span> rmi 镜像id/镜像名称  <span>#删除镜像</span>
<span>docker</span> rmi <span><span>$(</span><span>docker</span> images -q<span>)</span></span> <span>#一次性删除所有的镜像。</span>

<span>docker</span> build -t igeekfan/demo <span>.</span>  <span>#运行构建命令,构建Docker 镜像。 </span>

<span>docker</span> run 镜像 <span>#运行</span>
<span>docker</span> run -it -p <span>5000</span>:80 igeekfan/demo
<span>#5000是运行后，docker对外的端口，80是这个服务对外的端口，其中Dockerfile 存在语句EXPOSE 80</span>
<span>docker</span> run -d -p <span>5000</span>:80 igeekfan/demo 
-d 参数后台运行

<span>docker</span> start 容器id
<span>docker</span> restart 容器id
<span>docker</span> stop 容器id <span>#终止容器。</span>
<span>docker</span> logs <span>$CONTAINER_ID</span> <span>##在container外面查看它的输出 </span>
<span>docker</span> attach <span>$CONTAINER_ID</span> <span>##连接上容器实时查看：</span>

<span>docker</span> pull microsoft/dotnet  <span>#单独安装某一镜像</span>

<span>docker</span> save 镜像id <span>></span> 文件 <span>#持久化镜像</span>
<span>docker</span> load <span>&lt;</span> 文件
</code></pre><div aria-hidden="true"><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br><span>24</span><br><span>25</span><br><span>26</span><br><span>27</span><br><span>28</span><br><span>29</span><br></div></div><p>我们如果想将Docker 放置到其他机器运行，很简单。</p>
<div><pre><code><span>#直接保存镜像，然后复制镜像到其他机器，然后使用docker 命令load 既可。</span>

<span>docker</span> save igeekfan/demo <span>></span> demo.tar

<span>#然后加载命令</span>

<span>docker</span> load <span>&lt;</span> demo.tar
</code></pre><div aria-hidden="true"><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br></div></div><p>我们如果想将Docker 放置到其他机器运行，很简单。</p>
<div><pre><code><span>#直接保存镜像，然后复制镜像到其他机器，然后使用docker 命令load 既可。</span>

<span>docker</span> save igeekfan/demo <span>></span> demo.tar

<span>#然后加载命令</span>

<span>docker</span> load <span>&lt;</span> demo.tar
</code></pre><div aria-hidden="true"><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br></div></div><p>Docker删除</p>
<div><pre><code><span># 查询相关软件包</span>
dpkg -l <span>|</span> <span>grep</span> <span>docker</span>
<span># 删除这个包 上面查到什么，删除什么</span>
<span>sudo</span> <span>apt</span> remove --purge docker.io
</code></pre><div aria-hidden="true"><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br></div></div>]]></content:encoded>
    </item>
    <item>
      <title>Docker 配置 Jenkins</title>
      <link>https://igeekfan.cn/igeekfan-docs/dotnetcore/docker/Docker-Jenkins.html</link>
      <guid>https://igeekfan.cn/igeekfan-docs/dotnetcore/docker/Docker-Jenkins.html</guid>
      <source url="https://igeekfan.cn/igeekfan-docs/rss.xml">Docker 配置 Jenkins</source>
      <pubDate>Wed, 29 Jun 2022 19:17:23 GMT</pubDate>
      <content:encoded><![CDATA[<h1 id="docker-配置-jenkins" tabindex="-1"> Docker 配置 Jenkins</h1>
<p><a href="https://www.cnblogs.com/hanease/p/15690225.html" target="_blank" rel="noopener noreferrer">docker安装jenkins - hanease - 博客园 (cnblogs.com)</a></p>
<h2 id="配置-docker-镜像" tabindex="-1"> 配置 Docker 镜像</h2>
<div><pre><code><span>curl</span> -sSL https://get.daocloud.io/daotools/set_mirror.sh <span>|</span> <span>sh</span> -s http://f1361db2.m.daocloud.io
</code></pre><div aria-hidden="true"><span>1</span><br></div></div><h2 id="docker拉取镜像" tabindex="-1"> Docker拉取镜像</h2>
<div><pre><code><span>docker</span> pull jenkins/jenkins:lts
</code></pre><div aria-hidden="true"><span>1</span><br></div></div><h2 id="配置本地存储目录" tabindex="-1"> 配置本地存储目录</h2>
<div><pre><code><span>mkdir</span> -p /apps/devops/jenkins
<span>chmod</span> <span>777</span> /apps/devops/jenkins
</code></pre><div aria-hidden="true"><span>1</span><br><span>2</span><br></div></div><h3 id="启动jenkins容器" tabindex="-1"> 启动Jenkins容器</h3>
<div><pre><code><span>docker</span> stop jenkins
<span>docker</span> rmi jenkins

<span>sudo</span> <span>usermod</span> -a -G <span>docker</span> root
<span>sudo</span> <span>chmod</span> <span>666</span> /var/run/docker.sock


<span>docker</span> run -itd -p <span>9003</span>:8080 -p <span>9004</span>:50000 <span>\</span>
--restart always <span>\</span>
-v /apps/devops/jenkins:/var/jenkins_home <span>\</span>
--name jenkins <span>\</span>
--volume /var/run/docker.sock:/var/run/docker.sock <span>\</span>
-v <span><span>$(</span><span>which</span> <span>docker</span><span>)</span></span>:/usr/bin/docker <span>\</span>
-v <span><span>$(</span><span>which</span> <span>docker</span><span>)</span></span>:/usr/bin/com.docker.cli <span>\</span>
jenkins/jenkins:lts
</code></pre><div aria-hidden="true"><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br></div></div><h2 id="docker-运行aspnetcore项目" tabindex="-1"> Docker 运行aspnetcore项目</h2>
<div><pre><code><span>docker</span> run -it -d -p <span>7000</span>:80 --name aspnetcoredemo aspnetcoredemo
</code></pre><div aria-hidden="true"><span>1</span><br></div></div><h2 id="构建项目" tabindex="-1"> 构建项目</h2>
<div><pre><code><span>docker</span> build -f src/aspnetcoredemo/Dockerfile -t aspnetcoredemo <span>.</span>

<span>GITHASH</span><span>=</span><span><span>`</span><span>git</span> rev-parse --short HEAD<span>`</span></span>
<span>docker</span> build -f src/aspnetcoredemo/Dockerfile -t aspnetcoredemo:<span>$GITHASH</span> <span>.</span>
<span>docker</span> tag aspnetcoredemo:<span>$GITHASH</span> aspnetcoredemo:latest

<span>docker</span> build -f src/Services/ToDo/IGeekFan.FreeKit.Todos.API/Dockerfile -t igeekfan.freekit.todos.api <span>.</span>
  

</code></pre><div aria-hidden="true"><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br></div></div><p>IGeekFan.Freekit.Service bash脚本</p>
<div><pre><code><span>#!/bin/bash</span>
<span># 获取短版本号</span>
<span>GITHASH</span><span>=</span><span><span>`</span><span>git</span> rev-parse --short HEAD<span>`</span></span>
<span>docker</span> stop igeekfan.freekit.todos.api
<span>docker</span> <span>rm</span> igeekfan.freekit.todos.api
<span>echo</span> ---------------Building Docker Image<span>..</span>.------------------
<span>docker</span> build -f src/Services/ToDo/IGeekFan.FreeKit.Todos.API/Dockerfile -t igeekfan.freekit.todos.api:<span>$GITHASH</span> <span>.</span>
<span>docker</span> tag igeekfan.freekit.todos.api:<span>$GITHASH</span> igeekfan.freekit.todos.api:latest
<span>echo</span> ---------------Launching Container<span>..</span>igeekfan.freekit.todos.api.------------------
<span>docker</span> run -it -d -p <span>7002</span>:80 --name igeekfan.freekit.todos.api igeekfan.freekit.todos.api -v


<span>docker</span> stop igeekfan.freekit.files.api
<span>docker</span> <span>rm</span> igeekfan.freekit.files.api
<span>echo</span> ---------------Building Docker Image<span>..</span>.------------------
<span>docker</span> build -f src/Services/File/IGeekFan.FreeKit.Files.API/Dockerfile -t igeekfan.freekit.files.api:<span>$GITHASH</span> <span>.</span>
<span>docker</span> tag igeekfan.freekit.files.api:<span>$GITHASH</span> igeekfan.freekit.files.api:latest
<span>echo</span> ---------------Launching Container<span>..</span>igeekfan.freekit.files.api.------------------
<span>docker</span> run -it -d -p <span>7003</span>:80 --name igeekfan.freekit.files.api igeekfan.freekit.files.api -v

<span>docker</span> stop igeekfan.freekit.identity.api
<span>docker</span> <span>rm</span> igeekfan.freekit.identity.api
<span>echo</span> ---------------Building Docker Image<span>..</span>.------------------
<span>docker</span> build -f src/Services/Identity/IGeekFan.FreeKit.Identity.API/Dockerfile -t igeekfan.freekit.identity.api:<span>$GITHASH</span> <span>.</span>
<span>docker</span> tag igeekfan.freekit.identity.api:<span>$GITHASH</span> igeekfan.freekit.identity.api:latest
<span>echo</span> ---------------Launching Container<span>..</span>igeekfan.freekit.identity.api.------------------
<span>docker</span> run -it -d -p <span>7004</span>:80 --name igeekfan.freekit.identity.api igeekfan.freekit.identity.api -v


</code></pre><div aria-hidden="true"><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br><span>24</span><br><span>25</span><br><span>26</span><br><span>27</span><br><span>28</span><br><span>29</span><br></div></div><p>aspnetcoredemo项目 bash脚本</p>
<div><pre><code><span>#!/bin/bash</span>
<span># 获取短版本号</span>
<span>GITHASH</span><span>=</span><span><span>`</span><span>git</span> rev-parse --short HEAD<span>`</span></span>
<span>docker</span> stop aspnetcoredemo
<span>docker</span> <span>rm</span> aspnetcoredemo
<span>echo</span> ---------------Building Docker Image<span>..</span>aspnetcoredemo.------------------
<span>docker</span> build -f src/aspnetcoredemo/Dockerfile -t aspnetcoredemo:<span>$GITHASH</span> <span>.</span>
<span>docker</span> tag aspnetcoredemo:<span>$GITHASH</span> aspnetcoredemo:latest
<span>echo</span> ---------------Launching Container<span>..</span>aspnetcoredemo.------------------
<span>docker</span> run -it -d -p <span>7000</span>:80 --name aspnetcoredemo aspnetcoredemo -v 

<span>echo</span> ---------------Finish<span>..</span>aspnetcoredemo.------------------

<span>docker</span> stop webapplicationdemo
<span>docker</span> <span>rm</span> webapplicationdemo
<span>echo</span> ---------------Building Docker Image<span>..</span>webapplicationdemo.------------------
<span>docker</span> build -f src/webapplicationdemo/Dockerfile -t webapplicationdemo:<span>$GITHASH</span> <span>.</span>
<span>docker</span> tag webapplicationdemo:<span>$GITHASH</span> webapplicationdemo:latest
<span>echo</span> ---------------Launching Container<span>..</span>webapplicationdemo.------------------
<span>docker</span> run -it -d -p <span>7001</span>:80 --name webapplicationdemo webapplicationdemo -v 

</code></pre><div aria-hidden="true"><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br></div></div>]]></content:encoded>
    </item>
    <item>
      <title>Docker 配置 MySql</title>
      <link>https://igeekfan.cn/igeekfan-docs/dotnetcore/docker/Docker-MySql.html</link>
      <guid>https://igeekfan.cn/igeekfan-docs/dotnetcore/docker/Docker-MySql.html</guid>
      <source url="https://igeekfan.cn/igeekfan-docs/rss.xml">Docker 配置 MySql</source>
      <pubDate>Wed, 29 Jun 2022 19:17:23 GMT</pubDate>
      <content:encoded><![CDATA[<h1 id="docker-配置-mysql" tabindex="-1"> Docker 配置 MySql</h1>
<h2 id="_1-拉取镜像" tabindex="-1"> 1.拉取镜像</h2>
<div><pre><code><span>docker</span> pull mysql:5.7   <span># 拉取 mysql 5.7</span>
<span>docker</span> pull mysql       <span># 拉取最新版mysql镜像</span>
</code></pre><div aria-hidden="true"><span>1</span><br><span>2</span><br></div></div><h2 id="_2不指定目录映射" tabindex="-1"> 2不指定目录映射</h2>
<div><pre><code><span>sudo</span> <span>docker</span> run -p <span>3306</span>:3306 --name mysql -e <span>MYSQL_ROOT_PASSWORD</span><span>=</span><span>123456</span> -d mysql
</code></pre><div aria-hidden="true"><span>1</span><br></div></div><p>-p 端口配置 主机3306/容器3306
-name 容器名，此处为mysql
-e 配置信息 MYSQL_ROOT_PASSWORD=123456 指定密码为123456
-d 指定镜像
sudo docker run -p 3306:3306 --name mysql -e MYSQL_ROOT_PASSWORD=123456 -d mysql</p>
<blockquote>
<p>默认的配置文件是：/etc/mysql/my.cnf
默认的数据目录是：/var/lib/mysql</p>
</blockquote>
<p>我们进入mysql容器中，查看my.cnf.</p>
<div><pre><code><span>docker</span> <span>exec</span> -it mysql <span>bash</span>
<span>cat</span> /etc/mysql/my.cnf
</code></pre><div aria-hidden="true"><span>1</span><br><span>2</span><br></div></div><p>my.cnf 加载了 /etc/mysql/conf.d目录中所有以后缀为.cnf的配置文件，所以我们映射目录，只需要映射conf.d目录即可。</p>
<p>先在linux上创建目录</p>
<div><pre><code><span>sudo</span> <span>mkdir</span> -p /usr/local/docker/mysql/conf.d
<span>sudo</span> <span>vim</span> mysql-docker.cnf
</code></pre><div aria-hidden="true"><span>1</span><br><span>2</span><br></div></div><p>保存内容</p>
<div><pre><code><span>[</span>mysqld<span>]</span>
server-id <span>=</span> <span>1</span> <span>#服务Id唯一</span>
port <span>=</span> <span>3306</span>
log-error    <span>=</span> /var/log/mysql/error.log
<span>#只能用IP地址</span>
skip_name_resolve 
<span>#数据库默认字符集</span>
character-set-server <span>=</span> utf8mb4
<span>#数据库字符集对应一些排序等规则 </span>
collation-server <span>=</span> utf8mb4_general_ci
<span>#设置client连接mysql时的字符集,防止乱码</span>
<span>init_connect</span><span>=</span><span>'SET NAMES utf8mb4'</span>
<span>#最大连接数</span>
max_connections <span>=</span> <span>300</span>
</code></pre><div aria-hidden="true"><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br></div></div><div><pre><code><span>#如果遇到这个错就执行下权限</span>
<span>#mysqld: [Warning] World-writable config file '/etc/mysql/conf.d/mysql-docker.cnf' is ignored</span>
<span>sudo</span> <span>chmod</span> <span>644</span> mysql-docker.cnf
</code></pre><div aria-hidden="true"><span>1</span><br><span>2</span><br><span>3</span><br></div></div><h2 id="_3-建立目录映射" tabindex="-1"> 3.建立目录映射</h2>
<p>在linux上创建目录，用于存放mysql的日志和数据。</p>
<div><pre><code><span>sudo</span> <span>mkdir</span> -p /usr/local/docker/mysql/logs
<span>sudo</span> <span>mkdir</span> -p /usr/local/docker/mysql/data
</code></pre><div aria-hidden="true"><span>1</span><br><span>2</span><br></div></div><div><pre><code><span>sudo</span> <span>docker</span> run -p <span>3310</span>:3306 --name mysql <span>\</span>
-v /usr/local/docker/mysql/conf.d:/etc/mysql/conf.d <span>\</span>
-v /usr/local/docker/mysql/logs:/var/log/mysql <span>\</span>
-v /usr/local/docker/mysql/data:/var/lib/mysql <span>\</span>
-e <span>MYSQL_ROOT_PASSWORD</span><span>=</span><span>123456</span> <span>\</span>
--restart<span>=</span>always <span>\</span>
-d mysql

</code></pre><div aria-hidden="true"><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br></div></div><div><pre><code><span>#查看docker 下进程，mysql是否启动</span>
<span>docker</span> <span>ps</span> 
<span>#由于 mysql /var/log/mysql 默认情况下查看</span>
<span>docker</span> <span>exec</span> mysql <span>chown</span> mysql:root /var/log/mysql
</code></pre><div aria-hidden="true"><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br></div></div><ul>
<li>-p 端口配置 linux主机3310/容器3306</li>
<li>-name 容器名，此处为mysql</li>
<li>-v 指定容器及其挂载的卷，此外为 宿主机文件目录:容器文件目录，可指定多个数据文件目录</li>
<li>-e 配置信息 MYSQL_ROOT_PASSWORD=123456 设置 MySql服务的root密码为123456</li>
<li>--restart=always 容器退出时总是重启</li>
<li>-d 后台运行。</li>
<li>镜像名</li>
</ul>
<h2 id="docker相关命令" tabindex="-1"> Docker相关命令</h2>
<p>其中mysql为容器的name或id</p>
<div><pre><code><span>#重启容器</span>
<span>docker</span> restart mysql
<span>#暂停容器</span>
<span>docker</span> stop mysql
<span>#删除容器</span>
<span>docker</span> <span>rm</span> mysql
<span>#启动容器</span>
<span>docker</span> start mysql
<span>#更新容器 开机也能重启</span>
<span>docker</span> update mysql --restart<span>=</span>always
</code></pre><div aria-hidden="true"><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br></div></div><h3 id="配置远程navicat可访问" tabindex="-1"> 配置远程Navicat可访问</h3>
<p>如果遇到无法访问时，可以使用此方式</p>
<div><pre><code><span>sudo</span> <span>docker</span> <span>exec</span> -it mysql /bin/bash
mysql -uroot -p123456
use mysql<span>;</span>
ALTER <span>USER</span> <span>'root'</span>@<span>'%'</span> IDENTIFIED WITH mysql_native_password BY <span>'123456'</span><span>;</span>
flush privileges<span>;</span>
</code></pre><div aria-hidden="true"><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br></div></div><h3 id="restart参数" tabindex="-1"> Restart参数</h3>
<p>Docker 中restart参数用于指定自动重启docker容器策略，包含3个选项：no，on-failure[:times]，always，unless-stopped</p>
<p>no 默认值，表示容器退出时，docker不自动重启容器</p>
<div><pre><code><span>docker</span> run --restart<span>=</span>no <span>[</span>容器名<span>]</span>
</code></pre><div aria-hidden="true"><span>1</span><br></div></div><p>on-failure 若容器的退出状态非0，则docker自动重启容器，还可以指定重启次数，若超过指定次数未能启动容器则放弃**</p>
<div><pre><code><span>docker</span> run --restart<span>=</span>on-failure:3 <span>[</span>容器名<span>]</span>
</code></pre><div aria-hidden="true"><span>1</span><br></div></div><p>always 容器退出时总是重启**</p>
<div><pre><code><span>docker</span> run --restart<span>=</span>always <span>[</span>容器名<span>]</span>
</code></pre><div aria-hidden="true"><span>1</span><br></div></div><p>unless-stopped 容器退出时总是重启，但不考虑Docker守护进程启动时就已经停止的容器**</p>
<div><pre><code><span>docker</span> run --restart<span>=</span>unless-stopped <span>[</span>容器名<span>]</span>
</code></pre><div aria-hidden="true"><span>1</span><br></div></div><p>如果容器启动时没有设置–restart参数，则通过下面命令进行更新：* *</p>
<div><pre><code><span>docker</span> update --restart<span>=</span>always <span>[</span>容器名<span>]</span>
</code></pre><div aria-hidden="true"><span>1</span><br></div></div>]]></content:encoded>
    </item>
    <item>
      <title>Docker 配置 Nacos</title>
      <link>https://igeekfan.cn/igeekfan-docs/dotnetcore/docker/Docker-Nacos.html</link>
      <guid>https://igeekfan.cn/igeekfan-docs/dotnetcore/docker/Docker-Nacos.html</guid>
      <source url="https://igeekfan.cn/igeekfan-docs/rss.xml">Docker 配置 Nacos</source>
      <pubDate>Wed, 29 Jun 2022 19:17:23 GMT</pubDate>
      <content:encoded><![CDATA[<h1 id="docker-配置-nacos" tabindex="-1"> Docker 配置 Nacos</h1>
<h2 id="_2、创建本地的映射文件" tabindex="-1"> 2、创建本地的映射文件</h2>
<p>创建目录</p>
<div><pre><code><span>mkdir</span> -p  /usr/local/docker/nacos/logs /usr/local/docker/nacos/conf
</code></pre><div aria-hidden="true"><span>1</span><br></div></div><p>配置数据库 application.properties</p>
<div><pre><code><span>vim</span> /usr/local/docker/nacos/conf/application.properties
</code></pre><div aria-hidden="true"><span>1</span><br></div></div><ul>
<li>application.properties</li>
</ul>
<div><pre><code>spring.datasource.platform<span>=</span>mysql
db.num<span>=</span><span>1</span>
db.url.0<span>=</span>jdbc:mysql://localhost:3310/nacos_config?characterEncoding<span>=</span>utf8<span>&amp;</span><span>connectTimeout</span><span>=</span><span>1000</span><span>&amp;</span><span>socketTimeout</span><span>=</span><span>3000</span><span>&amp;</span><span>autoReconnect</span><span>=</span>true
db.user<span>=</span>user
db.password<span>=</span>password
</code></pre><div aria-hidden="true"><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br></div></div><p>下面通过配置来暴露除了/shutdown之外的所有端点。下面通过配置来暴露除了/shutdown之外的所有端点</p>
<div><pre><code>management.endpoints.web.exposure.include<span>=</span>* 
</code></pre><div aria-hidden="true"><span>1</span><br></div></div><p>运行容器：使用<code>standalone</code>(单机)模式并开放8848端口，并映射配置文件和日志目录，数据库在application.properties中配置</p>
<div><pre><code><span>docker</span> run -d <span>\</span>
-p <span>8848</span>:8848 -p <span>9848</span>:9848 -p <span>9555</span>:9555 <span>\</span>
-e <span>MODE</span><span>=</span>standalone <span>\</span>
-e <span>TZ</span><span>=</span><span>"Asia/Shanghai"</span> <span>\</span>
-e <span>PREFER_HOST_MODE</span><span>=</span>hostname <span>\</span>
-v /usr/local/docker/nacos/logs:/home/nacos/logs <span>\</span>
-v /usr/local/docker/nacos/conf/application.properties:/home/nacos/conf/application.properties <span>\</span>
--restart always <span>\</span>
--name nacos <span>\</span>
nacos/nacos-server
</code></pre><div aria-hidden="true"><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br></div></div><p>其中-v 指定映射配置。左侧为linux文件，右侧为docker目录</p>
<div><pre><code><span>docker</span> network create mysql-net
<span># 创建桥接网络 mysql-net</span>
<span>docker</span> network connect mysql-net mysql
<span># 容器 mysql 连入 mysql-net</span>
<span>docker</span> network connect mysql-net nacos
<span># 同上，nacos</span>
<span>docker</span> network inspect mysql-net
<span># 配置完后容器运行起来使用该命令查看该桥接网络下容器信息</span>
</code></pre><div aria-hidden="true"><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br></div></div>]]></content:encoded>
    </item>
    <item>
      <title>Docker 配置 Portainer</title>
      <link>https://igeekfan.cn/igeekfan-docs/dotnetcore/docker/Docker-Portainer.html</link>
      <guid>https://igeekfan.cn/igeekfan-docs/dotnetcore/docker/Docker-Portainer.html</guid>
      <source url="https://igeekfan.cn/igeekfan-docs/rss.xml">Docker 配置 Portainer</source>
      <pubDate>Wed, 29 Jun 2022 19:17:23 GMT</pubDate>
      <content:encoded><![CDATA[<h1 id="docker-配置-portainer" tabindex="-1"> Docker 配置 Portainer</h1>
<h2 id="docker-可视化管" tabindex="-1"> Docker 可视化管</h2>
<ul>
<li>portainer 默认9000端口</li>
</ul>
<div><pre><code><span>docker</span> pull portainer/portainer
</code></pre><div aria-hidden="true"><span>1</span><br></div></div><div><pre><code><span>sudo</span> <span>docker</span> run -d -p <span>9000</span>:9000 <span>\</span>
--restart<span>=</span>always <span>\</span>
-v /var/run/docker.sock:/var/run/docker.sock <span>\</span>
-v portainer_data:/data <span>\</span>
--name portainer <span>\</span>
-d portainer/portainer
</code></pre><div aria-hidden="true"><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br></div></div><ul>
<li>-d 后台运行</li>
<li>-p 端口映射 主机端口9000:容器端口9000</li>
<li>--restart=always 容器退出时总是重启</li>
<li>-v 本地docker.sock</li>
<li><code>--</code>name指定容器名</li>
<li>-d 指定镜像名</li>
</ul>
]]></content:encoded>
    </item>
    <item>
      <title>Docker 配置 Redis</title>
      <link>https://igeekfan.cn/igeekfan-docs/dotnetcore/docker/Docker-Redis.html</link>
      <guid>https://igeekfan.cn/igeekfan-docs/dotnetcore/docker/Docker-Redis.html</guid>
      <source url="https://igeekfan.cn/igeekfan-docs/rss.xml">Docker 配置 Redis</source>
      <pubDate>Wed, 29 Jun 2022 19:17:23 GMT</pubDate>
      <content:encoded><![CDATA[<h1 id="docker-配置-redis" tabindex="-1"> Docker 配置 Redis</h1>
<h2 id="目录" tabindex="-1"> 目录</h2>
<ul>
<li>
<ul>
<li></li>
<li></li>
<li></li>
</ul>
</li>
</ul>
<h2 id="_2-本地配置文件映射" tabindex="-1"> 2.本地配置文件映射</h2>
<p>创建/etc/redis/conf/redis.conf文件，并且daemonize=no。一定要是非后台模式，如果 是YES,会导致redis无法启动，因为后台会导致docker无任务可做而退出</p>
<div><pre><code><span>mkdir</span> -p /etc/redis/conf/
<span>cd</span> /etc/redis/conf/
<span>vim</span> redis.conf

<span>##redis.conf文件内容</span>
daemonize no
port <span>6379</span>
requirepass <span>123456</span>
<span>bind</span> <span>0.0</span>.0.0

</code></pre><div aria-hidden="true"><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br></div></div><h2 id="_3-启动docker" tabindex="-1"> 3.启动Docker</h2>
<div><pre><code><span>docker</span> run <span>\</span>
-p <span>6379</span>:6379 <span>\</span>
--name redis <span>\</span>
-v /etc/redis/conf/redis.conf:/etc/redis/redis.conf <span>\</span>
-v /etc/redis/data:/data <span>\</span>
-d redis <span>\</span>
redis-server /etc/redis/redis.conf <span>\</span>
--requirepass <span>'123456'</span> <span>\</span>
--appendonly <span>yes</span>

</code></pre><div aria-hidden="true"><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br></div></div><p><strong>docker 镜像reids 默认 无配置文件启动</strong></p>
<ul>
<li>-p：表示端口映射，冒号左面的是我们的服务器的端口，右侧则表示的是容器内mysql的端口</li>
<li><code>--</code>name：是我们给redis容器取的名字</li>
<li>-v：表示挂载路径\映射配置文件</li>
</ul>
<p>/etc/redis/conf/redis.conf左侧，代表linux上的路径，映射到容器上的/etc/redis/redis.conf。</p>
<p>/etc/redis/data代现linux上的redis的数据路径，映射到窗口中的/data目录</p>
<ul>
<li>-d redis  后台模式启动 redis</li>
<li>redis-server /etc/redis/redis.conf    redis 将以 /etc/redis/redis.conf 为配置文件启动</li>
<li>--appendonly yes  开启redis 持久化</li>
<li>--requirepass '123456' 指定密码为123456</li>
<li>--appendonly yes：开启持久化</li>
</ul>
<p>后续可通过修改linux上的/etc/redis/conf/redis.conf文件来修改容器的redis服务，如密码requireapss+ 密码</p>
]]></content:encoded>
    </item>
    <item>
      <title>Docker</title>
      <link>https://igeekfan.cn/igeekfan-docs/dotnetcore/docker/</link>
      <guid>https://igeekfan.cn/igeekfan-docs/dotnetcore/docker/</guid>
      <source url="https://igeekfan.cn/igeekfan-docs/rss.xml">Docker</source>
      <pubDate>Wed, 29 Jun 2022 19:17:23 GMT</pubDate>
      <content:encoded><![CDATA[<h1 id="docker" tabindex="-1"> Docker</h1>
<p>Docker 中的三个概念，镜像（Image)、容器（Container)、仓库（Repository）</p>
<p>一个Image可有多个Container，我们可以把Image发布至Dokcer Hub提供的Repository中或阿里云Docker镜像仓库（Docker Registry），供他人使用。</p>
<h2 id="docker-安装" tabindex="-1"> Docker 安装</h2>
<p><a href="https://cloud.tencent.com/developer/article/1853467" title="Ubuntu Docker 安装 - 云+社区 - 腾讯云 (tencent.com)" target="_blank" rel="noopener noreferrer">Ubuntu Docker 安装 - 云+社区 - 腾讯云 (tencent.com)</a></p>
<h2 id="docker-理论到实战" tabindex="-1"> Docker 理论到实战</h2>
<p><a href="https://www.cnblogs.com/codelove/p/10030439.html" title="Docker最全教程——从理论到实战(一)" target="_blank" rel="noopener noreferrer">Docker最全教程——从理论到实战(一)</a></p>
<p><a href="http://dockone.io/article/126" title="八个Docker的真实应用场景" target="_blank" rel="noopener noreferrer">八个Docker的真实应用场景</a></p>
<p><a href="https://blog.csdn.net/julien71/article/details/79760919" title="docker pull很慢解决办法、配置阿里镜像" target="_blank" rel="noopener noreferrer">docker pull很慢解决办法、配置阿里镜像</a></p>
<p><a href="https://www.cnblogs.com/zxtceq/p/7403953.html" title="ASP.NET Core开发Docker部署" target="_blank" rel="noopener noreferrer">ASP.NET Core开发Docker部署</a></p>
<h2 id="docker学习记录" tabindex="-1"> Docker学习记录</h2>
<p>Docker Desktop 在windows 10下安装正常，Hyper-V也正常安装，但Hyper-V下无法打开虚拟交换机管理器，提示“尝试检索虚拟交换列表时出错”，也无法快速创建虚拟机，提示“xx异常”。事件查看器-&gt;Windows日志-&gt;系统中，Hyper-V-VmSwitch 一直提示 类似&quot;VMSwitch driver due to error&quot;</p>
<p><a href="https://www.cnblogs.com/GeDiao/p/7975667.html" title="Hyper-V管理器无法打开虚拟交换机管理，别人的方法，但无济于事" target="_blank" rel="noopener noreferrer">Hyper-V管理器无法打开虚拟交换机管理，别人的方法，但无济于事</a></p>
<p>别人都是说去在windows功能上打开Hyper-v即可，而我开启了一直不行，我这个主要是Hyper-V问题，导致Docker服务一直无法正常启动。微软的论坛也找了，没人能解决，说重装系统？这只能终极解决方案。下面这个链接，我也回答了一下。</p>
<p><a href="https://social.msdn.microsoft.com/Forums/healthvault/zh-CN/cf5c267b-1ca0-40dd-9959-5ecb3475a06c/hyperv?forum=window10app" title="hyperv 无法打开虚拟交换机管理器，报错“尝试检索虚拟交换机列表时出错" target="_blank" rel="noopener noreferrer">hyperv 无法打开虚拟交换机管理器，报错“尝试检索虚拟交换机列表时出错</a></p>
<p>后来找到解决办法，在设置-更新和安全-Windows预览体验计划，先去官网申请，申请后，升级系统，他会帮我修复Hyper-V.</p>
<p>AMD 启用了虚拟化也无法使用,命令行设置hyper-v参数.管理员模式下的命令提示符中输入</p>
<div><pre><code>bcdedit /set hypervisorlaunchtype Auto
</code></pre><div aria-hidden="true"><span>1</span><br></div></div><p>然后重启电脑，启动docker</p>
<h2 id="docker运行aspnetcore项目" tabindex="-1"> docker运行aspnetcore项目</h2>
<div><pre><code><span>docker</span> run --restart unless-stopped -p <span>5020</span>:80 --name lincms-web-1 -d registry.cn-hangzhou.aliyuncs.com/igeekfan/lincms-web

<span>docker</span> run --restart unless-stopped -p <span>5021</span>:80 --name lincms-web-2 -d registry.cn-hangzhou.aliyuncs.com/igeekfan/lincms-web

<span>docker</span> run --restart unless-stopped -p <span>5022</span>:80 --name lincms-web-3 -d registry.cn-hangzhou.aliyuncs.com/igeekfan/lincms-web
</code></pre><div aria-hidden="true"><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br></div></div><p>docker 提示hype-v冲突，以管理员身份运行命令提示符 执行命令</p>
<div><pre><code>bcdedit /set hypervisorlaunchtype off 
</code></pre><div aria-hidden="true"><span>1</span><br></div></div><p>重启，运行vm即可。</p>
<p>如果想要恢复hyper启动</p>
<div><pre><code>bcdedit /set hypervisorlaunchtype auto
</code></pre><div aria-hidden="true"><span>1</span><br></div></div>]]></content:encoded>
    </item>
    <item>
      <title>在 ASP.NET Core 6 中添加Startup.cs的整洁方式</title>
      <link>https://igeekfan.cn/igeekfan-docs/dotnetcore/examples/ASPNETCore6-Add-Startup-Clean.html</link>
      <guid>https://igeekfan.cn/igeekfan-docs/dotnetcore/examples/ASPNETCore6-Add-Startup-Clean.html</guid>
      <source url="https://igeekfan.cn/igeekfan-docs/rss.xml">在 ASP.NET Core 6 中添加Startup.cs的整洁方式</source>
      <category>ASP.NET Core</category>
      <pubDate>Mon, 13 Jun 2022 14:06:43 GMT</pubDate>
      <content:encoded><![CDATA[<blockquote>
<ul>
<li><a href="https://www.talkingdotnet.com/clean-way-to-add-startup-class-in-asp-net-core-6-project/" target="_blank" rel="noopener noreferrer">https://www.talkingdotnet.com/clean-way-to-add-startup-class-in-asp-net-core-6-project/</a></li>
<li>作者: Talking Dotnet</li>
</ul>
</blockquote>
<p>如果您关注<code>ASP.NET Core 6</code>，那么您可能发现，对于<code>ASP.NET Core 6</code>项目，没有<code>Startup.cs</code>文件。我发布了关于<a href="https://igeekfan.cn/dotnetcore/examples/NET6Startup.html" target="_blank" rel="noopener noreferrer">如何在ASP.NETCore 6项目中添加Startup.cs</a>，这种方法以传统的方式将类引入到项目中，这是我们今天使用的<code>ASP.NET Core 5</code>及其早期版本。但是，如果我们能够改进，让它变得更好呢。好的，在这篇文章中，让我们看一看在<code>ASP.NET Core6</code>中添加<code>Startup</code>类的整洁方法</p>
<p>为了以整洁的方式实现，我们将利用<a href="https://docs.microsoft.com/en-us/dotnet/csharp/programming-guide/classes-and-structs/extension-methods" target="_blank" rel="noopener noreferrer">扩展方法</a>。扩展方法允许您向现有类型“添加”方法，而无需创建新的派生类型、重新编译或以其他方式修改原始类型。<code>ASP.NET Core 6.0</code>使用和来引导<code>ASP.NET Core应用程序</code>。因此，我们将为这二个(<code>WebApplicationBuilder</code>、<code>WebApplication</code>)类创建扩展方法</p>
<p>记住，这2个是<code>ASP.NET Core 6.0</code>新引入的。阅读<a href="https://andrewlock.net/exploring-dotnet-6-part-2-comparing-webapplicationbuilder-to-the-generic-host/" target="_blank" rel="noopener noreferrer">Comparing WebApplicationBuilder to the Generic Host</a>，并<a href="https://andrewlock.net/exploring-dotnet-6-part-3-exploring-the-code-behind-webapplicationbuilder/" target="_blank" rel="noopener noreferrer">Exploring the code behind WebApplicationBuilder</a>以了解有关此新引导模型的更多信息。</p>
<p>该类用于注册/配置服务或依赖项。由于扩展方法是静态方法，所以请使用名为的静态方法创建一个静态类。现在，将依赖项注册代码从移动到这里。如下</p>
<div><pre><code><span>public</span> <span>static</span> <span>class</span> <span>RegisterStartupServices</span>
<span>{</span>
    <span>public</span> <span>static</span> <span>WebApplicationBuilder</span> <span>RegisterServices</span><span>(</span><span>this</span> <span>WebApplicationBuilder</span> builder<span>)</span>
    <span>{</span>
        builder<span>.</span>Services<span>.</span><span>AddControllers</span><span>(</span><span>)</span><span>;</span>
        <span>// Learn more about configuring Swagger/OpenAPI at https://aka.ms/aspnetcore/swashbuckle</span>
        builder<span>.</span>Services<span>.</span><span>AddEndpointsApiExplorer</span><span>(</span><span>)</span><span>;</span>
        builder<span>.</span>Services<span>.</span><span>AddSwaggerGen</span><span>(</span><span>)</span><span>;</span>
        <span>return</span> builder<span>;</span>
    <span>}</span>
<span>}</span>
</code></pre><div aria-hidden="true"><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br></div></div><p>现在，让我们创建另一个静态类<code>RegisterStartupMiddlewares</code>，它扩展了用于中间件注册的类<code>WebApplication</code>。在这个类中，从中移动中间件注册码并将其引入方法。Program.cs中的<code>SetupMiddleware</code></p>
<div><pre><code><span>public</span> <span>static</span> <span>class</span> <span>RegisterStartupMiddlewares</span>
<span>{</span>
    <span>public</span> <span>static</span> <span>WebApplication</span> <span>SetupMiddleware</span><span>(</span><span>this</span> <span>WebApplication</span> app<span>)</span>
    <span>{</span>
        <span>// Configure the HTTP request pipeline.</span>
        <span>if</span> <span>(</span>app<span>.</span>Environment<span>.</span><span>IsDevelopment</span><span>(</span><span>)</span><span>)</span>
        <span>{</span>
            app<span>.</span><span>UseSwagger</span><span>(</span><span>)</span><span>;</span>
            app<span>.</span><span>UseSwaggerUI</span><span>(</span><span>)</span><span>;</span>
        <span>}</span>

        app<span>.</span><span>UseHttpsRedirection</span><span>(</span><span>)</span><span>;</span>

        app<span>.</span><span>UseAuthorization</span><span>(</span><span>)</span><span>;</span>

        app<span>.</span><span>MapControllers</span><span>(</span><span>)</span><span>;</span>

        <span>return</span> app<span>;</span>
    <span>}</span>
<span>}</span>
</code></pre><div aria-hidden="true"><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br></div></div><p>完成后，让我们返回到<code>Program.cs</code>中更新代码并使用这些扩展方法。如下</p>
<div><pre><code><span><span>var</span></span> builder <span>=</span> WebApplication<span>.</span><span>CreateBuilder</span><span>(</span>args<span>)</span>
             <span>.</span><span>RegisterServices</span><span>(</span><span>)</span><span>;</span>

<span><span>var</span></span> app <span>=</span> builder<span>.</span><span>Build</span><span>(</span><span>)</span>
        <span>.</span><span>SetupMiddleware</span><span>(</span><span>)</span><span>;</span>

app<span>.</span><span>Run</span><span>(</span><span>)</span><span>;</span>
</code></pre><div aria-hidden="true"><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br></div></div><p>或者，我们可以让他更加整洁，并将其排成一行，如下</p>
<div><pre><code>WebApplication<span>.</span><span>CreateBuilder</span><span>(</span>args<span>)</span>
    <span>.</span><span>RegisterServices</span><span>(</span><span>)</span>
    <span>.</span><span>Build</span><span>(</span><span>)</span>
    <span>.</span><span>SetupMiddleware</span><span>(</span><span>)</span>
    <span>.</span><span>Run</span><span>(</span><span>)</span><span>;</span>
</code></pre><div aria-hidden="true"><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br></div></div><p>现在，这看起来更加清晰、可读和易于管理。就是这么简单。</p>
<h2 id="源码" tabindex="-1"> 源码</h2>
<ul>
<li><a href="https://github.com/luoyunchong/dotnetcore-examples/blob/master/999-Others/NET6/NET6Extensions/Program.cs" target="_blank" rel="noopener noreferrer">dotnetcore-examples/Program.cs at master · luoyunchong/dotnetcore-examples (github.com)</a></li>
</ul>
]]></content:encoded>
    </item>
    <item>
      <title>在 ASP.NET Core 6 如何添加 Startup.cs</title>
      <link>https://igeekfan.cn/igeekfan-docs/dotnetcore/examples/NET6Startup.html</link>
      <guid>https://igeekfan.cn/igeekfan-docs/dotnetcore/examples/NET6Startup.html</guid>
      <source url="https://igeekfan.cn/igeekfan-docs/rss.xml">在 ASP.NET Core 6 如何添加 Startup.cs</source>
      <category>ASP.NET Core</category>
      <pubDate>Sat, 11 Jun 2022 09:01:13 GMT</pubDate>
      <content:encoded><![CDATA[<blockquote>
<ul>
<li>原文：<a href="https://www.talkingdotnet.com/how-to-add-startup-cs-in-asp-net-core-6-project/#more-8202" target="_blank" rel="noopener noreferrer">https://www.talkingdotnet.com/how-to-add-startup-cs-in-asp-net-core-6-project/#more-8202</a></li>
<li>作者: Talking Dotnet</li>
</ul>
</blockquote>
<p>使用 <code>ASP.NET Core 6.0</code>项目，您将找不到<code>Startup.cs</code>文件。默认情况下，此文件将被删除，并且是将注册依赖项和中间件放到了<code>Program.cs</code>中。但是，如果您是 <code>Startup.cs</code> 的粉丝或将项目升级到 <code>ASP.NET Core 6.0</code>，你可能仍想要使用 <code>Startup.cs</code> 文件。因此，在这篇文章中，让我们将了解如何在 <code>ASP.NET Core 6</code> 项目中添加 <code>Startup.cs</code></p>
<p>使用 <code>ASP.NET Core 6.0</code>项目时，您的<code>Program.cs</code>文件可能会这样。<code>Program.cs</code>是 ASP.NET Core Web 6应用模板的文件</p>
<div><pre><code><span><span>var</span></span> builder <span>=</span> WebApplication<span>.</span><span>CreateBuilder</span><span>(</span>args<span>)</span><span>;</span>

<span>// Add services to the container.</span>
builder<span>.</span>Services<span>.</span><span>AddRazorPages</span><span>(</span><span>)</span><span>;</span>

<span><span>var</span></span> app <span>=</span> builder<span>.</span><span>Build</span><span>(</span><span>)</span><span>;</span>

<span>// Configure the HTTP request pipeline.</span>
<span>if</span> <span>(</span><span>!</span>app<span>.</span>Environment<span>.</span><span>IsDevelopment</span><span>(</span><span>)</span><span>)</span>
<span>{</span>
    app<span>.</span><span>UseExceptionHandler</span><span>(</span><span>"/Error"</span><span>)</span><span>;</span>
    <span>// The default HSTS value is 30 days. You may want to change this for production scenarios, see https://aka.ms/aspnetcore-hsts.</span>
    app<span>.</span><span>UseHsts</span><span>(</span><span>)</span><span>;</span>
<span>}</span>
app<span>.</span><span>UseHttpsRedirection</span><span>(</span><span>)</span><span>;</span>
app<span>.</span><span>UseStaticFiles</span><span>(</span><span>)</span><span>;</span>
app<span>.</span><span>UseRouting</span><span>(</span><span>)</span><span>;</span>
app<span>.</span><span>UseAuthorization</span><span>(</span><span>)</span><span>;</span>
app<span>.</span><span>MapRazorPages</span><span>(</span><span>)</span><span>;</span>
app<span>.</span><span>Run</span><span>(</span><span>)</span><span>;</span>
</code></pre><div aria-hidden="true"><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br></div></div><p>正如您在此处看到的，服务和中间件注册现在是此文件的一部分。而 <code>Statup.cs</code> 有 2 个方法 <code>ConfigureServices()</code> 和 <code>Configure()</code>，我们在方法 <code>ConfigureServices</code> 中注册依赖关系/服务，在 <code>Configure</code> 中注册中间件。</p>
<p>现在使用 <code>Program.cs</code>，您需要在第 4 行之后注册您的服务/依赖项<code>builder.Services.AddRazorPages();</code>，并在第 6 行之后注册中间件<code>var app = builder.Build();</code>。请记住，在管道中注册中间件时，顺序很重要。</p>
<p>若要将 <code>Startup.cs</code> 添加到 <code>ASP.NET Core 6.0</code> 项目中 ，请添加一个名为<code>Startup.cs</code>的新文件 并添加以下代码。</p>
<div><pre><code><span>public</span> <span>class</span> <span>Startup</span>
<span>{</span>
    <span>public</span> <span>Startup</span><span>(</span><span>IConfiguration</span> configuration<span>)</span>
    <span>{</span>
        Configuration <span>=</span> configuration<span>;</span>
    <span>}</span>

    <span>public</span> <span>IConfiguration</span> Configuration <span>{</span> <span>get</span><span>;</span> <span>}</span>

    <span>public</span> <span><span>void</span></span> <span>ConfigureServices</span><span>(</span><span>IServiceCollection</span> services<span>)</span>
    <span>{</span>
        services<span>.</span><span>AddRazorPages</span><span>(</span><span>)</span><span>;</span>
    <span>}</span>

    <span>public</span> <span><span>void</span></span> <span>Configure</span><span>(</span><span>WebApplication</span> app<span>,</span> <span>IWebHostEnvironment</span> env<span>)</span>
    <span>{</span>
        <span>if</span> <span>(</span><span>!</span>app<span>.</span>Environment<span>.</span><span>IsDevelopment</span><span>(</span><span>)</span><span>)</span>
        <span>{</span>
            app<span>.</span><span>UseExceptionHandler</span><span>(</span><span>"/Error"</span><span>)</span><span>;</span>
            <span>// The default HSTS value is 30 days. You may want to change this for production scenarios, see https://aka.ms/aspnetcore-hsts.</span>
            app<span>.</span><span>UseHsts</span><span>(</span><span>)</span><span>;</span>
        <span>}</span>
        app<span>.</span><span>UseHttpsRedirection</span><span>(</span><span>)</span><span>;</span>
        app<span>.</span><span>UseStaticFiles</span><span>(</span><span>)</span><span>;</span>
        app<span>.</span><span>UseRouting</span><span>(</span><span>)</span><span>;</span>
        app<span>.</span><span>UseAuthorization</span><span>(</span><span>)</span><span>;</span>
        app<span>.</span><span>MapRazorPages</span><span>(</span><span>)</span><span>;</span>
        app<span>.</span><span>Run</span><span>(</span><span>)</span><span>;</span>
    <span>}</span>
<span>}</span>
</code></pre><div aria-hidden="true"><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br><span>24</span><br><span>25</span><br><span>26</span><br><span>27</span><br><span>28</span><br><span>29</span><br><span>30</span><br></div></div><p>构造函数和这两个方法中的代码是非常熟悉。从文件<code>Program.cs</code>中删除依赖项注册的代码并将其放入<code>ConfigureService()</code>方法中。同样，中间件注册码也从文件中删除并放入<code>Configure()</code> 方法中。</p>
<p>接下来，我们需要介绍 <code>Program.cs</code> 如何调用 <code>Startup.cs</code> 。因此，请将文件代码更新为以下内容。</p>
<div><pre><code><span><span>var</span></span> builder <span>=</span> WebApplication<span>.</span><span>CreateBuilder</span><span>(</span>args<span>)</span><span>;</span>

<span><span>var</span></span> startup <span>=</span> <span>new</span> <span>Startup</span><span>(</span>builder<span>.</span>Configuration<span>)</span><span>;</span>
startup<span>.</span><span>ConfigureServices</span><span>(</span>builder<span>.</span>Services<span>)</span><span>;</span>

<span><span>var</span></span> app <span>=</span> builder<span>.</span><span>Build</span><span>(</span><span>)</span><span>;</span>
startup<span>.</span><span>Configure</span><span>(</span>app<span>,</span> builder<span>.</span>Environment<span>)</span><span>;</span>
</code></pre><div aria-hidden="true"><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br></div></div><p>Startup.cs 类所需的所有对象都存在于 builder 对象中，因此我们可以将所需的对象传递给<code>ConfigureService()</code>和<code>Configure()</code>方法。就是这样。您的项目应该正常运行</p>
<h2 id="我们还能做什么" tabindex="-1"> 我们还能做什么？</h2>
<p>这是添加<code>Startup.cs</code>的自定义方式，因此实际上我们不必遵循任何与该类相关的内置规则。我从不喜欢<code>ConfigureService()</code>和<code>Configure()</code>这两个名称，因为它们并没有确切定义它们的用途。以前，无法重命名这些名称，但现在我可以给出一个有意义的名称。类似地，<code>ConfigureService</code>变成<code>RegisterServices</code>，<code>Configure</code>变成<code>SetupMiddleware</code>。</p>
<div><pre><code><span><span>var</span></span> startup <span>=</span> <span>new</span> <span>Startup</span><span>(</span>builder<span>.</span>Configuration<span>)</span><span>;</span>
startup<span>.</span><span>RegisterServices</span><span>(</span>builder<span>.</span>Services<span>)</span><span>;</span>

<span><span>var</span></span> app <span>=</span> builder<span>.</span><span>Build</span><span>(</span><span>)</span><span>;</span>
startup<span>.</span><span>SetupMiddlewares</span><span>(</span>app<span>,</span> builder<span>.</span>Environment<span>)</span><span>;</span>
</code></pre><div aria-hidden="true"><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br></div></div><h2 id="源码" tabindex="-1"> 源码</h2>
<ul>
<li><a href="https://github.com/luoyunchong/dotnetcore-examples/blob/master/999-Others/NET6/NET6Startup/Program.cs" target="_blank" rel="noopener noreferrer">dotnetcore-examples/Program.cs at master · luoyunchong/dotnetcore-examples (github.com)</a></li>
</ul>
]]></content:encoded>
    </item>
    <item>
      <title>七牛云对象存储</title>
      <link>https://igeekfan.cn/igeekfan-docs/dotnetcore/examples/qiniu-object-storages.html</link>
      <guid>https://igeekfan.cn/igeekfan-docs/dotnetcore/examples/qiniu-object-storages.html</guid>
      <source url="https://igeekfan.cn/igeekfan-docs/rss.xml">七牛云对象存储</source>
      <pubDate>Thu, 02 Jun 2022 18:18:50 GMT</pubDate>
      <content:encoded><![CDATA[<h1 id="七牛云对象存储" tabindex="-1"> 七牛云对象存储</h1>
<p>.NET Core 下集成 七牛云下的对象存储</p>
<h2 id="开源地址" tabindex="-1"> 开源地址</h2>
<p><a href="https://github.com/luoyunchong/dotnetcore-examples/tree/master/999-Others/OvOv.MQiniu.Core" target="_blank" rel="noopener noreferrer">OvOv.MQiniu.Core</a></p>
<h2 id="集成类库" tabindex="-1"> 集成类库</h2>
<table>
<thead>
<tr>
<th>基础类库集成方案</th>
<th>开源地址</th>
<th>文档</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td><a href="https://github.com/luoyunchong/dotnetcore-examples/tree/master/dotnet-core-efcore" target="_blank" rel="noopener noreferrer">Qiniu 云对象存储</a></td>
<td><a href="https://github.com/qiniu/csharp-sdk" target="_blank" rel="noopener noreferrer">.net</a>/<a href="https://github.com/Hello-Mango/MQiniu.Core" target="_blank" rel="noopener noreferrer">.net core</a></td>
<td><a href="https://developer.qiniu.com/kodo/sdk/1237/csharp" target="_blank" rel="noopener noreferrer">c# sdk</a></td>
<td>由于官网未支持. net core，所以 大家看<a href="https://github.com/Hello-Mango/MQiniu.Core" target="_blank" rel="noopener noreferrer">社区版解决方案</a></td>
</tr>
</tbody>
</table>
<h2 id="前提" tabindex="-1"> 前提</h2>
<ul>
<li>本地 windows 10,安装 .net core 2.2+</li>
<li>Linux 服务器 Ubuntu Server 16+</li>
<li>服务器安装了 Docker</li>
<li>本地 xftp、xshell（这二个分别是 windows 传文件至 linux，执行命令行。）</li>
</ul>
<h2 id="准备" tabindex="-1"> 准备</h2>
<p>在七牛云中自行注册后，在个人中心，密钥管理，生成自己的密钥（https://portal.qiniu.com/user/key）
v* AK，SK 分别代表：AccessKey/SecretKey</p>
<ul>
<li>Bucket 中的 vant-ui，是创建对象存储时起的名字</li>
<li>PrefixPath 中的值，随意字符串，前缀地址。</li>
<li>Host 为：融合 CDN 测试域名,可自行绑定自己的域名，否则只有三十天免费使用时长。</li>
</ul>
<h2 id="appsettings-json-配置项" tabindex="-1"> appsettings.json 配置项</h2>
<div><pre><code>  <span>"Qiniu"</span><span>:</span> <span>{</span>
    <span>"AK"</span><span>:</span> <span>"eUH1O-ft66S4XM2GIK7FGmj7czuYkcAyNGDAc-wq"</span><span>,</span>
    <span>"SK"</span><span>:</span> <span>"4dOi1daSr2-YgofhAfWb8JaLrbgozCmgD6AUmmM9"</span><span>,</span>
    <span>"Bucket"</span><span>:</span> <span>"vant-ui"</span><span>,</span>
    <span>"PrefixPath"</span><span>:</span> <span>"ui"</span><span>,</span>
    <span>"Host"</span><span>:</span> <span>"http://pu5vnz60k.bkt.clouddn.com/"</span>
  <span>}</span>
</code></pre><div aria-hidden="true"><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br></div></div><h2 id="安装包" tabindex="-1"> 安装包</h2>
<div><pre><code>Install-Package MQiniu.Core
</code></pre><div aria-hidden="true"><span>1</span><br></div></div><h2 id="代码解读" tabindex="-1"> 代码解读</h2>
<p>配置 swagger 的过程就不说了，创建 QiniuController</p>
<div><pre><code>  <span>/// <span><span><span>&lt;</span>summary</span><span>></span></span></span>
    <span>/// 七牛云上传服务</span>
    <span>/// <span><span><span>&lt;/</span>summary</span><span>></span></span></span>
    <span>[</span><span>Route</span><span>(</span><span>"api/[controller]"</span><span>)</span><span>]</span>
    <span>[</span><span><span>ApiController</span></span><span>]</span>
    <span>public</span> <span>class</span> <span>QiniuController</span> <span>:</span> <span><span>ControllerBase</span></span>
    <span>{</span>
        <span>private</span> <span>readonly</span> <span>IConfiguration</span> _configuration<span>;</span>

        <span>public</span> <span>QiniuController</span><span>(</span><span>IConfiguration</span> configuration<span>)</span>
        <span>{</span>
            _configuration <span>=</span> configuration<span>;</span>
        <span>}</span>

        <span>/// <span><span><span>&lt;</span>summary</span><span>></span></span></span>
        <span>/// 根据后台配置项，得到请求七牛云的token值，前台也可根据此token值上传至七牛云服务</span>
        <span>/// <span><span><span>&lt;/</span>summary</span><span>></span></span></span>
        <span>/// <span><span><span>&lt;</span>returns</span><span>></span></span><span><span><span>&lt;/</span>returns</span><span>></span></span></span>
        <span>[</span><span>HttpGet</span><span>(</span><span>"access_token"</span><span>)</span><span>]</span>
        <span>public</span> <span><span>string</span></span> <span>GetAccessToken</span><span>(</span><span>)</span>
        <span>{</span>
            <span>Mac</span> mac <span>=</span> <span>new</span> <span>Mac</span><span>(</span>_configuration<span>[</span><span>"Qiniu:AK"</span><span>]</span><span>,</span> _configuration<span>[</span><span>"Qiniu:SK"</span><span>]</span><span>)</span><span>;</span>
            <span>PutPolicy</span> putPolicy <span>=</span> <span>new</span> <span>PutPolicy</span> <span>{</span> Scope <span>=</span> _configuration<span>[</span><span>"Qiniu:Bucket"</span><span>]</span> <span>}</span><span>;</span>
            <span>return</span> Auth<span>.</span><span>CreateUploadToken</span><span>(</span>mac<span>,</span> putPolicy<span>.</span><span>ToJsonString</span><span>(</span><span>)</span><span>)</span><span>;</span>
        <span>}</span>

        <span>/// <span><span><span>&lt;</span>summary</span><span>></span></span></span>
        <span>/// 上传文件至七牛云,code为200，代表上传成功,其他代表不成功</span>
        <span>/// <span><span><span>&lt;/</span>summary</span><span>></span></span></span>
        <span>/// <span><span><span>&lt;</span>param</span> <span>name</span><span><span>=</span><span>"</span>file<span>"</span></span><span>></span></span>单个文件<span><span><span>&lt;/</span>param</span><span>></span></span></span>
        <span>/// <span><span><span>&lt;</span>returns</span><span>></span></span>new { code = 200, data ="七牛云文件地址，包括http://....mm.png", msg = "上传成功" };<span><span><span>&lt;/</span>returns</span><span>></span></span></span>
        <span>[</span><span>HttpPost</span><span>(</span><span>"upload"</span><span>)</span><span>]</span>
        <span>public</span> <span><span>dynamic</span></span> <span>Upload</span><span>(</span><span>IFormFile</span> file<span>)</span>
        <span>{</span>
            <span>if</span> <span>(</span>file<span>.</span>Length <span>==</span> <span>0</span><span>)</span>
            <span>{</span>
                <span>return</span> <span>new</span> <span>{</span> code <span>=</span> <span>1</span><span>,</span> msg <span>=</span> <span>"文件为空"</span> <span>}</span><span>;</span>
            <span>}</span>

            <span>FormUploader</span> upload <span>=</span> <span>new</span> <span>FormUploader</span><span>(</span><span>new</span> <span>Config</span><span>(</span><span>)</span>
            <span>{</span>
                Zone <span>=</span> Zone<span>.</span>ZONE_CN_South<span>,</span><span>//华南</span>
                UseHttps <span>=</span> <span>true</span>
            <span>}</span><span>)</span><span>;</span>

            <span><span>var</span></span> fileName <span>=</span> ContentDispositionHeaderValue
                <span>.</span><span>Parse</span><span>(</span>file<span>.</span>ContentDisposition<span>)</span>
                <span>.</span>FileName<span>.</span><span>Trim</span><span>(</span><span>)</span><span>;</span>

            <span><span>string</span></span> qiniuName <span>=</span> _configuration<span>[</span><span>"Qiniu:PrefixPath"</span><span>]</span> <span>+</span> <span>"/"</span> <span>+</span> DateTime<span>.</span>Now<span>.</span><span>ToString</span><span>(</span><span>"yyyyMMddHHmmssffffff"</span><span>)</span> <span>+</span> fileName<span>;</span>
            <span>Stream</span> stream <span>=</span> file<span>.</span><span>OpenReadStream</span><span>(</span><span>)</span><span>;</span>
            <span>HttpResult</span> result <span>=</span> upload<span>.</span><span>UploadStream</span><span>(</span>stream<span>,</span> qiniuName<span>,</span> <span>GetAccessToken</span><span>(</span><span>)</span><span>,</span> <span>null</span><span>)</span><span>;</span>

            <span>if</span> <span>(</span>result<span>.</span>Code <span>==</span> <span>200</span><span>)</span>
            <span>{</span>
                <span>return</span> <span>new</span> <span>{</span> code <span>=</span> <span>200</span><span>,</span> data <span>=</span> _configuration<span>[</span><span>"Qiniu:Host"</span><span>]</span> <span>+</span> qiniuName<span>,</span> msg <span>=</span> <span>"上传成功"</span> <span>}</span><span>;</span>
            <span>}</span>

            <span>return</span> <span>new</span> <span>{</span> code <span>=</span> <span>1</span><span>,</span> msg <span>=</span> <span>"上传失败"</span> <span>}</span><span>;</span>
        <span>}</span>
    <span>}</span>

</code></pre><div aria-hidden="true"><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br><span>24</span><br><span>25</span><br><span>26</span><br><span>27</span><br><span>28</span><br><span>29</span><br><span>30</span><br><span>31</span><br><span>32</span><br><span>33</span><br><span>34</span><br><span>35</span><br><span>36</span><br><span>37</span><br><span>38</span><br><span>39</span><br><span>40</span><br><span>41</span><br><span>42</span><br><span>43</span><br><span>44</span><br><span>45</span><br><span>46</span><br><span>47</span><br><span>48</span><br><span>49</span><br><span>50</span><br><span>51</span><br><span>52</span><br><span>53</span><br><span>54</span><br><span>55</span><br><span>56</span><br><span>57</span><br><span>58</span><br><span>59</span><br><span>60</span><br><span>61</span><br><span>62</span><br></div></div><p>Upload 方法中，Zone.ZONE_CN_South，代表华南，所以创建对象存储时要注意，请选择与此相同的位置（华南），或根据实际情况修改 Zone 所在地区的枚举值即可。</p>
<div><pre><code><span>FormUploader</span> upload <span>=</span> <span>new</span> <span>FormUploader</span><span>(</span><span>new</span> <span>Config</span><span>(</span><span>)</span>
<span>{</span>
    Zone <span>=</span> Zone<span>.</span>ZONE_CN_South<span>,</span><span>//华南</span>
    UseHttps <span>=</span> <span>true</span>
<span>}</span><span>)</span><span>;</span>

</code></pre><div aria-hidden="true"><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br></div></div><h2 id="发布至-linux-下的-docker" tabindex="-1"> 发布至 Linux 下的 Docker</h2>
<p>双击 publish.bat，生成的文件夹为如下：</p>
<p><img src="https://upload-images.jianshu.io/upload_images/2001974-bcd72707e4fcc7f8.png?imageMogr2/auto-orient/strip|imageView2/2/w/1240" alt="image" loading="lazy"></p>
<p>修改项目名为 qiniu-web，复制 至 linux 服务器中，（xftp 工具）
<img src="https://upload-images.jianshu.io/upload_images/2001974-48771e9fce281262.png?imageMogr2/auto-orient/strip|imageView2/2/w/1240" alt="image" loading="lazy"></p>
<p>使用 xshell 远程登录后，进入 root 权限。</p>
<div><pre><code>root@VM-37-104-ubuntu:/home/ubuntu/<span># sudo su</span>
root@VM-37-104-ubuntu:/home/ubuntu/<span># cd qiniu-web</span>
</code></pre><div aria-hidden="true"><span>1</span><br><span>2</span><br></div></div><p>前置条件，在 ubuntu 上安装好了 docker。并且正常运行。</p>
<p>-d 代表后台运行，此时将对外显露 5000 端口运行，5000 是运行后，docker 对外的端口，80 是这个服务对外的端口，其中 Dockerfile 存在语句 EXPOSE 80</p>
<div><pre><code><span>docker</span> build -t igeekfan/qiniu <span>.</span>     <span>#生成images</span>
<span>docker</span> run -d -p <span>5000</span>:80 igeekfan/qiniu  <span># 生成 container 并运行在5000端口</span>
</code></pre><div aria-hidden="true"><span>1</span><br><span>2</span><br></div></div><p>此时打开 浏览器， ip+端口 5000 即可访问服务，请加/swagger。</p>
<p>本项目已部署至服务器 <a href="http://122.152.192.161:5000/swagger/index.html" target="_blank" rel="noopener noreferrer">http://122.152.192.161:5000/swagger/index.html</a></p>
<h2 id="运行结果" tabindex="-1"> 运行结果</h2>
<p><img src="https://upload-images.jianshu.io/upload_images/2001974-2b72cc6338db1434.png?imageMogr2/auto-orient/strip|imageView2/2/w/1240" alt="image.png" loading="lazy"></p>
<h2 id="参考" tabindex="-1"> 参考</h2>
<ul>
<li>.NET Core 版本七牛云 SDK 使用<a href="https://www.cnblogs.com/OMango/p/8447480.html" target="_blank" rel="noopener noreferrer">https://www.cnblogs.com/OMango/p/8447480.html</a></li>
<li>.NET Core 部署至 Linux 下的 Docker <a href="http://blog.igeekfan.cn/2019/06/09/dotnetcore/aspnetcore-Deploy-To-Docker-Ubuntu/" target="_blank" rel="noopener noreferrer">http://blog.igeekfan.cn/2019/06/09/dotnetcore/aspnetcore-Deploy-To-Docker-Ubuntu/</a></li>
</ul>
]]></content:encoded>
      <enclosure url="https://upload-images.jianshu.io/upload_images/2001974-bcd72707e4fcc7f8.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" type="image/"/>
    </item>
    <item>
      <title>aspnetcore identity freesql实现</title>
      <link>https://igeekfan.cn/igeekfan-docs/dotnetcore/freekit/AspNetCore.Identity.FreeSql.html</link>
      <guid>https://igeekfan.cn/igeekfan-docs/dotnetcore/freekit/AspNetCore.Identity.FreeSql.html</guid>
      <source url="https://igeekfan.cn/igeekfan-docs/rss.xml">aspnetcore identity freesql实现</source>
      <pubDate>Thu, 02 Jun 2022 18:18:50 GMT</pubDate>
      <content:encoded><![CDATA[<h1 id="aspnetcore-identity-freesql实现" tabindex="-1"> aspnetcore identity freesql实现</h1>
<h2 id="igeekfan-aspnetcore-identity-freesql" tabindex="-1"> IGeekFan.AspNetCore.Identity.FreeSql</h2>
<p>是<code>asp.net core 6</code> 的<code>identity</code>的<code>freesql</code>的实现</p>
<ul>
<li>支持.NET 6.0</li>
<li>安装包</li>
</ul>
<div><pre><code>dotnet <span>add</span> package IGeekFan.AspNetCore.Identity.FreeSql
</code></pre><div aria-hidden="true"><span>1</span><br></div></div><ul>
<li>新增 FreeSql的Provider 相关包</li>
</ul>
<div><pre><code>dotnet <span>add</span> package FreeSql.Provider.MySqlConnector
</code></pre><div aria-hidden="true"><span>1</span><br></div></div><h3 id="扩展用户、角色" tabindex="-1"> 扩展用户、角色</h3>
<div><pre><code><span>public</span> <span>class</span> <span>AppUser</span> <span>:</span> <span><span>IdentityUser<span>&lt;</span>Guid<span>></span></span></span>
<span>{</span>
<span>}</span>
<span>public</span> <span>class</span> <span>AppRole</span> <span>:</span> <span><span>IdentityRole<span>&lt;</span>Guid<span>></span></span></span>
<span>{</span>

<span>}</span>
<span>public</span> <span>class</span> <span>AppIdentityDbContext</span> <span>:</span> <span><span>IdentityDbContext<span>&lt;</span>AppUser<span>,</span> AppRole<span>,</span> Guid<span>></span></span></span>
<span>{</span>
    <span>public</span> <span>AppIdentityDbContext</span><span>(</span><span>IOptions<span>&lt;</span>IdentityOptions<span>></span></span> identityOptions<span>,</span> <span>IFreeSql</span> fsql<span>,</span> <span>DbContextOptions</span> options<span>)</span>
    <span>:</span> <span>base</span><span>(</span>identityOptions<span>.</span>Value<span>,</span> fsql<span>,</span> options<span>)</span>
    <span>{</span>
    <span>}</span>

    <span>protected</span> <span>override</span> <span><span>void</span></span> <span>OnConfiguring</span><span>(</span><span>DbContextOptionsBuilder</span> builder<span>)</span>
    <span>{</span>
        <span>//这里直接指定一个静态的 IFreeSql 对象即可，切勿重新 Build()</span>
    <span>}</span>

    <span>protected</span> <span>override</span> <span><span>void</span></span> <span>OnModelCreating</span><span>(</span><span>ICodeFirst</span> codefirst<span>)</span>
    <span>{</span>
        <span>base</span><span>.</span><span>OnModelCreating</span><span>(</span>codefirst<span>)</span><span>;</span>
        codefirst<span>.</span><span>ApplyConfigurationsFromAssembly</span><span>(</span><span>typeof</span><span>(</span><span>AppUserConfiguration</span><span>)</span><span>.</span>Assembly<span>)</span><span>;</span>
    <span>}</span>
<span>}</span>

</code></pre><div aria-hidden="true"><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br><span>24</span><br><span>25</span><br><span>26</span><br></div></div><h3 id="配置用户、角色的fulentapi" tabindex="-1"> 配置用户、角色的FulentAPI</h3>
<div><pre><code><span>public</span> <span>class</span> <span>AppUserConfiguration</span> <span>:</span> <span><span>IEntityTypeConfiguration<span>&lt;</span>AppUser<span>></span></span></span>
<span>{</span>
    <span>public</span> <span><span>void</span></span> <span>Configure</span><span>(</span><span>EfCoreTableFluent<span>&lt;</span>AppUser<span>></span></span> model<span>)</span>
    <span>{</span>
        model<span>.</span><span>ToTable</span><span>(</span><span>"app_user"</span><span>)</span><span>;</span>
    <span>}</span>
<span>}</span>
<span>public</span> <span>class</span> <span>AppRoleConfiguration</span> <span>:</span> <span><span>IEntityTypeConfiguration<span>&lt;</span>AppRole<span>></span></span></span>
<span>{</span>
    <span>public</span> <span><span>void</span></span> <span>Configure</span><span>(</span><span>EfCoreTableFluent<span>&lt;</span>AppRole<span>></span></span> model<span>)</span>
    <span>{</span>
        model<span>.</span><span>ToTable</span><span>(</span><span>"app_role"</span><span>)</span><span>;</span>
    <span>}</span>
<span>}</span>
</code></pre><div aria-hidden="true"><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br></div></div><ul>
<li>appsettings.json
该配置通过方法<code>UseConnectionString</code>读取如下配置</li>
</ul>
<div><pre><code><span>"ConnectionStrings"</span><span>:</span> <span>{</span>
    <span>"MySql"</span><span>:</span> <span>"Data Source=localhost;Port=3306;User ID=root;Password=root;Initial Catalog=file;Charset=utf8mb4;SslMode=none;Max pool size=1;Connection LifeTime=20"</span>
<span>}</span>
</code></pre><div aria-hidden="true"><span>1</span><br><span>2</span><br><span>3</span><br></div></div><h3 id="配置-identity-freesql" tabindex="-1"> 配置 Identity+FreeSql</h3>
<ul>
<li>新增一个扩展方法，引用 aspnetcore identity 相关服务</li>
</ul>
<div><pre><code><span>public</span> <span>static</span> <span>IServiceCollection</span> <span>AddFreeSql</span><span>(</span><span>this</span> <span>IServiceCollection</span> services<span>,</span> <span>IConfiguration</span> configuration<span>)</span>
<span>{</span>
    <span>IFreeSql</span> fsql <span>=</span> <span>new</span> <span>FreeSqlBuilder</span><span>(</span><span>)</span>
            <span>.</span><span>UseConnectionString</span><span>(</span>DataType<span>.</span>MySql<span>,</span> configuration<span>[</span><span>"ConnectionStrings:MySql"</span><span>]</span><span>)</span>
            <span>.</span><span>UseNameConvert</span><span>(</span>NameConvertType<span>.</span>PascalCaseToUnderscoreWithLower<span>)</span>
            <span>.</span><span>UseAutoSyncStructure</span><span>(</span><span>true</span><span>)</span> <span>//自动同步实体结构到数据库，FreeSql不会扫描程序集，只有CRUD时才会生成表。</span>
            <span>.</span><span>UseMonitorCommand</span><span>(</span>cmd <span>=></span>
            <span>{</span>
                Trace<span>.</span><span>WriteLine</span><span>(</span>cmd<span>.</span>CommandText <span>+</span> <span>";"</span><span>)</span><span>;</span>
            <span>}</span><span>)</span>
            <span>.</span><span>Build</span><span>(</span><span>)</span><span>;</span>
    <span>//软删除</span>
    fsql<span>.</span>GlobalFilter<span>.</span><span><span>Apply</span><span><span>&lt;</span>ISoftDelete<span>></span></span></span><span>(</span><span>"IsDeleted"</span><span>,</span> a <span>=></span> a<span>.</span>IsDeleted <span>==</span> <span>false</span><span>)</span><span>;</span>

    services<span>.</span><span><span>AddSingleton</span><span><span>&lt;</span>IFreeSql<span>></span></span></span><span>(</span>fsql<span>)</span><span>;</span>
    services<span>.</span><span>AddFreeRepository</span><span>(</span><span>)</span><span>;</span>
    services<span>.</span><span><span>AddScoped</span><span><span>&lt;</span>UnitOfWorkManager<span>></span></span></span><span>(</span><span>)</span><span>;</span>

    <span>//只有实例化了AppIdentityDbContext，才能正常调用OnModelCreating，不然直接使用仓储，无法调用DbContext中的OnModelCreating方法，，配置的AppUserConfiguration 就会没有生效</span>
    services<span>.</span><span><span>AddFreeDbContext</span><span><span>&lt;</span>AppIdentityDbContext<span>></span></span></span><span>(</span>options <span>=></span> options
                <span>.</span><span>UseFreeSql</span><span>(</span>fsql<span>)</span>
                <span>.</span><span>UseOptions</span><span>(</span><span>new</span> <span>DbContextOptions</span><span>(</span><span>)</span>
                <span>{</span>
                    EnableCascadeSave <span>=</span> <span>true</span>
                <span>}</span><span>)</span>
    <span>)</span><span>;</span>

    services<span>.</span><span><span>AddIdentityCore</span><span><span>&lt;</span>AppUser<span>></span></span></span><span>(</span>o <span>=></span>
            <span>{</span>
                o<span>.</span>SignIn<span>.</span>RequireConfirmedEmail <span>=</span> <span>false</span><span>;</span>
                o<span>.</span>Stores<span>.</span>MaxLengthForKeys <span>=</span> <span>128</span><span>;</span>
            <span>}</span><span>)</span>
            <span>.</span><span><span>AddRoles</span><span><span>&lt;</span>AppRole<span>></span></span></span><span>(</span><span>)</span>
            <span>.</span><span>AddSignInManager</span><span>(</span><span>)</span>
            <span>.</span><span><span>AddFreeSqlStores</span><span><span>&lt;</span>AppIdentityDbContext<span>></span></span></span><span>(</span><span>)</span>
            <span>.</span><span>AddDefaultTokenProviders</span><span>(</span><span>)</span><span>;</span><span>;</span>

    <span>return</span> services<span>;</span>
<span>}</span>
</code></pre><div aria-hidden="true"><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br><span>24</span><br><span>25</span><br><span>26</span><br><span>27</span><br><span>28</span><br><span>29</span><br><span>30</span><br><span>31</span><br><span>32</span><br><span>33</span><br><span>34</span><br><span>35</span><br><span>36</span><br><span>37</span><br><span>38</span><br><span>39</span><br></div></div><h3 id="软删除" tabindex="-1"> 软删除</h3>
<div><pre><code><span>public</span> <span>interface</span> <span>ISoftDelete</span>
<span>{</span>
    <span><span>bool</span></span> IsDeleted <span>{</span> <span>get</span><span>;</span> <span>set</span><span>;</span> <span>}</span>
<span>}</span>
</code></pre><div aria-hidden="true"><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br></div></div><p>因为FreeSql只有运行时才会生成表,我们增加定义一个扩展方法</p>
<div><pre><code><span>/// <span><span><span>&lt;</span>summary</span><span>></span></span></span>
<span>/// 获取一下Scope Service 以执行 DbContext中的OnModelCreating</span>
<span>/// <span><span><span>&lt;/</span>summary</span><span>></span></span></span>
<span>/// <span><span><span>&lt;</span>param</span> <span>name</span><span><span>=</span><span>"</span>serviceProvider<span>"</span></span><span>></span></span><span><span><span>&lt;/</span>param</span><span>></span></span></span>
<span>public</span> <span>static</span> <span><span>void</span></span> <span><span>RunScopeService</span><span><span>&lt;</span>T<span>></span></span></span><span>(</span><span>this</span> <span>IServiceProvider</span> serviceProvider<span>)</span> <span>where</span> <span>T</span> <span>:</span> <span><span>DbContext</span></span>
<span>{</span>
    <span>using</span> <span><span>var</span></span> serviceScope <span>=</span> serviceProvider<span>.</span><span>CreateScope</span><span>(</span><span>)</span><span>;</span>
    <span>try</span>
    <span>{</span>
        <span>using</span> <span><span>var</span></span> myDependency <span>=</span> serviceScope<span>.</span>ServiceProvider<span>.</span><span><span>GetRequiredService</span><span><span>&lt;</span>T<span>></span></span></span><span>(</span><span>)</span><span>;</span>
    <span>}</span>
    <span>catch</span> <span>(</span><span>Exception</span> ex<span>)</span>
    <span>{</span>
        <span><span>var</span></span> logger <span>=</span> serviceScope<span>.</span>ServiceProvider<span>.</span><span><span>GetRequiredService</span><span><span>&lt;</span>ILogger<span>&lt;</span>Program<span>></span><span>></span></span></span><span>(</span><span>)</span><span>;</span>
        logger<span>.</span><span>LogError</span><span>(</span>ex<span>,</span> <span>"An error occurred."</span><span>)</span><span>;</span>
    <span>}</span>
<span>}</span>
</code></pre><div aria-hidden="true"><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br></div></div><p>在<code>Program</code>中Build后，我们执行此方法，以保证DbContext中的OnModelCreating生效</p>
<div><pre><code><span>WebApplication</span> app <span>=</span> builder<span>.</span><span>Build</span><span>(</span><span>)</span><span>;</span>
<span>//自定义Scope 的Serivce 执行 DbContext中的OnModelCreating</span>
app<span>.</span>Services<span>.</span><span><span>RunScopeService</span><span><span>&lt;</span>IdentityFreeSqlContext<span>></span></span></span><span>(</span><span>)</span><span>;</span>
</code></pre><div aria-hidden="true"><span>1</span><br><span>2</span><br><span>3</span><br></div></div>]]></content:encoded>
    </item>
    <item>
      <title>基础包</title>
      <link>https://igeekfan.cn/igeekfan-docs/dotnetcore/freekit/Core.html</link>
      <guid>https://igeekfan.cn/igeekfan-docs/dotnetcore/freekit/Core.html</guid>
      <source url="https://igeekfan.cn/igeekfan-docs/rss.xml">基础包</source>
      <pubDate>Thu, 02 Jun 2022 18:18:50 GMT</pubDate>
      <content:encoded><![CDATA[<h1 id="基础包" tabindex="-1"> 基础包</h1>
<h2 id="安装-igeekfan-freekit" tabindex="-1"> 安装 IGeekFan.FreeKit</h2>
<p>该项目无任何依赖</p>
<div><pre><code>dotnet <span>add</span> package IGeekFan.FreeKit
</code></pre><div aria-hidden="true"><span>1</span><br></div></div><h3 id="实体审计类" tabindex="-1"> 实体审计类</h3>
<p>仅包含一些基础的审计类</p>
<ul>
<li>Entity</li>
<li>IEntity</li>
<li>IEntityDto</li>
<li>ICreateAduitEntity</li>
<li>IUpdateAuditEntity</li>
<li>IDeleteAduitEntity</li>
<li>ISoftDelete</li>
<li>IFullAduitEntity</li>
</ul>
<h3 id="依赖注入接口" tabindex="-1"> 依赖注入接口</h3>
<p>只是空接口</p>
<ul>
<li>ITransientDependency</li>
<li>IScopedDependency</li>
<li>ISingletonDependency</li>
</ul>
]]></content:encoded>
    </item>
    <item>
      <title>Email 邮件</title>
      <link>https://igeekfan.cn/igeekfan-docs/dotnetcore/freekit/Email.html</link>
      <guid>https://igeekfan.cn/igeekfan-docs/dotnetcore/freekit/Email.html</guid>
      <source url="https://igeekfan.cn/igeekfan-docs/rss.xml">Email 邮件</source>
      <pubDate>Thu, 02 Jun 2022 18:18:50 GMT</pubDate>
      <content:encoded><![CDATA[<h1 id="email-邮件" tabindex="-1"> Email 邮件</h1>
<h2 id="igeekfan-freekit-email" tabindex="-1"> IGeekFan.FreeKit.Email</h2>
<p>该包是一个独立的开发包，内部由MailKit实现发送邮件。</p>
<ol>
<li>安装包</li>
</ol>
<div><pre><code>dotnet <span>add</span> package IGeekFan.FreeKit.Email
</code></pre><div aria-hidden="true"><span>1</span><br></div></div><p>1).通过配置文件配置Email服务</p>
<ul>
<li>ConfigureServices方法</li>
</ul>
<div><pre><code>    services<span>.</span><span>AddEmailSender</span><span>(</span>configuration<span>)</span><span>;</span>
</code></pre><div aria-hidden="true"><span>1</span><br></div></div><ul>
<li>appsettings.json</li>
</ul>
<div><pre><code>  <span>"MailKitOptions"</span><span>:</span><span>{</span>
    <span>"Host"</span><span>:</span> <span>"smtp.163.com"</span><span>,</span>
    <span>"Port"</span><span>:</span> <span>"25"</span><span>,</span>
    <span>"EnableSsl"</span><span>:</span> <span>true</span><span>,</span>
    <span>"UserName"</span><span>:</span> <span>"igeekfan@163.com"</span><span>,</span>
    <span>"Password"</span><span>:</span> <span>""</span><span>,</span>
    <span>"Domain"</span><span>:</span> <span>""</span>
  <span>}</span><span>,</span>
</code></pre><div aria-hidden="true"><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br></div></div><p>2).通过回调函数配置</p>
<div><pre><code>    services<span>.</span><span>AddEmailSender</span><span>(</span>r <span>=></span>
    <span>{</span>
        r<span>.</span>Host <span>=</span> <span>"smtp.163.com"</span><span>;</span>
        r<span>.</span>Port <span>=</span> <span>25</span><span>;</span>
        r<span>.</span>EnableSsl <span>=</span> <span>true</span><span>;</span>
        r<span>.</span>UserName <span>=</span> <span>"igeekfan@163.com"</span><span>;</span>
        r<span>.</span>Password <span>=</span> <span>""</span><span>;</span>
        r<span>.</span>Domain <span>=</span> <span>""</span><span>;</span>
    <span>}</span><span>)</span><span>;</span>
</code></pre><div aria-hidden="true"><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br></div></div><ul>
<li>业务逻辑</li>
</ul>
<div><pre><code>    <span>public</span> <span>interface</span> <span>IAccountService</span>
    <span>{</span>
        <span>Task</span> <span>SendEmailCode</span><span>(</span><span>RegisterDto</span> registerDto<span>)</span><span>;</span>
    <span>}</span>
    <span>public</span> <span>class</span> <span>AccountService</span> <span>:</span> <span><span>IAccountService</span></span>
    <span>{</span>
        <span>private</span> <span>readonly</span> <span>IEmailSender</span> _emailSender<span>;</span>
        <span>private</span> <span>readonly</span> <span>MailKitOptions</span> _mailKitOptions<span>;</span>

        <span>public</span> <span>AccountService</span><span>(</span>
            <span>IEmailSender</span> emailSender<span>,</span>
            <span>IOptions<span>&lt;</span>MailKitOptions<span>></span></span> options<span>)</span>
        <span>{</span>
            _emailSender <span>=</span> emailSender<span>;</span>
            _mailKitOptions <span>=</span> options<span>.</span>Value<span>;</span>
        <span>}</span>
        <span>public</span> <span>async</span> <span>Task</span> <span>SendEmailCode</span><span>(</span><span>RegisterDto</span> registerDto<span>)</span>
        <span>{</span>
            <span><span>var</span></span> message <span>=</span> <span>new</span> <span>MimeMessage</span><span>(</span><span>)</span><span>;</span>
            message<span>.</span>From<span>.</span><span>Add</span><span>(</span><span>new</span> <span>MailboxAddress</span><span>(</span>_mailKitOptions<span>.</span>UserName<span>,</span> _mailKitOptions<span>.</span>UserName<span>)</span><span>)</span><span>;</span>
            message<span>.</span>To<span>.</span><span>Add</span><span>(</span><span>new</span> <span>MailboxAddress</span><span>(</span>registerDto<span>.</span>Nickname<span>,</span> registerDto<span>.</span>Email<span>)</span><span>)</span><span>;</span>
            message<span>.</span>Subject <span>=</span> <span><span>$"VVLOG-你的验证码是"</span></span><span>;</span>

            <span><span>string</span></span> uuid <span>=</span> Guid<span>.</span><span>NewGuid</span><span>(</span><span>)</span><span>.</span><span>ToString</span><span>(</span><span>)</span><span>;</span>
            <span>await</span> RedisHelper<span>.</span><span>SetAsync</span><span>(</span><span>"SendEmailCode-"</span> <span>+</span> registerDto<span>.</span>Email<span>,</span> uuid<span>,</span> <span>30</span> <span>*</span> <span>60</span><span>)</span><span>;</span>

            <span><span>int</span></span> rand6Value <span>=</span> <span>new</span> <span>Random</span><span>(</span><span>)</span><span>.</span><span>Next</span><span>(</span><span>100000</span><span>,</span> <span>999999</span><span>)</span><span>;</span>

            message<span>.</span>Body <span>=</span> <span>new</span> <span>TextPart</span><span>(</span><span>"html"</span><span>)</span>
            <span>{</span>
                Text <span>=</span> <span><span>$@"</span><span><span>{</span><span>registerDto<span>.</span>Nickname</span><span>}</span></span><span>,您好!&lt;/br>你此次验证码如下，请在 30 分钟内输入验证码进行下一步操作。&lt;/br>如非你本人操作，请忽略此邮件。&lt;/br></span><span><span>{</span><span>rand6Value</span><span>}</span></span><span>"</span></span>
            <span>}</span><span>;</span>


            <span>await</span> _emailSender<span>.</span><span>SendAsync</span><span>(</span>message<span>)</span><span>;</span>
        <span>}</span>
    <span>}</span>
</code></pre><div aria-hidden="true"><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br><span>24</span><br><span>25</span><br><span>26</span><br><span>27</span><br><span>28</span><br><span>29</span><br><span>30</span><br><span>31</span><br><span>32</span><br><span>33</span><br><span>34</span><br><span>35</span><br><span>36</span><br><span>37</span><br></div></div><p>简单的实体，在发送之前应验证必填项、密码强度和邮件格式等</p>
<div><pre><code>    <span>public</span> <span>class</span> <span>RegisterDto</span> 
    <span>{</span>
        <span>/// <span><span><span>&lt;</span>summary</span><span>></span></span></span>
        <span>/// 昵称</span>
        <span>/// <span><span><span>&lt;/</span>summary</span><span>></span></span></span>
        <span>public</span> <span><span>string</span></span> Nickname <span>{</span> <span>get</span><span>;</span> <span>set</span><span>;</span> <span>}</span>
        <span>/// <span><span><span>&lt;</span>summary</span><span>></span></span></span>
        <span>/// 密码</span>
        <span>/// <span><span><span>&lt;/</span>summary</span><span>></span></span></span>
        <span>public</span> <span><span>string</span></span> Password <span>{</span> <span>get</span><span>;</span> <span>set</span><span>;</span> <span>}</span>
        <span>/// <span><span><span>&lt;</span>summary</span><span>></span></span></span>
        <span>/// 邮件</span>
        <span>/// <span><span><span>&lt;/</span>summary</span><span>></span></span></span>
        <span>public</span> <span><span>string</span></span> Email <span>{</span> <span>get</span><span>;</span> <span>set</span><span>;</span> <span>}</span> 
   <span>}</span>
</code></pre><div aria-hidden="true"><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br></div></div>]]></content:encoded>
    </item>
    <item>
      <title>Extras 扩展包</title>
      <link>https://igeekfan.cn/igeekfan-docs/dotnetcore/freekit/Extras.html</link>
      <guid>https://igeekfan.cn/igeekfan-docs/dotnetcore/freekit/Extras.html</guid>
      <source url="https://igeekfan.cn/igeekfan-docs/rss.xml">Extras 扩展包</source>
      <pubDate>Thu, 02 Jun 2022 18:18:50 GMT</pubDate>
      <content:encoded><![CDATA[<h1 id="extras-扩展包" tabindex="-1"> Extras 扩展包</h1>
<p>该项目是基于 FreeSql 实现的一些扩展包、AOP 事务，当前用户，简化依赖注入</p>
<ul>
<li>IGeekFan.FreeKit.Extras的依赖项</li>
</ul>
<div><pre><code><span><span><span>&lt;</span>PackageReference</span> <span>Include</span><span><span>=</span><span>"</span>FreeSql.DbContext<span>"</span></span> <span>Version</span><span><span>=</span><span>"</span>3.2.664<span>"</span></span> <span>/></span></span>
<span><span><span>&lt;</span>PackageReference</span> <span>Include</span><span><span>=</span><span>"</span>Autofac.Extensions.DependencyInjection<span>"</span></span> <span>Version</span><span><span>=</span><span>"</span>8.0.0<span>"</span></span> <span>/></span></span>
<span><span><span>&lt;</span>PackageReference</span> <span>Include</span><span><span>=</span><span>"</span>Autofac.Extras.DynamicProxy<span>"</span></span> <span>Version</span><span><span>=</span><span>"</span>6.0.1<span>"</span></span> <span>/></span></span>
<span><span><span>&lt;</span>PackageReference</span> <span>Include</span><span><span>=</span><span>"</span>Castle.Core.AsyncInterceptor<span>"</span></span> <span>Version</span><span><span>=</span><span>"</span>2.1.0<span>"</span></span> <span>/></span></span>
</code></pre><div aria-hidden="true"><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br></div></div><p>根据自己访问数据库的不同，安装对应的<a href="http://freesql.net/guide/install.html#packages" target="_blank" rel="noopener noreferrer">Provider</a></p>
<div><pre><code>dotnet <span>add</span> package IGeekFan.FreeKit.Extras
dotnet <span>add</span> package FreeSql.Provider.Sqlite
</code></pre><div aria-hidden="true"><span>1</span><br><span>2</span><br></div></div><h2 id="一些扩展包" tabindex="-1"> 一些扩展包</h2>
<ul>
<li>简化 FreeSql 单库的配置：UseConnectionString 扩展方法</li>
<li>基于特性标签的 AOP 事务</li>
<li>基于接口的注入</li>
<li>通用 CRUD 的</li>
<li>Security 当前登录人信息</li>
<li>FluentAPI 基于接口的配置实体</li>
<li>注入以 Service 为后缀接口所在的程序集</li>
<li>CaseQuery 支持 Get 请求参数 key，大小驼峰转换</li>
</ul>
<h3 id="简化-freesql-单库的配置" tabindex="-1"> 简化 FreeSql 单库的配置</h3>
<p>UseConnectionString 扩展方法，DefaultDB 配置 0 代表使用配置串 MySql。需要安装<code>FreeSql.Provider.MySqlConnector</code>,<code>DefaultDB</code>配置的值实际为<code>FreeSql.DataType</code>的枚举值</p>
<ul>
<li>appsettings.json</li>
</ul>
<div><pre><code><span>"ConnectionStrings"</span><span>:</span> <span>{</span>
    <span>"DefaultDB"</span><span>:</span> <span>"0"</span><span>,</span>
    <span>"DataType"</span><span>:</span> <span>{</span>
        <span>"MySql"</span><span>:</span> <span>0</span><span>,</span>
        <span>"SqlServer"</span><span>:</span> <span>1</span><span>,</span>
        <span>"PostgreSQL"</span><span>:</span> <span>2</span><span>,</span>
        <span>"Oracle"</span><span>:</span> <span>3</span><span>,</span>
        <span>"Sqlite"</span><span>:</span> <span>4</span>
     <span>}</span><span>,</span>
    <span>"MySql"</span><span>:</span> <span>"Data Source=localhost;Port=3306;User ID=root;Password=root;Initial Catalog=freekit;Charset=utf8mb4;SslMode=none;Max pool size=1;Connection LifeTime=20"</span><span>,</span>
    <span>"SqlServer"</span><span>:</span> <span>"Data Source=.;User ID=sa;Password=123456;Integrated Security=True;Initial Catalog=LinCMS;Pooling=true;Min Pool Size=1"</span><span>,</span>
    <span>"PostgreSQL"</span><span>:</span> <span>"Host=localhost;Port=5432;Username=postgres;Password=123456; Database=lincms;Pooling=true;Minimum Pool Size=1"</span><span>,</span>
    <span>"Oracle"</span><span>:</span> <span>"user id=user1;password=123456; data source=//127.0.0.1:1521/ORCL;Pooling=true;Min Pool Size=1"</span><span>,</span>
    <span>"Sqlite"</span><span>:</span> <span>"Data Source=|DataDirectory|\\freekit.db; Attachs=freekit.db; Pooling=true;Min Pool Size=1"</span>
    <span>}</span>
</code></pre><div aria-hidden="true"><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br></div></div><div><pre><code>    <span>public</span> <span>static</span> <span>IServiceCollection</span> <span>AddFreeSql</span><span>(</span><span>this</span> <span>IServiceCollection</span> services<span>,</span> <span>IConfiguration</span> configuration<span>)</span>
    <span>{</span>
        <span>IFreeSql</span> fsql <span>=</span> <span>new</span> <span>FreeSqlBuilder</span><span>(</span><span>)</span>
                  <span>.</span><span>UseConnectionString</span><span>(</span>configuration<span>)</span>
                  <span>.</span><span>UseNameConvert</span><span>(</span>NameConvertType<span>.</span>PascalCaseToUnderscoreWithLower<span>)</span>
                  <span>.</span><span>UseAutoSyncStructure</span><span>(</span><span>true</span><span>)</span> <span>//自动同步实体结构到数据库，FreeSql不会扫描程序集，只有CRUD时才会生成表。</span>
                  <span>.</span><span>UseMonitorCommand</span><span>(</span>cmd <span>=></span>
                  <span>{</span>
                      Trace<span>.</span><span>WriteLine</span><span>(</span>cmd<span>.</span>CommandText <span>+</span> <span>";"</span><span>)</span><span>;</span>
                  <span>}</span><span>)</span>
                  <span>.</span><span>Build</span><span>(</span><span>)</span><span>;</span>

        fsql<span>.</span>GlobalFilter<span>.</span><span><span>Apply</span><span><span>&lt;</span>ISoftDelete<span>></span></span></span><span>(</span><span>"IsDeleted"</span><span>,</span> a <span>=></span> a<span>.</span>IsDeleted <span>==</span> <span>false</span><span>)</span><span>;</span>

        services<span>.</span><span><span>AddSingleton</span><span><span>&lt;</span>IFreeSql<span>></span></span></span><span>(</span>fsql<span>)</span><span>;</span>
        services<span>.</span><span>AddFreeRepository</span><span>(</span><span>)</span><span>;</span>
        services<span>.</span><span><span>AddScoped</span><span><span>&lt;</span>UnitOfWorkManager<span>></span></span></span><span>(</span><span>)</span><span>;</span>

        <span>return</span> services<span>;</span>
    <span>}</span>
</code></pre><div aria-hidden="true"><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br></div></div><h3 id="基于特性标签的-aop-事务" tabindex="-1"> 基于特性标签的 AOP 事务</h3>
<ul>
<li>特性标签 <strong>[Transactional]</strong></li>
</ul>
<p>通过 Autofac 配置哪些类需要基于特性标签的 AOP 事务</p>
<div><pre><code><span>public</span> <span>interface</span> <span>IGroupService</span>
<span>{</span>
    <span>Task</span> <span>DeleteAsync</span><span>(</span><span><span>long</span></span> id<span>)</span><span>;</span>
<span>}</span>
<span>public</span> <span>class</span> <span>GroupService</span> <span>:</span> <span><span>IGroupService</span></span>
<span>{</span>
    <span>private</span> <span>readonly</span> <span>IBaseRepository<span>&lt;</span>LinGroup<span>,</span> <span>long</span><span>></span></span> _groupRepository<span>;</span>
    <span>private</span> <span>readonly</span> <span>IBaseRepository<span>&lt;</span>LinGroupPermission<span>,</span> <span>long</span><span>></span></span> _groupPermissionRepository<span>;</span>

    <span>public</span> <span>GroupService</span><span>(</span><span>IBaseRepository<span>&lt;</span>LinGroup<span>,</span> <span>long</span><span>></span></span> groupRepository<span>,</span><span>IBaseRepository<span>&lt;</span>LinGroupPermission<span>,</span> <span>long</span><span>></span></span> groupPermissionRepository<span>)</span>
    <span>{</span>
        _groupRepository <span>=</span> groupRepository<span>;</span>
        _groupPermissionRepository <span>=</span> groupPermissionRepository<span>;</span>
    <span>}</span>
    <span>/// <span><span><span>&lt;</span>summary</span><span>></span></span></span>
    <span>/// 删除group拥有的权限、删除group表的数据</span>
    <span>/// <span><span><span>&lt;/</span>summary</span><span>></span></span></span>
    <span>/// <span><span><span>&lt;</span>param</span> <span>name</span><span><span>=</span><span>"</span>id<span>"</span></span><span>></span></span><span><span><span>&lt;/</span>param</span><span>></span></span></span>
    <span>/// <span><span><span>&lt;</span>returns</span><span>></span></span><span><span><span>&lt;/</span>returns</span><span>></span></span></span>
    <span>[</span>Transactional<span>]</span>
    <span>public</span> <span>async</span> <span>Task</span> <span>DeleteAsync</span><span>(</span><span><span>long</span></span> id<span>)</span>
    <span>{</span>
        <span>await</span> _groupRepository<span>.</span><span>DeleteAsync</span><span>(</span>id<span>)</span><span>;</span>
        <span>await</span> _groupPermissionRepository<span>.</span><span>DeleteAsync</span><span>(</span>r <span>=></span> r<span>.</span>GroupId <span>==</span> id<span>)</span><span>;</span>
    <span>}</span>
<span>}</span>
</code></pre><div aria-hidden="true"><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br><span>24</span><br><span>25</span><br><span>26</span><br></div></div><p>如果依旧是 Startup 的模式，可通过 ConfigureContainer 配置服务，其中<code>ServiceModule</code>是一个Autofac的Module，此外为Demo</p>
<ul>
<li>Program.cs 配置</li>
</ul>
<div><pre><code>    Host<span>.</span><span>CreateDefaultBuilder</span><span>(</span>args<span>)</span>
                <span>.</span><span>UseServiceProviderFactory</span><span>(</span><span>new</span> <span>AutofacServiceProviderFactory</span><span>(</span><span>)</span><span>)</span>
                <span>.</span><span>ConfigureWebHostDefaults</span><span>(</span>webBuilder <span>=></span>
                <span>{</span>
                    webBuilder<span>.</span><span><span>UseStartup</span><span><span>&lt;</span>Startup<span>></span></span></span><span>(</span><span>)</span><span>;</span>
                <span>}</span><span>)</span><span>;</span>
</code></pre><div aria-hidden="true"><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br></div></div><ul>
<li>Startup.cs 配置</li>
</ul>
<div><pre><code>    <span>public</span> <span><span>void</span></span> <span>ConfigureContainer</span><span>(</span><span>ContainerBuilder</span> builder<span>)</span>
    <span>{</span>
        builder<span>.</span><span>RegisterModule</span><span>(</span><span>new</span> <span>ServiceModule</span><span>(</span><span>)</span><span>)</span><span>;</span>
    <span>}</span>
</code></pre><div aria-hidden="true"><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br></div></div><p>ASP.NET Core6配置服务、</p>
<div><pre><code>builder<span>.</span>Host
    <span>.</span><span>UseServiceProviderFactory</span><span>(</span><span>new</span> <span>AutofacServiceProviderFactory</span><span>(</span><span>)</span><span>)</span>
    <span>.</span><span><span>ConfigureContainer</span><span><span>&lt;</span>ContainerBuilder<span>></span></span></span><span>(</span><span>(</span>webBuilder<span>,</span> containerBuilder<span>)</span> <span>=></span>
    <span>{</span>
        containerBuilder<span>.</span><span>RegisterModule</span><span>(</span><span>new</span> <span>ServiceModule</span><span>(</span><span>)</span><span>)</span><span>;</span>
    <span>}</span><span>)</span><span>;</span>
</code></pre><div aria-hidden="true"><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br></div></div><h3 id="基于接口的注入" tabindex="-1"> 基于接口的注入</h3>
<p>只需要继承如下接口，会自动按照对应的生命周期注入到 DI 中。</p>
<ul>
<li>IScopedDependency 范围</li>
<li>ISingletonDependency 单例</li>
<li>ITransientDependency 瞬时</li>
</ul>
<div><pre><code><span>namespace</span> <span>Module1</span>
<span>{</span>
    <span>public</span> <span>interface</span> <span>ITestService</span> <span>:</span> <span><span>ITransientDependency</span></span>
    <span>{</span>
        <span><span>bool</span></span> <span>ExecuteConnectTest</span><span>(</span><span>)</span><span>;</span>
    <span>}</span>
<span>}</span>

<span>namespace</span> <span>Module1</span>
<span>{</span>
    <span>public</span> <span>class</span> <span>TestService</span> <span>:</span> <span><span>ITestService</span></span>
    <span>{</span>
        <span>private</span> <span>readonly</span> <span>IFreeSql</span> _fsql<span>;</span>
        <span>public</span> <span>TestService</span><span>(</span><span>IFreeSql</span> fsql<span>)</span>
        <span>{</span>
            _fsql <span>=</span> fsql<span>;</span>
        <span>}</span>

        <span>public</span> <span><span>bool</span></span> <span>ExecuteConnectTest</span><span>(</span><span>)</span>
        <span>{</span>
            <span>return</span> _fsql<span>.</span>Ado<span>.</span><span>ExecuteConnectTest</span><span>(</span><span>)</span><span>;</span>
        <span>}</span>
    <span>}</span>
<span>}</span>

<span>public</span> <span>class</span> <span>TestController</span> <span>:</span> <span><span>Controller</span></span>
<span>{</span>
    <span>ILogger<span>&lt;</span>TestController<span>></span></span> logger<span>;</span>
    <span>private</span> <span>readonly</span> <span>ITestService</span> testService<span>;</span>

    <span>public</span> <span>TestController</span><span>(</span><span>ILogger<span>&lt;</span>TestController<span>></span></span> logger<span>,</span> <span>ITestService</span> testService<span>)</span>
    <span>{</span>
        <span>this</span><span>.</span>logger <span>=</span> logger<span>;</span>
        <span>this</span><span>.</span>testService <span>=</span> testService<span>;</span>
    <span>}</span>

    <span>[</span><span><span>HttpGet</span><span><span>(</span><span>"ExecuteConnectTest"</span><span>)</span></span></span><span>]</span>
    <span>public</span> <span>ActionResult<span>&lt;</span><span>bool</span><span>></span></span> <span>ExecuteConnectTest</span><span>(</span><span>)</span>
    <span>{</span>
        <span>return</span> testService<span>.</span><span>ExecuteConnectTest</span><span>(</span><span>)</span><span>;</span>
    <span>}</span>
<span>}</span>

</code></pre><div aria-hidden="true"><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br><span>24</span><br><span>25</span><br><span>26</span><br><span>27</span><br><span>28</span><br><span>29</span><br><span>30</span><br><span>31</span><br><span>32</span><br><span>33</span><br><span>34</span><br><span>35</span><br><span>36</span><br><span>37</span><br><span>38</span><br><span>39</span><br><span>40</span><br><span>41</span><br><span>42</span><br><span>43</span><br></div></div><p>1.获取所有的程序集合，然后根据 FullName，一般为项目名，过滤具体的程序集</p>
<div><pre><code>builder<span>.</span>Host
    <span>.</span><span>UseServiceProviderFactory</span><span>(</span><span>new</span> <span>AutofacServiceProviderFactory</span><span>(</span><span>)</span><span>)</span>
    <span>.</span><span><span>ConfigureContainer</span><span><span>&lt;</span>ContainerBuilder<span>></span></span></span><span>(</span><span>(</span>webBuilder<span>,</span> containerBuilder<span>)</span> <span>=></span>
    <span>{</span>
        <span>Assembly<span>[</span><span>]</span></span> currentAssemblies <span>=</span> AppDomain<span>.</span>CurrentDomain<span>.</span><span>GetAssemblies</span><span>(</span><span>)</span><span>.</span><span>Where</span><span>(</span>r <span>=></span>
r<span>.</span>FullName<span>.</span><span>Contains</span><span>(</span><span>"IGeekFan.FreeKit.Extras"</span><span>)</span><span>||</span>
r<span>.</span>FullName<span>.</span><span>Contains</span><span>(</span><span>"Module1"</span><span>)</span>
<span>)</span><span>.</span><span>ToArray</span><span>(</span><span>)</span><span>;</span>

        containerBuilder<span>.</span><span>RegisterModule</span><span>(</span><span>new</span> <span>FreeKitModule</span><span>(</span>currentAssemblies<span>)</span><span>)</span><span>;</span>
    <span>}</span><span>)</span><span>;</span>
</code></pre><div aria-hidden="true"><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br></div></div><p>其中<code>FreeKitModule</code>的参数支持<code>params Type[]types</code>或<code>params Assembly[]assemblies</code>,即哪些<a href="https://docs.microsoft.com/zh-cn/dotnet/standard/assembly/" target="_blank" rel="noopener noreferrer">程序集</a>中的类需要注入到依赖注入的集合中。</p>
<p>2.根据程序集中的某个类获取程序集</p>
<div><pre><code><span>Assembly<span>[</span><span>]</span></span> currentAssemblies2 <span>=</span> <span>new</span> <span>Assembly<span>[</span><span>]</span></span> <span>{</span> <span>typeof</span><span>(</span><span>FreeKitModule</span><span>)</span><span>.</span>Assembly<span>,</span> <span>typeof</span><span>(</span><span>Module1<span>.</span>Module1Startup</span><span>)</span><span>.</span>Assembly <span>}</span><span>;</span>
containerBuilder<span>.</span><span>RegisterModule</span><span>(</span><span>new</span> <span>FreeKitModule</span><span>(</span>currentAssemblies2<span>)</span><span>)</span><span>;</span>
</code></pre><div aria-hidden="true"><span>1</span><br><span>2</span><br></div></div><p>3.直接使用 params Assembly[] 的特性，直接作为 FreeKitModule 的参数</p>
<div><pre><code>containerBuilder<span>.</span><span>RegisterModule</span><span>(</span><span>new</span> <span>FreeKitModule</span><span>(</span> <span>typeof</span><span>(</span><span>FreeKitModule</span><span>)</span><span>.</span>Assembly<span>,</span> <span>typeof</span><span>(</span><span>Program</span><span>)</span><span>.</span>Assembly<span>)</span><span>)</span>
</code></pre><div aria-hidden="true"><span>1</span><br></div></div><p>4，通过 params Type[]，内部解析 Assembly。</p>
<div><pre><code>containerBuilder<span>.</span><span>RegisterModule</span><span>(</span><span>new</span> <span>FreeKitModule</span><span>(</span><span>typeof</span><span>(</span><span>FreeKitModule</span><span>)</span><span>,</span> <span>typeof</span><span>(</span><span>Program</span><span>)</span><span>)</span><span>)</span>
</code></pre><div aria-hidden="true"><span>1</span><br></div></div><p>其中，此程序集中的类 如果继承了<code>IScopedDependency</code>,<code>ISingletonDependency</code>、<code>ITransientDependency</code>这些接口， 都会按照对应的生命周期注入到依赖注入的集合中 ，可直接使用。</p>
<h3 id="currentuser-当前登录人信息" tabindex="-1"> CurrentUser 当前登录人信息</h3>
<p>如何使用，先注入<code>IHttpContextAccessor</code></p>
<div><pre><code>    services<span>.</span><span>AddHttpContextAccessor</span><span>(</span><span>)</span><span>;</span>
</code></pre><div aria-hidden="true"><span>1</span><br></div></div><p>因为我们无法确定用户 Id 的类型，可能是<code>long</code>,也可能是<code>Guid</code>，ICurrentUser&lt;T&gt;是泛型的，默认有一个实现<code>ICurrentUser:ICurrentUser&lt;string&gt;</code>,所以通过 <code>ICurrentUser</code>，默认Id为string?类型，如果想改变类型，可使用<code>ICurrentUser</code>接口<code>FindUserIdToLong</code>扩展方法，获取<code>long?</code>类型的用户<code>Id</code>,或使用<code>ICurrentUser</code>接口<code>FindUserIdToGuid</code>的扩展方法</p>
<p>此接口定义如下继承了<code>ITransientDependency</code>,所以他是瞬时</p>
<div><pre><code><span>public</span> <span>interface</span> <span>ICurrentUser<span>&lt;</span>T<span>></span></span> <span>:</span> <span><span>ITransientDependency</span></span>
<span>{</span>
    <span>/// <span><span><span>&lt;</span>summary</span><span>></span></span></span>
    <span>/// 是否登录</span>
    <span>/// <span><span><span>&lt;/</span>summary</span><span>></span></span></span>
    <span><span>bool</span></span> IsAuthenticated <span>{</span> <span>get</span><span>;</span> <span>}</span>

    <span>/// <span><span><span>&lt;</span>summary</span><span>></span></span></span>
    <span>/// 用户Id</span>
    <span>/// <span><span><span>&lt;/</span>summary</span><span>></span></span></span>
    <span>T<span>?</span></span> Id <span>{</span> <span>get</span><span>;</span> <span>}</span>

    <span>/// <span><span><span>&lt;</span>summary</span><span>></span></span></span>
    <span>/// 登录名，用户名，唯一值</span>
    <span>/// <span><span><span>&lt;/</span>summary</span><span>></span></span></span>
    <span><span>string</span></span> UserName <span>{</span> <span>get</span><span>;</span> <span>}</span>

    <span>/// <span><span><span>&lt;</span>summary</span><span>></span></span></span>
    <span>/// 昵称</span>
    <span>/// <span><span><span>&lt;/</span>summary</span><span>></span></span></span>
    <span><span>string</span><span>?</span></span> NickName <span>{</span> <span>get</span><span>;</span> <span>}</span>

    <span>/// <span><span><span>&lt;</span>summary</span><span>></span></span></span>
    <span>/// 邮件</span>
    <span>/// <span><span><span>&lt;/</span>summary</span><span>></span></span></span>
    <span><span>string</span><span>?</span></span> Email <span>{</span> <span>get</span><span>;</span> <span>}</span>

    <span>/// <span><span><span>&lt;</span>summary</span><span>></span></span></span>
    <span>/// 角色</span>
    <span>/// <span><span><span>&lt;/</span>summary</span><span>></span></span></span>
    <span><span>string</span><span>[</span><span>]</span></span> Roles <span>{</span> <span>get</span><span>;</span> <span>}</span>

    <span>Claim</span> <span>FindClaim</span><span>(</span><span><span>string</span></span> claimType<span>)</span><span>;</span>

    <span>Claim<span>[</span><span>]</span></span> <span>FindClaims</span><span>(</span><span><span>string</span></span> claimType<span>)</span><span>;</span>

    <span>Claim<span>[</span><span>]</span></span> <span>GetAllClaims</span><span>(</span><span>)</span><span>;</span>

    <span><span>bool</span></span> <span>IsInRole</span><span>(</span><span><span>string</span></span> roleId<span>)</span><span>;</span>
<span>}</span>
</code></pre><div aria-hidden="true"><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br><span>24</span><br><span>25</span><br><span>26</span><br><span>27</span><br><span>28</span><br><span>29</span><br><span>30</span><br><span>31</span><br><span>32</span><br><span>33</span><br><span>34</span><br><span>35</span><br><span>36</span><br><span>37</span><br><span>38</span><br><span>39</span><br><span>40</span><br></div></div><p>当然可增加一个扩展方法，用于不确定主键类型,所有的方法都调用此方法，需要更改类型，则只用更改此方法即可,比如如果用户Id类型是int类型，可自行创建此扩展类进行处理</p>
<div><pre><code><span>public</span> <span>static</span> <span>class</span> <span>Extensions</span>
｛
    <span>public</span> <span>static</span> <span><span>int</span><span>?</span></span> <span>FindUserId</span><span>(</span><span>this</span> <span>ICurrentUser</span> currentUser<span>)</span>
    <span>{</span>
        <span>if</span> <span>(</span>currentUser<span>.</span>Id <span>==</span> <span>null</span><span>)</span> <span>return</span> <span>null</span><span>;</span>
        <span>return</span> <span>int</span><span>.</span><span>Parse</span><span>(</span>currentUser<span>.</span>Id<span>)</span><span>;</span>
    <span>}</span>
<span>}</span>
</code></pre><div aria-hidden="true"><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br></div></div><h3 id="实体审计类" tabindex="-1"> 实体审计类</h3>
<ul>
<li>FullAduitEntity</li>
</ul>
<h3 id="casequery-支持-get-请求参数-key-大小驼峰转换" tabindex="-1"> CaseQuery 支持 Get 请求参数 key，大小驼峰转换</h3>
<p><code>HttpGet</code>请求时，参数的 key 和实体相同，比如创建如下类。</p>
<div><pre><code><span>public</span> <span>class</span> <span>QueryModel</span>
<span>{</span>
    <span>public</span> <span><span>string</span></span> Title <span>{</span> <span>get</span><span>;</span> <span>set</span><span>;</span> <span>}</span>
    <span>public</span> <span><span>string</span></span> UserName <span>{</span> <span>get</span><span>;</span> <span>set</span><span>;</span> <span>}</span>
<span>}</span>
</code></pre><div aria-hidden="true"><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br></div></div><div><pre><code><span>[</span><span><span>HttpGet</span></span><span>]</span>
<span>public</span> <span>IEnumerable<span>&lt;</span>WeatherForecast<span>></span></span> <span>Get</span><span>(</span><span>[</span><span><span>FromQuery</span></span><span>]</span> <span>QueryModel</span> queryModel<span>)</span>
<span>{</span>
    <span>return</span> <span>null</span><span>;</span>
<span>}</span>
</code></pre><div aria-hidden="true"><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br></div></div><p>在 swagger 下就会生成如下内容</p>
<p><img src="@source/dotnetcore/freekit/images/DefaultQueryValue.png" alt="DefaultQueryValue" loading="lazy">
如果实现，GET 请求参数的 key 转换呢。</p>
<h3 id="查询参数转换支持" tabindex="-1"> 查询参数转换支持</h3>
<ul>
<li>
<p>SnakeCase（下划线写法）</p>
</li>
<li>
<p>LowerCase（小写）</p>
</li>
<li>
<p>CamelCase（首字母小写）</p>
</li>
<li>
<p>使用方式</p>
</li>
</ul>
<p>在 AddControllers 中注入实现</p>
<div><pre><code>    services<span>.</span><span>AddControllers</span><span>(</span>options <span>=></span>
    <span>{</span>
        options<span>.</span>ValueProviderFactories<span>.</span><span>Add</span><span>(</span><span>new</span> <span>CamelCaseValueProviderFactory</span><span>(</span><span>)</span><span>)</span><span>;</span>
    <span>}</span><span>)</span><span>;</span>
</code></pre><div aria-hidden="true"><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br></div></div><p>swagger 渲染需要替换 provider</p>
<div><pre><code>    services<span>.</span><span>TryAddEnumerable</span><span>(</span>ServiceDescriptor<span>.</span><span><span>Transient</span><span><span>&lt;</span>IApiDescriptionProvider<span>,</span> CamelCaseApiDescriptionProvider<span>></span></span></span><span>(</span><span>)</span><span>)</span><span>;</span>
</code></pre><div aria-hidden="true"><span>1</span><br></div></div><p><img src="@source/dotnetcore/freekit/images/CamelCaseValueProviderFactory.png" alt="CamelCaseValueProviderFactory" loading="lazy"></p>
<p>其中支持的 Factory 如下</p>
<ul>
<li>SnakeCaseValueProviderFactory（下划线写法）</li>
<li>LowerCaseValueProviderFactory（小写）</li>
<li>CamelCaseValueProviderFactory（首字母小写）</li>
</ul>
<p>Provider 支持如下</p>
<ul>
<li>SnakeApiDescriptionProvider（下划线写法）</li>
<li>LowerApiDescriptionProvider（小写）</li>
<li>CamelCaseApiDescriptionProvider（首字母小写）</li>
</ul>
]]></content:encoded>
    </item>
    <item>
      <title>本地化</title>
      <link>https://igeekfan.cn/igeekfan-docs/dotnetcore/freekit/Localization.FreeSql.html</link>
      <guid>https://igeekfan.cn/igeekfan-docs/dotnetcore/freekit/Localization.FreeSql.html</guid>
      <source url="https://igeekfan.cn/igeekfan-docs/rss.xml">本地化</source>
      <pubDate>Thu, 02 Jun 2022 18:18:50 GMT</pubDate>
      <content:encoded><![CDATA[<h1 id="本地化" tabindex="-1"> 本地化</h1>
]]></content:encoded>
    </item>
    <item>
      <title>Modularity 模块化</title>
      <link>https://igeekfan.cn/igeekfan-docs/dotnetcore/freekit/Modularity.html</link>
      <guid>https://igeekfan.cn/igeekfan-docs/dotnetcore/freekit/Modularity.html</guid>
      <source url="https://igeekfan.cn/igeekfan-docs/rss.xml">Modularity 模块化</source>
      <pubDate>Thu, 02 Jun 2022 18:18:50 GMT</pubDate>
      <content:encoded><![CDATA[<h1 id="modularity-模块化" tabindex="-1"> Modularity 模块化</h1>
<h2 id="单体模块化" tabindex="-1"> 单体模块化</h2>
<ul>
<li>https://github.com/thinktecture-labs/aspnetcore-modular-monolith</li>
</ul>
<p>因为类名如 Autofac 和 aspnetcore 中的类相同，将类名修改成如下名称</p>
<ul>
<li>Module.cs--&gt;ModuleInfo.cs</li>
<li>IStartup.cs--&gt;IModuleStartup.cs</li>
</ul>
<p>创建一个类库名 Module1，并引用 AspNetCore 包</p>
<div><pre><code>   <span><span><span>&lt;</span>ItemGroup</span><span>></span></span>
		<span><span><span>&lt;</span>FrameworkReference</span> <span>Include</span><span><span>=</span><span>"</span>Microsoft.AspNetCore.App<span>"</span></span> <span>/></span></span>
   <span><span><span>&lt;/</span>ItemGroup</span><span>></span></span>
</code></pre><div aria-hidden="true"><span>1</span><br><span>2</span><br><span>3</span><br></div></div><p>集成接口，可在<code>ConfigureServices</code>中注入任何服务，在<code>Configure</code>方法中注入中间件</p>
<div><pre><code><span>public</span> <span>class</span> <span>Module1Startup</span> <span>:</span> <span><span>IModuleStartup</span></span>
<span>{</span>
    <span>public</span> <span><span>void</span></span> <span>ConfigureServices</span><span>(</span><span>IServiceCollection</span> services<span>)</span>
    <span>{</span>
        <span>//services.AddSingleton&lt;ITestService, TestService>();</span>
    <span>}</span>

    <span>public</span> <span><span>void</span></span> <span>Configure</span><span>(</span><span>IApplicationBuilder</span> app<span>,</span> <span>IWebHostEnvironment</span> env<span>)</span>
    <span>{</span>
        app<span>.</span><span>UseEndpoints</span><span>(</span>endpoints <span>=></span>
            endpoints<span>.</span><span>MapGet</span><span>(</span><span>"/TestEndpoint"</span><span>,</span>
                <span>async</span> context <span>=></span>
                <span>{</span>
                    <span>await</span> context<span>.</span>Response<span>.</span><span>WriteAsync</span><span>(</span><span>"Hello World from TestEndpoint in Module 1"</span><span>)</span><span>;</span>
                <span>}</span><span>)</span><span>.</span><span>RequireAuthorization</span><span>(</span><span>)</span>
        <span>)</span><span>;</span>
    <span>}</span>
<span>}</span>
</code></pre><div aria-hidden="true"><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br></div></div><p>使用控制器</p>
<div><pre><code><span>using</span> <span>Microsoft<span>.</span>AspNetCore<span>.</span>Mvc</span><span>;</span>

<span>[</span><span><span>Route</span><span><span>(</span><span>"[module]/[controller]"</span><span>)</span></span></span><span>]</span>
<span>public</span> <span>class</span> <span>TestController</span> <span>:</span> <span><span>Controller</span></span>
<span>{</span>
    <span>[</span><span><span>HttpGet</span></span><span>]</span>
    <span>public</span> <span>ActionResult<span>&lt;</span><span>string</span><span>></span></span> <span>Index</span><span>(</span><span>)</span>
    <span>{</span>
        <span>return</span> <span>"Hello World from TestController in Module 1"</span><span>;</span>
    <span>}</span>

    <span>/// <span><span><span>&lt;</span>summary</span><span>></span></span></span>
    <span>/// InterModule</span>
    <span>/// <span><span><span>&lt;/</span>summary</span><span>></span></span></span>
    <span>/// <span><span><span>&lt;</span>returns</span><span>></span></span><span><span><span>&lt;/</span>returns</span><span>></span></span></span>
    <span>[</span><span>HttpGet</span><span>(</span><span>"InterModule"</span><span>)</span><span>]</span>
    <span>public</span> <span>ActionResult<span>&lt;</span><span>string</span><span>></span></span> <span>InterModule</span><span>(</span><span>)</span>
    <span>{</span>
        <span>return</span> <span><span>$"</span><span><span>{</span><span><span>0</span></span><span>}</span></span><span> in TestController in Module 1"</span></span><span>;</span>
    <span>}</span>
<span>}</span>
</code></pre><div aria-hidden="true"><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br></div></div><ul>
<li>主程序<code>Program</code></li>
</ul>
<div><pre><code><span>// Register a convention allowing to us to prefix routes to modules.</span>
builder<span>.</span>Services<span>.</span><span><span>AddTransient</span><span><span>&lt;</span>IPostConfigureOptions<span>&lt;</span>MvcOptions<span>></span><span>,</span> ModuleRoutingMvcOptionsPostConfigure<span>></span></span></span><span>(</span><span>)</span><span>;</span>

<span>// Adds module1 with the route prefix module-1</span>
builder<span>.</span>Services<span>.</span><span><span>AddModule</span><span><span>&lt;</span>Module1<span>.</span>Module1Startup<span>></span></span></span><span>(</span><span>"module-1"</span><span>)</span><span>;</span>

<span>// Adds module2 with the route prefix module-2</span>
builder<span>.</span>Services<span>.</span><span><span>AddModule</span><span><span>&lt;</span>Module2<span>.</span>Module2Startup<span>></span></span></span><span>(</span><span>"module-2"</span><span>)</span><span>;</span>
</code></pre><div aria-hidden="true"><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br></div></div><ul>
<li>注入中间件</li>
</ul>
<div><pre><code><span>// Adds endpoints defined in modules</span>
<span><span>var</span></span> modules <span>=</span> app<span>.</span>Services<span>.</span><span><span>GetRequiredService</span><span><span>&lt;</span>IEnumerable<span>&lt;</span>ModuleInfo<span>></span><span>></span></span></span><span>(</span><span>)</span><span>;</span>
<span>foreach</span> <span>(</span><span><span>var</span></span> module <span>in</span> modules<span>)</span>
<span>{</span>
    app<span>.</span><span>Map</span><span>(</span><span><span>$"/</span><span><span>{</span><span>module<span>.</span>RoutePrefix</span><span>}</span></span><span>"</span></span><span>,</span> builder <span>=></span>
    <span>{</span>
        builder<span>.</span><span>UseRouting</span><span>(</span><span>)</span><span>;</span>
        module<span>.</span>Startup<span>.</span><span>Configure</span><span>(</span>builder<span>,</span> app<span>.</span>Environment<span>)</span><span>;</span>
    <span>}</span><span>)</span><span>;</span>
<span>}</span>

</code></pre><div aria-hidden="true"><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br></div></div>]]></content:encoded>
    </item>
    <item>
      <title>FreeKit</title>
      <link>https://igeekfan.cn/igeekfan-docs/dotnetcore/freekit/</link>
      <guid>https://igeekfan.cn/igeekfan-docs/dotnetcore/freekit/</guid>
      <source url="https://igeekfan.cn/igeekfan-docs/rss.xml">FreeKit</source>
      <pubDate>Thu, 02 Jun 2022 18:18:50 GMT</pubDate>
      <content:encoded><![CDATA[<h1 id="freekit" tabindex="-1"> FreeKit</h1>
<div align="center">
<h2 id="net-years" tabindex="-1"> <img src=/images/dotnet-bot_skating.png width=100 /> .NET <img src=/images/dotnet-20-years.png width=80  /> YEARS</h2>
<p><strong>Freekit</strong> 为.NET Core提供了更多的扩展实现</p>
<p><a href="https://www.jetbrains.com/rider/" target="_blank" rel="noopener noreferrer"><img src="https://img.shields.io/static/v1?style=float&amp;logo=rider&amp;label=Rider&amp;message=jetbrains&amp;color=red" alt=".NET IDE Rider" loading="lazy"></a>
<a href="https://raw.githubusercontent.com/luoyunchong/IGeekFan.AspNetCore.RapiDoc/master/LICENSE" target="_blank" rel="noopener noreferrer"><img src="https://img.shields.io/badge/license-MIT-blue.svg" alt="GitHub license" loading="lazy"></a></p>
</div>
<h2 id="nuget-packages" tabindex="-1"> Nuget Packages</h2>
<table>
<thead>
<tr>
<th>Package name</th>
<th>Version</th>
<th>Downloads</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>IGeekFan.AspNetCore.Identity.FreeSql</code></td>
<td><a href="https://www.nuget.org/packages/IGeekFan.AspNetCore.Identity.FreeSql/" target="_blank" rel="noopener noreferrer"><img src="https://img.shields.io/nuget/v/IGeekFan.AspNetCore.Identity.FreeSql.svg?style=flat-square&amp;label=nuget&amp;color=fedcba" alt="NuGet" loading="lazy"></a></td>
<td><img src="https://img.shields.io/nuget/dt/IGeekFan.AspNetCore.Identity.FreeSql.svg" alt="downloads" loading="lazy"></td>
</tr>
<tr>
<td><code>IGeekFan.FreeKit</code></td>
<td><a href="https://www.nuget.org/packages/IGeekFan.FreeKit/" target="_blank" rel="noopener noreferrer"><img src="https://img.shields.io/nuget/v/IGeekFan.FreeKit.svg?style=flat-square&amp;label=nuget" alt="NuGet" loading="lazy"></a></td>
<td><img src="https://img.shields.io/nuget/dt/IGeekFan.FreeKit.svg" alt="downloads" loading="lazy"></td>
</tr>
<tr>
<td><code>IGeekFan.FreeKit.Extras</code></td>
<td><a href="https://www.nuget.org/packages/IGeekFan.FreeKit.Extras/" target="_blank" rel="noopener noreferrer"><img src="https://img.shields.io/nuget/v/IGeekFan.FreeKit.Extras.svg?style=flat-square&amp;label=nuget" alt="NuGet" loading="lazy"></a></td>
<td><img src="https://img.shields.io/nuget/dt/IGeekFan.FreeKit.Extras.svg" alt="downloads" loading="lazy"></td>
</tr>
<tr>
<td><code>IGeekFan.FreeKit.Modularity</code></td>
<td><a href="https://www.nuget.org/packages/IGeekFan.FreeKit.Modularity/" target="_blank" rel="noopener noreferrer"><img src="https://img.shields.io/nuget/v/IGeekFan.FreeKit.Modularity.svg?style=flat-square&amp;label=nuget" alt="NuGet" loading="lazy"></a></td>
<td><img src="https://img.shields.io/nuget/dt/IGeekFan.FreeKit.Modularity.svg" alt="downloads" loading="lazy"></td>
</tr>
<tr>
<td><code>IGeekFan.FreeKit.Email</code></td>
<td><a href="https://www.nuget.org/packages/IGeekFan.FreeKit.Email/" target="_blank" rel="noopener noreferrer"><img src="https://img.shields.io/nuget/v/IGeekFan.FreeKit.Email.svg?style=flat-square&amp;label=nuget" alt="NuGet" loading="lazy"></a></td>
<td><img src="https://img.shields.io/nuget/dt/IGeekFan.FreeKit.Email.svg" alt="downloads" loading="lazy"></td>
</tr>
<tr>
<td><code>IGeekFan.Localization.FreeSql</code></td>
<td><a href="https://www.nuget.org/packages/IGeekFan.Localization.FreeSql/" target="_blank" rel="noopener noreferrer"><img src="https://img.shields.io/nuget/v/IGeekFan.Localization.FreeSql.svg?style=flat-square&amp;label=nuget" alt="NuGet" loading="lazy"></a></td>
<td><img src="https://img.shields.io/nuget/dt/IGeekFan.Localization.FreeSql.svg" alt="downloads" loading="lazy"></td>
</tr>
<tr>
<td><code>IGeekFan.AspNetCore.DataProtection.FreeRedis</code></td>
<td><a href="https://www.nuget.org/packages/IGeekFan.AspNetCore.DataProtection.FreeRedis/" target="_blank" rel="noopener noreferrer"><img src="https://img.shields.io/nuget/v/IGeekFan.AspNetCore.DataProtection.FreeRedis.svg?style=flat-square&amp;label=nuget" alt="NuGet" loading="lazy"></a></td>
<td><img src="https://img.shields.io/nuget/dt/IGeekFan.AspNetCore.DataProtection.FreeRedis.svg" alt="downloads" loading="lazy"></td>
</tr>
<tr>
<td><code>IGeekFan.AspNetCore.DataProtection.FreeSql</code></td>
<td><a href="https://www.nuget.org/packages/IGeekFan.AspNetCore.DataProtection.FreeSql/" target="_blank" rel="noopener noreferrer"><img src="https://img.shields.io/nuget/v/IGeekFan.AspNetCore.DataProtection.FreeSql.svg?style=flat-square&amp;label=nuget" alt="NuGet" loading="lazy"></a></td>
<td><img src="https://img.shields.io/nuget/dt/IGeekFan.AspNetCore.DataProtection.FreeSql.svg" alt="downloads" loading="lazy"></td>
</tr>
</tbody>
</table>
<h2 id="baget-packages" tabindex="-1"> BaGet Packages</h2>
<table>
<thead>
<tr>
<th>Package name</th>
<th>Version</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>IGeekFan.AspNetCore.Identity.FreeSql</code></td>
<td><a href="http://124.70.130.97:5555/packages/IGeekFan.AspNetCore.Identity.FreeSql" target="_blank" rel="noopener noreferrer">BaGet</a></td>
</tr>
<tr>
<td><code>IGeekFan.FreeKit</code></td>
<td><a href="http://124.70.130.97:5555/packages/IGeekFan.FreeKit" target="_blank" rel="noopener noreferrer">BaGet</a></td>
</tr>
<tr>
<td><code>IGeekFan.FreeKit.Extras</code></td>
<td><a href="http://124.70.130.97:5555/packages/IGeekFan.FreeKit.Extras" target="_blank" rel="noopener noreferrer">BaGet</a></td>
</tr>
<tr>
<td><code>IGeekFan.FreeKit.Modularity</code></td>
<td><a href="http://124.70.130.97:5555/packages/IGeekFan.FreeKit.Modularity" target="_blank" rel="noopener noreferrer">BaGet</a></td>
</tr>
<tr>
<td><code>IGeekFan.FreeKit.Email</code></td>
<td><a href="http://124.70.130.97:5555/packages/IGeekFan.FreeKit.Email" target="_blank" rel="noopener noreferrer">BaGet</a></td>
</tr>
<tr>
<td><code>IGeekFan.Localization.FreeSql</code></td>
<td><a href="http://124.70.130.97:5555/packages/IGeekFan.Localization.FreeSql" target="_blank" rel="noopener noreferrer">BaGet</a></td>
</tr>
<tr>
<td><code>IGeekFan.AspNetCore.DataProtection.FreeRedis</code></td>
<td><a href="http://124.70.130.97:5555/packages/IGeekFan.AspNetCore.DataProtection.FreeRedis" target="_blank" rel="noopener noreferrer">BaGet</a></td>
</tr>
<tr>
<td><code>IGeekFan.AspNetCore.DataProtection.FreeSql</code></td>
<td><a href="http://124.70.130.97:5555/packages/IGeekFan.AspNetCore.DataProtection.FreeSql" target="_blank" rel="noopener noreferrer">BaGet</a></td>
</tr>
</tbody>
</table>
<h2 id="igeekfan-aspnetcore-identity-freesql" tabindex="-1"> IGeekFan.AspNetCore.Identity.FreeSql</h2>
<ul>
<li>查看<a href="/dotnetcore/freekit/AspNetCore.Identity.FreeSql.html">IGeekFan.AspNetCore.Identity.FreeSql</a><strong>文档</strong></li>
</ul>
<h2 id="igeekfan-freekit" tabindex="-1"> IGeekFan.FreeKit</h2>
<ul>
<li>AduitEntity 审计日志实体</li>
<li>Dependency 依赖注入接口</li>
<li>查看<a href="/dotnetcore/freekit/Core.html">IGeekFan.FreeKit</a><strong>文档</strong></li>
</ul>
<h2 id="igeekfan-freekit-extras" tabindex="-1"> IGeekFan.FreeKit.Extras</h2>
<ul>
<li>FreeSql 扩展+AOP基于特性标签的事务 UnitOfWork</li>
<li>FreeSql中的复合主键仓储实现</li>
<li>FreeSql+AduitEntity 审计日志实体</li>
<li>Autofac+继承接口<code>ITransientDependency+IScopedDependency+ISingletonDependency</code> 即可实现依赖注入</li>
<li>CaseQuery</li>
<li>Security 登录人信息</li>
<li>查看<a href="/dotnetcore/freekit/Extras.html">IGeekFan.FreeKit.Extras</a><strong>文档</strong></li>
</ul>
<h2 id="igeekfan-freekit-email" tabindex="-1"> IGeekFan.FreeKit.Email</h2>
<ul>
<li>基于MailKit实现发送邮件<a href="/dotnetcore/freekit/Email.html">IGeekFan.FreeKit.Email</a><strong>文档</strong></li>
</ul>
]]></content:encoded>
      <enclosure url="https://img.shields.io/static/v1?style=float&logo=rider&label=Rider&message=jetbrains&color=red" type="image/"/>
    </item>
    <item>
      <title>获取控制器及方法特性标签</title>
      <link>https://igeekfan.cn/igeekfan-docs/dotnetcore/lin-cms/Reflex-Assembly.html</link>
      <guid>https://igeekfan.cn/igeekfan-docs/dotnetcore/lin-cms/Reflex-Assembly.html</guid>
      <source url="https://igeekfan.cn/igeekfan-docs/rss.xml">获取控制器及方法特性标签</source>
      <pubDate>Thu, 02 Jun 2022 18:18:50 GMT</pubDate>
      <content:encoded><![CDATA[<h1 id="获取控制器及方法特性标签" tabindex="-1"> 获取控制器及方法特性标签</h1>
<blockquote>
<p>.NET Core 反射获取所有控制器及方法上特定标签.</p>
</blockquote>
<p>有个需求，就是在. NET Core 中，我们想在项目 启动时，获取 LinCmsAuthorizeAttribute 这个特性标签所有出现的地方，把他的参数，放入一个集合并缓存起来，以便后面使用此数据用于权限验证。</p>
<p>我们通过反射获取所有控制器下及方法的 Attribute。</p>
<h2 id="lincmsauthorizeattribute-是什么" tabindex="-1"> LinCmsAuthorizeAttribute 是什么</h2>
<p>其代码非常简单，用于自定义权限验证，通过重写 OnAuthorizationAsync 方法，实现固定权限可分配给动态角色（也能分配给动态用户）。主要就<strong>基于权限的授权</strong>的实现进行研究，实现方法级别的权限验证。</p>
<ul>
<li><a href="https://www.cnblogs.com/RainingNight/p/dynamic-authorization-in-aspnetcore.html" target="_blank" rel="noopener noreferrer">https://www.cnblogs.com/RainingNight/p/dynamic-authorization-in-aspnetcore.html</a></li>
</ul>
<p>当然，这个只是部分代码，完整代码请查看最下方开源地址，其中 LinCmsAuthorizeAttribute 继承 AuthorizeAttribute，拥有指定角色权限控制，当 Permission 未指定时，当过滤器与 Authorize 功能相同。Module 是指模块，即多个权限，属于同一个模块，方便前台展示为树型结构。Permission 属性的值不可重复。</p>
<div><pre><code>[AttributeUsage(AttributeTargets.Class | AttributeTargets.Method, AllowMultiple = true)]
public class LinCmsAuthorizeAttribute : AuthorizeAttribute, IAsyncAuthorizationFilter
{
    public string Permission { get; set; }
    public string Module { get; set; }

    public LinCmsAuthorizeAttribute()
    {

    }

    public LinCmsAuthorizeAttribute(string permission,string module)
    {
        Permission = permission;
        Module = module;
    }

    public LinCmsAuthorizeAttribute(string permission,string module, string policy) : base(policy)
    {
        Permission = permission;
        Module = module;
    }

    public async Task OnAuthorizationAsync(AuthorizationFilterContext context)
    {
        if (Permission == null) return;
        var authorizationService = (IAuthorizationService)context.HttpContext.RequestServices.GetService(typeof(IAuthorizationService));
        var authorizationResult = await authorizationService.AuthorizeAsync(context.HttpContext.User, null, new OperationAuthorizationRequirement() { Name = Permission });
        if (!authorizationResult.Succeeded)
        {
            context.Result = new ForbidResult();
        }
    }

    public override string ToString()
    {
        return $"\"{base.ToString()}\",\"Permission:{Permission}\",\"Module:{Module}\",\"Roles:{Roles}\",\"Policy:{Policy}\",\"AuthenticationSchemes:{AuthenticationSchemes}\"";
    }
}
</code></pre><div aria-hidden="true"><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br><span>24</span><br><span>25</span><br><span>26</span><br><span>27</span><br><span>28</span><br><span>29</span><br><span>30</span><br><span>31</span><br><span>32</span><br><span>33</span><br><span>34</span><br><span>35</span><br><span>36</span><br><span>37</span><br><span>38</span><br><span>39</span><br></div></div><h2 id="controller" tabindex="-1"> Controller</h2>
<p>在 LinCms.Web 中的 Controller，至于为什么 Permission 为中文，目前的主要原因，此项目用于适配 <a href="https://github.com/TaleLin/lin-cms-vue" target="_blank" rel="noopener noreferrer">Lin-CMS-VUE</a>项目,所以于平常我们以某个字符串作为权限名不同，但不须大惊小怪，道理相同。</p>
<div><pre><code>[Route("cms/log")]
[ApiController]
public class LogController : ControllerBase
{
    private readonly ILogService _logService;

    public LogController(ILogService logService)
    {
        _logService = logService;
    }

    [HttpGet("users")]
    [LinCmsAuthorize("查询日志记录的用户", "日志")]
    public List&lt;string> GetLoggedUsers([FromQuery]PageDto pageDto)
    {
        return _logService.GetLoggedUsers(pageDto);
    }


    [HttpGet]
    [LinCmsAuthorize("查询所有日志", "日志")]
    public PagedResultDto&lt;LinLog> GetLogs([FromQuery]LogSearchDto searchDto)
    {
        return _logService.GetLogUsers(searchDto);
    }

    [HttpGet("search")]
    [LinCmsAuthorize("搜索日志", "日志")]
    public PagedResultDto&lt;LinLog> SearchLogs([FromQuery]LogSearchDto searchDto)
    {
        return _logService.GetLogUsers(searchDto);
    }
}
</code></pre><div aria-hidden="true"><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br><span>24</span><br><span>25</span><br><span>26</span><br><span>27</span><br><span>28</span><br><span>29</span><br><span>30</span><br><span>31</span><br><span>32</span><br><span>33</span><br></div></div><h2 id="测试类获取方法上的特定标签" tabindex="-1"> 测试类获取方法上的特定标签</h2>
<p>in xunit test 项目工程中，开始我们的测试</p>
<div><pre><code>[Fact]
public void GetAssemblyMethodsAttributes()
{
    var assembly = typeof(Startup).Assembly.GetTypes().AsEnumerable()
        .Where(type => typeof(ControllerBase).IsAssignableFrom(type)).ToList();

    assembly.ForEach(r =>
    {
        foreach (var methodInfo in r.GetMethods())
        {
            foreach (Attribute attribute in methodInfo.GetCustomAttributes())
            {
                if (attribute is LinCmsAuthorizeAttribute linCmsAuthorize)
                {
                    _testOutputHelper.WriteLine(linCmsAuthorize.ToString());
                }
            }
        }
    });
}
</code></pre><div aria-hidden="true"><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br></div></div><h2 id="方法结果" tabindex="-1"> 方法结果</h2>
<p>可在输出文本中查看，正是我们想要的东西，最后一行，是其他 Controller 中的内容，而且我们重写了 ToString(),所以我们能看到其属性。</p>
<div><pre><code>"LinCms.Zero.Authorization.LinCmsAuthorizeAttribute","Permission:查询日志记录的用户","Module:日志","Roles:","Policy:","AuthenticationSchemes:"
"LinCms.Zero.Authorization.LinCmsAuthorizeAttribute","Permission:查询所有日志","Module:日志","Roles:","Policy:","AuthenticationSchemes:"
"LinCms.Zero.Authorization.LinCmsAuthorizeAttribute","Permission:搜索日志","Module:日志","Roles:","Policy:","AuthenticationSchemes:"
"LinCms.Zero.Authorization.LinCmsAuthorizeAttribute","Permission:查看lin的信息","Module:信息","Roles:","Policy:","AuthenticationSchemes:"

</code></pre><div aria-hidden="true"><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br></div></div><h2 id="获取控制器上特性标签" tabindex="-1"> 获取控制器上特性标签</h2>
<div><pre><code>/// &lt;summary>
/// 获取控制器上的LinCmsAuthorizeAttribute
/// &lt;/summary>
/// "LinCms.Zero.Authorization.LinCmsAuthorizeAttribute","Permission:","Module:","Roles:Administrator","Policy:","AuthenticationSchemes:"
[Fact]
public void GetControllerAttributes()
{
    var assembly = typeof(Startup).Assembly.GetTypes().AsEnumerable()
        .Where(type => typeof(ControllerBase).IsAssignableFrom(type)).ToList();

    assembly.ForEach(d =>
    {
        var linCmsAuthorize = d.GetCustomAttribute&lt;LinCmsAuthorizeAttribute>();
        if (linCmsAuthorize != null)
        {
            _testOutputHelper.WriteLine(linCmsAuthorize.ToString());
        }
    });
}
</code></pre><div aria-hidden="true"><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br></div></div><h2 id="controller-结果" tabindex="-1"> Controller 结果</h2>
<p>只有 AdminController 加了此标签，所以只有一行。</p>
<div><pre><code>"LinCms.Zero.Authorization.LinCmsAuthorizeAttribute","Permission:","Module:","Roles:Administrator","Policy:","AuthenticationSchemes:"
</code></pre><div aria-hidden="true"><span>1</span><br></div></div><p>此时 Roles 为 Administrator，Permission 及 Module 都是 null，
这是因为只有 AdminController 中加了 LinGroup.Administrator=&quot;Administrator&quot;字符串，在登录过程中，已经给当前登录用户设置了 new Claim(ClaimTypes.Role,user.IsAdmin()?LinGroup.Administrator:user.GroupId.ToString())，即&quot;Administrator,当用户访问 AdminController 中的方法时，LinCmsAuthorize 并没有做相关验证，都是 AuthorizeAttribute，实现了固定角色权限的判断及登录的判断。LinCmsAuthorize 完成了固定权限设置为不同的动态角色后，判断用户是否拥有此权限。</p>
<div><pre><code>[LinCmsAuthorize(Roles = LinGroup.Administrator)]
public class AdminController : ControllerBase
{
    ...
}
</code></pre><div aria-hidden="true"><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br></div></div><h2 id="参考" tabindex="-1"> 参考</h2>
<ul>
<li>c# – 如何在 asp. net core rc2 中获取控制器的自定义属性 <a href="https://codeday.me/bug/20181207/453278.html" target="_blank" rel="noopener noreferrer">https://codeday.me/bug/20181207/453278.html</a></li>
<li></li>
</ul>
<h2 id="开源地址" tabindex="-1"> 开源地址</h2>
<ul>
<li><a href="github.com/luoyunchong/lin-cms-dotnetcore">github.com/luoyunchong/lin-cms-dotnetcore</a></li>
</ul>
]]></content:encoded>
    </item>
    <item>
      <title>Blogs分享</title>
      <link>https://igeekfan.cn/igeekfan-docs/blogs/</link>
      <guid>https://igeekfan.cn/igeekfan-docs/blogs/</guid>
      <source url="https://igeekfan.cn/igeekfan-docs/rss.xml">Blogs分享</source>
      <pubDate>Fri, 07 Jan 2022 10:07:15 GMT</pubDate>
      <content:encoded><![CDATA[<h1 id="blogs分享" tabindex="-1"> Blogs分享</h1>
]]></content:encoded>
    </item>
    <item>
      <title>git emoji</title>
      <link>https://igeekfan.cn/igeekfan-docs/blogs/git-emoji.html</link>
      <guid>https://igeekfan.cn/igeekfan-docs/blogs/git-emoji.html</guid>
      <source url="https://igeekfan.cn/igeekfan-docs/rss.xml">git emoji</source>
      <pubDate>Fri, 07 Jan 2022 10:07:15 GMT</pubDate>
      <content:encoded><![CDATA[<h1 id="git-emoji" tabindex="-1"> git emoji</h1>
<table>
<thead>
<tr>
<th>emoji 图标</th>
<th>emoji</th>
<th>含义</th>
</tr>
</thead>
<tbody>
<tr>
<td>🎨(调色板)</td>
<td><code>:art:</code></td>
<td>改进代码结构/代码格式</td>
</tr>
<tr>
<td>⚡️ (闪电)</td>
<td><code>:zap:</code></td>
<td>提升性能</td>
</tr>
<tr>
<td>🐎 (赛马)</td>
<td><code>:racehorse:</code></td>
<td>提升性能</td>
</tr>
<tr>
<td>🔥 (火焰)</td>
<td><code>:fire:</code></td>
<td>移除代码或文件</td>
</tr>
<tr>
<td>🐛 (bug)</td>
<td><code>:bug: </code></td>
<td>修复 bug</td>
</tr>
<tr>
<td>🚑 (急救车)</td>
<td><code>:ambulance:</code></td>
<td>重要补丁</td>
</tr>
<tr>
<td>✨ (火花)</td>
<td><code>:sparkles:</code></td>
<td>引入新功能</td>
</tr>
<tr>
<td>📝 (备忘录)</td>
<td><code>:memo: </code></td>
<td>撰写文档</td>
</tr>
<tr>
<td>🚀 (火箭)</td>
<td><code>:rocket: </code></td>
<td>部署功能</td>
</tr>
<tr>
<td>💄 (口红)</td>
<td><code>:lipstick:</code></td>
<td>更新 UI 和样式文件</td>
</tr>
<tr>
<td>🎉 (庆祝)</td>
<td><code>:tada:</code></td>
<td>初次提交</td>
</tr>
<tr>
<td>✅ (白色复选框)</td>
<td><code>:white_check_mark:</code></td>
<td>更新测试</td>
</tr>
<tr>
<td>🔒 (锁)</td>
<td><code>:lock:</code></td>
<td>修复安全问题</td>
</tr>
<tr>
<td>🍎 (苹果)</td>
<td><code>:apple:</code></td>
<td>修复 macOS 下的问题</td>
</tr>
<tr>
<td>🐧 (企鹅)</td>
<td><code>:penguin:</code></td>
<td>修复 Linux 下的问题</td>
</tr>
<tr>
<td>🏁 (旗帜)</td>
<td><code>:checkered_flag:</code></td>
<td>修复 Windows 下的问题</td>
</tr>
<tr>
<td>🤖（机器人）</td>
<td><code>:robot:</code></td>
<td>修复 Android 下的问题</td>
</tr>
<tr>
<td>🍏 (绿苹果)</td>
<td><code>:green_apple:</code></td>
<td>修复 iOS 下的问题</td>
</tr>
<tr>
<td>🔖 (书签)</td>
<td><code>:bookmark:</code></td>
<td>发行/版本标签</td>
</tr>
<tr>
<td>🚨 (警车灯)</td>
<td><code>:rotating_light:</code></td>
<td>移除 linter 警告</td>
</tr>
<tr>
<td>🚧 (施工)</td>
<td><code>:construction:</code></td>
<td>工作进行中</td>
</tr>
<tr>
<td>👷 (工人)</td>
<td><code>:construction_worker:</code></td>
<td>添加 CI 构建系统</td>
</tr>
<tr>
<td>💚 (绿心)</td>
<td><code>:green_heart:</code></td>
<td>修复 CI 构建问题</td>
</tr>
<tr>
<td>⬆️ (上升箭头)</td>
<td><code> :arrow_up:</code></td>
<td>升级依赖</td>
</tr>
<tr>
<td>⬇️ (下降箭头)</td>
<td><code> :arrow_down:</code></td>
<td>降级依赖</td>
</tr>
<tr>
<td>📌 (图钉)</td>
<td><code>:pushpin: </code></td>
<td>将依赖项固定到特定版本</td>
</tr>
<tr>
<td>📈 (上升趋势图)</td>
<td><code>:chart_with_upwards_trend:</code></td>
<td>添加分析或跟踪代码</td>
</tr>
<tr>
<td>♻️ （回收）</td>
<td><code>:recycle:</code></td>
<td>重构代码</td>
</tr>
<tr>
<td>🐳 (鲸鱼)</td>
<td><code>:whale:</code></td>
<td>Docker 相关工作</td>
</tr>
<tr>
<td>🌐 (带子午线的地球仪)</td>
<td><code>:globe_with_meridians:</code></td>
<td>国际化与本地化</td>
</tr>
<tr>
<td>➕ (加号)</td>
<td><code>:heavy_plus_sign: </code></td>
<td>增加一个依赖</td>
</tr>
<tr>
<td>➖ (减号)</td>
<td><code>:heavy_minus_sign:</code></td>
<td>减少一个依赖</td>
</tr>
<tr>
<td>🔧 (扳手)</td>
<td><code>:wrench:</code></td>
<td>修改配置文件</td>
</tr>
<tr>
<td>🔨 (锤子)</td>
<td><code>:hammer:</code></td>
<td>重大重构</td>
</tr>
<tr>
<td>✏️ (铅笔)</td>
<td><code>:pencil2:</code></td>
<td>修复 typo</td>
</tr>
<tr>
<td>💩 (粑粑…)</td>
<td><code>:poop:</code></td>
<td>写了辣鸡代码需要优化</td>
</tr>
<tr>
<td>⏪ (倒带)</td>
<td><code>:rewind:</code></td>
<td>恢复更改</td>
</tr>
<tr>
<td>🔀 (交叉向右的箭头)</td>
<td><code>:twisted_rightwards_arrows:</code></td>
<td>合并分支</td>
</tr>
<tr>
<td>📦 (包裹)</td>
<td><code>:package:</code></td>
<td>更新编译的文件或包</td>
</tr>
<tr>
<td>👽 (外星人)</td>
<td><code>:alien:</code></td>
<td>由于外部 API 更改而更新代码</td>
</tr>
<tr>
<td>🚚 (货车)</td>
<td><code>:truck:</code></td>
<td>移动或者重命名文件</td>
</tr>
<tr>
<td>📄 (正面朝上的页面)</td>
<td><code>:page_facing_up:</code></td>
<td>增加或更新许可证书</td>
</tr>
<tr>
<td>💥 (爆炸)</td>
<td><code>:boom:</code></td>
<td>引入突破性的变化</td>
</tr>
<tr>
<td>🍱 (铅笔)</td>
<td><code>:bento:</code></td>
<td>增加或更新资源</td>
</tr>
<tr>
<td>👌 (OK 手势)</td>
<td><code>:ok_hand:</code></td>
<td>由于代码审查更改而更新代码</td>
</tr>
<tr>
<td>♿️ (轮椅)</td>
<td><code>:wheelchair:</code></td>
<td>改善无障碍交互</td>
</tr>
<tr>
<td>💡 (灯泡)</td>
<td><code>:bulb:</code></td>
<td>给代码添加注释</td>
</tr>
<tr>
<td>🍻 (啤酒)</td>
<td><code>:beers:</code></td>
<td>醉醺醺地写代码…</td>
</tr>
<tr>
<td>💬 (消息气泡)</td>
<td><code>:speech_balloon:</code></td>
<td>更新文本文档</td>
</tr>
<tr>
<td>🗃 (卡片文件盒)</td>
<td><code>:card_file_box:</code></td>
<td>执行与数据库相关的更改</td>
</tr>
<tr>
<td>🔊 (音量大)</td>
<td><code>:loud_sound:</code></td>
<td>增加日志</td>
</tr>
<tr>
<td>🔇 (静音)</td>
<td><code>:mute:</code></td>
<td>移除日志</td>
</tr>
<tr>
<td>👥 (轮廓中的半身像)</td>
<td><code>:busts_in_silhouette:</code></td>
<td>增加贡献者</td>
</tr>
<tr>
<td>🚸 (孩童通行)</td>
<td><code>:children_crossing:</code></td>
<td>优化用户体验、可用性</td>
</tr>
<tr>
<td>🏗 (建筑建造)</td>
<td><code>:building_construction:</code></td>
<td>结构变动</td>
</tr>
<tr>
<td>📱 (iPhone)</td>
<td><code>:iphone:</code></td>
<td>做响应式设计</td>
</tr>
<tr>
<td>🤡 (小丑脸)</td>
<td><code>:clown_face:</code></td>
<td>嘲弄事物（直译，这个没明白）</td>
</tr>
<tr>
<td>🥚 (鸡蛋)</td>
<td><code>:egg: </code></td>
<td>增加彩蛋</td>
</tr>
<tr>
<td>🙈 (看不见邪恶)</td>
<td><code>:see_no_evil:</code></td>
<td>增加或更改 gitignore</td>
</tr>
<tr>
<td>📸 (照相机闪光灯)</td>
<td><code>:camera_flash:</code></td>
<td>增加或更新截图</td>
</tr>
<tr>
<td>⚗️ (蒸馏器)</td>
<td><code>:alembic:</code></td>
<td>尝试新东西</td>
</tr>
<tr>
<td>🔍 (放大镜)</td>
<td><code>:mag: </code></td>
<td>SEO 优化</td>
</tr>
<tr>
<td>☸️ (船的方向盘)</td>
<td><code>:wheel_of_dharma: </code></td>
<td>关于 Kubernetes 的工作</td>
</tr>
<tr>
<td>🏷 (标签)</td>
<td><code>:label:</code></td>
<td>增加类型（FLow、Typescript</td>
</tr>
</tbody>
</table>
]]></content:encoded>
    </item>
    <item>
      <title>.NET 编码的基础知识</title>
      <link>https://igeekfan.cn/igeekfan-docs/blogs/net-encoded-1.html</link>
      <guid>https://igeekfan.cn/igeekfan-docs/blogs/net-encoded-1.html</guid>
      <source url="https://igeekfan.cn/igeekfan-docs/rss.xml">.NET 编码的基础知识</source>
      <pubDate>Fri, 07 Jan 2022 10:07:15 GMT</pubDate>
      <content:encoded><![CDATA[<h1 id="net-编码的基础知识" tabindex="-1"> .NET 编码的基础知识</h1>
<p>.NET 编码的一些基本概念和分析</p>
<h3 id="简单的类型概念" tabindex="-1"> 简单的类型概念</h3>
<ul>
<li>Hex （16 进制）</li>
<li>byte 字节 范围是：<code>0~255</code>，二进制下的范围就是<code>00000000~11111111</code>，相当于 1 字节。</li>
<li>byte[] 字节数组</li>
<li>bit 比特，只有 2 种状态：0，1</li>
</ul>
<p><strong>1 字节 等于 8 比特</strong> 即<strong>1byte=8bit</strong></p>
<p>在 c#中。Byte 即 byte，他是一个 struct 结构体，</p>
<p>b1 等于 b2.</p>
<div><pre><code><span><span>byte</span></span> b <span>=</span> <span>1</span><span>;</span>
<span><span>byte</span></span> b1 <span>=</span> <span>0xf</span><span>;</span><span>//以0x开头 即16进制的写法</span>
<span><span>byte</span></span> b2 <span>=</span> <span>15</span><span>;</span>
Assert<span>.</span><span>Equal</span><span>(</span>b1<span>,</span> b2<span>)</span><span>;</span>
</code></pre><div aria-hidden="true"><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br></div></div><p>错误的语法</p>
<div><pre><code><span><span>byte</span></span> b3 <span>=</span> b1 <span>+</span> b2<span>;</span>
</code></pre><div aria-hidden="true"><span>1</span><br></div></div><p>正确的语法</p>
<div><pre><code>byte b3 = (byte)(b1 + b2);
//或
int b4 = b1 + b2;
</code></pre><div aria-hidden="true"><span>1</span><br><span>2</span><br><span>3</span><br></div></div><p>因为 byte 的相互运算太容易发生溢出，+ 加的重载 是 int 类型相加，所以结果是 int 类型</p>
<h3 id="encoding-utf8-getbytes" tabindex="-1"> Encoding.UTF8.GetBytes</h3>
<p>UTF8 是统一的编码方式，它是一种变长的编码方式.它可以使用 1~4 个字节表示一个符号，根据不同的符号而变化字节长度</p>
<div><pre><code>byte[] plaintext = Encoding.UTF8.GetBytes("0123456789");
</code></pre><div aria-hidden="true"><span>1</span><br></div></div><p>能得到什么样的数据，<strong>48,49,50,51,52,53,54,55,56,57</strong>。为什么？</p>
<p>搜 ASCII 码，我们就知道 <code>0</code>的 ASCII 码是 <code>48</code></p>
<p>如果是字母呢。</p>
<div><pre><code>byte[] plaintext = Encoding.UTF8.GetBytes("ABCDabcd");
</code></pre><div aria-hidden="true"><span>1</span><br></div></div><p>能得到什么样的数据，<strong>65,66,67,68,97,98,99,100</strong>。为什么？还是因为 ASCII 码。UTF8 当然是兼容 ASCII 码。</p>
<p>因为一个 ASCII 码，1 个字节就能表示 256 个状态，所以英文字母，阿拉伯数字，标点符号都不在话，哪如果是中文呢。这里我们就拿 UTF8 编码来分析。</p>
<div><pre><code>byte[]   plaintext = Encoding.UTF8.GetBytes("中国");
</code></pre><div aria-hidden="true"><span>1</span><br></div></div><p>如下内容，长度为 6，228，184，173 都是十进制。如果转成 16 进制呢。<strong>e4，b8，ad</strong>，如果分不清十六进制，建议学一下，计算机系统基础。当然，说明一下，<code>a</code>代表<code>10</code>，<code>e</code>即代表<code>14</code>.即<code>14*16+4=228</code>.表示时不区分大小写，即用大写<code>A</code>，和小写<code>a</code>都能表示<code>10</code></p>
<table>
<thead>
<tr>
<th>列</th>
<th>十进制</th>
<th>十六进制</th>
</tr>
</thead>
<tbody>
<tr>
<td>0</td>
<td>228</td>
<td>e4</td>
</tr>
<tr>
<td>1</td>
<td>184</td>
<td>b8</td>
</tr>
<tr>
<td>2</td>
<td>173</td>
<td>ad</td>
</tr>
<tr>
<td>3</td>
<td>229</td>
<td>e5</td>
</tr>
<tr>
<td>4</td>
<td>155</td>
<td>9b</td>
</tr>
<tr>
<td>5</td>
<td>189</td>
<td>bd</td>
</tr>
</tbody>
</table>
<p>我们从网上搜下，可以发现 中国 的 UTF-8 编码： <strong>E4B8AD E59BBD</strong>.说明通过<code>Encoding.UTF8.GetBytes</code>的结果肯定是对的。中文是用 3 或 4 个 Bytes 存储的。</p>
<h3 id="_1-byte-转换-hex-16-进制字符串" tabindex="-1"> 1.byte[] 转换 hex(16 进制字符串)</h3>
<ol>
<li><code>Encoding.UTF8.GetBytes</code>能得到数据的十进制的字节数组。</li>
<li><code>BitConverter.ToString</code>支持将十进制的数据转换成 16 进制，中间以<code>-</code>分隔，所以需要将中间的<code>-</code> <code>Replace</code>掉</li>
</ol>
<div><pre><code>public string ByteToHex(string str)
{
    byte[] bytes = Encoding.UTF8.GetBytes(str);
    string hex = BitConverter.ToString(bytes, 0).Replace("-", string.Empty);
    return hex;
}
</code></pre><div aria-hidden="true"><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br></div></div><p><code>hex</code>得到 的数据就是 <code>E4B8ADE59BBD</code></p>
<div><pre><code> <span><span>string</span></span> hex<span>=</span> <span>ByteToHex</span><span>(</span><span>"中国"</span><span>)</span><span>;</span>
</code></pre><div aria-hidden="true"><span>1</span><br></div></div><h3 id="_2-byte-转换-hex-stringbuilder-方式" tabindex="-1"> 2.byte[] 转换 hex:StringBuilder 方式</h3>
<p>如下内容为什么能将数据转成 16 进制.</p>
<ol>
<li><code>Encoding.UTF8.GetBytes</code>能得到数据的十进制的字节数组。</li>
<li>利用 c#中的 <strong><a href="https://docs.microsoft.com/zh-cn/dotnet/standard/base-types/composite-formatting" target="_blank" rel="noopener noreferrer">复合格式化特性</a></strong> {0:X2}自动转换成 16 进制。同样内容支持 Console.WriteLine 等</li>
</ol>
<div><pre><code><span>public</span> <span><span>string</span></span> <span>ByteToHex2</span><span>(</span><span><span>string</span></span> str<span>)</span>
<span>{</span>
    <span><span>byte</span><span>[</span><span>]</span></span> bytes <span>=</span> Encoding<span>.</span>UTF8<span>.</span><span>GetBytes</span><span>(</span>str<span>)</span><span>;</span>
    <span>StringBuilder</span> ret <span>=</span> <span>new</span> <span>StringBuilder</span><span>(</span><span>)</span><span>;</span>
    <span>foreach</span> <span>(</span><span><span>byte</span></span> b <span>in</span> bytes<span>)</span>
    <span>{</span>
        <span>//{0:x2} 小写</span>
        ret<span>.</span><span>AppendFormat</span><span>(</span><span>"{0:X2}"</span><span>,</span> b<span>)</span><span>;</span>
    <span>}</span>
    <span>return</span> ret<span>.</span><span>ToString</span><span>(</span><span>)</span><span>;</span>
<span>}</span>
</code></pre><div aria-hidden="true"><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br></div></div><h3 id="hex-16-进制字符串-转换-byte" tabindex="-1"> hex(16 进制字符串)转换 byte[]</h3>
<ol>
<li>一个循环将 16 进制转换成 10 进制。</li>
</ol>
<div><pre><code><span>public</span> <span><span>byte</span><span>[</span><span>]</span></span> <span>HexToByte</span><span>(</span><span><span>string</span></span> hex<span>)</span>
<span>{</span>
    <span><span>byte</span><span>[</span><span>]</span></span> inputByteArray <span>=</span> <span>new</span> <span><span>byte</span></span><span>[</span>hex<span>.</span>Length <span>/</span> <span>2</span><span>]</span><span>;</span>
    <span>for</span> <span>(</span><span><span>var</span></span> x <span>=</span> <span>0</span><span>;</span> x <span>&lt;</span> inputByteArray<span>.</span>Length<span>;</span> x<span>++</span><span>)</span>
    <span>{</span>
        <span><span>var</span></span> i <span>=</span> Convert<span>.</span><span>ToInt32</span><span>(</span>hex<span>.</span><span>Substring</span><span>(</span>x <span>*</span> <span>2</span><span>,</span> <span>2</span><span>)</span><span>,</span> <span>16</span><span>)</span><span>;</span>
        inputByteArray<span>[</span>x<span>]</span> <span>=</span> <span>(</span><span>byte</span><span>)</span>i<span>;</span>
    <span>}</span>
    <span>return</span> inputByteArray<span>;</span>
<span>}</span>
</code></pre><div aria-hidden="true"><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br></div></div><p>调用如下内容，bytes[]中的长度为 6，数据是 228，184，173、229，155，189。即上文中的中国的十进制 byte 数组</p>
<div><pre><code><span><span>string</span></span> hexChinese <span>=</span> <span>"E4B8ADE59BBD"</span><span>;</span><span>//中国的UTF8编码。十六进制。</span>
<span><span>byte</span><span>[</span><span>]</span></span> bytes <span>=</span> <span>HexToByte</span><span>(</span>hexChinese<span>)</span><span>;</span>
<span><span>string</span></span> text <span>=</span> Encoding<span>.</span>UTF8<span>.</span><span>GetString</span><span>(</span>bytes<span>)</span><span>;</span><span>// `中国`</span>
</code></pre><div aria-hidden="true"><span>1</span><br><span>2</span><br><span>3</span><br></div></div>]]></content:encoded>
    </item>
    <item>
      <title>.NET+Sqlite 如何支持加密</title>
      <link>https://igeekfan.cn/igeekfan-docs/blogs/net-sqlite-encryption.html</link>
      <guid>https://igeekfan.cn/igeekfan-docs/blogs/net-sqlite-encryption.html</guid>
      <source url="https://igeekfan.cn/igeekfan-docs/rss.xml">.NET+Sqlite 如何支持加密</source>
      <pubDate>Fri, 07 Jan 2022 10:07:15 GMT</pubDate>
      <content:encoded><![CDATA[<h1 id="net-sqlite-如何支持加密" tabindex="-1"> .NET+Sqlite 如何支持加密</h1>
<h2 id="相关文章" tabindex="-1"> 相关文章</h2>
<ul>
<li><a href="https://www.cnblogs.com/igeekfan/p/freesql-sqlitecore-SQLCipher.html" target="_blank" rel="noopener noreferrer">FreeSql.Provider.SqliteCore 如何加密</a></li>
</ul>
<h2 id="sqlite" tabindex="-1"> Sqlite</h2>
<p><code>SQLite</code> 来源于公共领域 <code>SQLite Is Public Domain</code>、
确保代码不会受到任何专有或许可内容的污染，没有任何来自互联网上的未知来源复制。即全是原创的。</p>
<p>虽然是免费的，无需许可证，可用于任何目的，但如果你的公司必须要一个许可证，你也能申请授权<a href="https://sqlite.org/purchase/license" target="_blank" rel="noopener noreferrer">https://sqlite.org/purchase/license</a>.</p>
<p>但不支持<strong>加密</strong>。如果想支持登录加密，需要另外的扩展<strong>SQLite 加密扩展(SQLite Encryption Extension,)</strong>，具有读取/写入 AES 加密数据库的附加功能。具体授权可参考 <a href="https://www.sqlite.org/prosupport.html" target="_blank" rel="noopener noreferrer">https://www.sqlite.org/prosupport.html</a></p>
<h2 id="sqlite-加密" tabindex="-1"> Sqlite 加密</h2>
<p>一直以来，<code>FreeSql</code>开发群中，总会有一些开发者来询问<code>Sqlite</code>加密的问题，事实上，官方提供的 Sqlite 加密功能是收费的。当连接串上使用<code>Password</code>时，会提示授权问题。
如果底层依赖于<code>System.Data.SQLite.Core</code>，</p>
<div><pre><code>Could not load file or assembly 'System.Data.SQLite.SEE.License,
Version=1.0.115.5, Culture=neutral, PublicKeyToken=433d9874d0bb98c5,
processorArchitecture=MSIL
</code></pre><div aria-hidden="true"><span>1</span><br><span>2</span><br><span>3</span><br></div></div><p>如果底层依赖于<code>Microsoft.Data.Sqlite</code> 也会提示</p>
<div><pre><code>You specified a password in the connection string, but the native SQLite
library 'e_sqlite3' doesn't support encryption.
</code></pre><div aria-hidden="true"><span>1</span><br><span>2</span><br></div></div><h2 id="system-data-sqlite-core" tabindex="-1"> System.Data.SQLite.Core</h2>
<p>创建一个控制台项目,起名 <code>OvOv.SqliteSystemCore</code></p>
<div><pre><code>dotnet new console -n OvOv.SqliteSystemCore
<span>cd</span> OvOv.SqliteSystemCore
</code></pre><div aria-hidden="true"><span>1</span><br><span>2</span><br></div></div><p>安装包</p>
<div><pre><code>dotnet <span>add</span> package System.Data.SQLite.Core
</code></pre><div aria-hidden="true"><span>1</span><br></div></div><p>使用<code>SQLiteConnection</code>创建一个连接，使用 Password 指定密码</p>
<div><pre><code><span>using</span> <span>System<span>.</span>Data<span>.</span>SQLite</span><span>;</span>

<span>static</span> <span><span>void</span></span> <span>Open</span><span>(</span><span>)</span>
<span>{</span>
    <span><span>string</span></span> baseConnectionString <span>=</span> <span>"Data Source=local.db"</span><span>;</span>
    <span><span>var</span></span> connectionString <span>=</span> <span>new</span> <span>SQLiteConnectionStringBuilder</span><span>(</span>baseConnectionString<span>)</span>
    <span>{</span>
        Password <span>=</span> <span>"123qwe"</span>
    <span>}</span><span>.</span><span>ToString</span><span>(</span><span>)</span><span>;</span>

    <span>using</span> <span>SQLiteConnection<span>?</span></span> connection <span>=</span> <span>new</span> <span>SQLiteConnection</span><span>(</span>connectionString<span>)</span><span>;</span>
    connection<span>.</span><span>Open</span><span>(</span><span>)</span><span>;</span>
<span>}</span>
<span>Open</span><span>(</span><span>)</span><span>;</span>
</code></pre><div aria-hidden="true"><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br></div></div><p>运行项目</p>
<div><pre><code>dotnet run
</code></pre><div aria-hidden="true"><span>1</span><br></div></div><p>就会出现如下错误。</p>
<div><pre><code>System.IO.FileNotFoundException:“Could not load file or assembly
'System.Data.SQLite.SEE.License, Version=1.0.115.5, Culture=neutral, PublicKeyToken=433d9874d0bb98c5, processorArchitecture=MSIL'.
系统找不到指定的文件。”
</code></pre><div aria-hidden="true"><span>1</span><br><span>2</span><br><span>3</span><br></div></div><h2 id="microsoft-data-sqlite" tabindex="-1"> Microsoft.Data.Sqlite</h2>
<p>创建一个控制台项目,起名 <code>OvOv.SqliteMicrosoft</code></p>
<div><pre><code>dotnet new console -n OvOv.SqliteMicrosoft
<span>cd</span> OvOv.SqliteMicrosoft
</code></pre><div aria-hidden="true"><span>1</span><br><span>2</span><br></div></div><p>安装包</p>
<div><pre><code>dotnet <span>add</span> package Microsoft.Data.Sqlite
</code></pre><div aria-hidden="true"><span>1</span><br></div></div><p>使用<code>SqliteConnection</code>创建一个连接，使用 Password 指定密码</p>
<div><pre><code><span>using</span> <span>Microsoft<span>.</span>Data<span>.</span>Sqlite</span><span>;</span>

<span>static</span> <span><span>void</span></span> <span>Open</span><span>(</span><span>)</span>
<span>{</span>
    <span><span>string</span></span> baseConnectionString <span>=</span> <span>"Data Source=local.db"</span><span>;</span>
    <span><span>var</span></span> connectionString <span>=</span> <span>new</span> <span>SqliteConnectionStringBuilder</span><span>(</span>baseConnectionString<span>)</span>
    <span>{</span>
        Mode <span>=</span> SqliteOpenMode<span>.</span>ReadWriteCreate<span>,</span>
        Password <span>=</span> <span>"123qwe"</span>
    <span>}</span><span>.</span><span>ToString</span><span>(</span><span>)</span><span>;</span>

    <span>using</span> <span>SqliteConnection<span>?</span></span> connection <span>=</span> <span>new</span> <span>SqliteConnection</span><span>(</span>connectionString<span>)</span><span>;</span>
    connection<span>.</span><span>Open</span><span>(</span><span>)</span><span>;</span>
<span>}</span>

<span>Open</span><span>(</span><span>)</span><span>;</span>
</code></pre><div aria-hidden="true"><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br></div></div><p>运行项目</p>
<div><pre><code>dotnet run
</code></pre><div aria-hidden="true"><span>1</span><br></div></div><p>就会出现如下错误。</p>
<div><pre><code>Unhandled exception. System.InvalidOperationException: You specified a password in the connection string,
but the native SQLite library
'e_sqlite3' doesn't support encryption. at Microsoft.Data.Sqlite.SqliteConnection.Open()
</code></pre><div aria-hidden="true"><span>1</span><br><span>2</span><br><span>3</span><br></div></div><p>其实微软已经提供了加密的方案。</p>
<ul>
<li><a href="https://docs.microsoft.com/zh-cn/dotnet/standard/data/sqlite/encryption?tabs=netcore-cli" target="_blank" rel="noopener noreferrer">https://docs.microsoft.com/zh-cn/dotnet/standard/data/sqlite/encryption?tabs=netcore-cli</a></li>
</ul>
<div><pre><code>dotnet remove package Microsoft.Data.Sqlite
dotnet <span>add</span> package Microsoft.Data.Sqlite.Core
dotnet <span>add</span> package SQLitePCLRaw.bundle_e_sqlcipher
</code></pre><div aria-hidden="true"><span>1</span><br><span>2</span><br><span>3</span><br></div></div><p>重新运行项目 ，就会发现，他正常执行。没有任何报错。</p>
<p>有关使用不同的本机库进行加密的详细信息，请参阅<a href="https://docs.microsoft.com/zh-cn/dotnet/standard/data/sqlite/custom-versions?tabs=netcore-cli" target="_blank" rel="noopener noreferrer">自定义 SQLite 版本</a>。</p>
<p>我们从 自定义 SQLite 版本上可以看到。</p>
<p>默认情况下，主 <code>Microsoft.Data.Sqlite</code> 包引入 <code>SQLitePCLRaw.bundle_e_sqlite3</code>。 若要使用不同的捆绑，请改为安装 <code>Microsoft.Data.Sqlite.Core</code> 包以及要使用的捆绑包。</p>
<h4 id="sqlitepclraw-bundle-e-sqlcipher" tabindex="-1"> <code>SQLitePCLRaw.bundle_e_sqlcipher</code></h4>
<p>提供 SQLCipher 的<strong>非官方开放源代码内部版本</strong>。此版本支持<strong>加密</strong>。</p>
<h3 id="ado-net-修改-sqlite-密码" tabindex="-1"> ADO.NET 修改 Sqlite 密码</h3>
<div><pre><code><span>static</span> <span><span>int</span></span> <span>UpdatePassword</span><span>(</span><span><span>string</span></span> oldPassword<span>,</span> <span><span>string</span></span> newPassword<span>)</span>
<span>{</span>
    <span><span>string</span></span> baseConnectionString <span>=</span> <span>"Data Source=local.db"</span><span>;</span>
    <span><span>var</span></span> connectionString <span>=</span> <span>new</span> <span>SqliteConnectionStringBuilder</span><span>(</span>baseConnectionString<span>)</span>
    <span>{</span>
        Mode <span>=</span> SqliteOpenMode<span>.</span>ReadWriteCreate<span>,</span>
        Password <span>=</span> oldPassword
    <span>}</span><span>.</span><span>ToString</span><span>(</span><span>)</span><span>;</span>

    <span>using</span> <span>(</span><span><span>var</span></span> connection <span>=</span> <span>new</span> <span>SqliteConnection</span><span>(</span>connectionString<span>)</span><span>)</span>
    <span>{</span>
        connection<span>.</span><span>Open</span><span>(</span><span>)</span><span>;</span>
        <span>using</span> <span>(</span><span><span>var</span></span> command <span>=</span> connection<span>.</span><span>CreateCommand</span><span>(</span><span>)</span><span>)</span>
        <span>{</span>
            command<span>.</span>CommandText <span>=</span> <span>"SELECT quote($newPassword);"</span><span>;</span>
            command<span>.</span>Parameters<span>.</span><span>AddWithValue</span><span>(</span><span>"$newPassword"</span><span>,</span> newPassword<span>)</span><span>;</span>
            <span><span>var</span></span> quotedNewPassword <span>=</span> command<span>.</span><span>ExecuteScalar</span><span>(</span><span>)</span> <span>as</span> <span><span>string</span></span><span>;</span>

            command<span>.</span>CommandText <span>=</span> <span>"PRAGMA rekey = "</span> <span>+</span> quotedNewPassword<span>;</span>
            command<span>.</span>Parameters<span>.</span><span>Clear</span><span>(</span><span>)</span><span>;</span>
            <span><span>int</span></span> x <span>=</span> command<span>.</span><span>ExecuteNonQuery</span><span>(</span><span>)</span><span>;</span>
            <span>return</span> x<span>;</span>
        <span>}</span>
    <span>}</span>
<span>}</span>

<span><span>string</span></span> oldPassword <span>=</span> <span>"123qwe"</span><span>;</span>
<span><span>string</span></span> newPassword <span>=</span> <span>"abcd"</span><span>;</span>
<span>UpdatePassword</span><span>(</span>oldPassword<span>,</span> newPassword<span>)</span><span>;</span>
</code></pre><div aria-hidden="true"><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br><span>24</span><br><span>25</span><br><span>26</span><br><span>27</span><br><span>28</span><br><span>29</span><br></div></div><h4 id="完整代码" tabindex="-1"> 完整代码</h4>
<ul>
<li><a href="https://github.com/luoyunchong/dotnetcore-examples/blob/master/Database-Drivers/OvOv.SqliteMicrosoftCore/Program.cs" target="_blank" rel="noopener noreferrer">https://github.com/luoyunchong/dotnetcore-examples/blob/master/Database-Drivers/OvOv.SqliteMicrosoftCore/Program.cs</a></li>
</ul>
]]></content:encoded>
    </item>
    <item>
      <title>Serilog指南</title>
      <link>https://igeekfan.cn/igeekfan-docs/dotnetcore/examples/serilog-tutorial.html</link>
      <guid>https://igeekfan.cn/igeekfan-docs/dotnetcore/examples/serilog-tutorial.html</guid>
      <source url="https://igeekfan.cn/igeekfan-docs/rss.xml">Serilog指南</source>
      <pubDate>Fri, 07 Jan 2022 10:07:15 GMT</pubDate>
      <content:encoded><![CDATA[<h1 id="serilog指南" tabindex="-1"> Serilog指南</h1>
<ul>
<li>原文：<a href="https://blog.datalust.co/serilog-tutorial/#3eventsandlevels" target="_blank" rel="noopener noreferrer">https://blog.datalust.co/serilog-tutorial/#3eventsandlevels</a></li>
<li>github: <a href="https://github.com/serilog/serilog" target="_blank" rel="noopener noreferrer">https://github.com/serilog/serilog</a></li>
</ul>
<h3 id="_1-概述" tabindex="-1"> 1.概述</h3>
<p>serilog是一个完全结构化事件的简单.NET日志记录</p>
<p><code>fully-structured</code>,结构化</p>
<ul>
<li>支持多种Provider，可将日志推送到不同的中间件，如文件，数据库(mysql,sql server,mariadb等)</li>
</ul>
<h3 id="_2-hello-serilog" tabindex="-1"> 2. Hello, Serilog!</h3>
<p>让我们从最简单的开始，跟随以下教程，你需要创建一个Console项目，适用于.NET FrameWork 和.NET Core。</p>
<p><code>Serilog</code> 通过 <code>NuGet</code>  分发包. 该项目以Serilog包为核心组织，配合许多 <code>sinks</code>（接收器） (超过上百!), 用于将事件写入终端,文件，数据库，日志服务器的插件中。</p>
<p>我们从 <code>Serilog</code> 和 <code>Serilog.Sinks.Console</code>开始, 稍后再讨论其他选项:</p>
<div><pre><code>Install-Package Serilog
Install-Package Serilog.Sinks.Console
</code></pre><div aria-hidden="true"><span>1</span><br><span>2</span><br></div></div><p>以下是世界上最简单的 Serilog 配置：</p>
<div><pre><code>using Serilog;

class Program
{
    public static void Main(string[] args)
    {
        using (var log = new LoggerConfiguration()
            .WriteTo.Console()
            .CreateLogger())
        {
            log.Information("Hello, Serilog!");
            log.Warning("Goodbye, Serilog.");
        }
    }
}
</code></pre><div aria-hidden="true"><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br></div></div><p>明确以下几点</p>
<ul>
<li><code>LoggerConfiguration</code> 类提供 了一个fluent 接口 构建一个日志管道</li>
<li><code>WriteTo.Console() </code> 将一个控制台接收器 添加到管道中</li>
<li><code>CreateLogger()</code> 集合构建后会 返回一个 <code>Logger</code> 对象, 他实现了 <code>ILogger</code>的接口</li>
<li><code>Logger</code> 接口继承 <code>IDisposable</code>, 所以我们使用 <code>using</code> 块</li>
<li>最后, <code>log.Information()</code> 和 <code>log.Warning()</code> 通过logger记录所有的发出的事件</li>
</ul>
<p>运行程序</p>
<p><img src="https://note.youdao.com/yws/api/personal/file/261B46CA8E7E474D889CC2D6312BA39E?method=download&amp;shareKey=b47ca475a270339f81b8af4ba28a1954" alt="image" loading="lazy"></p>
<p>现在最迫切的问题是: 在我们的应用程序中，其他类如何得到这个Log对象? 除了通过参数进行传递, 有两种可能性</p>
<ul>
<li>如果您使用的是 <code>IoC</code> 容器, 你 可以使用组件接收<code>ILogger</code>对象，即通过 <code>dependency injection</code>(依赖注入)<code> ILogger</code>的方式使用. 像集成 <a href="https://github.com/nblumhardt/autofac-serilog-integration" target="_blank" rel="noopener noreferrer">AutofacSerilogIntegration</a>等包即可。</li>
</ul>
<p>或者,你可以把Logger存储到一个已知的位置中;为此 <code>Serilog</code>有一个静态日志类</p>
<div><pre><code>Log<span>.</span>Logger <span>=</span> <span>new</span> <span>LoggerConfiguration</span><span>(</span><span>)</span>
    <span>.</span>WriteTo<span>.</span><span>Console</span><span>(</span><span>)</span>
    <span>.</span><span>CreateLogger</span><span>(</span><span>)</span><span>;</span>

Log<span>.</span><span>Information</span><span>(</span><span>"Hello again, Serilog!"</span><span>)</span><span>;</span>

Log<span>.</span><span>CloseAndFlush</span><span>(</span><span>)</span><span>;</span>
</code></pre><div aria-hidden="true"><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br></div></div><p><code>Log</code> 类提供了与<code>ILogger</code>接口相同的所有方法.用于替换使用using 块,我们可以调用 <code>Log.CloseAndFlush()</code>，重置<code>Serilog.Log.Logger</code>,并释放原有的资源</p>
<blockquote>
<p>你可能选择基于<code>ILogger</code>的注入方式使用，或使用静态Log类 -这种选择是基于个人口味和爱好的问题. 为了保持简单 我们将在此教程中使用静态日志类。</p>
</blockquote>
<h3 id="_3-事件和级别" tabindex="-1"> 3. 事件和级别</h3>
<p>如果使用过<code>log4net</code>等较旧的库，在使<code>Serilog</code>时，您需要在思维方式上做的最大改变是从日志事件而不是日志消息的角度来思考。活动由以下部分组成：</p>
<ul>
<li>记录事件发生时的时间戳</li>
<li>描述何时应捕获事件的级别</li>
<li>记录事件所代表内容的消息</li>
<li>描述事件的命名属性</li>
<li>可能是一个异常对象</li>
</ul>
<p>您可以将日志事件格式化为控制台的可读文本，正如我们在第一个示例中看到的：</p>
<div><pre><code>11:33:01 [INF] Hello, Serilog!
</code></pre><div aria-hidden="true"><span>1</span><br></div></div><p>或者，您可以将同一事件格式化为JSON，并将其发送到远程日志服务器：</p>
<div><pre><code>{"@t":"2017-11-20T11:33:01.22138","@m":"Hello, Serilog!"}`
</code></pre><div aria-hidden="true"><span>1</span><br></div></div><p>在幕后，应用程序中的日志语句创建LogEvent对象，而连接到管道的接收器则确定如何记录它们。</p>
<h3 id="logging-levels" tabindex="-1"> Logging levels</h3>
<p><code>Serilog</code>速度很快，但始终构造和记录详细的日志事件可能会浪费CPU、磁盘和网络资源。为了管理这一点，<code>Serilog</code>事件被分配了调试、信息、警告和错误等级别。每个支持的级别都有一个<code>Log.*（）</code>方法。</p>
<p>在开发过程中，可能会打开调试级别事件：</p>
<div><pre><code>Log.Logger = new LoggerConfiguration()
    .MinimumLevel.Debug() // &lt;- Set the minimum level
    .WriteTo.Console()
    .CreateLogger();

// In a tight loop...
Log.Debug("Processing item {ItemNumber} of {ItemCount}", itemNumber, itemCount);
</code></pre><div aria-hidden="true"><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br></div></div><p>在生产中，通常关闭调试事件并将最低级别设置为信息，以便只记录重要事件。阅读文档中有关<code>Serilog</code>级别的<a href="https://github.com/serilog/serilog/wiki/Writing-Log-Events#log-event-levels" target="_blank" rel="noopener noreferrer">更多信息</a>。</p>
<h3 id="_4-发送和收集结构化数据" tabindex="-1"> 4. 发送和收集结构化数据</h3>
<div><pre><code>var itemNumber = 10;
var itemCount = 999;
Log.Debug("Processing item {ItemNumber} of {ItemCount}", itemNumber, itemCount);
</code></pre><div aria-hidden="true"><span>1</span><br><span>2</span><br><span>3</span><br></div></div><p>您注意到日志消息中的<code>{ItemNumber}</code>之类的命名占位符了吗？这不是C#插值字符串：Log.*（）方法接受消息模板，这是.NET格式字符串的一种变体，除了通常的{0}位置字符串外，还支持{Named}占位符。</p>
<p>这似乎有点奇怪，直到您意识到，通过这样做，<code>Serilog</code>可以将消息的一部分作为一级属性与人性化文本一起捕获：</p>
<div><pre><code>{
    "@t": "2017-11-20T11:33:01.22138",
    "@l": "Debug",
    "@m": "Processing item 10 of 999",
    "ItemNumber": 10,
    "ItemCount": 999
}
</code></pre><div aria-hidden="true"><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br></div></div><p>我们为什么要这样做？由于日志事件附带了一些有趣的字段作为属性，因此我们可以立即使用简单的过滤器（如<code>ItemNumber&gt;900</code>）来查找事件，而不必通过正则表达式从消息中提取信息。</p>
<p>更进一步，我们可以使用<code>@structure</code>捕获操作符不仅获取平面属性值，还获取完整的对象：</p>
<div><pre><code>var user = new { Name = "Nick", Id = "nblumhardt" };
Log.Information("Logged on user {@User}", user);
</code></pre><div aria-hidden="true"><span>1</span><br><span>2</span><br></div></div><p>在这里，用户对象被捕获到生成的JSON中，因此我们可以使用诸如<code>user.Id='nblumhardt'</code>之类的查询来查找事件：</p>
<div><pre><code>{
    "@t": "2017-11-20T11:33:01.22138",
    "@m": "Logged on user {\"Name\": \"Nick\", \"Id\": \"nblumhardt\"}",
    "User": {"Name": "Nick", "Id": "nblumhardt"}
}
</code></pre><div aria-hidden="true"><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br></div></div><p>生产监控和调试已经是一项艰巨、耗时且经常充满压力的任务：通常这些相关数据触手可及，<code>Serilog</code>消除了与操作相关 活动中最大的分歧之一。</p>
<blockquote>
<p>提示：从<code>VisualStudioMarketplace</code>安装了不起的<a href="https://marketplace.visualstudio.com/items?itemName=Suchiman.SerilogAnalyzer" target="_blank" rel="noopener noreferrer">Serilog分析器</a>，以便在键入时检查消息模板语法</p>
</blockquote>
<p>这实际上会产生多大的差异，很大程度上取决于您如何从<code>Serilog</code>收集事件。传统上，日志事件进入文本文件并使用<code>grep</code>进行搜索。<code>Serilog</code>也可以记录文本文件，但您不能在记事本中执行<code>ItemNumber&gt;900</code>，因此您需要评估更强大的工具来实现这一点。</p>
<h2 id="将事件写入json日志文件" tabindex="-1"> 将事件写入JSON日志文件</h2>
<p>如果您的需求很简单，可以将<code>JSON</code>写入日志文件，并使用<code>JSON</code>感知工具直接查询文件。<code>Serilog</code>的文件接收器和紧凑的<code>JSON</code>格式化程序使第一部分变得简单。让我们尝试另一个安装了以下软件包的小型控制台应用程序：</p>
<div><pre><code>Install-Package Serilog;
Install-Package Serilog.Sinks.File
Install-Package Serilog.Formatting.Compact
</code></pre><div aria-hidden="true"><span>1</span><br><span>2</span><br><span>3</span><br></div></div><p>在Main（）方法中：</p>
<div><pre><code>Log.Logger = new LoggerConfiguration()
    .MinimumLevel.Debug()
    .WriteTo.File(new CompactJsonFormatter(), "log.clef")
    .CreateLogger();

var itemCount = 99;
for (var itemNumber = 0; itemNumber &lt; itemCount; ++itemNumber)
    Log.Debug("Processing item {ItemNumber} of {ItemCount}", itemNumber, itemCount);

Log.CloseAndFlush();
</code></pre><div aria-hidden="true"><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br></div></div><p>运行此应用程序将使用<code>Serilog</code>的压缩日志事件格式在<code>log.clef</code>中生成一个<a href="https://en.wikipedia.org/wiki/JSON_streaming" target="_blank" rel="noopener noreferrer">新行分隔的<code>JSON</code>流</a>。（如果没有<code>CompactJsonFormatter</code>，我们将创建一个简单的平面日志文件。）</p>
<p>如果在文本编辑器中打开该文件，您将看到JSON事件，如我们上面使用的示例。</p>
<h3 id="将事件写入日志服务器" tabindex="-1"> 将事件写入日志服务器</h3>
<div><pre><code>Install-Package Serilog.Sinks.Seq
</code></pre><div aria-hidden="true"><span>1</span><br></div></div><div><pre><code>Log.Logger = new LoggerConfiguration()
    .MinimumLevel.Debug()
    .WriteTo.Seq("http://localhost:5341")
    .CreateLogger();
</code></pre><div aria-hidden="true"><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br></div></div><h3 id="_5-标记用于筛选和关联的事件" tabindex="-1"> 5.标记用于筛选和关联的事件</h3>
<h4 id="增加固定属性" tabindex="-1"> 增加固定属性</h4>
<p>最简单的充实方法是向源自日志管道的所有事件添加固定属性值。这是使用记录器配置中的<code>Enrich.WithProperty()</code>完成的：</p>
<div><pre><code>Log.Logger = new LoggerConfiguration()
    .Enrich.WithProperty("Application", "Demo")
    .WriteTo.Seq("http://localhost:5341")
    .CreateLogger();
</code></pre><div aria-hidden="true"><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br></div></div><p>在<code>LogEvents</code>上，通过扩展添加的属性与源自消息模板的属性相同：</p>
<div><pre><code>{
    "@t": "2017-11-20T11:33:01.22138",
    "@l": "Debug",
    "@m": "Processing item 10 of 999",
    "ItemNumber": 10,
    "ItemCount": 999,
    "Application": "Demo"
}
</code></pre><div aria-hidden="true"><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br></div></div><p>这种策略有助于放大集中日志流中的特定日志源；以这种方式添加的属性包括应用程序、环境和版本等内容。</p>
<h2 id="增加事件或记录器特定属性" tabindex="-1"> 增加事件或记录器特定属性</h2>
<p>通过创建和使用上下文记录器，可以将属性添加到一个或几个相关事件中，而不是使用相同的值丰富所有事件：</p>
<div><pre><code>var orderLog = Log.ForContext("OrderId", order.Id);
orderLog.Information("Looking up product codes");
// ...
orderLog.Information("Product lookup took {Elapsed} ms", elapsed.TotalMilliseconds);
</code></pre><div aria-hidden="true"><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br></div></div><p>在这里，通过<code>orderLog</code>发出的两个事件都将附加<code>OrderId</code>属性。</p>
<p>扩展是可添加的：如果<code>Application</code>属性设置在管道级别，则上面的第二个事件将携带经过（来自消息）、<code>OrderId</code>（来自上下文记录器）和<code>Application</code>（来自日志管道）。</p>
<h3 id="丰富源类型信息" tabindex="-1"> 丰富源类型信息</h3>
<p>特定于记录器的充实的一个特例是如何用创建事件的类标记事件。</p>
<p>在名为<code>HomeController</code>的类中，使用以下方法创建特定于类型的记录器：</p>
<div><pre><code>private readonly ILogger _log = Log.ForContext&lt;HomeController>();
</code></pre><div aria-hidden="true"><span>1</span><br></div></div><p>通过<code>_log</code>发出的事件将携带值为<code>MyApp.Controller.HomeController</code>的<code>SourceContext</code>属性。</p>
<h3 id="丰富环境语境" tabindex="-1"> 丰富环境语境</h3>
<p>为了丰富工作单元中引发的所有事件，<code>Serilog</code>提供了<code>LogContext</code>。首先需要在<code>LoggerConfiguration</code>级别使用<code>Enrich.FromLogContext()</code>启用此功能：</p>
<div><pre><code>Log.Logger = new LoggerConfiguraition()
     .Enrich.FromLogContext()
     // ...
</code></pre><div aria-hidden="true"><span>1</span><br><span>2</span><br><span>3</span><br></div></div><p><code>LogContext</code>可以看作是（键、值）对的堆栈；当从日志上下文中丰富事件时，这些事件将作为属性添加到事件中。</p>
<div><pre><code>using (LogContext.PushProperty("MessageId", message.Id))
{
    Log.Debug("Dispatching message of type {MessageType}", message.GetType());
    await handler.HandleAsync(message);
}
</code></pre><div aria-hidden="true"><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br></div></div><p><code>LogContext</code>的有趣之处在于不需要传递任何信息。在示例代码中，<code>HandleAsync()</code>的实现以及它调用的任何其他方法都可以直接使用<code>Log</code>和<code>ILogger</code>、 <code>MessageId</code>属性将被提取并添加到后台。</p>
<blockquote>
<p>提示：<code>LogContext</code>是一个堆栈；推送到堆栈上的属性必须通过处理从<code>PushProperty()</code>返回的对象再次弹出-必须使用块。</p>
</blockquote>
]]></content:encoded>
      <enclosure url="https://note.youdao.com/yws/api/personal/file/261B46CA8E7E474D889CC2D6312BA39E?method=download&shareKey=b47ca475a270339f81b8af4ba28a1954" type="image/"/>
    </item>
    <item>
      <title>Nacos 配置中心</title>
      <link>https://igeekfan.cn/igeekfan-docs/dotnetcore/examples/nacos-aspnetcore.html</link>
      <guid>https://igeekfan.cn/igeekfan-docs/dotnetcore/examples/nacos-aspnetcore.html</guid>
      <source url="https://igeekfan.cn/igeekfan-docs/rss.xml">Nacos 配置中心</source>
      <pubDate>Wed, 22 Dec 2021 18:31:25 GMT</pubDate>
      <content:encoded><![CDATA[<h1 id="nacos-配置中心" tabindex="-1"> Nacos 配置中心</h1>
<p><code>nacos</code> 是一个构建云原生应用的动态服务发现、配置管理和服务管理平台。。</p>
<h2 id="配置管理" tabindex="-1"> 配置管理</h2>
<p>asp.net core 中所有的配置项，如 appsetting.json 进行集中管理,支持热加载，支持服务发现。</p>
<ul>
<li>nacos github <a href="https://github.com/alibaba/nacos" target="_blank" rel="noopener noreferrer">https://github.com/alibaba/nacos</a></li>
<li>csharp sdk github <a href="https://github.com/nacos-group/nacos-sdk-csharp" target="_blank" rel="noopener noreferrer">https://github.com/nacos-group/nacos-sdk-csharp</a></li>
<li>csharp sdk 文档：<a href="https://nacos-sdk-csharp.readthedocs.io/en/latest/introduction/gettingstarted.html" target="_blank" rel="noopener noreferrer">https://nacos-sdk-csharp.readthedocs.io/en/latest/introduction/gettingstarted.html</a></li>
<li><a href="https://nacos.io/zh-cn/" target="_blank" rel="noopener noreferrer">https://nacos.io/zh-cn/</a></li>
</ul>
<p>安装请参考：<a href="https://nacos.io/zh-cn/docs/quick-start.html" target="_blank" rel="noopener noreferrer">https://nacos.io/zh-cn/docs/quick-start.html</a></p>
<h3 id="开始" tabindex="-1"> 开始</h3>
<ul>
<li>windows 进入 nacos 的 bin 目录，或把目录 <code>D:\work\tools\nacos\bin</code>（我本地）配置到环境变量中的 Path 中。</li>
</ul>
<p>即可在任意位置，执行命令</p>
<div><pre><code>startup.cmd -m standalone
</code></pre><div aria-hidden="true"><span>1</span><br></div></div><ul>
<li>standalone 代表着单机模式运行，非集群模式</li>
</ul>
<div><pre><code>C:\WINDOWS\system32&gt;startup.cmd -m standalone
&quot;nacos is starting with standalone&quot;

         ,--.
       ,--.'|
   ,--,:  : |                                           Nacos 2.0.3
,`--.'`|  ' :                       ,---.               Running in stand alone mode, All function modules
|   :  :  | |                      '   ,'\   .--.--.    Port: 8848
:   |   \ | :  ,--.--.     ,---.  /   /   | /  /    '   Pid: 14504
|   : '  '; | /       \   /     \.   ; ,. :|  :  /`./   Console: http://192.168.0.10:8848/nacos/index.html
'   ' ;.    ;.--.  .-. | /    / ''   | |: :|  :  ;_
|   | | \   | \__\/: . ..    ' / '   | .; : \  \    `.      https://nacos.io
'   : |  ; .' ,&quot; .--.; |'   ; :__|   :    |  `----.   \
|   | '`--'  /  /  ,.  |'   | '.'|\   \  /  /  /`--'  /
'   : |     ;  :   .'   \   :    : `----'  '--'.     /
;   |.'     |  ,     .-./\   \  /            `--'---'
'---'        `--`---'     `----'

</code></pre><div aria-hidden="true"><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br></div></div><p>默认运行在 8848 端口</p>
<ul>
<li>http://localhost:8848/nacos/#/login</li>
<li>nacos</li>
<li>nacos</li>
</ul>
<h2 id="必做" tabindex="-1"> 必做</h2>
<p>登录后，打开<strong>命名空间</strong>-&gt;新建命名空间-&gt;</p>
<ul>
<li><code> 命名空间ID</code>:这里填，<code>cs-test</code>，注意下方的配置项 Namespace 请填写此值。</li>
<li><code>命名空间名：</code>这个只是用于展示区分，填<code>cs-test</code>，建议直接和命名空间 id 相同即可。</li>
<li><code>描述：</code>:这个随便填</li>
</ul>
<h2 id="nacos-console" tabindex="-1"> Nacos+Console</h2>
<p>新建一个控制台项目</p>
<p>引入包</p>
<div><pre><code><span><span><span>&lt;</span>PackageReference</span> <span>Include</span><span><span>=</span><span>"</span>Microsoft.Extensions.Hosting<span>"</span></span> <span>Version</span><span><span>=</span><span>"</span>6.0.0<span>"</span></span> <span>/></span></span>
<span><span><span>&lt;</span>PackageReference</span> <span>Include</span><span><span>=</span><span>"</span>nacos-sdk-csharp<span>"</span></span> <span>Version</span><span><span>=</span><span>"</span>1.2.2<span>"</span></span> <span>/></span></span>
</code></pre><div aria-hidden="true"><span>1</span><br><span>2</span><br></div></div><div><pre><code><span>static</span> <span>IHost</span> <span>AppStartup</span><span>(</span><span>)</span>
<span>{</span>
    <span><span>var</span></span> host <span>=</span> Host<span>.</span><span>CreateDefaultBuilder</span><span>(</span><span>)</span>
                <span>.</span><span>ConfigureServices</span><span>(</span><span>(</span>context<span>,</span> services<span>)</span> <span>=></span>
                <span>{</span>
                    <span>ConfigureServices</span><span>(</span>context<span>,</span> services<span>)</span><span>;</span>
                    services<span>.</span><span><span>AddTransient</span><span><span>&lt;</span>App<span>></span></span></span><span>(</span><span>)</span><span>;</span>
                <span>}</span><span>)</span>
                <span>.</span><span>ConfigureAppConfiguration</span><span>(</span><span>(</span>host<span>,</span> config<span>)</span> <span>=></span>
                <span>{</span>

                <span>}</span><span>)</span>
                <span>.</span><span>Build</span><span>(</span><span>)</span><span>;</span> <span>// Build the Host</span>

    <span>return</span> host<span>;</span>
<span>}</span>

</code></pre><div aria-hidden="true"><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br></div></div><p>配置<code>nacos</code>的服务</p>
<div><pre><code><span>static</span> <span><span>void</span></span> <span>ConfigureServices</span><span>(</span><span>HostBuilderContext</span> context<span>,</span><span>IServiceCollection</span> services<span>)</span>
<span>{</span>
    services<span>.</span><span>AddNacosV2Config</span><span>(</span>x <span>=></span>
    <span>{</span>
        x<span>.</span>ServerAddresses <span>=</span> <span>new</span> <span>System<span>.</span>Collections<span>.</span>Generic<span>.</span>List<span>&lt;</span><span>string</span><span>></span></span> <span>{</span> <span>"http://localhost:8848/"</span> <span>}</span><span>;</span>
        x<span>.</span>EndPoint <span>=</span> <span>""</span><span>;</span>
        x<span>.</span>Namespace <span>=</span> <span>"cs-test"</span><span>;</span>

        <span>/*x.UserName = "nacos";
       x.Password = "nacos";*/</span>

        <span>// swich to use http or rpc</span>
        x<span>.</span>ConfigUseRpc <span>=</span> <span>true</span><span>;</span>
    <span>}</span><span>)</span><span>;</span>

    services<span>.</span><span>AddNacosV2Naming</span><span>(</span>x <span>=></span>
    <span>{</span>
        x<span>.</span>ServerAddresses <span>=</span> <span>new</span> <span>System<span>.</span>Collections<span>.</span>Generic<span>.</span>List<span>&lt;</span><span>string</span><span>></span></span> <span>{</span> <span>"http://localhost:8848/"</span> <span>}</span><span>;</span>
        x<span>.</span>EndPoint <span>=</span> <span>""</span><span>;</span>
        x<span>.</span>Namespace <span>=</span> <span>"cs-test"</span><span>;</span>

        <span>/*x.UserName = "nacos";
       x.Password = "nacos";*/</span>

        <span>// swich to use http or rpc</span>
        x<span>.</span>NamingUseRpc <span>=</span> <span>true</span><span>;</span>
    <span>}</span><span>)</span><span>;</span>
<span>}</span>
</code></pre><div aria-hidden="true"><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br><span>24</span><br><span>25</span><br><span>26</span><br><span>27</span><br><span>28</span><br></div></div><p>调用</p>
<div><pre><code><span><span>var</span></span> host <span>=</span> <span>AppStartup</span><span>(</span><span>)</span><span>;</span>
<span><span>var</span></span> service <span>=</span> ActivatorUtilities<span>.</span><span><span>CreateInstance</span><span><span>&lt;</span>App<span>></span></span></span><span>(</span>host<span>.</span>Services<span>)</span><span>;</span>
<span>await</span> service<span>.</span><span>RunAsync</span><span>(</span>args<span>)</span><span>;</span>
</code></pre><div aria-hidden="true"><span>1</span><br><span>2</span><br><span>3</span><br></div></div><p>App.cs 文件配置</p>
<div><pre><code><span>public</span> <span>class</span> <span>App</span>
<span>{</span>
    <span>private</span> <span>readonly</span> <span>ILogger<span>&lt;</span>App<span>></span></span> _logger<span>;</span>
    <span>private</span> <span>readonly</span> <span>INacosConfigService</span> _ns<span>;</span>
    <span>public</span> <span>App</span><span>(</span><span>ILogger<span>&lt;</span>App<span>></span></span> logger<span>,</span> <span>INacosConfigService</span> ns<span>)</span>
    <span>{</span>
        _logger <span>=</span> logger<span>;</span>
        _ns <span>=</span> ns<span>;</span>
    <span>}</span>

    <span>public</span> <span>async</span> <span>Task</span> <span>RunAsync</span><span>(</span><span><span>string</span><span>[</span><span>]</span></span> args<span>)</span>
    <span>{</span>
        <span>await</span> <span>PublishConfig</span><span>(</span>_ns<span>)</span><span>;</span>
        <span>await</span> <span>GetConfig</span><span>(</span>_ns<span>)</span><span>;</span>
        <span>await</span> <span>RemoveConfig</span><span>(</span>_ns<span>)</span><span>;</span>
    <span>}</span>

    <span>static</span> <span>async</span> <span>Task</span> <span>PublishConfig</span><span>(</span><span>INacosConfigService</span> svc<span>)</span>
    <span>{</span>
        <span><span>var</span></span> dataId <span>=</span> <span>"demo-dateid"</span><span>;</span>
        <span><span>var</span></span> <span>group</span> <span>=</span> <span>"demo-group"</span><span>;</span>
        <span><span>var</span></span> val <span>=</span> <span>"test-value-"</span> <span>+</span> DateTimeOffset<span>.</span>Now<span>.</span><span>ToUnixTimeSeconds</span><span>(</span><span>)</span><span>.</span><span>ToString</span><span>(</span><span>)</span><span>;</span>

        <span>await</span> Task<span>.</span><span>Delay</span><span>(</span><span>500</span><span>)</span><span>;</span>
        <span><span>var</span></span> flag <span>=</span> <span>await</span> svc<span>.</span><span>PublishConfig</span><span>(</span>dataId<span>,</span> <span>group</span><span>,</span> val<span>)</span><span>;</span>
        Console<span>.</span><span>WriteLine</span><span>(</span><span><span>$"======================发布配置结果，</span><span><span>{</span><span>flag</span><span>}</span></span><span>"</span></span><span>)</span><span>;</span>
    <span>}</span>

    <span>static</span> <span>async</span> <span>Task</span> <span>GetConfig</span><span>(</span><span>INacosConfigService</span> svc<span>)</span>
    <span>{</span>
        <span><span>var</span></span> dataId <span>=</span> <span>"demo-dateid"</span><span>;</span>
        <span><span>var</span></span> <span>group</span> <span>=</span> <span>"demo-group"</span><span>;</span>

        <span>await</span> Task<span>.</span><span>Delay</span><span>(</span><span>500</span><span>)</span><span>;</span>
        <span><span>var</span></span> config <span>=</span> <span>await</span> svc<span>.</span><span>GetConfig</span><span>(</span>dataId<span>,</span> <span>group</span><span>,</span> <span>5000L</span><span>)</span><span>;</span>
        Console<span>.</span><span>WriteLine</span><span>(</span><span><span>$"======================获取配置结果，</span><span><span>{</span><span>config</span><span>}</span></span><span>"</span></span><span>)</span><span>;</span>
    <span>}</span>

    <span>static</span> <span>async</span> <span>Task</span> <span>RemoveConfig</span><span>(</span><span>INacosConfigService</span> svc<span>)</span>
    <span>{</span>
        <span><span>var</span></span> dataId <span>=</span> <span>"demo-dateid"</span><span>;</span>
        <span><span>var</span></span> <span>group</span> <span>=</span> <span>"demo-group"</span><span>;</span>

        <span>await</span> Task<span>.</span><span>Delay</span><span>(</span><span>500</span><span>)</span><span>;</span>
        <span><span>var</span></span> flag <span>=</span> <span>await</span> svc<span>.</span><span>RemoveConfig</span><span>(</span>dataId<span>,</span> <span>group</span><span>)</span><span>;</span>
        Console<span>.</span><span>WriteLine</span><span>(</span><span><span>$"=====================删除配置结果，</span><span><span>{</span><span>flag</span><span>}</span></span><span>"</span></span><span>)</span><span>;</span>
    <span>}</span>
<span>}</span>

</code></pre><div aria-hidden="true"><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br><span>24</span><br><span>25</span><br><span>26</span><br><span>27</span><br><span>28</span><br><span>29</span><br><span>30</span><br><span>31</span><br><span>32</span><br><span>33</span><br><span>34</span><br><span>35</span><br><span>36</span><br><span>37</span><br><span>38</span><br><span>39</span><br><span>40</span><br><span>41</span><br><span>42</span><br><span>43</span><br><span>44</span><br><span>45</span><br><span>46</span><br><span>47</span><br><span>48</span><br><span>49</span><br></div></div><p>f5 运行后可看到输出如下内容</p>
<div><pre><code>======================发布配置结果，True
======================获取配置结果，test-value-1637000754
=====================删除配置结果，True
</code></pre><div aria-hidden="true"><span>1</span><br><span>2</span><br><span>3</span><br></div></div><p>我们把<code>await RemoveConfig(_ns);</code>这行删除，即可在 nacos 的网站上看到信息。</p>
<p>配置管理 -选<code>cs-test</code>,可以看到<code>Data Id为demo-dateid</code>，<code>Group</code>为<code>demo-group</code>的一行数据，点击行内的编辑即可看到具体信息。</p>
<h2 id="nacso-asp-net-core" tabindex="-1"> Nacso+Asp.NET Core</h2>
<p>新增包</p>
<div><pre><code><span><span><span>&lt;</span>PackageReference</span> <span>Include</span><span><span>=</span><span>"</span>nacos-sdk-csharp.AspNetCore<span>"</span></span> <span>Version</span><span><span>=</span><span>"</span>1.2.2<span>"</span></span> <span>/></span></span>
<span><span><span>&lt;</span>PackageReference</span> <span>Include</span><span><span>=</span><span>"</span>nacos-sdk-csharp.Extensions.Configuration<span>"</span></span> <span>Version</span><span><span>=</span><span>"</span>1.2.2<span>"</span></span> <span>/></span></span>
</code></pre><div aria-hidden="true"><span>1</span><br><span>2</span><br></div></div><p>在 Program 中配置服务</p>
<div><pre><code>builder<span>.</span>Host<span>.</span><span>ConfigureAppConfiguration</span><span>(</span><span>(</span>context<span>,</span> builder<span>)</span> <span>=></span>
        <span>{</span>
            <span><span>var</span></span> c <span>=</span> builder<span>.</span><span>Build</span><span>(</span><span>)</span><span>;</span>

            <span>// 从配置文件读取Nacos相关配置</span>
            <span>// 默认会使用JSON解析器来解析存在Nacos Server的配置</span>
            builder<span>.</span><span>AddNacosV2Configuration</span><span>(</span>c<span>.</span><span>GetSection</span><span>(</span><span>"NacosConfig"</span><span>)</span><span>)</span><span>;</span>
            <span>// 也可以按需使用ini或yaml的解析器</span>
            <span>// builder.AddNacosV2Configuration(c.GetSection("NacosConfig"), Nacos.IniParser.IniConfigurationStringParser.Instance);</span>
            <span>// builder.AddNacosV2Configuration(c.GetSection("NacosConfig"), Nacos.YamlParser.YamlConfigurationStringParser.Instance);</span>
        <span>}</span><span>)</span><span>;</span>
</code></pre><div aria-hidden="true"><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br></div></div><p><code>appsetting.json</code>配置</p>
<div><pre><code><span>{</span>
  <span>"NacosConfig"</span><span>:</span> <span>{</span>
    <span>"Listeners"</span><span>:</span> <span>[</span>
      <span>{</span>
        <span>"Optional"</span><span>:</span> <span>false</span><span>,</span>
        <span>"DataId"</span><span>:</span> <span>"common"</span><span>,</span>
        <span>"Group"</span><span>:</span> <span>"DEFAULT_GROUP"</span>
      <span>}</span><span>,</span>
      <span>{</span>
        <span>"Optional"</span><span>:</span> <span>false</span><span>,</span>
        <span>"DataId"</span><span>:</span> <span>"demo"</span><span>,</span>
        <span>"Group"</span><span>:</span> <span>"DEFAULT_GROUP"</span>
      <span>}</span>
    <span>]</span><span>,</span>
    <span>"Namespace"</span><span>:</span> <span>"cs-test"</span><span>,</span>
    <span>"ServerAddresses"</span><span>:</span> <span>[</span><span>"http://localhost:8848/"</span><span>]</span><span>,</span>
    <span>"UserName"</span><span>:</span> <span>"nacos"</span><span>,</span>
    <span>"Password"</span><span>:</span> <span>"nacos"</span><span>,</span>
    <span>"AccessKey"</span><span>:</span> <span>""</span><span>,</span>
    <span>"SecretKey"</span><span>:</span> <span>""</span><span>,</span>
    <span>"EndPoint"</span><span>:</span> <span>""</span><span>,</span>
    <span>"ConfigFilterAssemblies"</span><span>:</span> <span>[</span><span>]</span><span>,</span>
    <span>"ConfigFilterExtInfo"</span><span>:</span> <span>""</span>
  <span>}</span>
<span>}</span>
</code></pre><div aria-hidden="true"><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br><span>24</span><br><span>25</span><br></div></div><p>在上面我们可以看到<code>DataId</code>为<code>common</code>的、我们去管理端 UI，命名空间为<code>cs-test</code>新增一个配置</p>
<p>新增二个配置项</p>
<ul>
<li>Data ID:common</li>
<li>Group:DEFAULT_GROUP</li>
<li>配置内容：选择 json。</li>
</ul>
<div><pre><code><span>{</span>
  <span>"UserInfo"</span><span>:</span> <span>{</span>
    <span>"Name"</span><span>:</span> <span>"luo"</span><span>,</span>
    <span>"Sex"</span><span>:</span> <span>"Boy"</span><span>,</span>
    <span>"Age"</span><span>:</span> <span>99</span>
  <span>}</span><span>,</span>
  <span>"commonkey"</span><span>:</span> <span>"commonkey_value_值"</span>
<span>}</span>
</code></pre><div aria-hidden="true"><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br></div></div><ul>
<li>Data ID:demo</li>
<li>Group:DEFAULT_GROUP</li>
<li>配置内容：选择 json。</li>
</ul>
<div><pre><code><span>{</span>
  <span>"demokey"</span><span>:</span> <span>"demo_value_值"</span>
<span>}</span>
</code></pre><div aria-hidden="true"><span>1</span><br><span>2</span><br><span>3</span><br></div></div><p>那我们如何获取的这么一个 json 值和 demokey 中的值呢。</p>
<p>我们新增一个类</p>
<div><pre><code>    <span>public</span> <span>class</span> <span>UserInfo</span>
    <span>{</span>
        <span>public</span> <span><span>string</span></span> Name <span>{</span> <span>get</span><span>;</span> <span>set</span><span>;</span> <span>}</span>
        <span>public</span> <span><span>string</span></span> Sex <span>{</span> <span>get</span><span>;</span> <span>set</span><span>;</span> <span>}</span>
        <span>public</span> <span><span>int</span></span> Age <span>{</span> <span>get</span><span>;</span> <span>set</span><span>;</span> <span>}</span>
    <span>}</span>
</code></pre><div aria-hidden="true"><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br></div></div><p>在默认的控制器注入 <code>IConfiguration</code>,像从 appsettings.json 中获取数据一样，可直接取出来。</p>
<div><pre><code>    <span>private</span> <span>readonly</span> <span>ILogger<span>&lt;</span>ConfigController<span>></span></span> _logger<span>;</span>
    <span>private</span> <span>readonly</span> <span>IConfiguration</span> _configuration<span>;</span>

    <span>public</span> <span>ConfigController</span><span>(</span><span>ILogger<span>&lt;</span>WeatherForecastController<span>></span></span> logger<span>,</span> <span>IConfiguration</span> configuration<span>)</span>
    <span>{</span>
        _logger <span>=</span> logger<span>;</span>
        _configuration <span>=</span> configuration<span>;</span>
    <span>}</span>

    <span>[</span><span><span>HttpGet</span><span><span>(</span><span>"getconfig"</span><span>)</span></span></span><span>]</span>
    <span>public</span> <span>UserInfo</span> <span>GetConfig</span><span>(</span><span>)</span>
    <span>{</span>
        <span><span>var</span></span> userInfo1 <span>=</span> _configuration<span>.</span><span>GetSection</span><span>(</span><span>"UserInfo"</span><span>)</span><span>.</span><span><span>Get</span><span><span>&lt;</span>UserInfo<span>></span></span></span><span>(</span><span>)</span><span>;</span>
        <span><span>var</span></span> commonvalue <span>=</span> _configuration<span>[</span><span>"commonkey"</span><span>]</span><span>;</span>
        <span><span>var</span></span> demovalue <span>=</span> _configuration<span>[</span><span>"demokey"</span><span>]</span><span>;</span>
        _logger<span>.</span><span>LogInformation</span><span>(</span><span>"commonkey:"</span> <span>+</span> commonvalue<span>)</span><span>;</span>
        _logger<span>.</span><span>LogInformation</span><span>(</span><span>"demokey:"</span> <span>+</span> demovalue<span>)</span><span>;</span>
        <span>return</span> userInfo1<span>;</span>
    <span>}</span>
</code></pre><div aria-hidden="true"><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br></div></div><p>会输出如下内容</p>
<div><pre><code><span>info:</span> NacosApi<span>.</span>Controllers<span>.</span>WeatherForecastController<span>[</span><span>0</span><span>]</span>
      commonkey<span>:</span>commonkey_value_值
<span>info:</span> NacosApi<span>.</span>Controllers<span>.</span>WeatherForecastController<span>[</span><span>0</span><span>]</span>
      demokey<span>:</span>demo_value_值
</code></pre><div aria-hidden="true"><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br></div></div><p>并在界面上返回 UserInfo 的信息。</p>
<div><pre><code><span>{</span>
  <span>"name"</span><span>:</span> <span>"luo"</span><span>,</span>
  <span>"sex"</span><span>:</span> <span>"Boy"</span><span>,</span>
  <span>"age"</span><span>:</span> <span>99</span>
<span>}</span>
</code></pre><div aria-hidden="true"><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br></div></div><h4 id="注意" tabindex="-1"> 注意</h4>
<ul>
<li>当二个<code>DataId</code>中配置的 json,包含相同的 Key 时，实际会依后面的 Key 中值为准。顺序以 appsetting.json 中的配置 Listeners 的数组顺序为依据。</li>
</ul>
<p>当然我们通过强类型绑定<code>UserInfo</code>,在<code>Program</code>配置服务</p>
<div><pre><code>builder<span>.</span>Services<span>.</span><span><span>Configure</span><span><span>&lt;</span>UserInfo<span>></span></span></span><span>(</span>builder<span>.</span>Configuration<span>.</span><span>GetSection</span><span>(</span><span>"UserInfo"</span><span>)</span><span>)</span><span>;</span>
</code></pre><div aria-hidden="true"><span>1</span><br></div></div><div><pre><code><span>public</span> <span>ConfigController</span><span>(</span><span>ILogger<span>&lt;</span>ConfigController<span>></span></span> logger<span>,</span>
        <span>IConfiguration</span> configuration<span>,</span>
        <span>IOptions<span>&lt;</span>UserInfo<span>></span></span> options1<span>,</span>
        <span>IOptionsSnapshot<span>&lt;</span>UserInfo<span>></span></span> options2<span>,</span>
        <span>IOptionsMonitor<span>&lt;</span>UserInfo<span>></span></span> options3
    <span>)</span>
<span>{</span>
    _logger <span>=</span> logger<span>;</span>
    _configuration <span>=</span> configuration<span>;</span>
    _user1 <span>=</span> options1<span>.</span>Value<span>;</span>
    _user2 <span>=</span> options2<span>.</span>Value<span>;</span>
    _user3 <span>=</span> options3<span>.</span>CurrentValue<span>;</span>
<span>}</span>

<span>[</span><span><span>HttpGet</span></span><span>]</span>
<span>public</span> <span><span>string</span></span> <span>Get</span><span>(</span><span>)</span>
<span>{</span>
    <span><span>string</span></span> id <span>=</span> Guid<span>.</span><span>NewGuid</span><span>(</span><span>)</span><span>.</span><span>ToString</span><span>(</span><span>"N"</span><span>)</span><span>;</span>

    _logger<span>.</span><span>LogInformation</span><span>(</span><span><span>$"============== begin </span><span><span>{</span><span>id</span><span>}</span></span><span> ====================="</span></span><span>)</span><span>;</span>

    <span><span>var</span></span> str1 <span>=</span> Newtonsoft<span>.</span>Json<span>.</span>JsonConvert<span>.</span><span>SerializeObject</span><span>(</span>_user1<span>)</span><span>;</span>
    _logger<span>.</span><span>LogInformation</span><span>(</span><span><span>$"</span><span><span>{</span><span>id</span><span>}</span></span><span> IOptions = </span><span><span>{</span><span>str1</span><span>}</span></span><span>"</span></span><span>)</span><span>;</span>

    <span><span>var</span></span> str2 <span>=</span> Newtonsoft<span>.</span>Json<span>.</span>JsonConvert<span>.</span><span>SerializeObject</span><span>(</span>_user2<span>)</span><span>;</span>
    _logger<span>.</span><span>LogInformation</span><span>(</span><span><span>$"</span><span><span>{</span><span>id</span><span>}</span></span><span> IOptionsSnapshot = </span><span><span>{</span><span>str2</span><span>}</span></span><span>"</span></span><span>)</span><span>;</span>

    <span><span>var</span></span> str3 <span>=</span> Newtonsoft<span>.</span>Json<span>.</span>JsonConvert<span>.</span><span>SerializeObject</span><span>(</span>_user3<span>)</span><span>;</span>
    _logger<span>.</span><span>LogInformation</span><span>(</span><span><span>$"</span><span><span>{</span><span>id</span><span>}</span></span><span> IOptionsMonitor = </span><span><span>{</span><span>str3</span><span>}</span></span><span>"</span></span><span>)</span><span>;</span>

    _logger<span>.</span><span>LogInformation</span><span>(</span><span><span>$"==============================================="</span></span><span>)</span><span>;</span>

    <span>return</span> <span>"ok"</span><span>;</span>
<span>}</span>
</code></pre><div aria-hidden="true"><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br><span>24</span><br><span>25</span><br><span>26</span><br><span>27</span><br><span>28</span><br><span>29</span><br><span>30</span><br><span>31</span><br><span>32</span><br><span>33</span><br><span>34</span><br></div></div><p>当然输出是一模一样的。我们在界面上再次调整下数据</p>
<div><pre><code><span>info:</span> NacosApi<span>.</span>Controllers<span>.</span>ConfigController<span>[</span><span>0</span><span>]</span>
      <span>7bafb7f9cd2a46ec95324e38d01048aa</span> IOptions <span>=</span> <span>{</span><span>"Name"</span><span>:</span><span>"luo"</span><span>,</span><span>"Sex"</span><span>:</span><span>"Boy"</span><span>,</span><span>"Age"</span><span>:</span><span>99</span><span>}</span>
<span>info:</span> NacosApi<span>.</span>Controllers<span>.</span>ConfigController<span>[</span><span>0</span><span>]</span>
      <span>7bafb7f9cd2a46ec95324e38d01048aa</span> IOptionsSnapshot <span>=</span> <span>{</span><span>"Name"</span><span>:</span><span>"luo"</span><span>,</span><span>"Sex"</span><span>:</span><span>"Boy"</span><span>,</span><span>"Age"</span><span>:</span><span>99</span><span>}</span>
<span>info:</span> NacosApi<span>.</span>Controllers<span>.</span>ConfigController<span>[</span><span>0</span><span>]</span>
      <span>7bafb7f9cd2a46ec95324e38d01048aa</span> IOptionsMonitor <span>=</span> <span>{</span><span>"Name"</span><span>:</span><span>"luo"</span><span>,</span><span>"Sex"</span><span>:</span><span>"Boy"</span><span>,</span><span>"Age"</span><span>:</span><span>99</span><span>}</span>
</code></pre><div aria-hidden="true"><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br></div></div><p>只有<code>IOptions&lt;UserInfo&gt;</code>不会变化，其他是会跟着变化的。</p>
<div><pre><code><span>info:</span> NacosApi<span>.</span>Controllers<span>.</span>ConfigController<span>[</span><span>0</span><span>]</span>
      <span>604d8db7b0ad48ccbc64c3ccd06eb524</span> IOptions <span>=</span> <span>{</span><span>"Name"</span><span>:</span><span>"luo"</span><span>,</span><span>"Sex"</span><span>:</span><span>"Boy"</span><span>,</span><span>"Age"</span><span>:</span><span>99</span><span>}</span>
<span>info:</span> NacosApi<span>.</span>Controllers<span>.</span>ConfigController<span>[</span><span>0</span><span>]</span>
      <span>604d8db7b0ad48ccbc64c3ccd06eb524</span> IOptionsSnapshot <span>=</span> <span>{</span><span>"Name"</span><span>:</span><span>"abc"</span><span>,</span><span>"Sex"</span><span>:</span><span>"Boy"</span><span>,</span><span>"Age"</span><span>:</span><span>99</span><span>}</span>
<span>info:</span> NacosApi<span>.</span>Controllers<span>.</span>ConfigController<span>[</span><span>0</span><span>]</span>
      <span>604d8db7b0ad48ccbc64c3ccd06eb524</span> IOptionsMonitor <span>=</span> <span>{</span><span>"Name"</span><span>:</span><span>"abc"</span><span>,</span><span>"Sex"</span><span>:</span><span>"Boy"</span><span>,</span><span>"Age"</span><span>:</span><span>99</span><span>}</span>
</code></pre><div aria-hidden="true"><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br></div></div><h2 id="docker-安装-nacos" tabindex="-1"> Docker 安装 Nacos</h2>
<ul>
<li>
<p><a href="https://www.cnblogs.com/niunafei/p/12803965.html" target="_blank" rel="noopener noreferrer">https://www.cnblogs.com/niunafei/p/12803965.html</a></p>
<p>1.拉取镜像</p>
</li>
</ul>
<div><pre><code>docker pull nacos/nacos-server
</code></pre><div aria-hidden="true"><span>1</span><br></div></div><p>2、创建本地的映射文件，application.properties，</p>
<div><pre><code>mkdir -p  /root/nacos/logs /root/nacos/conf
</code></pre><div aria-hidden="true"><span>1</span><br></div></div><p>配置数据库</p>
<div><pre><code>vim /root/nacos/conf/application.properties
</code></pre><div aria-hidden="true"><span>1</span><br></div></div><ul>
<li>application.properties</li>
</ul>
<div><pre><code>spring.datasource.platform=mysql
db.num=1
db.url.0=jdbc:mysql://ip:3306/nacos_config?characterEncoding=utf8&amp;connectTimeout=1000&amp;socketTimeout=3000&amp;autoReconnect=true
db.user=userid
db.password=userpassword

</code></pre><div aria-hidden="true"><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br></div></div><p>下面通过配置来暴露除了/shutdown 之外的所有端点。下面通过配置来暴露除了/shutdown 之外的所有端点</p>
<div><pre><code>management.endpoints.web.exposure.include=*
</code></pre><div aria-hidden="true"><span>1</span><br></div></div><p>运行容器：使用<code>standalone</code>模式并开放 8848 端口，并映射配置文件和日志目录，数据库在 application.properties 中配置</p>
<div><pre><code>docker run -d -p 8848:8848 -p 9848:9848 -p 9555:9555 -e MODE=standalone -e PREFER_HOST_MODE=hostname -v /root/nacos/logs:/home/nacos/logs -v /root/nacos/conf/application.properties:/home/nacos/conf/application.properties --restart always --name nacos nacos/nacos-server
</code></pre><div aria-hidden="true"><span>1</span><br></div></div><p>其中-v 指定映射配置。左侧为 linux 文件，右侧为 docker 目录</p>
<h3 id="更多指令" tabindex="-1"> 更多指令</h3>
<p>启动容器</p>
<div><pre><code>docker start 容器id
或者
docker start nacos
</code></pre><div aria-hidden="true"><span>1</span><br><span>2</span><br><span>3</span><br></div></div><p>关闭容器</p>
<div><pre><code>docker stop nacos
</code></pre><div aria-hidden="true"><span>1</span><br></div></div><h2 id="博客" tabindex="-1"> 博客</h2>
<ul>
<li><a href="https://mp.weixin.qq.com/s/iC6lFJJsHUFUveSJhoZxgA" target="_blank" rel="noopener noreferrer">聊一聊如何在.NET Core 中使用 Nacos 2.0</a></li>
</ul>
]]></content:encoded>
    </item>
    <item>
      <title>LinCms如何切换成SQL server</title>
      <link>https://igeekfan.cn/igeekfan-docs/dotnetcore/lin-cms/change-sqlserver.html</link>
      <guid>https://igeekfan.cn/igeekfan-docs/dotnetcore/lin-cms/change-sqlserver.html</guid>
      <source url="https://igeekfan.cn/igeekfan-docs/rss.xml">LinCms如何切换成SQL server</source>
      <pubDate>Wed, 22 Dec 2021 18:31:25 GMT</pubDate>
      <content:encoded><![CDATA[<h1 id="lincms如何切换成sql-server" tabindex="-1"> LinCms如何切换成SQL server</h1>
<p>需要修改LinCms.Web中的appsetting.json配置</p>
<h3 id="数据库配置" tabindex="-1"> 数据库配置</h3>
<p>DefaultDB：改成1
SqlServer：改成自己的数据库配置</p>
<div><pre><code><span><span> </span><span> "ConnectionStrings": {
</span></span><span><span>-</span><span>    "DefaultDB": "0",
</span></span><span><span>+</span><span>    "DefaultDB": "1",
</span></span><span><span> </span><span>   "DataType": {
</span><span> </span><span>     "MySql": 0,
</span><span> </span><span>     "SqlServer": 1,
</span><span> </span><span>     "PostgreSQL": 2,
</span><span> </span><span>     "Oracle": 3,
</span><span> </span><span>     "Sqlite": 4
</span><span> </span><span>   },
</span><span> </span><span>   "MySql": "Data Source=localhost;Port=3306;User ID=root;Password=rCsRedisoot;Initial Catalog=lincms;Charset=utf8mb4;SslMode=none;Max pool size=1;Connection LifeTime=20"
</span></span><span><span>+</span><span>   "SqlServer": "Data Source=.;User ID=sa;Password=123456;Integrated Security=True;Initial Catalog=LinCMS;Pooling=true;Min Pool Size=1"
</span></span><span><span> </span><span> },
</span></span></code></pre><div aria-hidden="true"><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br></div></div><h3 id="serilog配置" tabindex="-1"> Serilog配置</h3>
<p>Using引用  <code>&quot;Serilog.Sinks.MSSqlServer&quot;</code>,去掉<code> &quot;Serilog.Sinks.MariaDB&quot;</code></p>
<p>把 <code>&quot;Name&quot;</code>为 <code>&quot;MariaDB&quot;</code>的json注释掉。</p>
<p>把<code>&quot;Name&quot;</code>为 <code>&quot;MSSqlServer&quot;</code>的json注释去掉。</p>
<p>并改掉<code>Args:connectionString</code>的连接串。</p>
<div><pre><code><span><span> </span><span>   "Serilog": {
</span><span> </span><span>   "Using": [
</span><span> </span><span>     "Serilog.Sinks.Console",
</span><span> </span><span>     "Serilog.Sinks.File",
</span></span><span><span>-</span><span>      "Serilog.Sinks.MariaDB"
</span></span><span><span>+</span><span>      "Serilog.Sinks.MSSqlServer"
</span></span><span><span> </span><span>   ],
</span><span> </span><span>   "MinimumLevel": {
</span><span> </span><span>     "Default": "Information",
</span><span> </span><span>     "Override": {
</span><span> </span><span>       "Microsoft": "Information",
</span><span> </span><span>       "System": "Warning"
</span><span> </span><span>     }
</span><span> </span><span>   },
</span><span> </span><span>   "WriteTo": [
</span><span> </span><span>     {
</span><span> </span><span>       "Name": "File",
</span><span> </span><span>       "Args": {
</span><span> </span><span>         "path": "Logs/log.txt",
</span><span> </span><span>         "rollingInterval": "Day"
</span><span> </span><span>       }
</span><span> </span><span>     },
</span><span> </span><span>     {
</span><span> </span><span>       "Name": "Console",
</span><span> </span><span>       "Args": {
</span><span> </span><span>         "theme": "Serilog.Sinks.SystemConsole.Themes.AnsiConsoleTheme::Code, Serilog.Sinks.Console",
</span><span> </span><span>         "outputTemplate": "[{Timestamp:HH:mm:ss} {Level:u3}] {Message:lj} &lt;s:{SourceContext}>{NewLine}{Exception}"
</span><span> </span><span>       }
</span><span> </span><span>     },
</span></span><span><span>-</span><span>      {
</span></span><span><span> </span><span>       "Name": "MariaDB",
</span><span> </span><span>       "Args": {
</span><span> </span><span>         "connectionString": "Data Source=localhost;Port=3308;User ID=root;Password=root;Initial Catalog=lincms;Charset=utf8mb4;SslMode=none;Max pool size=1;Connection LifeTime=20",
</span><span> </span><span>         "autoCreateTable": true,
</span><span> </span><span>         "tableName": "app_serilog",
</span><span> </span><span>         "restrictedToMinimumLevel": "Information",
</span><span> </span><span>         "batchPostingLimit": 4, //1000
</span><span> </span><span>         "period": "0.00:00:03",
</span><span> </span><span>         "options": {
</span><span> </span><span>           "PropertiesToColumnsMapping": {
</span><span> </span><span>             "Exception": "exception",
</span><span> </span><span>             "Level": "level",
</span><span> </span><span>             "Message": "message",
</span><span> </span><span>             "MessageTemplate": "message_template",
</span><span> </span><span>             "Properties": "properties",
</span><span> </span><span>             "Timestamp": "timestamp"
</span><span> </span><span>           },
</span><span> </span><span>           "TimestampInUtc": false,
</span><span> </span><span>           "ExcludePropertiesWithDedicatedColumn": true,
</span><span> </span><span>           "EnumsAsInts": true,
</span><span> </span><span>           "LogRecordsCleanupFrequency": "0.02:00:00",
</span><span> </span><span>           "LogRecordsExpiration": "31.00:00:00"
</span><span> </span><span>         }
</span><span> </span><span>       }
</span></span><span><span>-</span><span>      }
</span></span><span><span>+</span><span>      //{
</span></span><span><span> </span><span>     //  "Name": "MSSqlServer",
</span><span> </span><span>     //  "Args": {
</span><span> </span><span>     //    "connectionString": "Data Source=.;User ID=sa;Password=123456;Integrated Security=True;Initial Catalog=LinCMS;Pooling=true;Min Pool Size=1",
</span><span> </span><span>     //    "restrictedToMinimumLevel": "Information",
</span><span> </span><span>     //    "sinkOptionsSection": {
</span><span> </span><span>     //      "tableName": "app_serilog",
</span><span> </span><span>     //      "schemaName": "dbo",
</span><span> </span><span>     //      "autoCreateSqlTable": true,
</span><span> </span><span>     //      "batchPostingLimit": 1000,
</span><span> </span><span>     //      "period": "0.00:00:15"
</span><span> </span><span>     //    },
</span><span> </span><span>     //    "columnOptionsSection": {
</span><span> </span><span>     //      "disableTriggers": true,
</span><span> </span><span>     //      "clusteredColumnstoreIndex": false,
</span><span> </span><span>     //      "primaryKeyColumnName": "id",
</span><span> </span><span>     //      "addStandardColumns": [ "LogEvent" ],
</span><span> </span><span>     //      "removeStandardColumns": [ "Properties" ],
</span><span> </span><span>     //      "additionalColumns": [
</span><span> </span><span>     //        {
</span><span> </span><span>     //          "ColumnName": "event_type",
</span><span> </span><span>     //          "DataType": "int",
</span><span> </span><span>     //          "AllowNull": true
</span><span> </span><span>     //        },
</span><span> </span><span>     //        {
</span><span> </span><span>     //          "ColumnName": "release",
</span><span> </span><span>     //          "DataType": "varchar",
</span><span> </span><span>     //          "DataLength": 32
</span><span> </span><span>     //        },
</span><span> </span><span>     //        {
</span><span> </span><span>     //          "ColumnName": "environment_user_name",
</span><span> </span><span>     //          "PropertyName": "UserName",
</span><span> </span><span>     //          "DataType": "varchar",
</span><span> </span><span>     //          "DataLength": 50
</span><span> </span><span>     //        },
</span><span> </span><span>     //        {
</span><span> </span><span>     //          "ColumnName": "all_sqlcolumn_defaults",
</span><span> </span><span>     //          "DataType": "varchar",
</span><span> </span><span>     //          "AllowNull": true,
</span><span> </span><span>     //          "DataLength": -1,
</span><span> </span><span>     //          "NonClusteredIndex": false
</span><span> </span><span>     //        }
</span><span> </span><span>     //      ],
</span><span> </span><span>     //      "id": {
</span><span> </span><span>     //        "columnName": "id",
</span><span> </span><span>     //        "nonClusteredIndex": true
</span><span> </span><span>     //      },
</span><span> </span><span>     //      "level": {
</span><span> </span><span>     //        "columnName": "level",
</span><span> </span><span>     //        "storeAsEnum": true
</span><span> </span><span>     //      },
</span><span> </span><span>     //      //"Properties": {
</span><span> </span><span>     //      //  "columnName": "properties",
</span><span> </span><span>     //      //  "excludeAdditionalProperties": true,
</span><span> </span><span>     //      //  "dictionaryElementName": "dict",
</span><span> </span><span>     //      //  "itemElementName": "item",
</span><span> </span><span>     //      //  "omitDictionaryContainerElement": false,
</span><span> </span><span>     //      //  "omitSequenceContainerElement": false,
</span><span> </span><span>     //      //  "omitStructureContainerElement": false,
</span><span> </span><span>     //      //  "omitElementIfEmpty": true,
</span><span> </span><span>     //      //  "propertyElementName": "prop",
</span><span> </span><span>     //      //  "rootElementName": "root",
</span><span> </span><span>     //      //  "sequenceElementName": "seq",
</span><span> </span><span>     //      //  "structureElementName": "struct",
</span><span> </span><span>     //      //  "usePropertyKeyAsElementName": false
</span><span> </span><span>     //      //},
</span><span> </span><span>     //      "TimeStamp": {
</span><span> </span><span>     //        "columnName": "timestamp",
</span><span> </span><span>     //        "convertToUtc": true,
</span><span> </span><span>     //        "DataType": "tinyint"
</span><span> </span><span>     //      },
</span><span> </span><span>     //      "MessageTemplate": {
</span><span> </span><span>     //        "columnName": "message_template",
</span><span> </span><span>     //        "convertToUtc": true
</span><span> </span><span>     //      },
</span><span> </span><span>     //      "Timestamp": "timestamp",
</span><span> </span><span>     //      "Exception": {
</span><span> </span><span>     //        "columnName": "exception"
</span><span> </span><span>     //      },
</span><span> </span><span>     //      "Message": {
</span><span> </span><span>     //        "columnName": "message"
</span><span> </span><span>     //      },
</span><span> </span><span>     //      "logEvent": {
</span><span> </span><span>     //        "columnName": "properties",
</span><span> </span><span>     //        "excludeAdditionalProperties": true,
</span><span> </span><span>     //        "excludeStandardColumns": true
</span><span> </span><span>     //      }
</span><span> </span><span>     //    }
</span><span> </span><span>     //  }
</span></span><span><span>+</span><span>      //}
</span></span><span><span> </span><span>   ]
</span><span> </span><span> }
</span></span></code></pre><div aria-hidden="true"><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br><span>24</span><br><span>25</span><br><span>26</span><br><span>27</span><br><span>28</span><br><span>29</span><br><span>30</span><br><span>31</span><br><span>32</span><br><span>33</span><br><span>34</span><br><span>35</span><br><span>36</span><br><span>37</span><br><span>38</span><br><span>39</span><br><span>40</span><br><span>41</span><br><span>42</span><br><span>43</span><br><span>44</span><br><span>45</span><br><span>46</span><br><span>47</span><br><span>48</span><br><span>49</span><br><span>50</span><br><span>51</span><br><span>52</span><br><span>53</span><br><span>54</span><br><span>55</span><br><span>56</span><br><span>57</span><br><span>58</span><br><span>59</span><br><span>60</span><br><span>61</span><br><span>62</span><br><span>63</span><br><span>64</span><br><span>65</span><br><span>66</span><br><span>67</span><br><span>68</span><br><span>69</span><br><span>70</span><br><span>71</span><br><span>72</span><br><span>73</span><br><span>74</span><br><span>75</span><br><span>76</span><br><span>77</span><br><span>78</span><br><span>79</span><br><span>80</span><br><span>81</span><br><span>82</span><br><span>83</span><br><span>84</span><br><span>85</span><br><span>86</span><br><span>87</span><br><span>88</span><br><span>89</span><br><span>90</span><br><span>91</span><br><span>92</span><br><span>93</span><br><span>94</span><br><span>95</span><br><span>96</span><br><span>97</span><br><span>98</span><br><span>99</span><br><span>100</span><br><span>101</span><br><span>102</span><br><span>103</span><br><span>104</span><br><span>105</span><br><span>106</span><br><span>107</span><br><span>108</span><br><span>109</span><br><span>110</span><br><span>111</span><br><span>112</span><br><span>113</span><br><span>114</span><br><span>115</span><br><span>116</span><br><span>117</span><br><span>118</span><br><span>119</span><br><span>120</span><br><span>121</span><br><span>122</span><br><span>123</span><br><span>124</span><br><span>125</span><br><span>126</span><br><span>127</span><br><span>128</span><br><span>129</span><br><span>130</span><br><span>131</span><br><span>132</span><br><span>133</span><br><span>134</span><br><span>135</span><br><span>136</span><br><span>137</span><br><span>138</span><br><span>139</span><br><span>140</span><br><span>141</span><br><span>142</span><br><span>143</span><br><span>144</span><br><span>145</span><br><span>146</span><br><span>147</span><br></div></div><h3 id="cap配置" tabindex="-1"> CAP配置</h3>
<p>因为用了<code>CAP</code>。cap换<code>sql server</code>。这里改成 <code>DefaultStorage</code>改成2。</p>
<p>如果Messqueue换rabbitmq的话，<code>DefaultMessageQueue</code>就改成1.然后配置 RabbitMQ</p>
<div><pre><code><span><span> </span><span> "CAP": {
</span></span><span><span>-</span><span>    "DefaultStorage": "1",
</span></span><span><span>+</span><span>    "DefaultStorage": "2",
</span></span><span><span> </span><span>   "DefaultMessageQueue": "0",
</span><span> </span><span>   "Storage": {
</span><span> </span><span>     "InMemoryStorage": 0,
</span><span> </span><span>     "MySql": 1,
</span><span> </span><span>     "SqlServer": 2
</span><span> </span><span>   },
</span><span> </span><span>   "MessageQueue": {
</span><span> </span><span>     "InMemoryQueue": 0,
</span><span> </span><span>     "RabbitMQ": 1
</span><span> </span><span>   },
</span><span> </span><span>   "RabbitMQ": {
</span><span> </span><span>     "HostName": "localhost",
</span><span> </span><span>     "UserName": "admin",
</span><span> </span><span>     "Password": "123456",
</span><span> </span><span>     "Port": 5672,
</span><span> </span><span>     "VirtualHost": "/admin"
</span><span> </span><span>   }
</span><span> </span><span> },
</span></span></code></pre><div aria-hidden="true"><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br></div></div><p>双击<code>LinCms.Application</code>项目,注释掉<code>DotNetCore.CAP.MySql</code>的引用，引用 SqlServer的包</p>
<div><pre><code>	&lt;ItemGroup>
		&lt;PackageReference Include="AspNet.Security.OAuth.Gitee" Version="5.0.11" />
		&lt;PackageReference Include="AspNet.Security.OAuth.GitHub" Version="5.0.11" />
		&lt;PackageReference Include="AspNet.Security.OAuth.QQ" Version="5.0.11" />
		&lt;PackageReference Include="AutoMapper" Version="10.1.1" />
		&lt;PackageReference Include="Autofac.Extensions.DependencyInjection" Version="7.1.0" />
<span><span>-</span><span>		&lt;PackageReference Include="DotNetCore.CAP.MySql" Version="5.1.3" />
</span></span><span><span>+</span><span>		&lt;PackageReference Include="DotNetCore.CAP.SqlServer" Version="5.1.3" />
</span></span>		&lt;PackageReference Include="IdentityServer4" Version="4.1.2" />
		&lt;PackageReference Include="DotNetCore.CAP" Version="5.1.3" />
		&lt;PackageReference Include="IdentityModel" Version="5.1.0" />
		&lt;PackageReference Include="MQiniu.Core" Version="1.0.1" />
		&lt;PackageReference Include="Caching.CSRedis" Version="3.6.60" />
		&lt;PackageReference Include="CSRedisCore" Version="3.6.6" />
	&lt;/ItemGroup>

</code></pre><div aria-hidden="true"><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br></div></div><p>打开<code>LinCms.Application</code>项目中的<code>CapUnitOfWorkExtensions.cs</code>文件</p>
<p>修改方法<code>BeginTransaction</code></p>
<div><pre><code>public static ICapTransaction BeginTransaction(this IUnitOfWork unitOfWork, ICapPublisher publisher, bool autoCommit = false)
{
<span><span> </span><span>   //看了源码，换了新的写法，换不同的数据库，就需要手动修改这段代码了（MySqlCapTransaction）
</span><span> </span><span>   //publisher.Transaction.Value = (ICapTransaction)publisher.ServiceProvider.GetService(typeof(ICapTransaction));新版本只能得到nul
</span></span><span><span>-</span><span>   publisher.Transaction.Value = ActivatorUtilities.CreateInstance&lt;MySqlCapTransaction>(publisher.ServiceProvider);
</span></span><span><span>+</span><span>   publisher.Transaction.Value = ActivatorUtilities.CreateInstance&lt;SqlServerCapTransaction>(publisher.ServiceProvider);
</span></span>}
</code></pre><div aria-hidden="true"><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br></div></div>]]></content:encoded>
    </item>
    <item>
      <title>ASP.NETCore 下 FreeSql 的仓储事务</title>
      <link>https://igeekfan.cn/igeekfan-docs/dotnetcore/lin-cms/aspnetcore-repository-unitofwork.html</link>
      <guid>https://igeekfan.cn/igeekfan-docs/dotnetcore/lin-cms/aspnetcore-repository-unitofwork.html</guid>
      <source url="https://igeekfan.cn/igeekfan-docs/rss.xml">ASP.NETCore 下 FreeSql 的仓储事务</source>
      <pubDate>Sun, 12 Dec 2021 10:05:43 GMT</pubDate>
      <content:encoded><![CDATA[<h1 id="asp-netcore-下-freesql-的仓储事务" tabindex="-1"> ASP.NETCore 下 FreeSql 的仓储事务</h1>
<h4 id="第一步-配置-startup-cs-注入" tabindex="-1"> 第一步：配置 Startup.cs 注入</h4>
<p>引入包</p>
<div><pre><code>dotnet <span>add</span> package FreeSql
dotnet <span>add</span> package FreeSql<span>.</span>DbContext
dotnet <span>add</span> package FreeSql<span>.</span>Provider<span>.</span>MySqlConnector
</code></pre><div aria-hidden="true"><span>1</span><br><span>2</span><br><span>3</span><br></div></div><p>配置 Startup.cs 注入</p>
<div><pre><code><span>public</span> <span><span>void</span></span> <span>ConfigureServices</span><span>(</span><span>IServiceCollection</span> services<span>)</span>
<span>{</span>
  <span>IConfigurationSection</span> Mysql <span>=</span> Configuration<span>.</span><span>GetSection</span><span>(</span><span>"Mysql"</span><span>)</span><span>;</span>
        Fsql <span>=</span> <span>new</span> <span>FreeSqlBuilder</span><span>(</span><span>)</span>
            <span>.</span><span>UseConnectionString</span><span>(</span>DataType<span>.</span>MySql<span>,</span> Mysql<span>.</span>Value<span>)</span>
            <span>.</span><span>UseAutoSyncStructure</span><span>(</span><span>true</span><span>)</span>
            <span>.</span><span>UseNameConvert</span><span>(</span>NameConvertType<span>.</span>PascalCaseToUnderscoreWithLower<span>)</span>
            <span>.</span><span>UseMonitorCommand</span><span>(</span>cmd <span>=></span> Trace<span>.</span><span>WriteLine</span><span>(</span>cmd<span>.</span>CommandText<span>)</span><span>)</span>
            <span>.</span><span>Build</span><span>(</span><span>)</span><span>;</span>
    services<span>.</span><span><span>AddSingleton</span><span><span>&lt;</span>IFreeSql<span>></span></span></span><span>(</span>fsql<span>)</span><span>;</span>
    services<span>.</span><span><span>AddScoped</span><span><span>&lt;</span>UnitOfWorkManager<span>></span></span></span><span>(</span><span>)</span><span>;</span>
    services<span>.</span><span>AddFreeRepository</span><span>(</span><span>null</span><span>,</span> <span>typeof</span><span>(</span><span>Startup</span><span>)</span><span>.</span>Assembly<span>)</span><span>;</span>
    <span>//新增自己的服务，这里只有实现</span>
    services<span>.</span><span><span>AddScoped</span><span><span>&lt;</span>TransBlogService<span>></span></span></span><span>(</span><span>)</span><span>;</span>
<span>}</span>
</code></pre><div aria-hidden="true"><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br></div></div><ul>
<li>appsettings.json</li>
</ul>
<div><pre><code><span>{</span>
  <span>"Mysql"</span><span>:</span> <span>"Data Source=127.0.0.1;Port=3306;User ID=root;Password=root;Initial Catalog=ovov_freesql_repository;Charset=utf8;SslMode=none;Max pool size=10"</span>
<span>}</span>
</code></pre><div aria-hidden="true"><span>1</span><br><span>2</span><br><span>3</span><br></div></div><table>
<thead>
<tr>
<th>UnitOfWorkManager 成员</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>IUnitOfWork Current</td>
<td>返回当前的工作单元</td>
</tr>
<tr>
<td>void Binding(repository)</td>
<td>将仓储的事务交给它管理</td>
</tr>
<tr>
<td>IUnitOfWork Begin(propagation, isolationLevel)</td>
<td>创建工作单元</td>
</tr>
</tbody>
</table>
<ul>
<li>TransBlogService.cs</li>
</ul>
<div><pre><code><span>private</span> <span>readonly</span> <span>IBaseRepository<span>&lt;</span>Blog<span>,</span> <span>int</span><span>></span></span> _blogRepository<span>;</span>
<span>private</span> <span>readonly</span> <span>IBaseRepository<span>&lt;</span>Tag<span>,</span> <span>int</span><span>></span></span> _tagRepository<span>;</span>
<span>private</span> <span>readonly</span> <span>UnitOfWorkManager</span> _unitOfWorkManager<span>;</span>

<span>public</span> <span>TransBlogService</span><span>(</span><span>IBaseRepository<span>&lt;</span>Blog<span>,</span> <span>int</span><span>></span></span> blogRepository<span>,</span> <span>IBaseRepository<span>&lt;</span>Tag<span>,</span> <span>int</span><span>></span></span> tagRepository<span>,</span><span>UnitOfWorkManager</span> unitOfWorkManager<span>)</span>
<span>{</span>
    _blogRepository <span>=</span> blogRepository <span>;</span>
    _tagRepository <span>=</span> tagRepository <span>;</span>
    _unitOfWorkManager <span>=</span> unitOfWorkManager<span>;</span>
<span>}</span>

<span>public</span> <span>async</span> <span>Task</span> <span>CreateBlogUnitOfWorkAsync</span><span>(</span><span>Blog</span> blog<span>,</span>List<span>&lt;</span>Tag<span>></span>tagList<span>)</span>
<span>{</span>
    <span>using</span> <span>(</span><span>IUnitOfWork</span> unitOfWork <span>=</span> _unitOfWorkManager<span>.</span><span>Begin</span><span>(</span><span>)</span><span>)</span>
    <span>{</span>
        <span>try</span>
        <span>{</span>
            <span>await</span> _blogRepository<span>.</span><span>InsertAsync</span><span>(</span>blog<span>)</span><span>;</span>
            tagList<span>.</span><span>ForEach</span><span>(</span>r <span>=></span>
            <span>{</span>
                r<span>.</span>PostId <span>=</span> blog<span>.</span>Id<span>;</span>
            <span>}</span><span>)</span><span>;</span>
            <span>await</span> _tagRepository<span>.</span><span>InsertAsync</span><span>(</span>tagList<span>)</span><span>;</span>
            unitOfWork<span>.</span><span>Commit</span><span>(</span><span>)</span><span>;</span>
        <span>}</span>
        <span>catch</span> <span>(</span><span>Exception</span> e<span>)</span>
        <span>{</span>
            <span>//实际 可以不Rollback。因为IUnitOfWork内部Dispose，会把没有Commit的事务Rollback回来，但能提前Rollback</span>

            unitOfWork<span>.</span><span>Rollback</span><span>(</span><span>)</span><span>;</span>
            <span>//记录日志、或继续throw;出来</span>
        <span>}</span>
    <span>}</span>
<span>}</span>

<span>public</span> <span>async</span> <span>Task</span> <span>UpdateBlogAsync</span><span>(</span><span><span>int</span></span> id<span>)</span>
<span>{</span>
    <span>using</span> <span>(</span><span>IUnitOfWork</span> unitOfWork <span>=</span> _unitOfWorkManager<span>.</span><span>Begin</span><span>(</span><span>)</span><span>)</span>
    <span>{</span>
        <span>try</span>
        <span>{</span>
            <span>Blog</span> blog <span>=</span> _blogRepository<span>.</span>Select<span>.</span><span>Where</span><span>(</span>r <span>=></span> r<span>.</span>Id <span>==</span> id<span>)</span><span>.</span><span>First</span><span>(</span><span>)</span><span>;</span>
            blog<span>.</span>IsDeleted <span>=</span> <span>true</span><span>;</span>
            <span>await</span> _blogRepository<span>.</span><span>UpdateAsync</span><span>(</span>blog<span>)</span><span>;</span>
            unitOfWork<span>.</span><span>Commit</span><span>(</span><span>)</span><span>;</span>
        <span>}</span>
        <span>catch</span> <span>(</span><span>Exception</span> e<span>)</span>
        <span>{</span>
           <span>//记录日志、或继续throw;出来</span>
            unitOfWork<span>.</span><span>Rollback</span><span>(</span><span>)</span><span>;</span>
        <span>}</span>
    <span>}</span>
<span>}</span>
</code></pre><div aria-hidden="true"><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br><span>24</span><br><span>25</span><br><span>26</span><br><span>27</span><br><span>28</span><br><span>29</span><br><span>30</span><br><span>31</span><br><span>32</span><br><span>33</span><br><span>34</span><br><span>35</span><br><span>36</span><br><span>37</span><br><span>38</span><br><span>39</span><br><span>40</span><br><span>41</span><br><span>42</span><br><span>43</span><br><span>44</span><br><span>45</span><br><span>46</span><br><span>47</span><br><span>48</span><br><span>49</span><br><span>50</span><br><span>51</span><br><span>52</span><br><span>53</span><br></div></div><table>
<thead>
<tr>
<th>IUnitOfWork 成员</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>IFreeSql Orm</td>
<td>该对象 Select/Delete/Insert/Update/InsertOrUpdate 与工作单元事务保持一致，可省略传递 WithTransaction</td>
</tr>
<tr>
<td>DbTransaction GetOrBeginTransaction()</td>
<td>开启事务，或者返回已开启的事务</td>
</tr>
<tr>
<td>void Commit()</td>
<td>提交事务</td>
</tr>
<tr>
<td>void Rollback()</td>
<td>回滚事务</td>
</tr>
<tr>
<td>DbContext.EntityChangeReport EntityChangeReport</td>
<td>工作单元内的实体变化跟踪</td>
</tr>
</tbody>
</table>
<h4 id="完整的代码" tabindex="-1"> 完整的代码</h4>
<ul>
<li><a href="https://github.com/luoyunchong/dotnetcore-examples/blob/master/ORM/FreeSql/OvOv.Core/Domain/Blog.cs" target="_blank" rel="noopener noreferrer">Blog.cs</a></li>
<li><a href="https://github.com/luoyunchong/dotnetcore-examples/blob/master/ORM/FreeSql/OvOv.Core/Domain/Tag.cs" target="_blank" rel="noopener noreferrer">Tag.cs</a></li>
<li><a href="https://github.com/luoyunchong/dotnetcore-examples/blob/master/ORM/FreeSql/OvOv.FreeSql.AutoFac.DynamicProxy/Services/TransBlogService.cs" target="_blank" rel="noopener noreferrer">TransBlogService.cs</a></li>
</ul>
<p>以上使用的是泛型仓储，那我们如果是重写一个仓储 如何保持和<code>UnitOfWorkManager</code>同一个事务呢。
继承现有的<code>DefaultRepository&lt;,&gt;</code>仓储，实现自定义的仓储<code>BlogRepository.cs</code>,</p>
<div><pre><code>    <span>public</span> <span>class</span> <span>BlogRepository</span> <span>:</span> <span><span>DefaultRepository<span>&lt;</span>Blog<span>,</span> <span>int</span><span>></span></span><span>,</span> <span>IBlogRepository</span></span>
    <span>{</span>
        <span>public</span> <span>BlogRepository</span><span>(</span><span>UnitOfWorkManager</span> uowm<span>)</span> <span>:</span> <span>base</span><span>(</span>uowm<span>?.</span>Orm<span>,</span> uowm<span>)</span>
        <span>{</span>
        <span>}</span>

        <span>public</span> <span>List<span>&lt;</span>Blog<span>></span></span> <span>GetBlogs</span><span>(</span><span>)</span>
        <span>{</span>
            <span>return</span> Select<span>.</span><span>Page</span><span>(</span><span>1</span><span>,</span> <span>10</span><span>)</span><span>.</span><span>ToList</span><span>(</span><span>)</span><span>;</span>
        <span>}</span>
    <span>}</span>
</code></pre><div aria-hidden="true"><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br></div></div><p>其中接口。<code>IBlogRepository.cs</code></p>
<div><pre><code>    <span>public</span> <span>interface</span> <span>IBlogRepository</span> <span>:</span> <span><span>IBaseRepository<span>&lt;</span>Blog<span>,</span> <span>int</span><span>></span></span></span>
    <span>{</span>
        <span>List<span>&lt;</span>Blog<span>></span></span> <span>GetBlogs</span><span>(</span><span>)</span><span>;</span>
    <span>}</span>
</code></pre><div aria-hidden="true"><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br></div></div><p>在 startup.cs 注入此服务</p>
<div><pre><code>    services<span>.</span><span><span>AddScoped</span><span><span>&lt;</span>IBlogRepository<span>,</span> BlogRepository<span>></span></span></span><span>(</span><span>)</span><span>;</span>
</code></pre><div aria-hidden="true"><span>1</span><br></div></div>]]></content:encoded>
    </item>
    <item>
      <title>Autofac 依赖注入小知识</title>
      <link>https://igeekfan.cn/igeekfan-docs/dotnetcore/lin-cms/autofac.html</link>
      <guid>https://igeekfan.cn/igeekfan-docs/dotnetcore/lin-cms/autofac.html</guid>
      <source url="https://igeekfan.cn/igeekfan-docs/rss.xml">Autofac 依赖注入小知识</source>
      <pubDate>Sun, 12 Dec 2021 10:05:43 GMT</pubDate>
      <content:encoded><![CDATA[<h1 id="autofac-依赖注入小知识" tabindex="-1"> Autofac 依赖注入小知识</h1>
<h2 id="控制反转-依赖注入-ioc-di" tabindex="-1"> 控制反转/依赖注入 IOC/DI</h2>
<p>依赖接口而不依赖于实现，是面向对象的六大设计原则（SOLID)之一。即依赖倒置原则(<code>Dependence Inversion Principle</code>)</p>
<p>生命周期分为三种，具体如下</p>
<ul>
<li><code>Singleton</code> 单例（全局唯一实例）</li>
<li><code>Scoped</code> 范围 （在同一个生命周期内是同一个实例）</li>
<li><code>Transient</code> 瞬时（每次请求都是一个新的实例）</li>
</ul>
<h2 id="使用说明" tabindex="-1"> 使用说明</h2>
<p>创建<code>ASP.NET Core 3.0+</code>的项目，并安装<code>Autofac</code>包</p>
<div><pre><code>dotnet <span>add</span> package Autofac.Extensions.DependencyInjection
</code></pre><div aria-hidden="true"><span>1</span><br></div></div><p>在 Program 中 Host 主机指定 <code>.UseServiceProviderFactory(new AutofacServiceProviderFactory())</code>.</p>
<p>UseServiceProviderFactory 调用 Autofac 提供程序,附加到通用宿主机制。</p>
<div><pre><code>public class Program
{
<span><span> </span><span>   public static void Main(string[] args)
</span><span> </span><span>   {
</span><span> </span><span>       var host = Host.CreateDefaultBuilder(args)
</span></span><span><span>+</span><span>       .UseServiceProviderFactory(new AutofacServiceProviderFactory())
</span></span><span><span> </span><span>       .ConfigureWebHostDefaults(webHostBuilder => {
</span><span> </span><span>           webHostBuilder
</span><span> </span><span>           .UseContentRoot(Directory.GetCurrentDirectory())
</span><span> </span><span>           .UseIISIntegration()
</span><span> </span><span>           .UseStartup&lt;Startup>();
</span><span> </span><span>       })
</span><span> </span><span>       .Build();
</span></span>
<span><span> </span><span>       host.Run();
</span><span> </span><span>   }
</span></span>}
</code></pre><div aria-hidden="true"><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br></div></div><p>在 StartUp 中配置</p>
<div><pre><code>public class Startup
{
<span><span> </span><span> public Startup(IConfiguration configuration)
</span><span> </span><span> {
</span><span> </span><span>   this.Configuration = configuration;
</span><span> </span><span> }
</span></span>
<span><span> </span><span> public IConfiguration Configuration { get; private set; }
</span></span>
<span><span>+</span><span>  public ILifetimeScope AutofacContainer { get; private set; }
</span></span>
<span><span> </span><span> public void ConfigureServices(IServiceCollection services)
</span><span> </span><span> {
</span><span> </span><span>   services.AddOptions();
</span><span> </span><span> }
</span></span>
<span><span> </span><span> // ConfigureContainer is where you can register things directly
</span><span> </span><span> // with Autofac. This runs after ConfigureServices so the things
</span><span> </span><span> // here will override registrations made in ConfigureServices.
</span><span> </span><span> // Don't build the container; that gets done for you by the factory.
</span><span> </span><span> public void ConfigureContainer(ContainerBuilder builder)
</span><span> </span><span> {
</span><span> </span><span>   // Register your own things directly with Autofac here. Don't
</span><span> </span><span>   // call builder.Populate(), that happens in AutofacServiceProviderFactory
</span><span> </span><span>   // for you.
</span></span><span><span>+</span><span>    builder.RegisterModule(new MyApplicationModule());
</span></span><span><span> </span><span> }
</span></span>
<span><span> </span><span> public void Configure(
</span><span> </span><span>   IApplicationBuilder app,
</span><span> </span><span>   ILoggerFactory loggerFactory)
</span><span> </span><span> {
</span></span><span><span>+</span><span>   this.AutofacContainer = app.ApplicationServices.GetAutofacRoot();
</span></span>
<span><span> </span><span>   loggerFactory.AddConsole(this.Configuration.GetSection("Logging"));
</span><span> </span><span>   loggerFactory.AddDebug();
</span><span> </span><span>   app.UseMvc();
</span><span> </span><span> }
</span></span>}
</code></pre><div aria-hidden="true"><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br><span>24</span><br><span>25</span><br><span>26</span><br><span>27</span><br><span>28</span><br><span>29</span><br><span>30</span><br><span>31</span><br><span>32</span><br><span>33</span><br><span>34</span><br><span>35</span><br><span>36</span><br><span>37</span><br><span>38</span><br><span>39</span><br></div></div><p>定义注入实现</p>
<div><pre><code><span>public</span> <span>class</span> <span>MyApplicationModule</span> <span>:</span> <span><span>Autofac<span>.</span>Module</span></span>
<span>{</span>
    <span>protected</span> <span>override</span> <span><span>void</span></span> <span>Load</span><span>(</span><span>ContainerBuilder</span> builder<span>)</span>
    <span>{</span>
      builder<span>.</span><span><span>RegisterType</span><span><span>&lt;</span>HttpContextAccessor<span>></span></span></span><span>(</span><span>)</span><span>.</span><span><span>As</span><span><span>&lt;</span>IHttpContextAccessor<span>></span></span></span><span>(</span><span>)</span><span>.</span><span>SingleInstance</span><span>(</span><span>)</span><span>;</span>
    <span>}</span>
<span>}</span>
</code></pre><div aria-hidden="true"><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br></div></div><ul>
<li>注册泛型仓储</li>
</ul>
<div><pre><code>builder<span>.</span><span>RegisterGeneric</span><span>(</span><span>typeof</span><span>(</span><span>AuditBaseRepository<span>&lt;</span><span>></span></span><span>)</span><span>)</span><span>.</span><span>As</span><span>(</span><span>typeof</span><span>(</span><span>IAuditBaseRepository<span>&lt;</span><span>></span></span><span>)</span><span>)</span><span>.</span><span>InstancePerLifetimeScope</span><span>(</span><span>)</span><span>;</span>
builder<span>.</span><span>RegisterGeneric</span><span>(</span><span>typeof</span><span>(</span><span>AuditBaseRepository<span>&lt;</span><span>,</span><span>></span></span><span>)</span><span>)</span><span>.</span><span>As</span><span>(</span><span>typeof</span><span>(</span><span>IAuditBaseRepository<span>&lt;</span><span>,</span><span>></span></span><span>)</span><span>)</span><span>.</span><span>InstancePerLifetimeScope</span><span>(</span><span>)</span><span>;</span>
</code></pre><div aria-hidden="true"><span>1</span><br><span>2</span><br></div></div><ul>
<li>一个接口多个实现,使用 Named，区分、参数为字符串即可。</li>
</ul>
<p>注册服务</p>
<div><pre><code>builder<span>.</span><span><span>RegisterType</span><span><span>&lt;</span>IdentityServer4Service<span>></span></span></span><span>(</span><span>)</span><span>.</span><span><span>Named</span><span><span>&lt;</span>ITokenService<span>></span></span></span><span>(</span><span>typeof</span><span>(</span><span>IdentityServer4Service</span><span>)</span><span>.</span>Name<span>)</span><span>.</span><span>InstancePerLifetimeScope</span><span>(</span><span>)</span><span>;</span>
builder<span>.</span><span><span>RegisterType</span><span><span>&lt;</span>JwtTokenService<span>></span></span></span><span>(</span><span>)</span><span>.</span><span><span>Named</span><span><span>&lt;</span>ITokenService<span>></span></span></span><span>(</span><span>typeof</span><span>(</span><span>JwtTokenService</span><span>)</span><span>.</span>Name<span>)</span><span>.</span><span>InstancePerLifetimeScope</span><span>(</span><span>)</span><span>;</span>
</code></pre><div aria-hidden="true"><span>1</span><br><span>2</span><br></div></div><p>根据 Name 获取哪个服务</p>
<div><pre><code><span>private</span> <span>readonly</span> <span>ITokenService</span> _tokenService<span>;</span>
<span>public</span> <span>AccountController</span><span>(</span><span>IComponentContext</span> componentContext<span>,</span> <span>IConfiguration</span> configuration<span>)</span>
<span>{</span>
    <span><span>bool</span></span> isIdentityServer4 <span>=</span> configuration<span>.</span><span>GetSection</span><span>(</span><span>"Service:IdentityServer4"</span><span>)</span><span>.</span>Value<span>?.</span><span>ToBoolean</span><span>(</span><span>)</span> <span>??</span> <span>false</span><span>;</span>
    _tokenService <span>=</span> componentContext<span>.</span><span><span>ResolveNamed</span><span><span>&lt;</span>ITokenService<span>></span></span></span><span>(</span>isIdentityServer4 <span>?</span> <span>typeof</span><span>(</span><span>IdentityServer4Service</span><span>)</span><span>.</span>Name <span>:</span> <span>typeof</span><span>(</span><span>JwtTokenService</span><span>)</span><span>.</span>Name<span>)</span><span>;</span>
<span>}</span>
</code></pre><div aria-hidden="true"><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br></div></div><p>可通过 appsettings.json 中配置,可决定是哪个服务</p>
<div><pre><code>  <span>"Service"</span><span>:</span> <span>{</span>
    <span>"IdentityServer4"</span><span>:</span> <span>false</span>
  <span>}</span>
</code></pre><div aria-hidden="true"><span>1</span><br><span>2</span><br><span>3</span><br></div></div><ul>
<li>基于接口的注入</li>
</ul>
<p><code>AsImplementedInterfaces</code> Specifies that a type from a scanned assembly is registered as providing all of its implemented interfaces.
指定将扫描程序集中的类型注册为提供其所有实现的接口。</p>
<p>根据接口<code>ITransientDependency</code>可以得到有哪些类继承了此接口，并判断是类，不是抽象类，不是泛型。</p>
<p>所有继承类接口的类，将以接口的方式自动注入实例。可直接使用接口即可。</p>
<ul>
<li>InstancePerDependency 瞬时 （每次请求都是一个新的实例）</li>
<li>InstancePerLifetimeScope 范围（在同一个生命周期内是同一个实例）</li>
<li>SingleInstance 单例（全局唯一实例）</li>
</ul>
<div><pre><code>    <span>public</span> <span>class</span> <span>DependencyModule</span> <span>:</span> <span><span>Autofac<span>.</span>Module</span></span>
    <span>{</span>
        <span>protected</span> <span>override</span> <span><span>void</span></span> <span>Load</span><span>(</span><span>ContainerBuilder</span> builder<span>)</span>
        <span>{</span>
            <span>Assembly<span>[</span><span>]</span></span> currentAssemblies <span>=</span> AppDomain<span>.</span>CurrentDomain<span>.</span><span>GetAssemblies</span><span>(</span><span>)</span><span>.</span><span>Where</span><span>(</span>r <span>=></span> r<span>.</span>FullName<span>.</span><span>Contains</span><span>(</span><span>"LinCms."</span><span>)</span><span>)</span><span>.</span><span>ToArray</span><span>(</span><span>)</span><span>;</span>

            <span>//每次调用，都会重新实例化对象；每次请求都创建一个新的对象；</span>
            <span>Type</span> transientDependency <span>=</span> <span>typeof</span><span>(</span><span>ITransientDependency</span><span>)</span><span>;</span>
            builder<span>.</span><span>RegisterAssemblyTypes</span><span>(</span>currentAssemblies<span>)</span>
                <span>.</span><span>Where</span><span>(</span>t <span>=></span> transientDependency<span>.</span><span>GetTypeInfo</span><span>(</span><span>)</span><span>.</span><span>IsAssignableFrom</span><span>(</span>t<span>)</span> <span>&amp;&amp;</span> t<span>.</span>IsClass <span>&amp;&amp;</span> <span>!</span>t<span>.</span>IsAbstract <span>&amp;&amp;</span> <span>!</span>t<span>.</span>IsGenericType<span>)</span>
                <span>.</span><span>AsImplementedInterfaces</span><span>(</span><span>)</span><span>.</span><span>InstancePerDependency</span><span>(</span><span>)</span><span>;</span>

            <span>//同一个Lifetime生成的对象是同一个实例</span>
            <span>Type</span> scopeDependency <span>=</span> <span>typeof</span><span>(</span><span>IScopedDependency</span><span>)</span><span>;</span>
            builder<span>.</span><span>RegisterAssemblyTypes</span><span>(</span>currentAssemblies<span>)</span>
                <span>.</span><span>Where</span><span>(</span>t <span>=></span> scopeDependency<span>.</span><span>GetTypeInfo</span><span>(</span><span>)</span><span>.</span><span>IsAssignableFrom</span><span>(</span>t<span>)</span> <span>&amp;&amp;</span> t<span>.</span>IsClass <span>&amp;&amp;</span> <span>!</span>t<span>.</span>IsAbstract <span>&amp;&amp;</span> <span>!</span>t<span>.</span>IsGenericType<span>)</span>
                <span>.</span><span>AsImplementedInterfaces</span><span>(</span><span>)</span><span>.</span><span>InstancePerLifetimeScope</span><span>(</span><span>)</span><span>;</span>

            <span>//单例模式，每次调用，都会使用同一个实例化的对象；每次都用同一个对象；</span>
            <span>Type</span> singletonDependency <span>=</span> <span>typeof</span><span>(</span><span>ISingletonDependency</span><span>)</span><span>;</span>
            builder<span>.</span><span>RegisterAssemblyTypes</span><span>(</span>currentAssemblies<span>)</span>
                <span>.</span><span>Where</span><span>(</span>t <span>=></span> singletonDependency<span>.</span><span>GetTypeInfo</span><span>(</span><span>)</span><span>.</span><span>IsAssignableFrom</span><span>(</span>t<span>)</span> <span>&amp;&amp;</span> t<span>.</span>IsClass <span>&amp;&amp;</span> <span>!</span>t<span>.</span>IsAbstract <span>&amp;&amp;</span><span>!</span>t<span>.</span>IsGenericType<span>)</span>
                <span>.</span><span>AsImplementedInterfaces</span><span>(</span><span>)</span><span>.</span><span>SingleInstance</span><span>(</span><span>)</span><span>;</span>

        <span>}</span>
    <span>}</span>
</code></pre><div aria-hidden="true"><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br><span>24</span><br><span>25</span><br><span>26</span><br></div></div><p>如果不写继承，如何批量注入呢。 1.类名有规则 2.基于特殊标签 3.继承接口。</p>
<ul>
<li>类名有规则
比如仓储后缀，全是<code>Repository</code>,其中<code>Assembly</code>为仓储的实现所在程序集。将自动注入所有的仓储，仓储必须有接口。</li>
</ul>
<div><pre><code>    <span>Assembly</span> assemblysRepository <span>=</span> Assembly<span>.</span><span>Load</span><span>(</span><span>"LinCms.Infrastructure"</span><span>)</span><span>;</span>
    builder<span>.</span><span>RegisterAssemblyTypes</span><span>(</span>assemblysRepository<span>)</span>
            <span>.</span><span>Where</span><span>(</span>a <span>=></span> a<span>.</span>Name<span>.</span><span>EndsWith</span><span>(</span><span>"Repository"</span><span>)</span><span>)</span>
            <span>.</span><span>AsImplementedInterfaces</span><span>(</span><span>)</span>
            <span>.</span><span>InstancePerLifetimeScope</span><span>(</span><span>)</span><span>;</span>
</code></pre><div aria-hidden="true"><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br></div></div><ul>
<li>注入服务后就执行一段逻辑</li>
</ul>
<div><pre><code>builder<span>.</span><span><span>RegisterType</span><span><span>&lt;</span>MigrationStartupTask<span>></span></span></span><span>(</span><span>)</span><span>.</span><span>SingleInstance</span><span>(</span><span>)</span><span>;</span>
builder<span>.</span><span>RegisterBuildCallback</span><span>(</span><span>async</span> <span>(</span>c<span>)</span> <span>=></span> <span>await</span> c<span>.</span><span><span>Resolve</span><span><span>&lt;</span>MigrationStartupTask<span>></span></span></span><span>(</span><span>)</span><span>.</span><span>StartAsync</span><span>(</span><span>)</span><span>)</span><span>;</span>
</code></pre><div aria-hidden="true"><span>1</span><br><span>2</span><br></div></div><h3 id="动态代理" tabindex="-1"> 动态代理</h3>
<div><pre><code>dotnet <span>add</span> package Autofac<span>.</span>Extras<span>.</span>DynamicProxy
dotnet <span>add</span> package Castle<span>.</span>Core<span>.</span>AsyncInterceptor
</code></pre><div aria-hidden="true"><span>1</span><br><span>2</span><br></div></div><ul>
<li>服务注册</li>
</ul>
<p>AOP+属性注入+以后缀为 Service 的服务实现，注入 Scope 范围的生命周期+启用接口的拦截器。</p>
<ul>
<li>使用<code>EnableInterfaceInterceptors</code>创建执行拦截的接口代理，</li>
<li>使用<code>EnableClassInterceptors()</code> 动态对子类进行重写, 执行 virtual 方法的拦截</li>
</ul>
<div><pre><code>builder<span>.</span><span><span>RegisterType</span><span><span>&lt;</span>UnitOfWorkInterceptor<span>></span></span></span><span>(</span><span>)</span><span>;</span>
builder<span>.</span><span><span>RegisterType</span><span><span>&lt;</span>UnitOfWorkAsyncInterceptor<span>></span></span></span><span>(</span><span>)</span><span>;</span>


<span>List<span>&lt;</span>Type<span>></span></span> interceptorServiceTypes <span>=</span> <span>new</span> <span>List<span>&lt;</span>Type<span>></span></span><span>(</span><span>)</span>
<span>{</span>
    <span>typeof</span><span>(</span><span>UnitOfWorkInterceptor</span><span>)</span><span>,</span>
<span>}</span><span>;</span>

<span>Assembly</span> servicesDllFile <span>=</span> Assembly<span>.</span><span>Load</span><span>(</span><span>"LinCms.Application"</span><span>)</span><span>;</span>
builder<span>.</span><span>RegisterAssemblyTypes</span><span>(</span>servicesDllFile<span>)</span>
    <span>.</span><span>Where</span><span>(</span>a <span>=></span> a<span>.</span>Name<span>.</span><span>EndsWith</span><span>(</span><span>"Service"</span><span>)</span> <span>&amp;&amp;</span> <span>!</span>a<span>.</span>IsAbstract <span>&amp;&amp;</span> <span>!</span>a<span>.</span>IsInterface <span>&amp;&amp;</span> a<span>.</span>IsPublic<span>)</span>
    <span>.</span><span>AsImplementedInterfaces</span><span>(</span><span>)</span><span>//接口注入</span>
    <span>.</span><span>InstancePerLifetimeScope</span><span>(</span><span>)</span><span>//生命周期：范围</span>
    <span>.</span><span>PropertiesAutowired</span><span>(</span><span>)</span><span>// 属性注入</span>
    <span>.</span><span>InterceptedBy</span><span>(</span>interceptorServiceTypes<span>.</span><span>ToArray</span><span>(</span><span>)</span><span>)</span><span>//声明拦截器</span>
    <span>.</span><span>EnableInterfaceInterceptors</span><span>(</span><span>)</span><span>;</span><span>//启用接口的拦截器。</span>
</code></pre><div aria-hidden="true"><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br></div></div><p>这二个类，请参考如下代码</p>
<ul>
<li>同步：UnitOfWorkInterceptor.cs https://github.com/luoyunchong/lin-cms-dotnetcore/blob/master/src/LinCms.Web/Middleware/UnitOfWorkInterceptor.cs</li>
<li>异步拦截：UnitOfWorkAsyncInterceptor.cs https://github.com/luoyunchong/lin-cms-dotnetcore/blob/master/src/LinCms.Web/Middleware/UnitOfWorkInterceptor.cs</li>
</ul>
<p><code>Autofac.Extras.DynamicProxy</code>依赖 Castle.Core,即只支持同步方法的拦截。
异步方法的拦截需要安装包：<code>Castle.Core.AsyncInterceptor</code>。</p>
<ul>
<li>异步方法,分为有/无返回值：<code>async Task RunAsync()</code>,<code>asyn Task&lt;Result&gt; RunAsync()</code></li>
<li>同步方法：<code>void Run()</code>,<code>Result Run()</code></li>
</ul>
<h3 id="同步拦截" tabindex="-1"> 同步拦截</h3>
<p>1.定义拦截器</p>
<div><pre><code><span>public</span> <span>class</span> <span>CallLogger</span> <span>:</span> <span><span>IInterceptor</span></span>
<span>{</span>
  <span>TextWriter</span> _output<span>;</span>

  <span>public</span> <span>CallLogger</span><span>(</span><span>TextWriter</span> output<span>)</span>
  <span>{</span>
    _output <span>=</span> output<span>;</span>
  <span>}</span>

  <span>public</span> <span><span>void</span></span> <span>Intercept</span><span>(</span><span>IInvocation</span> invocation<span>)</span>
  <span>{</span>
    _output<span>.</span><span>Write</span><span>(</span><span>"Calling method {0} with parameters {1}... "</span><span>,</span>
      invocation<span>.</span>Method<span>.</span>Name<span>,</span>
      <span>string</span><span>.</span><span>Join</span><span>(</span><span>", "</span><span>,</span> invocation<span>.</span>Arguments<span>.</span><span>Select</span><span>(</span>a <span>=></span> <span>(</span>a <span>??</span> <span>""</span><span>)</span><span>.</span><span>ToString</span><span>(</span><span>)</span><span>)</span><span>.</span><span>ToArray</span><span>(</span><span>)</span><span>)</span><span>)</span><span>;</span>

    invocation<span>.</span><span>Proceed</span><span>(</span><span>)</span><span>;</span>

    _output<span>.</span><span>WriteLine</span><span>(</span><span>"Done: result was {0}."</span><span>,</span> invocation<span>.</span>ReturnValue<span>)</span><span>;</span>
  <span>}</span>
<span>}</span>
</code></pre><div aria-hidden="true"><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br></div></div><p>2.注册拦截器。</p>
<div><pre><code><span>// Named registration</span>
builder<span>.</span><span>Register</span><span>(</span>c <span>=></span> <span>new</span> <span>CallLogger</span><span>(</span>Console<span>.</span>Out<span>)</span><span>)</span>
       <span>.</span><span><span>Named</span><span><span>&lt;</span>IInterceptor<span>></span></span></span><span>(</span><span>"log-calls"</span><span>)</span><span>;</span>

<span>// Typed registration</span>
builder<span>.</span><span>Register</span><span>(</span>c <span>=></span> <span>new</span> <span>CallLogger</span><span>(</span>Console<span>.</span>Out<span>)</span><span>)</span><span>;</span>
</code></pre><div aria-hidden="true"><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br></div></div><p>将拦截器与要拦截的类型 关联</p>
<div><pre><code><span>[</span><span><span>Intercept</span><span><span>(</span><span>typeof</span><span>(</span><span>CallLogger</span><span>)</span><span>)</span></span></span><span>]</span>
<span>public</span> <span>class</span> <span>First</span>
<span>{</span>
  <span>public</span> <span>virtual</span> <span><span>int</span></span> <span>GetValue</span><span>(</span><span>)</span>
  <span>{</span>
    <span>// Do some calculation and return a value</span>
  <span>}</span>
<span>}</span>

<span>// This attribute will look for a NAMED</span>
<span>// interceptor registration:</span>
<span>[</span><span><span>Intercept</span><span><span>(</span><span>"log-calls"</span><span>)</span></span></span><span>]</span>
<span>public</span> <span>class</span> <span>Second</span>
<span>{</span>
  <span>public</span> <span>virtual</span> <span><span>int</span></span> <span>GetValue</span><span>(</span><span>)</span>
  <span>{</span>
    <span>// Do some calculation and return a value</span>
  <span>}</span>
<span>}</span>
</code></pre><div aria-hidden="true"><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br></div></div><h2 id="链接" tabindex="-1"> 链接</h2>
<ul>
<li>官网 https://autofac.org/</li>
<li>GitHub https://github.com/autofac/Autofac</li>
<li>文档 https://autofac.readthedocs.io/en/latest/</li>
</ul>
]]></content:encoded>
    </item>
    <item>
      <title>Scriban 模板语言</title>
      <link>https://igeekfan.cn/igeekfan-docs/dotnetcore/lin-cms/scriban-README.html</link>
      <guid>https://igeekfan.cn/igeekfan-docs/dotnetcore/lin-cms/scriban-README.html</guid>
      <source url="https://igeekfan.cn/igeekfan-docs/rss.xml">Scriban 模板语言</source>
      <pubDate>Sun, 12 Dec 2021 10:05:43 GMT</pubDate>
      <content:encoded><![CDATA[<h1 id="scriban-模板语言" tabindex="-1"> Scriban 模板语言</h1>
<h3 id="目录" tabindex="-1"> 目录</h3>
<ul>
<li><a href="https://www.cnblogs.com/igeekfan/p/13343331.html" target="_blank" rel="noopener noreferrer">【翻译】Scriban 是一种快速、强大、安全和轻量级的文本模板语言和.NET 引擎，具有解析 liquid 模板的兼容模式</a></li>
<li><a href="">【翻译】 Scriban language（ 待完成）</a></li>
<li><a href="">【翻译】Scriban runtime（ 待完成）</a></li>
<li>原文 Github：<a href="https://github.com/lunet-io/scriban#readme" target="_blank" rel="noopener noreferrer">https://github.com/lunet-io/scriban#readme</a></li>
</ul>
<p><a href="https://github.com/lunet-io/scriban/actions" target="_blank" rel="noopener noreferrer"><img src="https://github.com/lunet-io/scriban/workflows/ci/badge.svg?branch=master" alt="Build Status" loading="lazy"></a> <a href="https://coveralls.io/github/lunet-io/scriban?branch=master" target="_blank" rel="noopener noreferrer"><img src="https://coveralls.io/repos/github/lunet-io/scriban/badge.svg?branch=master" alt="Coverage Status" loading="lazy"></a> <a href="https://www.nuget.org/packages/Scriban/" target="_blank" rel="noopener noreferrer"><img src="https://img.shields.io/nuget/v/Scriban.svg" alt="NuGet" loading="lazy"></a></p>
<img  width="160px" height="160px" src="@source/dotnetcore/lin-cms/images/scriban.png">
<p>Scriban 是一种快速、强大、安全和轻量级的文本模板语言和.NET 引擎，具有解析<code>liquid</code>模板的兼容模式</p>
<div><pre><code><span>// Parse a scriban template</span>
<span><span>var</span></span> template <span>=</span> Template<span>.</span><span>Parse</span><span>(</span><span>"Hello {{name}}!"</span><span>)</span><span>;</span>
<span><span>var</span></span> result <span>=</span> template<span>.</span><span>Render</span><span>(</span><span>new</span> <span>{</span> Name <span>=</span> <span>"World"</span> <span>}</span><span>)</span><span>;</span> <span>// => "Hello World!"</span>
</code></pre><div aria-hidden="true"><span>1</span><br><span>2</span><br><span>3</span><br></div></div><p>使用 Liquid 语言解析 Liquid 模板：</p>
<div><pre><code><span>// Parse a liquid template</span>
<span><span>var</span></span> template <span>=</span> Template<span>.</span><span>ParseLiquid</span><span>(</span><span>"Hello {{name}}!"</span><span>)</span><span>;</span>
<span><span>var</span></span> result <span>=</span> template<span>.</span><span>Render</span><span>(</span><span>new</span> <span>{</span> Name <span>=</span> <span>"World"</span> <span>}</span><span>)</span><span>;</span> <span>// => "Hello World!"</span>
</code></pre><div aria-hidden="true"><span>1</span><br><span>2</span><br><span>3</span><br></div></div><p>语言非常通用，易于阅读和使用，类似于<a href="https://shopify.github.io/liquid/" target="_blank" rel="noopener noreferrer">liquid</a> 模板:</p>
<div><pre><code><span><span>var</span></span> template <span>=</span> Template<span>.</span><span>Parse</span><span>(</span><span>@"
&lt;ul id='products'>
  {{ for product in products }}
    &lt;li>
      &lt;h2>{{ product.name }}&lt;/h2>
           Price: {{ product.price }}
           {{ product.description | string.truncate 15 }}
    &lt;/li>
  {{ end }}
&lt;/ul>
"</span><span>)</span><span>;</span>
<span><span>var</span></span> result <span>=</span> template<span>.</span><span>Render</span><span>(</span><span>new</span> <span>{</span> Products <span>=</span> <span>this</span><span>.</span>ProductList <span>}</span><span>)</span><span>;</span>
</code></pre><div aria-hidden="true"><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br></div></div><blockquote>
<p><strong>注意</strong></p>
<p>默认情况下, .NET 对象的属性和方法会自动以小写和<code>_</code>命名，这意味着像<code>MyMethodIsNice</code>这样的属性将被公开为<code>my_method_is_nice</code>.这是默认约定，最初是为了匹配<code>liquid</code>模板的行为。
如果要改变此行为，则需要使用 <a href="/dotnetcore/lin-cms/doc/runtime.html#member-renamer"><code>MemberRenamer</code></a> 委托</p>
</blockquote>
<h2 id="特性" tabindex="-1"> 特性</h2>
<ul>
<li>非常<strong>高效</strong>,<strong>快速</strong> 解析器和<strong>轻量级</strong>的运行时. 对 CPU 和垃圾收集器友好. 查看</li>
<li><a href="https://github.com/lunet-io/scriban/blob/devel-3.0/doc/benchmarks.md" target="_blank" rel="noopener noreferrer">benchmarks</a>获取更多细节.</li>
<li>由 Lexer / Parser 提供一个<strong>完整的抽象语法树，fast, versatile and robust(快速，通用且强大)</strong>, 比基于 regex 的解析器更高效
<ul>
<li>错误报告:能提供精确的源代码位置 ，包括(path, column and line)</li>
<li><strong>将 AST 写入脚本文本的形式</strong>, 使用 <a href="https://github.com/lunet-io/scriban/blob/devel-3.0/doc/runtime.md#ast-to-text" target="_blank" rel="noopener noreferrer"><code>Template.ToText</code></a>, 可以操作内存中的脚本并将其重新保存到磁盘, 对于 <strong>roundtrip（往返）的脚本更新方案</strong>是有用的</li>
</ul>
</li>
<li><strong>兼容<code>liquid</code></strong> 模板 可使用<code>Template.ParseLiquid</code> 方法
<ul>
<li>虽然 <code>liquid</code> 语言不如<code>scriban</code>强大, 但该模式从 <code>liquid</code> 则更容易地迁移至 <code>scriban</code></li>
<li>在 <a href="https://github.com/lunet-io/scriban/blob/devel-3.0/doc/runtime.md#ast-to-text" target="_blank" rel="noopener noreferrer">AST to text</a> 模式下,将对模板<code>Template.ParseLiquid</code>进行解析，替换成<code>Template.ToText</code>,即可将<code>liquid</code> 脚本 转换成 <code>scriban</code> 脚本</li>
<li>由于 liquid 语言没有严格定义 并且它有着不同版本的 liquid 语法，在使用 scriban 的 liquid 模板时会有一些限制, 查看此文档了解详情 <a href="https://github.com/lunet-io/scriban/blob/devel-3.0/doc/liquid-support.md" target="_blank" rel="noopener noreferrer">liquid support in scriban</a></li>
</ul>
</li>
<li><strong>可扩展的运行时</strong> 提供许多扩展点</li>
<li>支持 <code>async</code>/<code>await</code> 的脚本支持 (e.g <code>Template.RenderAsync</code>)</li>
<li><a href="https://github.com/lunet-io/scriban/blob/devel-3.0/doc/language.md#14-whitespace-control" target="_blank" rel="noopener noreferrer">精确控制空白文本输出</a></li>
<li><a href="https://github.com/lunet-io/scriban/blob/devel-3.0/doc/language.md" target="_blank" rel="noopener noreferrer">完整的语言特性</a> 包括 <code>if</code>/<code>else</code>/<code>for</code>/<code>while</code>, <a href="/dotnetcore/lin-cms/doc/language.html#8-expressions">expressions</a> (<code>x = 1 + 2</code>), conditions... etc.</li>
<li><a href="https://github.com/lunet-io/scriban/blob/devel-3.0/doc/language.md#89-function-call-expression" target="_blank" rel="noopener noreferrer">函数调用和管道</a> (<code>myvar | string.capitalize</code>)
<ul>
<li><a href="https://github.com/lunet-io/scriban/blob/devel-3.0/doc/language.md#7-functions" target="_blank" rel="noopener noreferrer">自定义函数</a> 通过<code>func</code>语句直接将函数自定义到语言中 通过<code>alias @ directive</code>可使用<strong>function pointers/delegates</strong></li>
<li>从 runtime API 绑定 <a href="https://github.com/lunet-io/scriban/blob/devel-3.0/doc/runtime.md#imports-functions-from-a-net-class" target="_blank" rel="noopener noreferrer">.NET 自定义函数</a>，并提供许多与.NET 对象接口的<a href="https://github.com/lunet-io/scriban/blob/devel-3.0/doc/runtime.md#the-scriptobject" target="_blank" rel="noopener noreferrer">选项</a> 。</li>
</ul>
</li>
<li><a href="/dotnetcore/lin-cms/doc/language.html#5-objects">Complex objects (复杂对象)</a> (javascript/json like objects <code>x = {mymember: 1}</code>) and <a href="https://github.com/lunet-io/scriban/blob/devel-3.0/doc/language.md#6-arrays" target="_blank" rel="noopener noreferrer">arrays</a> (e.g <code>x = [1,2,3,4]</code>)</li>
<li>通常由<code>wrap</code>语句使用可以将 <a href="https://github.com/lunet-io/scriban/blob/devel-3.0/doc/language.md#98-wrap-function-arg1argn--end" target="_blank" rel="noopener noreferrer">a block of statements （语句块）</a> 传递给函数,</li>
<li>一些<a href="https://github.com/lunet-io/scriban/blob/devel-3.0/doc/builtins.md" target="_blank" rel="noopener noreferrer">内置函数</a>:
<ul>
<li><a href="https://github.com/lunet-io/scriban/blob/devel-3.0/doc/builtins.md#array-functions" target="_blank" rel="noopener noreferrer"><code>arrays functions</code></a></li>
<li><a href="https://github.com/lunet-io/scriban/blob/devel-3.0/doc/builtins.md#date-functions" target="_blank" rel="noopener noreferrer"><code>date</code></a></li>
<li><a href="https://github.com/lunet-io/scriban/blob/devel-3.0/doc/builtins.md#html-functions" target="_blank" rel="noopener noreferrer"><code>html</code></a></li>
<li><a href="https://github.com/lunet-io/scriban/blob/devel-3.0/doc/builtins.md#math-functions" target="_blank" rel="noopener noreferrer"><code>maths functions</code></a></li>
<li><a href="/dotnetcore/lin-cms/doc/builtins.html#object-functions"><code>object</code></a></li>
<li><a href="https://github.com/lunet-io/scriban/blob/devel-3.0/doc/builtins.md#regex-functions" target="_blank" rel="noopener noreferrer"><code>regex functions</code></a></li>
<li><a href="https://github.com/lunet-io/scriban/blob/devel-3.0/doc/builtins.md#string-functions" target="_blank" rel="noopener noreferrer"><code>string functions</code></a></li>
<li><a href="/dotnetcore/lin-cms/doc/builtins.html#timespan-functions"><code>timespan</code></a></li>
</ul>
</li>
<li><a href="https://github.com/lunet-io/scriban/blob/devel-3.0/doc/language.md#11-code-block" target="_blank" rel="noopener noreferrer">Multi-line statements 多行语句</a> 不必在每行都使用</li>
</ul>
<div><pre><code><span>{</span><span>{</span><span>..</span><span>.</span><span>}</span><span>}</span>
</code></pre><div aria-hidden="true"><span>1</span><br></div></div><ul>
<li><a href="https://github.com/lunet-io/scriban/blob/devel-3.0/doc/runtime.md#the-lexer-and-parser" target="_blank" rel="noopener noreferrer">Safe parser</a> and <a href="https://github.com/lunet-io/scriban/blob/devel-3.0/doc/runtime.md#safe-runtime" target="_blank" rel="noopener noreferrer">safe runtime</a>, 使您可以控制公开哪些对象和功能</li>
</ul>
<h2 id="syntax-coloring-语法着色" tabindex="-1"> Syntax Coloring(语法着色)</h2>
<p>您可以安装 <a href="https://marketplace.visualstudio.com/items?itemName=xoofx.scriban" target="_blank" rel="noopener noreferrer">Scriban Extension for Visual Studio Code</a> 获取 scriban 脚本 (without HTML) 和 scriban html 文件的语法颜色提示</p>
<h2 id="文档" tabindex="-1"> 文档</h2>
<ul>
<li>有关<a href="https://github.com/lunet-io/scriban/blob/devel-3.0/doc/language.md" target="_blank" rel="noopener noreferrer">语言语法</a>的说明，请参阅语言文档。</li>
<li>内置函数见文档<a href="https://github.com/lunet-io/scriban/blob/devel-3.0/doc/builtins.md" target="_blank" rel="noopener noreferrer">内置函数</a>列表。</li>
<li>有关编译和运行模板的.NET 运行时 API 的说明，请参阅<a href="https://github.com/lunet-io/scriban/blob/devel-3.0/doc/runtime.md" target="_blank" rel="noopener noreferrer">运行时</a>文档。</li>
<li>有关支持 liquid 模板的更多详细信息，请参阅[Liquid support]文档。</li>
<li>请参阅我的博客文章&quot;<a href="http://xoofx.com/blog/2017/11/13/implementing-a-text-templating-language-and-engine-for-dotnet/" target="_blank" rel="noopener noreferrer">实现.NET 的文本模板引擎</a>&quot;，了解一些幕后细节。</li>
</ul>
<h2 id="二进制包" tabindex="-1"> 二进制包</h2>
<p>Scriban 提供一个可获取的 NuGet 包: <a href="https://www.nuget.org/packages/Scriban/" target="_blank" rel="noopener noreferrer"><img src="https://img.shields.io/nuget/v/Scriban.svg" alt="NuGet" loading="lazy"></a></p>
<p>兼容以下 .NET framework 版本:</p>
<ul>
<li>.NET Framework 3.5</li>
<li>.NET Framework 4.0</li>
<li>.NET Framework 4.5+ (supports asynchronous code and timeouts for regular expressions)</li>
<li>.NET Standard1.1+ (some features are not available)</li>
<li>.NET Standard1.3+ (which means .NET Core, Xamarin, UWP, Unity etc.)</li>
</ul>
<p>还有提供签名的 NuGet 包 <a href="https://www.nuget.org/packages/Scriban.Signed/" target="_blank" rel="noopener noreferrer">Scriban.Signed</a></p>
<h2 id="benchmarks-基准测试" tabindex="-1"> Benchmarks（基准测试）</h2>
<p><strong>Scriban 速度极快</strong>! 更多细节, 你可以查看此文档 <a href="https://github.com/lunet-io/scriban/blob/devel-3.0/doc/benchmarks.md" target="_blank" rel="noopener noreferrer">benchmarks（基准测试） 文档</a>.</p>
<h2 id="license" tabindex="-1"> License</h2>
<p>该软件是在<a href="https://opensource.org/licenses/BSD-2-Clause" target="_blank" rel="noopener noreferrer">BSD-Clause 2 license</a>协议下发布的</p>
<h2 id="相关项目" tabindex="-1"> 相关项目</h2>
<ul>
<li><a href="https://github.com/dotliquid/dotliquid" target="_blank" rel="noopener noreferrer">dotliquid</a>: Liquid 模板语言的.NET 端口。</li>
<li><a href="https://github.com/sebastienros/fluid/" target="_blank" rel="noopener noreferrer">Fluid</a> .NET liquid 模板引擎</li>
<li><a href="https://github.com/jdiamond/Nustache" target="_blank" rel="noopener noreferrer">Nustache</a>: .NET 无逻辑模板（Logic-less templates for .NET）</li>
<li><a href="https://github.com/rexm/Handlebars.Net" target="_blank" rel="noopener noreferrer">Handlebars.Net</a>: .NET port of handlebars.js</li>
</ul>
<h2 id="在线示例" tabindex="-1"> 在线示例</h2>
<ul>
<li><a href="https://scribanonline.azurewebsites.net/" target="_blank" rel="noopener noreferrer">https://scribanonline.azurewebsites.net/)</a>: ASP.NET Core Sample.</li>
</ul>
<h2 id="credits" tabindex="-1"> Credits</h2>
<p>Adapted logo <code>Puzzle</code> by <a href="https://thenounproject.com/andydoane/" target="_blank" rel="noopener noreferrer">Andrew Doane</a> from the Noun Project</p>
<h2 id="作者" tabindex="-1"> 作者</h2>
<p>Alexandre Mutel aka <a href="http://xoofx.com" target="_blank" rel="noopener noreferrer">xoofx</a>.</p>
]]></content:encoded>
      <enclosure url="https://github.com/lunet-io/scriban/workflows/ci/badge.svg?branch=master" type="image/"/>
    </item>
    <item>
      <title>LinCms.Scaffolding 代码生成器</title>
      <link>https://igeekfan.cn/igeekfan-docs/dotnetcore/lin-cms/lincms-scaffolding.html</link>
      <guid>https://igeekfan.cn/igeekfan-docs/dotnetcore/lin-cms/lincms-scaffolding.html</guid>
      <source url="https://igeekfan.cn/igeekfan-docs/rss.xml">LinCms.Scaffolding 代码生成器</source>
      <pubDate>Sun, 26 Jul 2020 16:18:09 GMT</pubDate>
      <content:encoded><![CDATA[<h1 id="lincms-scaffolding-代码生成器" tabindex="-1"> LinCms.Scaffolding 代码生成器</h1>
<p><a href="https://github.com/luoyunchong/lin-cms-dotnetcore/tree/dev" target="_blank" rel="noopener noreferrer">https://github.com/luoyunchong/lin-cms-dotnetcore/tree/dev</a></p>
<p>打开项目 LinCms.Scaffolding.sln。</p>
<p>看到 appsettings.json 配置如下</p>
<div><pre><code><span>{</span>
  <span>"SettingOptions"</span><span>:</span> <span>{</span>
    <span>"ProjectName"</span><span>:</span> <span>"LinCms"</span><span>,</span>
    <span>"BaseDirectory"</span><span>:</span> <span>"D:/code/github/lin-cms-dotnetcore/src/LinCms.Core/"</span>
    <span>"EntityFilePath"</span><span>:</span> <span>"Entities/Base/Doc.cs"</span><span>,</span>
    <span>"Areas"</span><span>:</span> <span>"Base"</span><span>,</span>
    <span>"TemplatePath"</span><span>:</span> <span>"./Templates"</span><span>,</span>
    <span>"OutputDirectory"</span><span>:</span> <span>"D:/code/github/lin-cms-dotnetcore/code-scaffolding"</span>
  <span>}</span>
<span>}</span>
</code></pre><div aria-hidden="true"><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br></div></div><p>完成一个简单的表的 CRUD，只需要，创建一个实体类，修改一下上面的配置项，即可生成代码。</p>
<ul>
<li>BaseDirectory:BaseDirectory 请配置成 LinCms.Core 的项目路径。后缀要加/</li>
</ul>
<p>由于项目使用<strong>Microsoft.CodeAnalysis.CSharp</strong>解析出类的属性，需要知道项目的在哪个位置。</p>
<p>另外，本项目，会根据 LinCms.Core.xml 中的内容解析出类和属性的注释。</p>
<ul>
<li>EntityFilePath 实体类所在文件位置</li>
<li>Areas 区域模块名,eg:(Base)</li>
<li>TemplatePath 相对路径，当前项目下的 Templates 目录,不需要修改</li>
<li>OutputDirectory 生成的代码路径。可以是相对路径，也可以是绝对路径</li>
</ul>
<p>我们在 LinCms.Core 中的 Entities 中 Base 目录，新建一个类 Doc.cs，并写上注释信息，以便生成列表和表单。</p>
<div><pre><code><span>using</span> <span>FreeSql<span>.</span>DataAnnotations</span><span>;</span>
<span>using</span> <span>System</span><span>;</span>
<span>using</span> <span>System<span>.</span>Collections<span>.</span>Generic</span><span>;</span>
<span>using</span> <span>System<span>.</span>Text</span><span>;</span>

<span>namespace</span> <span>LinCms<span>.</span>Entities<span>.</span>Base</span>
<span>{</span>
    <span>/// <span><span><span>&lt;</span>summary</span><span>></span></span></span>
    <span>/// 文档</span>
    <span>/// <span><span><span>&lt;/</span>summary</span><span>></span></span></span>
    <span>public</span> <span>class</span> <span>Doc</span> <span>:</span> <span><span>FullAduitEntity</span></span>
    <span>{</span>
        <span>/// <span><span><span>&lt;</span>summary</span><span>></span></span></span>
        <span>/// 文档名</span>
        <span>/// <span><span><span>&lt;/</span>summary</span><span>></span></span></span>
        <span>[</span><span>Column</span><span>(</span>StringLength <span>=</span> <span>50</span><span>)</span><span>]</span>
        <span>public</span> <span><span>string</span></span> Name <span>{</span> <span>get</span><span>;</span> <span>set</span><span>;</span> <span>}</span>

        <span>/// <span><span><span>&lt;</span>summary</span><span>></span></span></span>
        <span>/// 显示名</span>
        <span>/// <span><span><span>&lt;/</span>summary</span><span>></span></span></span>
        <span>[</span><span>Column</span><span>(</span>StringLength <span>=</span> <span>50</span><span>)</span><span>]</span>
        <span>public</span> <span><span>string</span></span> DisplayName <span>{</span> <span>get</span><span>;</span> <span>set</span><span>;</span> <span>}</span>

    <span>}</span>
<span>}</span>
</code></pre><div aria-hidden="true"><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br><span>24</span><br><span>25</span><br><span>26</span><br></div></div><p>我们可以根据需要，修改上面的配置信息。</p>
<p>我们可以打开 Lincms 的项目。删除所有的 Docs 相关的代码。</p>
<p>然后运行此代码生成器。即可生成所有 CRUD 代码。然后。代码会输出到此目录 <strong>&quot;D:/code/github/lin-cms-dotnetcore/code-scaffolding&quot;</strong>,</p>
<p><img src="https://pic.downk.cc/item/5f1da73014195aa594ee9888.jpg" alt="" loading="lazy"></p>
<p>然后。我们将前五个代码，依次复制到项目中，因为可能覆盖现有的代码，所以不推荐将此代码的输出目录写成<strong>D:/code/github/lin-cms-dotnetcore/src</strong>。</p>
<p>然后将最后一个 lin-cms-vue。按模块复制到自己项目中即可。</p>
]]></content:encoded>
      <enclosure url="https://pic.downk.cc/item/5f1da73014195aa594ee9888.jpg" type="image/jpeg"/>
    </item>
    <item>
      <title>后端快速上手</title>
      <link>https://igeekfan.cn/igeekfan-docs/dotnetcore/lin-cms/cms-start.html</link>
      <guid>https://igeekfan.cn/igeekfan-docs/dotnetcore/lin-cms/cms-start.html</guid>
      <source url="https://igeekfan.cn/igeekfan-docs/rss.xml">后端快速上手</source>
      <pubDate>Fri, 24 Jul 2020 17:10:08 GMT</pubDate>
      <content:encoded><![CDATA[<h1 id="后端快速上手" tabindex="-1"> 后端快速上手</h1>
<p>本小节我们将在 lin-cms 的基础上开发一个简单的图书管理 demo,帮助大家来熟悉和入门 lin-cms。</p>
<p>lin-cms 是一个 lin 团队经数打磨的模板项目，本人是 c#的开发者，为 lin-cms 完善在.net 下的生态，是基于 asp.netcore 的基础上，沉淀下来的一套实践， 帮助开发者节约时间。</p>
<blockquote>
<p>注意：本小节建立在你有一定的 asp.net mvc，freesql，.net core 的基础上。</p>
</blockquote>
<h2 id="数据层" tabindex="-1"> 数据层</h2>
<p>由于我们用的.net core 中优秀的开源项目 FreeSql,codefirst 模式，他能根据类生成表结构。所以，不需要我们手动创建表结构。</p>
<h3 id="book-书" tabindex="-1"> book 书</h3>
<table>
<thead>
<tr>
<th>字段</th>
<th>类型</th>
<th>备注</th>
</tr>
</thead>
<tbody>
<tr>
<td>id</td>
<td>bigint</td>
<td>主键 Id</td>
</tr>
<tr>
<td>author</td>
<td>varchar</td>
<td>作者</td>
</tr>
<tr>
<td>image</td>
<td>varchar</td>
<td>图片</td>
</tr>
<tr>
<td>summary</td>
<td>varchar</td>
<td>简介</td>
</tr>
<tr>
<td>title</td>
<td>varchar</td>
<td>标题</td>
</tr>
</tbody>
</table>
<p>可增加一些审计字段，如</p>
<table>
<thead>
<tr>
<th>字段</th>
<th>类型</th>
<th>备注</th>
</tr>
</thead>
<tbody>
<tr>
<td>create_time</td>
<td>datetime</td>
<td>创建时间</td>
</tr>
<tr>
<td>create_user_id</td>
<td>datetime</td>
<td>创建者 ID</td>
</tr>
<tr>
<td>update_time</td>
<td>datetime</td>
<td>修改时间</td>
</tr>
<tr>
<td>update_user_id</td>
<td>datetime</td>
<td>最后修改人 Id</td>
</tr>
<tr>
<td>delete_time</td>
<td>datetime</td>
<td>删除时间</td>
</tr>
<tr>
<td>delete_user_id</td>
<td>datetime</td>
<td>删除人 id</td>
</tr>
<tr>
<td>is_deleted</td>
<td>datetime</td>
<td>是否删除</td>
</tr>
</tbody>
</table>
<p>审计字段可通过继承父类<strong>FullAduitEntity</strong>即可,当然，也可只有创建时间，创建人二个字段，继承<strong>ICreateAduitEntity</strong>接口，实现二个字段即可。如果不想要这些记录，只需要继承<strong>Entity</strong>类，仅有一个 ID 字段，支持泛型。</p>
<p><strong>is_deleted</strong>字段本身没有什么稀奇的，但我们可以配合 FreeSql 实现逻辑删除（软删除），在 LinCms.Web/Configs/DependencyInjectionExtensions.cs 文件中。配置 了如下内容，如果我们筛选数据时，会全局启用 <a href="https://github.com/dotnetcore/FreeSql/wiki/%E8%BF%87%E6%BB%A4%E5%99%A8" target="_blank" rel="noopener noreferrer">过滤器</a>。像创建时间，创建人。这些字段都不需要我们赋值，如果我们全部使用仓储<strong>IAuditBaseRepository</strong>访问数据库，这些字段会自动赋值。</p>
<div><pre><code>fsql.GlobalFilter.Apply&lt;IDeleteAduitEntity>("IsDeleted", a => a.IsDeleted == false);
</code></pre><div aria-hidden="true"><span>1</span><br></div></div><h2 id="模型层" tabindex="-1"> 模型层</h2>
<p>我们建立单纯的实体类（Entities)，在路径<strong>lin-cms-dotnetcore\src\LinCms.Core\Entities</strong>,名为 Book.cs 的实体类</p>
<div><pre><code><span>using</span> <span>FreeSql<span>.</span>DataAnnotations</span><span>;</span>

<span>namespace</span> <span>LinCms<span>.</span>Core<span>.</span>Entities</span>
<span>{</span>
    <span>[</span><span><span>Table</span><span><span>(</span>Name <span>=</span> <span>"book"</span><span>)</span></span></span><span>]</span>
    <span>public</span> <span>class</span> <span>Book</span> <span>:</span> <span><span>FullAduitEntity</span></span>
    <span>{</span>
        <span>[</span><span><span>Column</span><span><span>(</span>DbType <span>=</span> <span>"varchar(30)"</span><span>)</span></span></span><span>]</span>
        <span>public</span> <span><span>string</span></span> Author <span>{</span> <span>get</span><span>;</span> <span>set</span><span>;</span> <span>}</span> <span>=</span> <span>string</span><span>.</span>Empty<span>;</span>

        <span>[</span><span><span>Column</span><span><span>(</span>DbType <span>=</span> <span>"varchar(50)"</span><span>)</span></span></span><span>]</span>
        <span>public</span> <span><span>string</span></span> Image <span>{</span> <span>get</span><span>;</span> <span>set</span><span>;</span> <span>}</span> <span>=</span> <span>string</span><span>.</span>Empty<span>;</span>

        <span>[</span><span><span>Column</span><span><span>(</span>DbType <span>=</span> <span>"varchar(1000)"</span><span>)</span></span></span><span>]</span>
        <span>public</span> <span><span>string</span></span> Summary <span>{</span> <span>get</span><span>;</span> <span>set</span><span>;</span> <span>}</span> <span>=</span> <span>string</span><span>.</span>Empty<span>;</span>

        <span>[</span><span><span>Column</span><span><span>(</span>DbType <span>=</span> <span>"varchar(50)"</span><span>)</span></span></span><span>]</span>
        <span>public</span> <span><span>string</span></span> Title <span>{</span> <span>get</span><span>;</span> <span>set</span><span>;</span> <span>}</span> <span>=</span> <span>string</span><span>.</span>Empty<span>;</span>
    <span>}</span>
<span>}</span>
</code></pre><div aria-hidden="true"><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br></div></div><p>更多特性标签支持情况，请查看<a href="https://github.com/dotnetcore/FreeSql/wiki/%E5%AE%9E%E4%BD%93%E7%89%B9%E6%80%A7" target="_blank" rel="noopener noreferrer">FreeSql 官方文档实体特性</a>。</p>
<p>由于默认 FreeSql,只有访问到这个类时才会生成表，但我们可以手动扫描所有带有 Table 特性标签的类，同步表结构。仅建议开发时启动表结构全部同步。</p>
<p>LinCms.Web/Configs/DependencyInjectionExtensions.cs
中的 AddContext 配置项中.</p>
<div><pre><code>//在运行时直接生成表结构
fsql.CodeFirst.SyncStructure(ReflexHelper.GetEntityTypes(typeof(IEntity)));
</code></pre><div aria-hidden="true"><span>1</span><br><span>2</span><br></div></div><h2 id="业务层" tabindex="-1"> 业务层</h2>
<p>有了实体类，我们创建 IBookRepository<code>&lt;Book,long&gt;</code>，也可以不创建，直接使用 IAuditBaseRepository<code>&lt;Book&gt;</code>在 Service 层写相应的业务。这里我们就不创建仓储服务了，框架中携带的仓储已经满足我们的要求。</p>
<p>仓储是什么呢。在这里我们可以理解 DAL,也理解为仓库，他提供了对单个表的 CURD 操作方法，有了一个统一的规范。</p>
<p>作用即数据的持久化，应用服务通过仓储对数据进行操作，让开发者不用关注仓储内部的实现。</p>
<p>业务层 Services，我们直接使用仓储访问数据库。</p>
<p>在 LinCms.Application.Contracts 项目中，在 v1 文件夹新建一个 Books 的文件夹,用于存放书的相关接口，创建 IBookService 的接口</p>
<div><pre><code>using System.Threading.Tasks;
using LinCms.Application.Contracts.v1.Books.Dtos;
using LinCms.Core.Data;

namespace LinCms.Application.Contracts.v1.Books
{
    public interface IBookService
    {
        Task&lt;BookDto> GetAsync(long id);
    }
}
</code></pre><div aria-hidden="true"><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br></div></div><p>新建一个 Dtos 文件夹，用于存放业务传输的数据对象，再创建一个 BookDto，仅包含必要的字段，而非全部。该类以 Dto 结尾，代表数据传输对象。</p>
<div><pre><code>using System;
using LinCms.Core.Entities;

namespace LinCms.Application.Contracts.v1.Books.Dtos
{
    public class BookDto:EntityDto
    {
        public string Author { get; set; }
        public string Image { get; set; }
        public string Summary { get; set; }
        public string Title { get; set; }
        public DateTime CreateTime { get; set; }
        public DateTime UpdateTime { get; set; }
    }
}

</code></pre><div aria-hidden="true"><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br></div></div><p>在 BookService 实现如下，在这里我们注入 IAuditBaseRepository，通过 调用 <strong>_bookRepository.Select.Where(a =&gt; a.Id == id).ToOneAsync();</strong> ,根据 id 得到书的实体对象。然后使用 AutoMappeer,将 Book 类转换成 BookDto 类，然后返回。
至于为什么 这里我们可以注入 IAuditBaseRepository，IMapper 类，后面我们会讲到。</p>
<div><pre><code>using System.Collections.Generic;
using System.Linq;
using System.Threading.Tasks;
using AutoMapper;
using LinCms.Application.Contracts.v1.Books;
using LinCms.Application.Contracts.v1.Books.Dtos;
using LinCms.Core.Data;
using LinCms.Core.Entities;
using LinCms.Core.Exceptions;
using LinCms.Core.Extensions;
using LinCms.Core.IRepositories;

namespace LinCms.Application.v1.Books
{
    public class BookService : IBookService
    {
        private readonly IAuditBaseRepository&lt;Book> _bookRepository;
        private readonly IMapper _mapper;
        public BookService(IAuditBaseRepository&lt;Book> bookRepository, IMapper mapper)
        {
            _bookRepository = bookRepository;
            _mapper = mapper;
        }


        public async Task&lt;BookDto> GetAsync(long id)
        {
            Book book = await _bookRepository.Select.Where(a => a.Id == id).ToOneAsync();
            return _mapper.Map&lt;BookDto>(book);
        }
    }
}
</code></pre><div aria-hidden="true"><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br><span>24</span><br><span>25</span><br><span>26</span><br><span>27</span><br><span>28</span><br><span>29</span><br><span>30</span><br><span>31</span><br><span>32</span><br></div></div><p>因为使用 AutoMapper 简化二个对象的映射，我们在同一目录下，创建一个继承 Profile 类的配置项。在构造函数中，我们配置了调用 CreateMap 方法，代表，从 Book-&gt;BookDto 的映射关系。</p>
<div><pre><code>using AutoMapper;
using LinCms.Application.Contracts.v1.Books.Dtos;
using LinCms.Core.Entities;

namespace LinCms.Application.v1.Books
{
    public class BookProfile:Profile
    {
        public BookProfile()
        {
            CreateMap&lt;Book, BookDto>();
        }
    }
}

</code></pre><div aria-hidden="true"><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br></div></div><p>在 ASP.NET Core 中，我们会扫描该程序集（LinCms.Applicaiton）中所有继承了 Profile 类的子类，在 LinCms.Web 中 ConfiguartionService 配置如下，</p>
<div><pre><code>services.AddAutoMapper(typeof(BookProfile).Assembly);
</code></pre><div aria-hidden="true"><span>1</span><br></div></div><p>一个项目即一个程序集(生成一个 dll)，仅配置一次。</p>
<p>我们完善一下控制器的代码。</p>
<div><pre><code>using System.Threading.Tasks;
using AutoMapper;
using LinCms.Application.Contracts.v1.Books;
using LinCms.Application.Contracts.v1.Books.Dtos;
using LinCms.Core.Aop;
using LinCms.Core.Aop.Filter;
using LinCms.Core.Data;
using LinCms.Core.Entities;
using LinCms.Core.Exceptions;
using LinCms.Core.Extensions;
using LinCms.Core.IRepositories;
using LinCms.Web.Data.Authorization;
using Microsoft.AspNetCore.Authorization;
using Microsoft.AspNetCore.Mvc;

namespace LinCms.Web.Controllers.v1
{
    [Route("v1/book")]
    [ApiController]
    [Authorize]
    public class BookController : ControllerBase
    {
        private readonly IBookService _bookService;
        public BookController(IBookService bookService)
        {
            _bookService = bookService;
        }

        [HttpGet("{id}")]
        public async Task&lt;BookDto> GetAsync(int id)
        {
            return await _bookService.GetAsync(id);
        }
    }
}
</code></pre><div aria-hidden="true"><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br><span>24</span><br><span>25</span><br><span>26</span><br><span>27</span><br><span>28</span><br><span>29</span><br><span>30</span><br><span>31</span><br><span>32</span><br><span>33</span><br><span>34</span><br><span>35</span><br></div></div><p>在 LinCms.Web/Controllers/v1 文件夹，创建我们的 Book 控制器。
我们依旧通过构造函数注入服务<strong>IBookService</strong>,这里用到的是 async await 方法，与同步方法执行顺序一致，仅多二个关键字，并使用 Task&lt;返回值&gt;来返回数据，通常我们使用 Async 标识异步方法。</p>
<p>启动项目，可通过 Visual Studio 点击上方的运行即可。</p>
<p>还可通过终端运行项目</p>
<p>先 cd 到目录 lin-cms-dotnetcore/src/LinCms.Web</p>
<div><pre><code>dotnet run
</code></pre><div aria-hidden="true"><span>1</span><br></div></div><p>打开浏览器，https://localhost:5001/swagger/index.html， ctrl+f 搜索，book，找到 GET /v1/book/{id}，点击 try it out,输入 id，点击 Execute。</p>
<p>因为我们没登录登录，在 BookController 上写了特性标签 <strong>[Authorize]</strong> ，所以会返回</p>
<div><pre><code>{
  "code": 10000,
  "message": "请先登录",
  "request": "GET /v1/book/131"
}
</code></pre><div aria-hidden="true"><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br></div></div><p>我们可以先去掉这个特性标签，也可以走登录浏览，把 Token 放到 Header 中的 Authoriaztion 中。。</p>
<p>这里我们先去掉这行特性标签。去掉后，需要 ctrl+c，即出运行状态，如果感觉麻烦，可以使用 <strong>dotnet run watch</strong> 命令，修改后，自动重启，不需要手动重启。。</p>
<p>这里我们重新测试，手动给数据库加一些数据，记得 is_deleted 要是 false，然后输入对应的 id，会得到对应的值</p>
<div><pre><code>{
  "author": "891dc185-2",
  "image": "f6d0c1e9-fcb2-446a-9093-d773e6515579",
  "summary": "8aea38f8-a6e0-4053-bd7a-ae4476432bdd",
  "title": "2d0c2e44-ee02-4d40-b4b7-eed03bb48aa4",
  "create_time": 1588485910430,
  "update_time": 1588485910430,
  "id": 139
}
</code></pre><div aria-hidden="true"><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br></div></div>]]></content:encoded>
    </item>
    <item>
      <title>GitHub Actions</title>
      <link>https://igeekfan.cn/igeekfan-docs/dotnetcore/lin-cms/github-actions.html</link>
      <guid>https://igeekfan.cn/igeekfan-docs/dotnetcore/lin-cms/github-actions.html</guid>
      <source url="https://igeekfan.cn/igeekfan-docs/rss.xml">GitHub Actions</source>
      <pubDate>Fri, 24 Jul 2020 17:10:08 GMT</pubDate>
      <content:encoded><![CDATA[<h1 id="github-actions" tabindex="-1"> GitHub Actions</h1>
<h2 id="gitee-与-github-自动同步" tabindex="-1"> Gitee 与 GitHub 自动同步</h2>
<p>当 github 上的项目代码 master 分支提交后，gitee 自动同步。如何实现呢。主要通过 github action 实现</p>
<p>我们想将 luoyunchong/lin-cms-dotnetcore 同步到 igeekfan/lin-cms-dotnetcore 上面，需要做的非常简单，只需要 2 步：</p>
<p>1.将 Gitee 的私钥，上传到项目的 setting 的 Secrets 中。
<a href="https://pic.downk.cc/item/5e9725f5c2a9a83be5dcdec3.png" target="_blank" rel="noopener noreferrer"><img src="https://pic.downk.cc/item/5e9725f5c2a9a83be5dcdec3.png" alt="" loading="lazy"></a></p>
<p>前提，该私钥对应的公钥在 gitee 上，windows(C:\Users\Computer.ssh)，其中 id_rsa 是私钥，id_rsa.pub 内容是公钥，具体在 gitee 上增加 ssh 公钥的过程，请参考<a href="https://gitee.com/help/articles/4191" target="_blank" rel="noopener noreferrer">SSH 公钥设置</a></p>
<ol start="2">
<li>改 source-repo、destination-repo 的值</li>
</ol>
<h2 id="lin-cms-dotnetcore-gitee-同步脚本" tabindex="-1"> lin-cms-dotnetcore gitee 同步脚本</h2>
<div><pre><code>name: Publish
on:
    push:
        branches:
            - master

jobs:
    build:
        runs-on: ubuntu-latest
        steps:
            - name: Sync to Gitee 💕
              uses: wearerequired/git-mirror-action@master
              env:
                  SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}
              with:
                  source-repo: "git@github.com:luoyunchong/lin-cms-dotnetcore.git"
                  destination-repo: "git@gitee.com:igeekfan/lin-cms-dotnetcore.git"
</code></pre><div aria-hidden="true"><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br></div></div><p>每一个 steps 就是在 jobs 里执行命令，一个 jobs 可以有多个 steps,
steps 字段指定每个 Job 的运行步骤的介绍</p>
<div><pre><code>jobs.&lt;job_id>.steps.name 步骤名称
jobs.&lt;job_id>.steps.env 该步骤所需的环境变量。
jobs.&lt;job_id>.steps.uses  使用的组件
jobs.&lt;job_id>.steps.with 多个值(这个参数其实是提交给容器的CMD)

</code></pre><div aria-hidden="true"><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br></div></div><h2 id="ci-cd-部署" tabindex="-1"> CI/CD 部署</h2>
<ul>
<li>完整的配置项</li>
</ul>
<div><pre><code># This workflow will do a clean install of node dependencies, build the source code and run tests across different versions of node
# For more information see: https://help.github.com/actions/language-and-framework-guides/using-nodejs-with-github-actions

name: Node.js CI

on:
  push:
    branches:
      - master

jobs:
  build:
    name: 编译
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: ['8','10','12']
    steps:
    - uses: actions/checkout@v2
    - name: Use Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v1
      with:
        node-version: ${{ matrix.node-version }}
    - name: 安装依赖
      run: npm i
    - name: 编译文件
      run: |
        npm run lint
        npm run build
  deploy:
    name: 部署
    runs-on: ubuntu-latest
    steps:
      - name: 拉取代码
        uses: actions/checkout@v2
      - name: 安装 Node.js 12
        uses: actions/setup-node@v1
        with:
          node-version: 12
      - name: 安装依赖
        run: npm i
      - name: 编译文件
        run: |
          npm run lint
          npm run build
      - name: 上传文件
        uses: easingthemes/ssh-deploy@v2.1.4
        env:
          ARGS: "-rltgoDzvO --delete"
          SOURCE: "dist/"
          REMOTE_HOST: ${{ secrets.HOST }}
          REMOTE_USER: ${{ secrets.USER }}
          SSH_PRIVATE_KEY: ${{ secrets.SERVER_SSH_KEY }}
          TARGET: ${{ secrets.REMOTE_TARGET }}

</code></pre><div aria-hidden="true"><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br><span>24</span><br><span>25</span><br><span>26</span><br><span>27</span><br><span>28</span><br><span>29</span><br><span>30</span><br><span>31</span><br><span>32</span><br><span>33</span><br><span>34</span><br><span>35</span><br><span>36</span><br><span>37</span><br><span>38</span><br><span>39</span><br><span>40</span><br><span>41</span><br><span>42</span><br><span>43</span><br><span>44</span><br><span>45</span><br><span>46</span><br><span>47</span><br><span>48</span><br><span>49</span><br><span>50</span><br><span>51</span><br><span>52</span><br><span>53</span><br><span>54</span><br><span>55</span><br></div></div><h3 id="ssh-deploy-插件" tabindex="-1"> ssh-deploy 插件</h3>
<ul>
<li>https://github.com/easingthemes/ssh-deploy</li>
</ul>
<p>可查看 README 了解具体参数</p>
<p>以上共有四个参数需要配置</p>
<div><pre><code>REMOTE_HOST: ${{ secrets.HOST }}
REMOTE_USER: ${{ secrets.USER }}
SSH_PRIVATE_KEY: ${{ secrets.SERVER_SSH_KEY }}
TARGET: ${{ secrets.REMOTE_TARGET }}
</code></pre><div aria-hidden="true"><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br></div></div><p>打开 Settings-&gt;Secrets-&gt;New secret 配置如下内容。</p>
<ul>
<li>HOST eg: mydomain.com 这里我们配置了服务器的 ip 111.231.197.142</li>
<li>USER centos 服务器的用户名</li>
<li>REMOTE_TARGET 目标服务器的文件夹位置， eg: /var/www/lin-cms-vvlog</li>
<li>SERVER_SSH_KEY：SSH 密钥对的私钥部分，公钥应该添加到服务器上的 authorized_keys 文件中。。eg /root/.ssh/authorized_keys</li>
</ul>
<p>最后一个参数说明：这个相当于把私钥给 github，让他能远程上传文件到 centos 中，公钥放到服务器上。公钥生成的过程不 BB 了，</p>
<h3 id="ssh-生成" tabindex="-1"> .ssh 生成</h3>
<ul>
<li><a href="https://help.github.com/en/articles/connecting-to-github-with-ssh" target="_blank" rel="noopener noreferrer">https://help.github.com/en/articles/connecting-to-github-with-ssh</a></li>
<li>https://www.ssh.com/ssh/public-key-authentication</li>
</ul>
<p>本地 windows .ssh 默认生成目录</p>
<div><pre><code>C:\Users\计算机名\.ssh
</code></pre><div aria-hidden="true"><span>1</span><br></div></div><p>我的.ssh 目录位置</p>
<div><pre><code>C:\Users\Computer\.ssh
</code></pre><div aria-hidden="true"><span>1</span><br></div></div><p>dir 查看文件</p>
<div><pre><code>C:\Users\Computer\.ssh>dir
2020/02/22  19:45             3,243 id_rsa
2020/02/22  19:45               750 id_rsa.pub
</code></pre><div aria-hidden="true"><span>1</span><br><span>2</span><br><span>3</span><br></div></div><p>id_rsa 是私钥，用 vscode 等记事本编辑器打开，并复制配置到 github 上。New secret,id_rsa.pub 是公钥，把他复制到 linux 文件夹<code>/root/.ssh/</code>目录中，这时把他的名字由<code>id_rsa.pub</code>改成<code>authorized_keys</code>即可。</p>
<p><code>/用户名/.ssh</code> 没有.ssh 文件夹就创建一个。</p>
<h3 id="xsheel-ssh-登录" tabindex="-1"> XSheel ssh 登录</h3>
<p>可通过 xshell 工具验证，Public Key 登录。</p>
<p>新建会话属性-&gt;输入主机（H）即 IP 地址。</p>
<p>选择用户身份验证-&gt;方法选择 public Key,输入用户名，比如 root</p>
<ul>
<li>选择私钥登录
在用户密钥右侧点击浏览-&gt;用户密钥-&gt;导入-&gt;选择 id_rsa.pub 私钥，导入成功后，选择此密钥，确定。再在 SSH 用户身份验证界面确定,即可登录成功。表明私钥，公钥配置成功</li>
</ul>
<h2 id="参考" tabindex="-1"> 参考</h2>
<ul>
<li><a href="https://github.com/marketplace/actions/mirror-a-repository-using-ssh" target="_blank" rel="noopener noreferrer">https://github.com/marketplace/actions/mirror-a-repository-using-ssh</a></li>
<li><a href="https://help.github.com/en/actions" target="_blank" rel="noopener noreferrer">https://help.github.com/en/actions</a></li>
</ul>
]]></content:encoded>
      <enclosure url="https://pic.downk.cc/item/5e9725f5c2a9a83be5dcdec3.png" type="image/png"/>
    </item>
    <item>
      <title>方法级别的权限控制（API级别）</title>
      <link>https://igeekfan.cn/igeekfan-docs/dotnetcore/lin-cms/authorize.html</link>
      <guid>https://igeekfan.cn/igeekfan-docs/dotnetcore/lin-cms/authorize.html</guid>
      <source url="https://igeekfan.cn/igeekfan-docs/rss.xml">方法级别的权限控制（API级别）</source>
      <pubDate>Thu, 28 May 2020 06:06:11 GMT</pubDate>
      <content:encoded><![CDATA[<h1 id="方法级别的权限控制-api级别" tabindex="-1"> 方法级别的权限控制（API级别）</h1>
<p>Lin的定位在于实现一整套 CMS的解决方案，它是一个设计方案，提供了不同的后端，不同的前端，而且也支持不同的数据库</p>
<p>目前官方团队维护 lin-cms-vue,lin-cms-spring-boot,lin-cms-koa,lin-cms-flask
社区维护了 lin-cms-tp5,lin-cms-react,lin-cms-dotnetcore，即已支持vue,react二种前端框架，java,nodejs,python,php,c#等五种后端语言。</p>
<p>下面我们来讲一下.NET Core这个项目中权限控制的实现。</p>
<p>对于CMS来说，一个完善的权限模块是必不可少的，是系统内置实现的。为了更加简单地理解权限，我们先来理解一下ASP.NET Core有哪些权限控制。</p>
<p>1.<strong>AuthorizeAttribute</strong>的作用？</p>
<p>这个特性标签授权通过属性参数配置，可应用于控制器或操作方法上，对用户的身份进行验证。</p>
<p>如果没有授权，会返回403状态码，我们可以通过重写，来实现返回JSON字符串，让前台提示。前提是请求中间件配置了如下二行。</p>
<ul>
<li>
<p><strong>app.UseAuthentication();</strong> 认证，明确是谁在操作，认证方式如用户名密码,登录后，可以得到一个token，或者写入cookies，这样可以确定这个用户是谁</p>
</li>
<li>
<p><strong>app.UseAuthorization();</strong> 授权中间件，明确你是否有某个权限。在http请求时，中间件会在带有权限特性标签 <strong>[Authorize]</strong> 的操作，进行权限判断，包括角色，策略等。</p>
</li>
</ul>
<p>该控制器下的操作都必须经过身份验证，</p>
<div><pre><code>[Authorize]
public class AccountController : Controller
{
    public ActionResult Login()
    {
    }

    public ActionResult Logout()
    {
    }
}
</code></pre><div aria-hidden="true"><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br></div></div><p>这样只显示单个方法必须应用授权。</p>
<div><pre><code>public class AccountController : Controller
{
   public ActionResult Login()
   {
   }

   [Authorize]
   public ActionResult Logout()
   {
   }
}
</code></pre><div aria-hidden="true"><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br></div></div><p>如果我们通过<strong>AllowAnonymous</strong>特性标签去掉身份验证。Login方法无须进行验证。即可匿名访问。</p>
<div><pre><code>[Authorize]
public class AccountController : Controller
{
    [AllowAnonymous]
    public ActionResult Login()
    {
    }

    public ActionResult Logout()
    {
    }
}
</code></pre><div aria-hidden="true"><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br></div></div><ol start="2">
<li>基于角色的授权</li>
</ol>
<p>我们可以通过给这个特性标签加参数，配置，某个方法，控制器是否有这个角色，如果有此角色才能访问这些资源。</p>
<p>单个角色</p>
<div><pre><code>[Authorize(Roles = "Administrator")]
public class AdministrationController : Controller
{
}
</code></pre><div aria-hidden="true"><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br></div></div><p>多个角色，我们可以这样配置,即用逗号分隔。用户有其中一个角色即可访问。</p>
<div><pre><code>[Authorize(Roles = "HRManager,Finance")]
public class SalaryController : Controller
{
}
</code></pre><div aria-hidden="true"><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br></div></div><p>当某个方法必须同时有二个角色怎么办呢。该控制器只有同时有PowerUser，和ControlPanelUser的角色才能访问这些资源了。</p>
<div><pre><code>[Authorize(Roles = "PowerUser")]
[Authorize(Roles = "ControlPanelUser")]
public class ControlPanelController : Controller
{
}
</code></pre><div aria-hidden="true"><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br></div></div><ul>
<li>3.更多。请看官网 <a href="https://docs.microsoft.com/zh-cn/aspnet/core/security/authorization/roles?view=aspnetcore-3.1" target="_blank" rel="noopener noreferrer">https://docs.microsoft.com/zh-cn/aspnet/core/security/authorization/roles?view=aspnetcore-3.1</a></li>
</ul>
<p>更多该特性标签的介绍，也可参考官网，这里就不展开了。</p>
<p>那这个角色，到底在哪配置的？？</p>
<p>登录时生成的Token,是基于JWT的，其中的Claim的type为<strong>ClaimTypes.Role</strong>（枚举值），角色名称为字符串，与特性标签中的Roles属性值相同。
如</p>
<div><pre><code>new Claim(ClaimTypes.Role, "Administrator");
</code></pre><div aria-hidden="true"><span>1</span><br></div></div><p>有多个角色时，**List Claim ** 多加几个 <strong>new Claim(ClaimTypes.Role, &quot;PowerUser&quot;);</strong> 也是支持的。user为用户信息，LinGroups为当前用户的分组（多个）</p>
<p>即如下代码示例，多个分组（角色）</p>
<div><pre><code>var claims = new List&lt;Claim>()
{
    new Claim(ClaimTypes.NameIdentifier, user.Email ?? ""),
    new Claim(ClaimTypes.GivenName, user.Nickname ?? ""),
    new Claim(ClaimTypes.Name, user.Username ?? ""),
};

user.LinGroups?.ForEach(r =>
 {
     claims.Add(new Claim(ClaimTypes.Role, r.Name));
 });
</code></pre><div aria-hidden="true"><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br></div></div><h3 id="authorizeattribute源码" tabindex="-1"> AuthorizeAttribute源码</h3>
<div><pre><code> [AttributeUsage(AttributeTargets.Class | AttributeTargets.Method, AllowMultiple = true, Inherited = true)]
  public class AuthorizeAttribute : Attribute, IAuthorizeData
  {
    public AuthorizeAttribute()
    {
    }

    public AuthorizeAttribute(string policy)
    {
      this.Policy = policy;
    }

    public string Policy { get; set; }

    public string Roles { get; set; }

    public string AuthenticationSchemes { get; set; }
  }
</code></pre><div aria-hidden="true"><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br></div></div><p>我们可以看到，它继承了Attribute，说明这是一个特性标签，IAuthorizeData是一个接口，有这三个属性，约束了 一个规范，即有角色Roles，有策略Policy，有身份验证方案AuthenticationSchemes，该特性支持Class,支持方法，该特性标签支持多个共用，该特性标签支持被继承。</p>
<p>基于角色的授权和基于声明的授权是一种预配置的策略，即固定的角色，固定的Claims验证。</p>
<p>我们可以基于自定义策略的实现更多的权限验证或某些规则验证。</p>
<p>AuthorizeAttribute能做的权限控制如下</p>
<ul>
<li>基于角色级别的权限控制（多个角色，单个角色）</li>
<li>基于声明的授权：可自定义声明特性。</li>
<li>基于策略的授权：</li>
</ul>
<h2 id="lin-cms-dotnetcore中的权限设计" tabindex="-1"> lin-cms-dotnetcore中的权限设计</h2>
<p>说了这么多官方提供的，我们讲一下lin-cms-dotnetcore中的权限设计</p>
<p>完整的表结构如下
<a href="https://luoyunchong.github.io/igeekfan-docs/dotnetcore/lin-cms/table.html" target="_blank" rel="noopener noreferrer">https://luoyunchong.github.io/igeekfan-docs/dotnetcore/lin-cms/table.html</a></p>
<h4 id="lincmsauthorizeattribute" tabindex="-1"> LinCmsAuthorizeAttribute</h4>
<div><pre><code> [AttributeUsage(AttributeTargets.Class | AttributeTargets.Method, AllowMultiple = true)]
    public class LinCmsAuthorizeAttribute : Attribute, IAsyncAuthorizationFilter
    {
        public string Permission { get; }
        public string Module { get; }

        public LinCmsAuthorizeAttribute(string permission, string module)
        {
            Permission = permission;
            Module = module;
        }

        public async Task OnAuthorizationAsync(AuthorizationFilterContext context)
        {
            ClaimsPrincipal claimsPrincipal = context.HttpContext.User;

            if (!claimsPrincipal.Identity.IsAuthenticated)
            {
                HandlerAuthenticationFailed(context, "认证失败，请检查请求头或者重新登陆", ErrorCode.AuthenticationFailed);
                return;
            }

            IAuthorizationService authorizationService = (IAuthorizationService)context.HttpContext.RequestServices.GetService(typeof(IAuthorizationService));
            AuthorizationResult authorizationResult = await authorizationService.AuthorizeAsync(context.HttpContext.User, null, new OperationAuthorizationRequirement() { Name = Permission });
            if (!authorizationResult.Succeeded)
            {
                HandlerAuthenticationFailed(context, $"您没有权限：{Module}-{Permission}", ErrorCode.NoPermission);
            }
        }

        public void HandlerAuthenticationFailed(AuthorizationFilterContext context, string errorMsg, ErrorCode errorCode)
        {
            context.HttpContext.Response.StatusCode = StatusCodes.Status401Unauthorized;
            context.Result = new JsonResult(new UnifyResponseDto(errorCode, errorMsg, context.HttpContext));
        }
    }
</code></pre><div aria-hidden="true"><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br><span>24</span><br><span>25</span><br><span>26</span><br><span>27</span><br><span>28</span><br><span>29</span><br><span>30</span><br><span>31</span><br><span>32</span><br><span>33</span><br><span>34</span><br><span>35</span><br><span>36</span><br></div></div><p>上面的实现非常简单,LinCmsAuthorizeAttribute继承于Attribute，说明是一个特性标签，有二个属性Permission，Module，代表权限名，模块名（用于区分哪个功能模块），然后将权限名称转化为OperationAuthorizationRequirement，然后调用authorizationService中的方法AuthorizeAsync来完成授权。</p>
<p>接下来，我们在控制器上使用LinCmsAuthorizeAttribute,那么我们</p>
<div><pre><code>[Route("cms/admin/group")]
[ApiController]
public class GroupController : ControllerBase
{
    private readonly IGroupService _groupService;
    public GroupController(IGroupService groupService)
    {
        _groupService = groupService;
    }

    [HttpGet("all")]
    [LinCmsAuthorize("查询所有权限组","管理员")]
    public Task&lt;List&lt;LinGroup>> GetListAsync()
    {
        return _groupService.GetListAsync();
    }

    [HttpGet("{id}")]
    [LinCmsAuthorize("查询一个权限组及其权限","管理员")]
    public async Task&lt;GroupDto> GetAsync(long id)
    {
        GroupDto groupDto = await _groupService.GetAsync(id);
        return groupDto;
    }

    [HttpPost]
    [LinCmsAuthorize("新建权限组","管理员")]
    public async Task&lt;UnifyResponseDto> CreateAsync([FromBody] CreateGroupDto inputDto)
    {
        await _groupService.CreateAsync(inputDto);
        return UnifyResponseDto.Success("新建分组成功");
    }

    [HttpPut("{id}")]
    [LinCmsAuthorize("更新一个权限组","管理员")]
    public async Task&lt;UnifyResponseDto> UpdateAsync(long id, [FromBody] UpdateGroupDto updateGroupDto)
    {
        await _groupService.UpdateAsync(id, updateGroupDto);
        return UnifyResponseDto.Success("更新分组成功");
    }

    [HttpDelete("{id}")]
    [LinCmsAuthorize("删除一个权限组","管理员")]
    public async Task&lt;UnifyResponseDto> DeleteAsync(long id)
    {
        await _groupService.DeleteAsync(id);
        return UnifyResponseDto.Success("删除分组成功");
    }

}
</code></pre><div aria-hidden="true"><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br><span>24</span><br><span>25</span><br><span>26</span><br><span>27</span><br><span>28</span><br><span>29</span><br><span>30</span><br><span>31</span><br><span>32</span><br><span>33</span><br><span>34</span><br><span>35</span><br><span>36</span><br><span>37</span><br><span>38</span><br><span>39</span><br><span>40</span><br><span>41</span><br><span>42</span><br><span>43</span><br><span>44</span><br><span>45</span><br><span>46</span><br><span>47</span><br><span>48</span><br><span>49</span><br><span>50</span><br></div></div><p>这样在方法上已经加了权限的标签，但我们怎么得到系统中的所有权限，让用户配置呢。
<a href="https://igeekfan.gitee.io/igeekfan-docs/dotnetcore/lin-cms/reflex-assembly-get-controller-methods-attribute.html#%E8%8E%B7%E5%8F%96%E6%8E%A7%E5%88%B6%E5%99%A8%E5%8F%8A%E6%96%B9%E6%B3%95%E7%89%B9%E6%80%A7%E6%A0%87%E7%AD%BE" target="_blank" rel="noopener noreferrer">获取控制器及方法特性标签</a>。本质上，是通过反射,扫描当前程序集，会获取到一个List，我们可以在系统启动时把这些数据存到数据库中。</p>
<p>最新的方式是采用此方法，原理都相同。name，module唯一值。存入lin_permission表中，这时就有id值了。lin_group_permission就能用分组关联了。</p>
<div><pre><code>public async Task SeedAsync()
{
    List&lt;PermissionDefinition> linCmsAttributes = ReflexHelper.GeAssemblyLinCmsAttributes();

    List&lt;LinPermission> insertPermissions = new List&lt;LinPermission>();
    List&lt;LinPermission>allPermissions=await  _permissionRepository.Select.ToListAsync();
    
    linCmsAttributes.ForEach(r =>
    {
        bool exist = allPermissions.Any(u => u.Module == r.Module &amp;&amp; u.Name == r.Permission);
        if (!exist)
        {
            insertPermissions.Add(new LinPermission(r.Permission, r.Module));
        }
    });
    await _permissionRepository.InsertAsync(insertPermissions);
 }
</code></pre><div aria-hidden="true"><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br></div></div><h3 id="实现方法级的权限控制源码解析" tabindex="-1"> 实现方法级的权限控制源码解析</h3>
<p>原理可以看这个文章<a href="https://www.cnblogs.com/RainingNight/p/dynamic-authorization-in-asp-net-core.html" target="_blank" rel="noopener noreferrer">ASP.NET Core 认证与授权[7]:动态授权</a>中的<strong>自定义授权过滤器</strong></p>
<p>我们需要了解一下这些类/接口/抽象类</p>
<div><pre><code>- IAuthorizationService(interface)
- AuthorizationService(class)
- IAuthorizationHandler(interface)
- AuthorizationHandler&lt;TRequirement>(abstract class)
- PermissionAuthorizationHandler（class 自定义的类,继承AuthorizationHandler）
</code></pre><div aria-hidden="true"><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br></div></div><h3 id="总结调用链如下" tabindex="-1"> 总结调用链如下</h3>
<div><pre><code>LinCmsAuthorizeAttribute（继承了IAsyncAuthorizationFilter的特性标签）
调用了---->
IAuthorizationService中的AuthorizeAsync方法
调用了---->
IAuthorizationHandler中的HandleAsync
调用了---->
AuthorizationHandler中的HandleRequirementAsync抽象方法
相当于调用---->
PermissionAuthorizationHandler类中的实现方法HandleRequirementAsync
调用了---->
IPermissionService类中的CheckPermissionAsync方法。
调用了---->
IAuditBaseRepository&lt;LinPermission,long>
IAuditBaseRepository&lt;LinGroupPermission, long>
使用FreeSql,判断当前用户所在分组是否拥有此权限。
</code></pre><div aria-hidden="true"><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br></div></div><p>IAuthorizationService是什么呢。我们可以理解为，验证当前用户是否拥有对应的资源权限。系统默认实现了该方法</p>
<div><pre><code>public interface IAuthorizationService
{
    Task&lt;AuthorizationResult> AuthorizeAsync(ClaimsPrincipal user, object resource, IEnumerable&lt;IAuthorizationRequirement> requirements);

    Task&lt;AuthorizationResult> AuthorizeAsync(ClaimsPrincipal user, object resource, string policyName);
}
</code></pre><div aria-hidden="true"><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br></div></div><p>AuthorizationService是什么呢.他实现了IAuthorizationService接口.
通过源码我们知道，它调用 <strong>await authorizationHandler.HandleAsync(authContext);</strong></p>
<div><pre><code> public async Task&lt;AuthorizationResult> AuthorizeAsync(
  ClaimsPrincipal user,
  object resource,
  IEnumerable&lt;IAuthorizationRequirement> requirements)
{
  if (requirements == null)
    throw new ArgumentNullException(nameof (requirements));
  AuthorizationHandlerContext authContext = this._contextFactory.CreateContext(requirements, user, resource);
  foreach (IAuthorizationHandler authorizationHandler in await this._handlers.GetHandlersAsync(authContext))
  {
    await authorizationHandler.HandleAsync(authContext);
    if (!this._options.InvokeHandlersAfterFailure)
    {
      if (authContext.HasFailed)
        break;
    }
  }
  AuthorizationResult authorizationResult = this._evaluator.Evaluate(authContext);
  if (authorizationResult.Succeeded)
    this._logger.UserAuthorizationSucceeded();
  else
    this._logger.UserAuthorizationFailed();
  return authorizationResult;
}
</code></pre><div aria-hidden="true"><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br><span>24</span><br></div></div><p>IAuthorizationHandler 仅一个接口。</p>
<div><pre><code>public interface IAuthorizationHandler
{
    /// &lt;summary>
    /// Makes a decision if authorization is allowed.
    /// &lt;/summary>
    /// &lt;param name="context">The authorization information.&lt;/param>
    Task HandleAsync(AuthorizationHandlerContext context);
}
</code></pre><div aria-hidden="true"><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br></div></div><p>AuthorizationHandler，它继承<strong>IAuthorizationHandler</strong>
而且他是一个抽象类，默认实现了HandleAsync方法，子类只用实现HandleRequirementAsync即可。</p>
<div><pre><code>  public abstract class AuthorizationHandler&lt;TRequirement> : IAuthorizationHandler
    where TRequirement : IAuthorizationRequirement
  {
    public virtual async Task HandleAsync(AuthorizationHandlerContext context)
    {
      foreach (TRequirement requirement in context.Requirements.OfType&lt;TRequirement>())
        await this.HandleRequirementAsync(context, requirement);
    }

    protected abstract Task HandleRequirementAsync(
      AuthorizationHandlerContext context,
      TRequirement requirement);
  }
</code></pre><div aria-hidden="true"><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br></div></div><p>我们就可以继承AuthorizationHandler，子类实现从数据库中取数据做对比，其中泛型参数使用系统内置的一个只有Name的类OperationAuthorizationRequirement，当然，如果我们需要更多的参数，可以继承IAuthorizationRequirement，增加更多的参数。</p>
<p>判断当前用户是否不为null,当调用CheckPermissionAsync，判断是否有此权限。</p>
<div><pre><code>   public class PermissionAuthorizationHandler : AuthorizationHandler&lt;OperationAuthorizationRequirement>
    {
        private readonly IPermissionService _permissionService;

        public PermissionAuthorizationHandler(IPermissionService permissionService)
        {
            _permissionService = permissionService;
        }

        protected override async Task HandleRequirementAsync(AuthorizationHandlerContext context, OperationAuthorizationRequirement requirement)
        {
            Claim userIdClaim = context.User?.FindFirst(_ => _.Type == ClaimTypes.NameIdentifier);
            if (userIdClaim != null)
            {
                if (await _permissionService.CheckPermissionAsync(requirement.Name))
                {
                    context.Succeed(requirement);
                }
            }
        }
    }
</code></pre><div aria-hidden="true"><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br></div></div><p>另外我们还需要把这个Handler注入到我们的DI中，在ConfigureServices中替换如下服务</p>
<div><pre><code>services.AddScoped&lt;IAuthorizationHandler, PermissionAuthorizationHandler>();
</code></pre><div aria-hidden="true"><span>1</span><br></div></div><p>其中的PermssionAppService中的实现,检查当前登录的用户的是否有此权限</p>
<div><pre><code>public async Task&lt;bool> CheckPermissionAsync(string permission)
{
    long[] groups = _currentUser.Groups;

    LinPermission linPermission = await _permissionRepository.Where(r => r.Name == permission).FirstAsync();

    bool existPermission = await _groupPermissionRepository.Select
        .AnyAsync(r => groups.Contains(r.GroupId) &amp;&amp; r.PermissionId == linPermission.Id);

    return existPermission;
}
</code></pre><div aria-hidden="true"><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br></div></div><h3 id="更多参考" tabindex="-1"> 更多参考</h3>
<ul>
<li><a href="https://www.cnblogs.com/RainingNight/p/introduce-basic-authentication-in-asp-net-core.html" target="_blank" rel="noopener noreferrer">ASP.NET Core 认证与授权[1]:初识认证</a></li>
</ul>
<h2 id="开源地址" tabindex="-1"> 开源地址</h2>
<ul>
<li>后端接口Gitee 链接 <a href="https://gitee.com/igeekfan/lin-cms-dotnetcore" target="_blank" rel="noopener noreferrer">https://gitee.com/igeekfan/lin-cms-dotnetcore</a></li>
<li>后端接口GitHub 链接 <a href="https://github.com/luoyunchong/lin-cms-dotnetcore" target="_blank" rel="noopener noreferrer">https://github.com/luoyunchong/lin-cms-dotnetcore</a></li>
<li>管理端UI <a href="https://github.com/luoyunchong/lin-cms-vue" target="_blank" rel="noopener noreferrer">https://github.com/luoyunchong/lin-cms-vue</a></li>
<li>用户端UI <a href="https://github.com/luoyunchong/lin-cms-vvlog" target="_blank" rel="noopener noreferrer">https://github.com/luoyunchong/lin-cms-vvlog</a></li>
</ul>
]]></content:encoded>
    </item>
    <item>
      <title>文件上传系统</title>
      <link>https://igeekfan.cn/igeekfan-docs/dotnetcore/lin-cms/file-upload.html</link>
      <guid>https://igeekfan.cn/igeekfan-docs/dotnetcore/lin-cms/file-upload.html</guid>
      <source url="https://igeekfan.cn/igeekfan-docs/rss.xml">文件上传系统</source>
      <pubDate>Wed, 13 May 2020 11:18:08 GMT</pubDate>
      <content:encoded><![CDATA[<h1 id="文件上传系统" tabindex="-1"> 文件上传系统</h1>
<p>lin-cms-dotnetcore 默认集成了文件上传功能，并可自由切换存储位置，前端也有相应的组件匹配使用.</p>
<p>目前后端实现了七牛云文件（QiniuService）上传，本地文件（LocalFileService）上传。</p>
<p>接口 <strong>IFileService</strong></p>
<div><pre><code>public interface IFileService
{
    /// &lt;summary>
    /// 单文件上传，键为file
    /// &lt;/summary>
    /// &lt;param name="file">&lt;/param>
    /// &lt;param name="key">&lt;/param>
    /// &lt;returns>&lt;/returns>
    Task&lt;FileDto> UploadAsync(IFormFile file, int key = 0);
}
</code></pre><div aria-hidden="true"><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br></div></div><p>配置项 appsettings.json</p>
<h2 id="本地文件上传" tabindex="-1"> 本地文件上传</h2>
<ul>
<li>PrefixPath：默认为wwwroot下的文件目录配置项，assets，多级目录，前后不要加**/**，如assets/file</li>
<li>Host:  文件上传后，访问域名配置，这里配置https://localhost:5001/</li>
<li>ServiceName :配置当前系统上传时使用哪个实现，可选配置项（LocalFileService、QiniuService）
<ul>
<li>当为LocalFileService时，文件保存路径为<strong>wwwroot</strong>静态文件目录下，上传至本地，</li>
<li>QiniuService 上传至七牛云</li>
</ul>
</li>
</ul>
<p>实际文件路径</p>
<p><strong>/assets/2020/5/8/xxxxxx-1111-12-12-12--1-21.png</strong></p>
<p>参数化</p>
<p><strong>/{STORE_DIR}/{year}/{month}/{day}/{guid}.文件后缀</strong></p>
<div><pre><code>  "FileStorage": {
    "ServiceName": "LocalFileService",//LocalFileService、QiniuService
    "LocalFile":{
      "PrefixPath": "assets",
      "Host": "https://localhost:5001/"
    }
  },
</code></pre><div aria-hidden="true"><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br></div></div><h2 id="七牛云文件上传" tabindex="-1"> 七牛云文件上传</h2>
<p>SERVICE为QiniuService时，系统将需要使用如下配置项，</p>
<ul>
<li>AK :七牛云密钥AccessKey</li>
<li>SK :七牛云密钥SecretKey</li>
<li>Bucket :七牛云新建存储空间的名称（唯一值）</li>
<li>PrefixPath 文件根目录前缀</li>
<li>Host:七牛云配置的CDN 加速域名，可使用临时分配的域名，仅一个月有效期，绑定自己的域名，可配置泛子域名</li>
<li>UseHttps：使用https，这个参数好像没啥用。</li>
</ul>
<p>上传文件名</p>
<p><strong>assets/20191218150043868887.jpg</strong></p>
<p>参数</p>
<p><strong>{PrefixPath}/{yyyyMMddHHmmssffffff}.文件后缀</strong></p>
<div><pre><code>  "FileStorage": {
   "ServiceName": "QiniuService",
    "Qiniu": {
      "AK": "",
      "SK": "",
      "Bucket": "vvv",
      "PrefixPath": "assets",
      "Host": "http://images.igeekfan.cn/",
      "UseHttps": false
    }
  },
</code></pre><div aria-hidden="true"><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br></div></div><p>lin-cms 默认对外暴露了cms/file/作为文件上传接口，通过该接口可以直接使用 HTTP post 方法上传文件。</p>
<p>运行项目后，我们可以看到swagger，找到cms/file
<a href="https://localhost:5001/swagger/index.html" target="_blank" rel="noopener noreferrer">https://localhost:5001/swagger/index.html</a></p>
<table>
<thead>
<tr>
<th>请求方式</th>
<th>路径</th>
<th>功能</th>
</tr>
</thead>
<tbody>
<tr>
<td>HttpPost</td>
<td>/cms/file/upload</td>
<td>单文件上传</td>
</tr>
</tbody>
</table>
<p>直接可通过swagger选择文件后，输入key为0，执行Execute</p>
<div><pre><code>{
  "key": "file_0",
  "path": "assets/2020/05/08/64263e57-9a24-4933-9116-25616c801e93.png",
  "url": "https://localhost:5001/assets/2020/05/08/64263e57-9a24-4933-9116-25616c801e93.png",
  "id": 19
}
</code></pre><div aria-hidden="true"><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br></div></div><table>
<thead>
<tr>
<th>请求方式</th>
<th>路径</th>
<th>功能</th>
</tr>
</thead>
<tbody>
<tr>
<td>HttpPost</td>
<td>/cms/file</td>
<td>多文件上传</td>
</tr>
</tbody>
</table>
<p>由于swagger-ui的规范，目前多文件无法正确显示，即时正常显示出选择多文件，后台却得不到请求的数据。。</p>
<p>我们通过postman上传多文件。</p>
<p><a href="https://pic.downk.cc/item/5ebaba6bc2a9a83be5afe50b.png" target="_blank" rel="noopener noreferrer"><img src="https://pic.downk.cc/item/5ebaba6bc2a9a83be5afe50b.png" alt="" loading="lazy"></a></p>
<p>由于上传了两个文件，因此我们得到了两个元素的数组，它们的结构如下：</p>
<div><pre><code>[
    {
        "key": "file_0",
        "path": "assets/20200512234540511428.png",
        "url": "http://images.igeekfan.cn/assets/20200512234540511428.png",
        "id": 38
    },
    {
        "key": "file_1",
        "path": "assets/20200512234540321269.jpg",
        "url": "http://images.igeekfan.cn/assets/20200512234540321269.jpg",
        "id": 37
    }
]
</code></pre><div aria-hidden="true"><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br></div></div><table>
<thead>
<tr>
<th>name</th>
<th>说明</th>
<th>类型</th>
</tr>
</thead>
<tbody>
<tr>
<td>key</td>
<td>文件上传的key</td>
<td>string</td>
</tr>
<tr>
<td>id</td>
<td>文件存储到数据库的id</td>
<td>string</td>
</tr>
<tr>
<td>path</td>
<td>文件存储的路径path</td>
<td>string</td>
</tr>
<tr>
<td>url</td>
<td>可访问的 url</td>
<td>string</td>
</tr>
</tbody>
</table>
<blockquote>
<p>TIP
系统会自动帮助我们上传的文件做md5，因此你大可不必担心文件重复上传，如果你上传了 重复的文件，服务器会返回已传文件的数据。</p>
</blockquote>
<h2 id="其他特性" tabindex="-1"> 其他特性</h2>
<p>Kestrel是内置的ASP.NET Core的内置WEB服务器，是一个中间件，支持跨平台</p>
<p>1.运行示意：Internet---(通过HTTP访问)---&gt;Kestrel(Kestrel WEB Server Port 5001)--内部HttpContext通过---&gt;&gt;访问到ApplicationCode</p>
<ol start="2">
<li>在Internet到Kesterl中间加一个反向代理（nginx,iis,apache)</li>
</ol>
<p>第一种方式，文件大小的配置与Kestrel有关。也和应用代码有关。</p>
<p>Kestrel默认的最大请求正文大小为 30,000,000 个字节，约为 28.6 MB.</p>
<p>在Program.cs中配置Kestrel的文件大小</p>
<div><pre><code>webBuilder.ConfigureKestrel((context, options) =>
{
    //设置应用服务器Kestrel请求体最大为8MB
    
    options.Limits.MaxRequestBodySize = 1024*1024*8;
});
</code></pre><div aria-hidden="true"><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br></div></div><p>或者在StartUp中配置应用程序级别的设置</p>
<div><pre><code>services.Configure&lt;FormOptions>(options =>
{
    //单个文件上传的大小限制为8 MB      默认134217728 应该是128MB
    options.MultipartBodyLengthLimit = 1024 * 1024 * 8;     //8MB
});
</code></pre><div aria-hidden="true"><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br></div></div><p>如果部署在反向代理后，还与代理服务器有关。</p>
<h2 id="文件上传其他配置项" tabindex="-1"> 文件上传其他配置项</h2>
<ul>
<li>MaxFileSize:上传文件总大小,<code>1024*1024*80=83886080=80MB</code></li>
<li>NumLimit:上传文件总数量</li>
<li>Include，允许某些类型文件上传,文件格式以,隔开</li>
<li>Exclude：禁止某些类型文件上传，文件格式以,隔开</li>
</ul>
<div><pre><code>"FileStorage": {
    "MaxFileSize": 83886080,
    "NumLimit": 3,
    "Include": "",
    "Exclude": ".exe,.dll",
}
</code></pre><div aria-hidden="true"><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br></div></div><p><strong>exclude</strong>和<strong>include</strong>这两项配置，默认情况下，这两者只会有一 项生效；若这二者中有一项为空，则另一项不为空的配置会生效；如果两项皆为空的话，会 通过所有文件类型；如果二者都不为空，则<strong>include</strong>为有效配置，而exclude会失效；总 而言之，系统只会支持使用一项，二者都为为空的情况下，则通过所有文件类型。</p>
<p>完整配置项</p>
<div><pre><code> "FileStorage": {
    "MaxFileSize": 83886080,
    "NumLimit": 3,
    "Include": ".png,.jpg",
    "Exclude": ".exe,.dll",
    "ServiceName": "LocalFileService",//LocalFileService、QiniuService
    "LocalFile":{
      "PrefixPath": "assets",
      "Host": "https://localhost:5001/"
    },
    "Qiniu": {
      "AK": "eUH1O-ft66S4XM2GIK7FGmj7czuYkcAyNGDAc-wq",
      "SK": "4dOi1daSr2-YgofhAfWb8JaLrbgozCmgD6AUmmM9",
      "Bucket": "vvv",
      "PrefixPath": "assets",
      "Host": "http://images.igeekfan.cn/",
      "UseHttps": false
    }
  },
</code></pre><div aria-hidden="true"><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br></div></div><ul>
<li>官网 https://docs.microsoft.com/zh-cn/aspnet/core/mvc/models/file-uploads?view=aspnetcore-3.1</li>
</ul>
]]></content:encoded>
      <enclosure url="https://pic.downk.cc/item/5ebaba6bc2a9a83be5afe50b.png" type="image/png"/>
    </item>
    <item>
      <title>行为日志</title>
      <link>https://igeekfan.cn/igeekfan-docs/dotnetcore/lin-cms/logger.html</link>
      <guid>https://igeekfan.cn/igeekfan-docs/dotnetcore/lin-cms/logger.html</guid>
      <source url="https://igeekfan.cn/igeekfan-docs/rss.xml">行为日志</source>
      <pubDate>Wed, 13 May 2020 11:18:08 GMT</pubDate>
      <content:encoded><![CDATA[<h1 id="行为日志" tabindex="-1"> 行为日志</h1>
]]></content:encoded>
    </item>
    <item>
      <title>开源介绍</title>
      <link>https://igeekfan.cn/igeekfan-docs/dotnetcore/lin-cms/open-source-road.html</link>
      <guid>https://igeekfan.cn/igeekfan-docs/dotnetcore/lin-cms/open-source-road.html</guid>
      <source url="https://igeekfan.cn/igeekfan-docs/rss.xml">开源介绍</source>
      <pubDate>Wed, 13 May 2020 11:18:08 GMT</pubDate>
      <content:encoded><![CDATA[<h1 id="开源介绍" tabindex="-1"> 开源介绍</h1>
<ul>
<li>地址：<a href="https://github.com/luoyunchong/lin-cms-dotnetcore" target="_blank" rel="noopener noreferrer">https://github.com/luoyunchong/lin-cms-dotnetcore</a></li>
</ul>
<p>1.什么是cms？</p>
<p>Content Management System，内容管理系统。</p>
<p>2.dotnetcore是什么</p>
<p>.NET Core，是由Microsoft开发，目前在.NET Foundation(一个非营利的开源组织)下进行管理，采用宽松的MIT协议，可构建各种软件，包括Web应用程序、移动应用程序、桌面应用程序、云服务、微服务、API、游戏和物联网应用程序</p>
<p>3.lin-cms 是什么</p>
<p>Lin-CMS 是林间有风团队经过大量项目实践所提炼出的一套内容管理系统框架。Lin-CMS 可以有效的帮助开发者提高 CMS 的开发效率, 需要前端？请访问前端仓库。官方团队产品了解请访问TaleLin</p>
<p>4.lin-cms-dotnetcore有哪些特点？</p>
<p>前后端分离，提供后端接口，更少的依赖，后续将实现模块化安装与卸载。</p>
<ul>
<li>用户管理、分组管理、分组权限管理、日志系统、文件上传等</li>
<li>更多功能（自定义扩展-模块系统）</li>
<li>博客模块，类掘金专栏，用户中心，标签、个人专栏、技术频道（首页分类）</li>
</ul>
<h2 id="设计如下" tabindex="-1"> 设计如下</h2>
<h4 id="字典管理" tabindex="-1"> 字典管理</h4>
<h3 id="我原本想实现这样的功能" tabindex="-1"> 我原本想实现这样的功能：</h3>
<p>BaseType 1 对BaseItem多。</p>
<p>如：标签管理，一个文章下可以设置多个标签，原本需要设计表Tag,字段也大抵为Id,Name,Sort及关联表。
我们使用BaseType、BaseItem实现。
BaseType中TypeCode为tag,FullName为标签，id为1时。
BaseItem中BaseTypeId为1，ItemCode为编码,ItemName为标签。ItemCode为不重复的字符串即可。</p>
<p>另Tag与Article的关联表，需要另设计一个表。</p>
<p>当我们要实现文章类别的下拉，原本需要设计一个表ArticleType，有字段,id,name,sort等。
我们可以通过BaseType、BaseItem来实现，从而简化这些基础数据。
BaseType有一条数据，TypeCode为 字符串category、FullName文章类别，BaseItem存多个文章类别(Java、大数据、Python、C#等)，编码不同即可。</p>
<ol>
<li>表结构</li>
</ol>
<h4 id="base-type-字典类别管理" tabindex="-1"> base_type （字典类别管理）</h4>
<table>
<thead>
<tr>
<th>字段</th>
<th>类型</th>
<th>备注</th>
</tr>
</thead>
<tbody>
<tr>
<td>id</td>
<td>int</td>
<td></td>
</tr>
<tr>
<td>type_code</td>
<td>varchar(50)</td>
<td>类别编码</td>
</tr>
<tr>
<td>full_name</td>
<td>varchar(50)</td>
<td>全称</td>
</tr>
<tr>
<td>sort_code</td>
<td>int</td>
<td>排序码</td>
</tr>
</tbody>
</table>
<h4 id="base-item-字典管理" tabindex="-1"> base_item （字典管理）</h4>
<table>
<thead>
<tr>
<th>字段</th>
<th>类型</th>
<th>备注</th>
</tr>
</thead>
<tbody>
<tr>
<td>id</td>
<td>int</td>
<td></td>
</tr>
<tr>
<td>base_type_id</td>
<td>int</td>
<td>类别id(关联base_type的id)</td>
</tr>
<tr>
<td>item_code</td>
<td>varchar(50)</td>
<td>字典编码</td>
</tr>
<tr>
<td>item_name</td>
<td>varchar(50)</td>
<td>字典全称</td>
</tr>
<tr>
<td>sort_code</td>
<td>int</td>
<td>排序码</td>
</tr>
</tbody>
</table>
<h4 id="但现实总是事与愿违" tabindex="-1"> 但现实总是事与愿违</h4>
<blockquote>
<p>后台取文章列表时，想要取出文章对应的分类，手动join时，总觉得join的表会有些奇怪。</p>
</blockquote>
<p>当然还有其他原因，<strong>局限性</strong>：</p>
<ol>
<li>比如使用了这个字典，分类需要增加一个图片字段，就不能满足要求，那怎么办呢，做不了。</li>
<li>比如标签需要实现这个标签下有多少个文章，通过统计也能实现，</li>
</ol>
<p>使用FreeSql实现时，如果二个表之间没有导航属性，是更复杂的。</p>
]]></content:encoded>
    </item>
    <item>
      <title>QQ第三方授权登录</title>
      <link>https://igeekfan.cn/igeekfan-docs/dotnetcore/lin-cms/qq-login.html</link>
      <guid>https://igeekfan.cn/igeekfan-docs/dotnetcore/lin-cms/qq-login.html</guid>
      <source url="https://igeekfan.cn/igeekfan-docs/rss.xml">QQ第三方授权登录</source>
      <pubDate>Wed, 13 May 2020 11:18:08 GMT</pubDate>
      <content:encoded><![CDATA[<h1 id="qq第三方授权登录" tabindex="-1"> QQ第三方授权登录</h1>
<h2 id="安装包" tabindex="-1"> 安装包</h2>
<div><pre><code>dotnet add package AspNet.Security.OAuth.QQ
</code></pre><div aria-hidden="true"><span>1</span><br></div></div><ul>
<li><a href="https://luoyunchong.github.io/igeekfan-docs/dotnetcore/lin-cms/spa-github-login.html" target="_blank" rel="noopener noreferrer">接上文GitHub第三方授权登录</a></li>
</ul>
<p>申请过程不介绍了，<a href="https://wiki.connect.qq.com/%E5%87%86%E5%A4%87%E5%B7%A5%E4%BD%9C_oauth2-0" target="_blank" rel="noopener noreferrer">申请者资料</a>,个人也是可以申请成功的。</p>
<p>这时候有二个参数就是clientid clientsecret</p>
<div><pre><code>APP ID：xxxx
APP Key：xxxxxx
</code></pre><div aria-hidden="true"><span>1</span><br><span>2</span><br></div></div><p>其中<strong>平台信息</strong>，这个申请审核通过后，<strong>不要修改，千万不要随便修改</strong>，一修改就要重新审核。</p>
<p>网站回调域:可以随便修改，并且可以写多个，中间用英文逗号分隔即可。
比如，网站地址填的：https://api.igeekfan.cn，下面如果是localhost，是可以的，但如果是域名,便只能是https://api.igeekfan.cn这个域名下的路径。</p>
<p>网站回调域配置,后台是运行在https://localhost:5001端口上。</p>
<div><pre><code>https://api.igeekfan.cn/signin-qq;https://localhost:5001/signin-qq
</code></pre><div aria-hidden="true"><span>1</span><br></div></div><h2 id="接口介绍" tabindex="-1"> 接口介绍</h2>
<p>server-side模式，是OAuth2.0认证的一种模式，又称Web Server Flow；</p>
<p><img src="http://qzonestyle.gtimg.cn/qzone/vas/opensns/res/img/OAuth_guide_V2_1.png" alt="image" loading="lazy"></p>
<p>获取Authorization Code
https://graph.qq.com/oauth2.0/authorize</p>
<p>通过Authorization Code获取Access Token
https://graph.qq.com/oauth2.0/token</p>
<p>获取用户OpenID_OAuth2.0
https://graph.qq.com/oauth2.0/me</p>
<p>获取用户个人信息
https://graph.qq.com/user/get_user_info</p>
<h2 id="使用authorization-code获取access-token" tabindex="-1"> <a href="https://wiki.connect.qq.com/%E4%BD%BF%E7%94%A8authorization_code%E8%8E%B7%E5%8F%96access_token" target="_blank" rel="noopener noreferrer">使用Authorization_Code获取Access_Token</a></h2>
<p>接入流程如下：</p>
<ol>
<li>先获取Authorization Code；</li>
<li>通过Authorization Code获取Access Token</li>
</ol>
<p>1.Step1：获取Authorization Code</p>
<p>GET</p>
<p>https://graph.qq.com/oauth2.0/authorize?response_type=code&amp;client_id=client_id&amp;redirect_uri=https://localhost:5001/signin-qq&amp;state=123abc</p>
<p>具体参数可查看官网。</p>
<p>state由用户自己创建一个随机数，以防止CSRF攻击。</p>
<p>如果用户成功登录并授权，则会跳转到指定的回调地址，并在redirect_uri地址后带上Authorization Code和原始的state值。如：</p>
<p>https://localhost:5001/signin-qq?code=B6D497755EACE4635115FC82BE24F280&amp;state=123abc</p>
<p>后台先根据state验证是自己发出的请求，判断是否相同，不相同，则代表非本项目发出的授权登录请求。</p>
<ol start="2">
<li>根据code获取access_token</li>
</ol>
<p>GET</p>
<p>https://graph.qq.com/oauth2.0/token?grant_type=authorization_code&amp;client_id=client_id&amp;client_secret=client_secret&amp;code=B6D497755EACE4635115FC82BE24F280&amp;redirect_uri=https://localhost:5001/signin-qq</p>
<p>这时候你会得到</p>
<div><pre><code>access_token=1B6E45FA99BA3D6B347713440C9BCEFE&amp;expires_in=7776000&amp;refresh_token=8DB1D48D95C85D3EF593936B8ACE5EE0
</code></pre><div aria-hidden="true"><span>1</span><br></div></div><h2 id="获取用户openid-oauth2-0" tabindex="-1"> 获取用户OpenID_OAuth2.0</h2>
<p>GET</p>
<p>https://graph.qq.com/oauth2.0/me?access_token=1B6E45FA99BA3D6B347713440C9BCEFE</p>
<p>openid是此网站上唯一对应用户身份的标识</p>
<div><pre><code>callback( {"client_id":"101867513","openid":"951560F5C7A5AA9E5E599CF9B4ECFFB2"} );
</code></pre><div aria-hidden="true"><span>1</span><br></div></div><h2 id="获取用户的其他信息" tabindex="-1"> 获取用户的其他信息</h2>
<p>用户信息</p>
<p>https://graph.qq.com/user/get_user_info?access_token=1B6E45FA99BA3D6B347713440C9BCEFE&amp;oauth_consumer_key=YOUR_APP_ID&amp;openid=951560F5C7A5AA9E5E599CF9B4ECFFB2</p>
<div><pre><code><span>{</span>
<span>"ret"</span><span>:</span> <span>0</span><span>,</span> 
<span>"msg"</span><span>:</span> <span>""</span><span>,</span> 
<span>"is_lost"</span><span>:</span><span>0</span><span>,</span> 
<span>"nickname"</span><span>:</span> <span>"、天上有木月OvO"</span><span>,</span> 
<span>"gender"</span><span>:</span> <span>"xxx"</span><span>,</span> 
<span>"gender_type"</span><span>:</span> <span>1</span><span>,</span> 
<span>"province"</span><span>:</span> <span>"xxx"</span><span>,</span> 
<span>"city"</span><span>:</span> <span>"xxx"</span><span>,</span> 
<span>"year"</span><span>:</span> <span>"2019"</span><span>,</span> 
<span>"constellation"</span><span>:</span> <span>""</span><span>,</span> 
<span>"figureurl"</span><span>:</span> <span>"http:\/\/qzapp.qlogo.cn\/qzapp\/101867513\/951560F5C7A5AA9E5E599CF9B4ECFFB2\/30"</span><span>,</span> 
<span>"figureurl_1"</span><span>:</span> <span>"http:\/\/qzapp.qlogo.cn\/qzapp\/101867513\/951560F5C7A5AA9E5E599CF9B4ECFFB2\/50"</span><span>,</span> 
<span>"figureurl_2"</span><span>:</span> <span>"http:\/\/qzapp.qlogo.cn\/qzapp\/101867513\/951560F5C7A5AA9E5E599CF9B4ECFFB2\/100"</span><span>,</span> 
<span>"figureurl_qq_1"</span><span>:</span> <span>"http://thirdqq.qlogo.cn/g?b=oidb&amp;k=bjXoWmdlu8fk1m80MCkibMg&amp;s=40&amp;t=1559108425"</span><span>,</span> 
<span>"figureurl_qq_2"</span><span>:</span> <span>"http://thirdqq.qlogo.cn/g?b=oidb&amp;k=bjXoWmdlu8fk1m80MCkibMg&amp;s=100&amp;t=1559108425"</span><span>,</span> <span>"figureurl_qq"</span><span>:</span> <span>"http://thirdqq.qlogo.cn/g?b=oidb&amp;k=bjXoWmdlu8fk1m80MCkibMg&amp;s=640&amp;t=1559108425"</span>
<span>}</span>
</code></pre><div aria-hidden="true"><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br></div></div><h2 id="代码" tabindex="-1"> 代码</h2>
<div><pre><code>services.AddAuthentication(xxx)
.AddGitHub(xxx)
加上AddQQ的配置项
.AddQQ(options =>
{
   options.ClientId = Configuration["Authentication:QQ:ClientId"];
   options.ClientSecret = Configuration["Authentication:QQ:ClientSecret"];
})
</code></pre><div aria-hidden="true"><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br></div></div><p>appsettings.json中配置项</p>
<div><pre><code>  "Authentication": {
   //下面为新增项
   "QQ": {
     "ClientId": "xx",
     "ClientSecret": "xxx"
   }
 }
</code></pre><div aria-hidden="true"><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br></div></div><p>对，没错，QQ登录，已经结束了。接下来就是把这些用户的信息保存到数据库，生成token的过程。</p>
<p>这里</p>
<div><pre><code>[HttpGet("signin-callback")]
public async Task&lt;IActionResult> Home(string provider, string redirectUrl = "")
{

   AuthenticateResult authenticateResult = await _contextAccessor.HttpContext.AuthenticateAsync(provider);
   if (!authenticateResult.Succeeded) return Redirect(redirectUrl);
   var openIdClaim = authenticateResult.Principal.FindFirst(ClaimTypes.NameIdentifier);
   if (openIdClaim == null || string.IsNullOrWhiteSpace(openIdClaim.Value))
       return Redirect(redirectUrl);
       
       
   ClaimsPrincipal principal=authenticateResult.Principal;
   //根据provider，处理用户的基础信息，
   
   long id =SaveQQAsync(principal, openIdClaim.Value)
   
   //xxx
   
}       
</code></pre><div aria-hidden="true"><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br></div></div><p>openIdClaimopenIdClaim是唯一值</p>
<h3 id="lin-user表" tabindex="-1"> lin_user表</h3>
<table>
<thead>
<tr>
<th>字段</th>
<th>类型</th>
<th>备注</th>
</tr>
</thead>
<tbody>
<tr>
<td>Id</td>
<td>long</td>
<td>主键</td>
</tr>
<tr>
<td>Username</td>
<td>varchar(50)</td>
<td>用户名</td>
</tr>
<tr>
<td>Avatar</td>
<td>varchar(50)</td>
<td>头像</td>
</tr>
</tbody>
</table>
<h3 id="lin-user-identity表" tabindex="-1"> lin_user_identity表</h3>
<p>用户授权信息表，用于存储不同登录类型的用户信息，如手机号、邮件、用户名、第三方应用（微信、QQ、GitHub）的登录</p>
<table>
<thead>
<tr>
<th>字段</th>
<th>类型</th>
<th>备注</th>
</tr>
</thead>
<tbody>
<tr>
<td>Id</td>
<td>long</td>
<td>主键</td>
</tr>
<tr>
<td>IdentityType</td>
<td>varchar(50)</td>
<td>认证类型，如 Password，GitHub、QQ、WeiXin等</td>
</tr>
<tr>
<td>Identifier</td>
<td>varchar(24)</td>
<td>认证者，例如 用户名（PassWord认证类型）,授权得到的昵称(QQ),授权得到的用户名（唯一，GitHub)</td>
</tr>
<tr>
<td>Credential</td>
<td>varchar(50)</td>
<td>凭证，例如 密码,存OpenId、Id，同一IdentityType的OpenId的值是唯一的</td>
</tr>
<tr>
<td>CreateUserId</td>
<td>long</td>
<td>绑定的用户Id</td>
</tr>
</tbody>
</table>
<p>根据openId,判断lin_user_identity表中是否存在这一第三方授权信息，如果存在，则返回当前用户lin_user表中的id，如果不存在，则创建一个新的用户信息，插入lin_user、lin_user_identity表中。</p>
<div><pre><code>
public async Task&lt;long> SaveQQAsync(ClaimsPrincipal principal, string openId)
{
   string nickname = principal.FindFirst(ClaimTypes.Name)?.Value;
   string gender = principal.FindFirst(ClaimTypes.Gender)?.Value;
   string picture = principal.FindFirst(QQAuthenticationConstants.Claims.PictureUrl)?.Value;
   string picture_medium = principal.FindFirst(QQAuthenticationConstants.Claims.PictureMediumUrl)?.Value;
   string picture_full = principal.FindFirst(QQAuthenticationConstants.Claims.PictureFullUrl)?.Value;
   string avatar = principal.FindFirst(QQAuthenticationConstants.Claims.AvatarUrl)?.Value;
   string avatar_full = principal.FindFirst(QQAuthenticationConstants.Claims.AvatarFullUrl)?.Value;
   
    Expression&lt;Func&lt;LinUserIdentity, bool>> expression = r => 
               r.IdentityType == LinUserIdentity.QQ&amp;&amp; r.Credential == openId;

   LinUserIdentity linUserIdentity =await _userIdentityRepository.Where(expression).FirstAsync();

   long userId = 0;
   if (linUserIdentity == null)
   {
       LinUser user = new LinUser
       {
           Avatar = avatar_full,
           Nickname = nickname,
           Username = "",
           LinUserIdentitys = new List&lt;LinUserIdentity>()
           {
               new LinUserIdentity
               {
                   CreateTime = DateTime.Now,
                   Credential = openId,
                   IdentityType = LinUserIdentity.GitHub,
                   Identifier = nickname,
               }
           }
       };
       await _userRepository.InsertAsync(user);
       userId = user.Id;
   }
   else
   {
       userId = linUserIdentity.CreateUserId;
   }
   return userId;
}

</code></pre><div aria-hidden="true"><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br><span>24</span><br><span>25</span><br><span>26</span><br><span>27</span><br><span>28</span><br><span>29</span><br><span>30</span><br><span>31</span><br><span>32</span><br><span>33</span><br><span>34</span><br><span>35</span><br><span>36</span><br><span>37</span><br><span>38</span><br><span>39</span><br><span>40</span><br><span>41</span><br><span>42</span><br><span>43</span><br><span>44</span><br><span>45</span><br></div></div><p>上文中的CreateToken，直接将 authenticateResult.Principal.Claims.ToList()，生成token值，会缺少一些系统需要的值，比如键为ClaimTypes.NameIdentifier，应为用户的id，用户的其他信息，如角色/分组，昵称。不同平台的授权登录，键有所不同，所以这里需要二次处理。</p>
<div><pre><code>[HttpGet("signin-callback")]
public async Task&lt;IActionResult> Home(string provider, string redirectUrl = "")
{
 
    //xxx
        
        
    ClaimsPrincipal principal=authenticateResult.Principal;
    
    List&lt;Claim> authClaims = principal.Claims.ToList();
    
    long id =SaveQQAsync(principal, openIdClaim.Value)
    
    LinUser user =await _userRepository.Select.IncludeMany(r => r.LinGroups)
        .WhereCascade(r => r.IsDeleted == false).Where(r => r.Id == id).FirstAsync();

    List&lt;Claim> claims = new List&lt;Claim>()
    {
        new Claim(ClaimTypes.NameIdentifier,user.Id.ToString()),
        new Claim(ClaimTypes.GivenName,user.Nickname??""),
        new Claim(ClaimTypes.Name,user.Username??""),
    };
        
    user.LinGroups?.ForEach(r =>
    {
        claims.Add(new Claim(LinCmsClaimTypes.Groups, r.Id.ToString()));
    });

    claims.AddRange(authClaims);
    string token = this.CreateToken(claims);
    return Redirect($"{redirectUrl}?token={token}#login-result");
 }       
</code></pre><div aria-hidden="true"><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br><span>24</span><br><span>25</span><br><span>26</span><br><span>27</span><br><span>28</span><br><span>29</span><br><span>30</span><br><span>31</span><br><span>32</span><br></div></div><p>前台login-result路由，解析到token值，并保存起来，与用户密码登录后的流程相同。</p>
<h2 id="项目源码" tabindex="-1"> <a href="https://github.com/luoyunchong/lin-cms-dotnetcore/blob/master/src/LinCms.Web/Controllers/Cms/Oauth2Controller.cs" target="_blank" rel="noopener noreferrer">项目源码</a></h2>
]]></content:encoded>
      <enclosure url="http://qzonestyle.gtimg.cn/qzone/vas/opensns/res/img/OAuth_guide_V2_1.png" type="image/png"/>
    </item>
    <item>
      <title>基于 RBAC 实现权限设计</title>
      <link>https://igeekfan.cn/igeekfan-docs/dotnetcore/lin-cms/table.html</link>
      <guid>https://igeekfan.cn/igeekfan-docs/dotnetcore/lin-cms/table.html</guid>
      <source url="https://igeekfan.cn/igeekfan-docs/rss.xml">基于 RBAC 实现权限设计</source>
      <pubDate>Wed, 13 May 2020 11:18:08 GMT</pubDate>
      <content:encoded><![CDATA[<h1 id="基于-rbac-实现权限设计" tabindex="-1"> 基于 RBAC 实现权限设计</h1>
<p>功能：实现一个用户设置多个分组，分组可以设置多个权限，权限与后台 API 方法对应，前端菜单绑定权限编码，前端按钮绑定权限编码，从而实现用户可配置权限，从而控制界面上的元素等。</p>
<h3 id="_1-用户表-lin-user" tabindex="-1"> 1. 用户表 lin_user</h3>
<table>
<thead>
<tr>
<th>字段</th>
<th>备注</th>
<th>类型</th>
</tr>
</thead>
<tbody>
<tr>
<td>id</td>
<td>主键 Id</td>
<td>bigint</td>
</tr>
<tr>
<td>username</td>
<td>用户名</td>
<td>varchar</td>
</tr>
<tr>
<td>nickname</td>
<td>昵称</td>
<td>varchar</td>
</tr>
<tr>
<td>phone_number</td>
<td>手机号</td>
<td>varchar</td>
</tr>
<tr>
<td>avatar</td>
<td>用户默认生成图像，为 null、头像 url</td>
<td>varchar</td>
</tr>
<tr>
<td>email</td>
<td>电子邮箱</td>
<td>varchar</td>
</tr>
<tr>
<td>active</td>
<td>1 激活 2 非激活</td>
<td>int</td>
</tr>
</tbody>
</table>

<h3 id="_2-分组表-lin-group" tabindex="-1"> 2. 分组表 lin_group</h3>
<table>
<thead>
<tr>
<th>字段</th>
<th>备注</th>
<th>类型</th>
</tr>
</thead>
<tbody>
<tr>
<td>id</td>
<td>主键 Id</td>
<td>bigint</td>
</tr>
<tr>
<td>name</td>
<td>权限组名称</td>
<td>varchar</td>
</tr>
<tr>
<td>info</td>
<td>权限组描述</td>
<td>varchar</td>
</tr>
<tr>
<td>is_static</td>
<td>是否是静态分组</td>
<td>bit</td>
</tr>
</tbody>
</table>
<h3 id="_3-用户分组表-lin-user-group" tabindex="-1"> 3. 用户分组表 lin_user_group</h3>
<p>用户分组表。用于用户和分组表的关联。可配置一个用户属于多个分组。</p>
<table>
<thead>
<tr>
<th>字段</th>
<th>备注</th>
<th>类型</th>
</tr>
</thead>
<tbody>
<tr>
<td>id</td>
<td>主键 Id</td>
<td>bigint</td>
</tr>
<tr>
<td>user_id</td>
<td>用户 ID</td>
<td>bigint</td>
</tr>
<tr>
<td>group_id</td>
<td>分组 ID</td>
<td>bigint</td>
</tr>
</tbody>
</table>
<h3 id="_4-权限表-lin-permission" tabindex="-1"> 4. 权限表 lin_permission</h3>
<p>权限表，本系统通过反射在系统初次启动时，启动异步任务，将不存在的权限新增到此表中。</p>
<table>
<thead>
<tr>
<th>字段</th>
<th>备注</th>
<th>类型</th>
</tr>
</thead>
<tbody>
<tr>
<td>id</td>
<td>主键 Id</td>
<td>bigint</td>
</tr>
<tr>
<td>module</td>
<td>权限所属模块，例如：人员管理</td>
<td>varchar</td>
</tr>
<tr>
<td>name</td>
<td>所属权限、权限名称，例如：访问首页</td>
<td>varchar</td>
</tr>
</tbody>
</table>
<h3 id="_5-分组权限表-lin-group-permission" tabindex="-1"> 5. 分组权限表 lin_group_permission</h3>
<p>分组权限表，用于分组与权限表的关联</p>
<table>
<thead>
<tr>
<th>字段</th>
<th>备注</th>
<th>类型</th>
</tr>
</thead>
<tbody>
<tr>
<td>id</td>
<td>主键 Id</td>
<td>bigint</td>
</tr>
<tr>
<td>group_id</td>
<td>分组 Id</td>
<td>bigint</td>
</tr>
<tr>
<td>permission_id</td>
<td>权限 Id</td>
<td>bigint</td>
</tr>
</tbody>
</table>
<h3 id="_6-用户身份认证登录表-lin-user-identity" tabindex="-1"> 6. 用户身份认证登录表 lin_user_identity</h3>
<p>用户授权信息表，用于存储不同登录类型的用户信息，如手机号、邮件、用户名、第三方应用（微信、QQ、GitHub）的登录</p>
<table>
<thead>
<tr>
<th>字段</th>
<th>备注</th>
<th>类型</th>
</tr>
</thead>
<tbody>
<tr>
<td>id</td>
<td>char</td>
<td>主键 Id</td>
</tr>
<tr>
<td>identity_type</td>
<td>varchar</td>
<td>认证类型 Password，GitHub、QQ、WeiXin 等</td>
</tr>
<tr>
<td>identifier</td>
<td>varchar</td>
<td>认证者，例如 用户名,手机号，邮件等，</td>
</tr>
<tr>
<td>credential</td>
<td>varchar</td>
<td>凭证，例如 密码,存 OpenId、Id，同一 IdentityType 的 OpenId 的值是唯一的</td>
</tr>
<tr>
<td>create_user_id</td>
<td>bigint</td>
<td>绑定的用户 Id</td>
</tr>
<tr>
<td>create_time</td>
<td>datetime</td>
<td></td>
</tr>
</tbody>
</table>
<h2 id="字典管理" tabindex="-1"> 字典管理</h2>
<p>主要功能：仅限于通用的下拉列表选择，有变化的可能性。抽象成统一的配置项。</p>
<p>比如：文章是（原创，转载，翻译),性别是（男，女）。当然更多，在下文会有介绍。</p>
<h3 id="_1-base-type-字典类别管理" tabindex="-1"> 1.base_type （字典类别管理）</h3>
<table>
<thead>
<tr>
<th>字段</th>
<th>类型</th>
<th>备注</th>
</tr>
</thead>
<tbody>
<tr>
<td>id</td>
<td>int</td>
<td></td>
</tr>
<tr>
<td>type_code</td>
<td>varchar(50)</td>
<td>类别编码</td>
</tr>
<tr>
<td>full_name</td>
<td>varchar(50)</td>
<td>全称</td>
</tr>
<tr>
<td>sort_code</td>
<td>int</td>
<td>排序码</td>
</tr>
</tbody>
</table>
<h3 id="_2-base-item-字典管理" tabindex="-1"> 2.base_item （字典管理）</h3>
<table>
<thead>
<tr>
<th>字段</th>
<th>类型</th>
<th>备注</th>
</tr>
</thead>
<tbody>
<tr>
<td>id</td>
<td>int</td>
<td></td>
</tr>
<tr>
<td>base_type_id</td>
<td>int</td>
<td>类别 id(关联 base_type 的 id)</td>
</tr>
<tr>
<td>item_code</td>
<td>varchar(50)</td>
<td>字典编码</td>
</tr>
<tr>
<td>item_name</td>
<td>varchar(50)</td>
<td>字典全称</td>
</tr>
<tr>
<td>sort_code</td>
<td>int</td>
<td>排序码</td>
</tr>
</tbody>
</table>
<p>BaseType 1 对 BaseItem 多。</p>
<p>如：标签管理，一个文章下可以设置多个标签，原本需要设计表 Tag,字段也大抵为 Id,Name,Sort 及关联表。
我们使用 BaseType、BaseItem 实现。
BaseType 中 TypeCode 为 tag,FullName 为标签，id 为 1 时。
BaseItem 中 BaseTypeId 为 1，ItemCode 为编码,ItemName 为标签。ItemCode 为不重复的字符串即可。</p>
<p>另 Tag 与 Article 的关联表，需要另设计一个表。</p>
<p>当我们要实现文章类别的下拉，原本需要设计一个表 ArticleType，有字段,id,name,sort 等。
我们可以通过 BaseType、BaseItem 来实现，从而简化这些基础数据。
BaseType 有一条数据，TypeCode 为 字符串 category、FullName 文章类别，BaseItem 存多个文章类别(Java、大数据、Python、C#等)，编码不同即可。</p>
<p><strong>但现实总是事与愿违</strong>,后台取文章列表时，想要取出文章对应的分类，手动 join 时，总觉得 join 的表会有些奇怪。</p>
<p>当然还有其他原因，<strong>局限性</strong>：</p>
<ol>
<li>比如使用了这个字典，分类需要增加一个图片字段，就不能满足要求，那怎么办呢，做不了。</li>
<li>比如标签需要实现这个标签下有多少个文章，通过统计也能实现，</li>
</ol>
<p>使用 FreeSql 实现时，如果二个表之间没有导航属性，是更复杂的。</p>
<h2 id="" tabindex="-1"> </h2>
<h3 id="lin-file-文件存储" tabindex="-1"> lin_file 文件存储</h3>
<p>| 字段           | 类型     | 备注                                     |
| -------------- | -------- | ---------------------------------------- | ------- |
| id             |          | bigint                                   | 主键 Id |
| extension      | varchar  | 后缀                                     |
| md5            | varchar  | 图片 md5 值，防止上传重复图片            |
| name           | varchar  | 名称                                     |
| path           | varchar  | 路径                                     |
| size           | bigint   | 大小                                     |
| type           | smallint | 1 local，2 代表七牛云 3 其他表示其他地方 |
| create_user_id | bigint   | 创建者 ID                                |</p>
<h3 id="lin-log-日志记录" tabindex="-1"> lin_log 日志记录</h3>
<table>
<thead>
<tr>
<th>字段</th>
<th>类型</th>
<th>备注</th>
</tr>
</thead>
<tbody>
<tr>
<td>id</td>
<td>bigint</td>
<td>主键 Id</td>
</tr>
<tr>
<td>authority</td>
<td>varchar</td>
<td>访问哪个权限</td>
</tr>
<tr>
<td>message</td>
<td>varchar</td>
<td>日志信息</td>
</tr>
<tr>
<td>method</td>
<td>varchar</td>
<td>请求方法</td>
</tr>
<tr>
<td>path</td>
<td>varchar</td>
<td>请求路径</td>
</tr>
<tr>
<td>status_code</td>
<td>int</td>
<td>请求的 http 返回码</td>
</tr>
<tr>
<td>time</td>
<td>datetime</td>
<td>日志创建时间</td>
</tr>
<tr>
<td>user_id</td>
<td>bigint</td>
<td>用户 id</td>
</tr>
<tr>
<td>user_name</td>
<td>varchar</td>
<td>用户当时的昵称</td>
</tr>
<tr>
<td>other_message</td>
<td>longtext</td>
<td></td>
</tr>
</tbody>
</table>
]]></content:encoded>
    </item>
    <item>
      <title>FreeSql+ASP.NET Core</title>
      <link>https://igeekfan.cn/igeekfan-docs/dotnetcore/examples/freesql-in-aspnetcore-webapi-how-to-use.html</link>
      <guid>https://igeekfan.cn/igeekfan-docs/dotnetcore/examples/freesql-in-aspnetcore-webapi-how-to-use.html</guid>
      <source url="https://igeekfan.cn/igeekfan-docs/rss.xml">FreeSql+ASP.NET Core</source>
      <pubDate>Fri, 08 May 2020 15:01:00 GMT</pubDate>
      <content:encoded><![CDATA[<h1 id="freesql-asp-net-core" tabindex="-1"> FreeSql+ASP.NET Core</h1>
<h2 id="文章概述" tabindex="-1"> 文章概述</h2>
<p>主要在介绍FreeSql在ASP.NTE Core WebApi中如何使用的过程，完成一个最简单的博客系统的后端接口。</p>
<h2 id="freesql-简介" tabindex="-1"> FreeSql 简介</h2>
<p>国人写的一个功能强大的ORM,FreeSql 支持 MySql/SqlServer/PostgreSQL/Oracle/Sqlite，特点：轻量级、可扩展、基于 .NET Standard 跨平台。</p>
<h2 id="源码" tabindex="-1"> 源码</h2>
<p>代码托管在GitHub上 <a href="https://github.com/luoyunchong/dotnetcore-examples/blob/master/ORM/FreeSql/OvOv.FreeSql.Repository/Controllers/BlogController.cs" target="_blank" rel="noopener noreferrer">https://github.com/luoyunchong/dotnetcore-examples</a></p>
<h2 id="参考" tabindex="-1"> 参考</h2>
<ul>
<li>FreeSql github <a href="https://github.com/2881099/FreeSql" target="_blank" rel="noopener noreferrer">https://github.com/2881099/FreeSql</a></li>
<li><a href="https://docs.microsoft.com/zh-cn/dotnet/core/tools/dotnet-new?tabs=netcore22" target="_blank" rel="noopener noreferrer">关于.net core cli中如何使用dotnet new</a></li>
<li><a href="https://docs.microsoft.com/zh-cn/aspnet/core/web-api/?view=aspnetcore-2.2" target="_blank" rel="noopener noreferrer">使用 ASP.NET Core 创建 Web API</a></li>
<li><a href="https://docs.microsoft.com/zh-cn/aspnet/core/tutorials/web-api-help-pages-using-swagger?view=aspnetcore-2.2" target="_blank" rel="noopener noreferrer">Swagger/OpenAPI 生成接口文档</a></li>
<li><a href="https://github.com/domaindrivendev/Swashbuckle.AspNetCore" target="_blank" rel="noopener noreferrer">Swagger GitHub (Swashbuckle.AspNetCore)</a></li>
</ul>
<h2 id="项目准备" tabindex="-1"> 项目准备</h2>
<ul>
<li>Mysql 5.6</li>
<li>Visual Studio 2019或2017、Visual Studio code</li>
<li>.NET Core 3.1+</li>
<li>PowerShell</li>
<li>懂点mvc，该教程不会教你如何使用 ASP .NET Core MVC、RESTful</li>
</ul>
<h3 id="创建项目" tabindex="-1"> 创建项目</h3>
<p>使用dotnet 命令行创建一个webapi项目，起名为OvOv.FreeSql</p>
<div><pre><code>PS dotnetcore-examples\aspnetcore-freesql> dotnet new webapi -n OvOv.FreeSql
The template "ASP.NET Core Web API" was created successfully.
</code></pre><div aria-hidden="true"><span>1</span><br><span>2</span><br></div></div><p>然后cd 到OvOv.FreeSql目录，通过dotnet run 命令运行项目</p>
<div><pre><code>PS dotnetcore-examples\aspnetcore-freesql&gt; cd .\OvOv.FreeSql\
PS dotnetcore-examples\aspnetcore-freesql\OvOv.FreeSql&gt; dotnet run

info: Microsoft.Hosting.Lifetime[0]
      Now listening on: https://localhost:5001
info: Microsoft.Hosting.Lifetime[0]
      Now listening on: http://localhost:5000
info: Microsoft.Hosting.Lifetime[0]
      Application started. Press Ctrl+C to shut down.
info: Microsoft.Hosting.Lifetime[0]
      Hosting environment: Development
info: Microsoft.Hosting.Lifetime[0]
      Content root path: D:\code\github\dotnetcore-examples\aspnetcore-freesql\OvOv.FreeSql
</code></pre><div aria-hidden="true"><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br></div></div><p>打开浏览器 https://localhost:5001 会出现404</p>
<p>请打开这个地址 https://localhost:5001/api/values ，可看到如下内容。</p>
<div><pre><code>["value1","value2"]
</code></pre><div aria-hidden="true"><span>1</span><br></div></div><p>接下来我们来集成FreeSql，我们以最简单的命令和说明，详细内容去官网看具体内容</p>
<ul>
<li>官网文档 <a href="http://freesql.net/doc" target="_blank" rel="noopener noreferrer">http://freesql.net/doc</a></li>
</ul>
<h2 id="install" tabindex="-1"> Install</h2>
<p>要先cd到OvOv.FreeSql目录中。</p>
<div><pre><code>PS \aspnetcore-freesql\OvOv.FreeSql&gt; dotnet add package FreeSql
PS \aspnetcore-freesql\OvOv.FreeSql&gt; dotnet add package FreeSql.Provider.MySql
</code></pre><div aria-hidden="true"><span>1</span><br><span>2</span><br></div></div><h2 id="code-first" tabindex="-1"> code first</h2>
<ul>
<li><a href="https://github.com/2881099/FreeSql/blob/master/Docs/codefirst.md" target="_blank" rel="noopener noreferrer">关于CodeFirst，官方文档的介绍</a></li>
</ul>
<p>代码优先，使用过EntityFramework的应该很清楚这一概念，我的理解就是：在分析数据库表关系时，不通过在数据库中设计表，而是直接在代码中声明对应的类，使用导航属性代替外键关联，通过数据表字段与C#中的类库对应，从而自动生成数据表。</p>
<h2 id="db-first" tabindex="-1"> db first</h2>
<p>数据库优先：需求分析后，直接设计数据库，通过数据库中的表，直接生成代码，类。</p>
<h2 id="开始" tabindex="-1"> 开始</h2>
<h3 id="分析需求" tabindex="-1"> 分析需求</h3>
<p>我们以code first 为示例，学习如何使用freesql，实现一个简单的博客。将表内容分为博客表（Blog)和评论表（Post)</p>
<h4 id="blog-表" tabindex="-1"> Blog 表</h4>
<table>
<thead>
<tr>
<th>字段名</th>
<th>字段类型</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>BlogId</td>
<td>int</td>
<td>博客id</td>
</tr>
<tr>
<td>Title</td>
<td>varchar(50)</td>
<td>博客标题</td>
</tr>
<tr>
<td>Content</td>
<td>varchar(500)</td>
<td>博客内容</td>
</tr>
<tr>
<td>CreateTime</td>
<td>DateTime</td>
<td>发布时间</td>
</tr>
</tbody>
</table>
<h4 id="post-表" tabindex="-1"> Post 表</h4>
<table>
<thead>
<tr>
<th>字段名</th>
<th>字段类型</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>PostId</td>
<td>int</td>
<td>评论id</td>
</tr>
<tr>
<td>ReplyContent</td>
<td>varchar(50)</td>
<td>标题</td>
</tr>
<tr>
<td>BlogId</td>
<td>int</td>
<td>博客id</td>
</tr>
<tr>
<td>ReplyTime</td>
<td>DateTime</td>
<td>回复时间</td>
</tr>
</tbody>
</table>
<p>建一个Domain文件夹,用于存放数据库表中对应的实体类。</p>
<h3 id="基础介绍" tabindex="-1"> 基础介绍</h3>
<h4 id="_1-column属性介绍-大家可以看源码-解析" tabindex="-1"> 1. Column属性介绍，大家可以看<a href="https://github.com/2881099/FreeSql/blob/f8c3608fdac2933b528605cc46b21b71c79eaacb/FreeSql/DataAnnotations/ColumnAttribute.cs" target="_blank" rel="noopener noreferrer">源码，解析</a></h4>
<p>1). 比如：Blog表中指定了Title为varchar(50),我们如何通过代码指定了主键，唯一值，字形。</p>
<div><pre><code>    <span>public</span> <span>class</span> <span>Blog</span>
    <span>{</span>
        <span>[</span><span><span>Column</span><span><span>(</span>IsIdentity <span>=</span> <span>true</span><span>,</span> IsPrimary <span>=</span> <span>true</span><span>)</span></span></span><span>]</span>
        <span>public</span> <span><span>int</span></span> BlogId <span>{</span> <span>get</span><span>;</span> <span>set</span><span>;</span> <span>}</span>
        <span>[</span><span><span>Column</span><span><span>(</span>DbType <span>=</span> <span>"varchar(50)"</span><span>)</span></span></span><span>]</span>
        <span>public</span> <span><span>string</span></span> Title <span>{</span> <span>get</span><span>;</span> <span>set</span><span>;</span> <span>}</span>
    <span>}</span>
</code></pre><div aria-hidden="true"><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br></div></div><p>2). Column的命名空间在</p>
<div><pre><code><span>using</span> <span>FreeSql<span>.</span>DataAnnotations</span><span>;</span>
</code></pre><div aria-hidden="true"><span>1</span><br></div></div><p>更多属性介绍</p>
<table>
<thead>
<tr>
<th>字段</th>
<th>备注</th>
</tr>
</thead>
<tbody>
<tr>
<td>Name</td>
<td>数据库列名</td>
</tr>
<tr>
<td>OldName</td>
<td>指定数据库旧的列名，修改实体属性命名时，同时设置此参数为修改之前的值，CodeFirst才可以正确修改数据库字段；否则将视为【新增字段】</td>
</tr>
<tr>
<td>DbType</td>
<td>数据库类型，如： varchar(255)</td>
</tr>
<tr>
<td>IsPrimary</td>
<td>主键</td>
</tr>
<tr>
<td>IsIdentity</td>
<td>自增标识</td>
</tr>
<tr>
<td>IsNullable</td>
<td>是否可DBNull</td>
</tr>
<tr>
<td>IsIgnore</td>
<td>忽略此列，不迁移、不插入</td>
</tr>
<tr>
<td>IsVersion</td>
<td>设置行锁（乐观锁）版本号，每次更新累加版本号，若更新整个实体时会附带当前的版本号判断（修改失败时抛出异常）</td>
</tr>
<tr>
<td>DbDefautValue</td>
<td>数据库默认值</td>
</tr>
<tr>
<td>MapType</td>
<td>类型映射，比如：可将 enum 属性映射成 typeof(string)</td>
</tr>
<tr>
<td>Uniques</td>
<td>唯一键，在多个属性指定相同的标识，代表联合键；可使用逗号分割多个 UniqueKey 名。</td>
</tr>
</tbody>
</table>
<h4 id="_2-table-的使用-用于在类的上面指定这个表的属性" tabindex="-1"> 2. Table 的使用：用于在类的上面指定这个表的属性</h4>
<div><pre><code><span>[</span><span><span>Table</span><span><span>(</span>Name <span>=</span> <span>"t_blog"</span><span>)</span></span></span><span>]</span>
<span>public</span> <span>class</span> <span>Blog</span> <span>{</span>
  <span>//...</span>
<span>}</span>
</code></pre><div aria-hidden="true"><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br></div></div><p>更多属性介绍</p>
<table>
<thead>
<tr>
<th>字段</th>
<th>备注</th>
</tr>
</thead>
<tbody>
<tr>
<td>Name</td>
<td>数据库表名</td>
</tr>
<tr>
<td>OldName</td>
<td>指定数据库旧的表名，修改实体命名时，同时设置此参数为修改之前的值，CodeFirst才可以正确修改数据库表；否则将视为【创建新表】</td>
</tr>
<tr>
<td>SelectFilter</td>
<td>查询过滤SQL，实现类似 a.IsDeleted = 1 功能</td>
</tr>
<tr>
<td>DisableSyncStructure</td>
<td>禁用 CodeFirst 同步结构迁移</td>
</tr>
</tbody>
</table>
<h4 id="_3-其他的还是看-https-github-com-2881099-freesql-blob-master-docs-codefirst-md" tabindex="-1"> 3. 其他的还是看 https://github.com/2881099/FreeSql/blob/master/Docs/codefirst.md</h4>
<h4 id="blog-cs" tabindex="-1"> Blog.cs</h4>
<div><pre><code><span>using</span> <span>FreeSql<span>.</span>DataAnnotations</span><span>;</span>
<span>using</span> <span>System</span><span>;</span>

<span>namespace</span> <span>OvOv<span>.</span>FreeSql<span>.</span>Domain</span>
<span>{</span>
    <span>public</span> <span>class</span> <span>Blog</span>
    <span>{</span>
        <span>[</span><span><span>Column</span><span><span>(</span>IsIdentity <span>=</span> <span>true</span><span>,</span> IsPrimary <span>=</span> <span>true</span><span>)</span></span></span><span>]</span>
        <span>public</span> <span><span>int</span></span> BlogId <span>{</span> <span>get</span><span>;</span> <span>set</span><span>;</span> <span>}</span>
        <span>[</span><span><span>Column</span><span><span>(</span>DbType <span>=</span> <span>"varchar(50)"</span><span>)</span></span></span><span>]</span>
        <span>public</span> <span><span>string</span></span> Title <span>{</span> <span>get</span><span>;</span> <span>set</span><span>;</span> <span>}</span>
        <span>[</span><span><span>Column</span><span><span>(</span>DbType <span>=</span> <span>"varchar(500)"</span><span>)</span></span></span><span>]</span>
        <span>public</span> <span><span>string</span></span> Content <span>{</span> <span>get</span><span>;</span> <span>set</span><span>;</span> <span>}</span>
        <span>public</span> <span>DateTime</span> CreateTime <span>{</span> <span>get</span><span>;</span> <span>set</span><span>;</span> <span>}</span>


    <span>}</span>
<span>}</span>
</code></pre><div aria-hidden="true"><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br></div></div><h4 id="post-cs" tabindex="-1"> Post.cs</h4>
<div><pre><code>
<span>using</span> <span>FreeSql<span>.</span>DataAnnotations</span><span>;</span>
<span>using</span> <span>System</span><span>;</span>

<span>namespace</span> <span>OvOv<span>.</span>FreeSql<span>.</span>Domain</span>
<span>{</span>
    <span>public</span> <span>class</span> <span>Post</span>
    <span>{</span>
        <span>[</span><span><span>Column</span><span><span>(</span>IsIdentity <span>=</span> <span>true</span><span>,</span> IsPrimary <span>=</span> <span>true</span><span>)</span></span></span><span>]</span>
        <span>public</span> <span><span>int</span></span> PostId <span>{</span> <span>get</span><span>;</span> <span>set</span><span>;</span> <span>}</span>
        <span>[</span><span><span>Column</span><span><span>(</span>DbType <span>=</span> <span>"varchar(50)"</span><span>)</span></span></span><span>]</span>
        <span>public</span> <span><span>string</span></span> ReplyContent <span>{</span> <span>get</span><span>;</span> <span>set</span><span>;</span> <span>}</span>
        <span>public</span> <span><span>int</span></span> BlogId <span>{</span> <span>get</span><span>;</span> <span>set</span><span>;</span> <span>}</span>
        <span>public</span> <span>DateTime</span> ReplyTime <span>{</span> <span>get</span><span>;</span> <span>set</span><span>;</span> <span>}</span>
        <span>public</span> <span>Blog</span> Blog <span>{</span> <span>get</span><span>;</span> <span>set</span><span>;</span> <span>}</span>
    <span>}</span>
<span>}</span>
</code></pre><div aria-hidden="true"><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br></div></div><h4 id="startup-cs" tabindex="-1"> Startup.cs</h4>
<p>非全部代码，这里注意点：要先在mysql中创建数据库<strong>FreeSql_Blog</strong>，否则一直提示<strong>主库xxxxx</strong>,官网未找到相关描述。</p>
<p>这里初始化FreeSql，并使用单例模式，注入到默认的依赖中，这样在Controller中即可直接注入。</p>
<div><pre><code><span>namespace</span> <span>OvOv<span>.</span>FreeSql</span>
<span>{</span>
    <span>public</span> <span>class</span> <span>Startup</span>
    <span>{</span>
        <span>public</span> <span>Startup</span><span>(</span><span>IConfiguration</span> configuration<span>)</span>
        <span>{</span>
            Fsql <span>=</span> <span>new</span> <span>FreeSqlBuilder</span><span>(</span><span>)</span>
                        <span>.</span><span>UseConnectionString</span><span>(</span>DataType<span>.</span>MySql<span>,</span> <span>@"Data Source=127.0.0.1;Port=3306;User ID=root;Password=123456;Initial Catalog=FreeSql_Blog;Charset=utf8;SslMode=none;Max pool size=10"</span><span>)</span>
                        <span>.</span><span>UseAutoSyncStructure</span><span>(</span><span>true</span><span>)</span>
                        <span>.</span><span>Build</span><span>(</span><span>)</span><span>;</span>
        <span>}</span>

        <span>public</span> <span>IFreeSql</span> Fsql <span>{</span> <span>get</span><span>;</span> <span>}</span>

        <span>public</span> <span><span>void</span></span> <span>ConfigureServices</span><span>(</span><span>IServiceCollection</span> services<span>)</span>
        <span>{</span>
            services<span>.</span><span><span>AddSingleton</span><span><span>&lt;</span>IFreeSql<span>></span></span></span><span>(</span>Fsql<span>)</span><span>;</span>

        <span>}</span>
    <span>}</span>
<span>}</span>
</code></pre><div aria-hidden="true"><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br></div></div><h4 id="blogcontroller" tabindex="-1"> BlogController</h4>
<p>在controllers文件夹新建一个控制器BlogController</p>
<div><pre><code><span>using</span> <span>System</span><span>;</span>
<span>using</span> <span>System<span>.</span>Collections<span>.</span>Generic</span><span>;</span>
<span>using</span> <span>System<span>.</span>Linq</span><span>;</span>
<span>using</span> <span>System<span>.</span>Threading<span>.</span>Tasks</span><span>;</span>
<span>using</span> <span>FreeSql</span><span>;</span>
<span>using</span> <span>Microsoft<span>.</span>AspNetCore<span>.</span>Mvc</span><span>;</span>
<span>using</span> <span>OvOv<span>.</span>FreeSql<span>.</span>Domain</span><span>;</span>

<span>namespace</span> <span>OvOv<span>.</span>FreeSql<span>.</span>Controllers</span>
<span>{</span>
    <span>[</span><span><span>Route</span><span><span>(</span><span>"api/[controller]"</span><span>)</span></span></span><span>]</span>
    <span>[</span><span><span>ApiController</span></span><span>]</span>
    <span>public</span> <span>class</span> <span>BlogController</span> <span>:</span> <span><span>ControllerBase</span></span>
    <span>{</span>
        <span>// GET api/Blog</span>

        <span>IFreeSql</span> _fsql<span>;</span>
        <span>public</span> <span>BlogController</span><span>(</span><span>IFreeSql</span> fsql<span>)</span>
        <span>{</span>
            _fsql <span>=</span> fsql<span>;</span>
        <span>}</span>

        <span>[</span><span><span>HttpGet</span></span><span>]</span>
        <span>public</span> <span>ActionResult<span>&lt;</span>IEnumerable<span>&lt;</span>Blog<span>></span><span>></span></span> <span>Get</span><span>(</span><span>)</span>
        <span>{</span>
            <span>List<span>&lt;</span>Blog<span>></span></span> blogs <span>=</span> _fsql<span>.</span><span><span>Select</span><span><span>&lt;</span>Blog<span>></span></span></span><span>(</span><span>)</span><span>.</span><span>OrderByDescending</span><span>(</span>r <span>=></span> r<span>.</span>CreateTime<span>)</span><span>.</span><span>ToList</span><span>(</span><span>)</span><span>;</span>

            <span>return</span> blogs<span>;</span>
        <span>}</span>

        <span>// GET api/blog/5</span>
        <span>[</span><span>HttpGet</span><span>(</span><span>"{id}"</span><span>)</span><span>]</span>
        <span>public</span> <span>ActionResult<span>&lt;</span>Blog<span>></span></span> <span>Get</span><span>(</span><span><span>int</span></span> id<span>)</span>
        <span>{</span>
            <span>return</span> _fsql<span>.</span><span><span>Select</span><span><span>&lt;</span>Blog<span>></span></span></span><span>(</span>id<span>)</span><span>.</span><span>ToOne</span><span>(</span><span>)</span><span>;</span>
        <span>}</span>


        <span>// DELETE api/blog/5</span>
        <span>[</span><span>HttpDelete</span><span>(</span><span>"{id}"</span><span>)</span><span>]</span>
        <span>public</span> <span><span>void</span></span> <span>Delete</span><span>(</span><span><span>int</span></span> id<span>)</span>
        <span>{</span>
            _fsql<span>.</span><span><span>Delete</span><span><span>&lt;</span>Blog<span>></span></span></span><span>(</span><span>new</span> <span>{</span> BlogId <span>=</span> id <span>}</span><span>)</span><span>.</span><span>ExecuteAffrows</span><span>(</span><span>)</span><span>;</span>
        <span>}</span>
    <span>}</span>
<span>}</span>
</code></pre><div aria-hidden="true"><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br><span>24</span><br><span>25</span><br><span>26</span><br><span>27</span><br><span>28</span><br><span>29</span><br><span>30</span><br><span>31</span><br><span>32</span><br><span>33</span><br><span>34</span><br><span>35</span><br><span>36</span><br><span>37</span><br><span>38</span><br><span>39</span><br><span>40</span><br><span>41</span><br><span>42</span><br><span>43</span><br><span>44</span><br><span>45</span><br><span>46</span><br></div></div><p>重新运行，打开地址 http://localhost:5001/api/blog 会发现数据库中生成了表blog，这时候表post并没有生成。所以我们判断，只有在访问到实体类才检查是否存在表结构，然后执行相应的处理。</p>
<p>手动向blog表中加一些数据，然后再次请求</p>
<ul>
<li>http://localhost:5001/api/blog， 可看到相应的数据。</li>
<li>http://localhost:5001/api/blog/1  可得到单个数据。</li>
</ul>
<h3 id="自动同步实体结构【开发环境必备】" tabindex="-1"> 自动同步实体结构【开发环境必备】</h3>
<p>此功能默认为开启状态，发布正式环境后，请修改此设置</p>
<div><pre><code>Fsql = new FreeSqlBuilder()
          .UseConnectionString(DataType.MySql, @"连接字符串")
          .UseAutoSyncStructure(true)
          .Build();
                      
//UseAutoSyncStructure(true/false)【开发环境必备】自动同步实体结构到数据库，程序运行中检查实体表是否存在，然后创建或修改

// 也可使用此方法指定是否自动同步结构。                  
Fsql.CodeFirst.IsAutoSyncStructure = true;
</code></pre><div aria-hidden="true"><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br></div></div>]]></content:encoded>
    </item>
    <item>
      <title>依赖注入scrutor</title>
      <link>https://igeekfan.cn/igeekfan-docs/dotnetcore/lin-cms/dependency-injection-scrutor.html</link>
      <guid>https://igeekfan.cn/igeekfan-docs/dotnetcore/lin-cms/dependency-injection-scrutor.html</guid>
      <source url="https://igeekfan.cn/igeekfan-docs/rss.xml">依赖注入scrutor</source>
      <pubDate>Fri, 08 May 2020 15:01:00 GMT</pubDate>
      <content:encoded><![CDATA[<h1 id="依赖注入scrutor" tabindex="-1"> 依赖注入scrutor</h1>
<p>官网介绍</p>
<p><a href="https://docs.microsoft.com/zh-cn/aspnet/core/fundamentals/dependency-injection?view=aspnetcore-2.2" target="_blank" rel="noopener noreferrer">https://docs.microsoft.com/zh-cn/aspnet/core/fundamentals/dependency-injection?view=aspnetcore-2.2</a></p>
<ul>
<li>开源地址<a href="https://github.com/khellang/Scrutor" target="_blank" rel="noopener noreferrer">https://github.com/khellang/Scrutor</a></li>
<li>参考文档 <a href="https://www.cnblogs.com/catcher1994/p/10316928.html" target="_blank" rel="noopener noreferrer">https://www.cnblogs.com/catcher1994/p/10316928.html</a>
手动管理依赖注入过于麻烦,当有多个仓储，服务，无法统一注入，Scrutor能帮助我们简化ASP.NET Core的DI注册。</li>
</ul>
<p>在ConfigServices中，我们原本需要这样子依次注入仓储，服务和其他接口及实现，当有多个仓储时，这样就过于繁琐。</p>
<div><pre><code>services.AddTransient&lt;IUserRepository, UserRepository>();
services.AddTransient&lt;IUserService, UserService>();
services.AddTransient&lt;ICurrentUser, CurrentUser>();
</code></pre><div aria-hidden="true"><span>1</span><br><span>2</span><br><span>3</span><br></div></div><h2 id="serivce后缀服务注入di" tabindex="-1"> Serivce后缀服务注入DI</h2>
<p>当我们有多个Service后缀的服务时，使用以下方法，可将服务扫描只留下以Serivce结尾的类，将其类型注册为提供所有公共接口生成服务，其生命周期为Transient，</p>
<div><pre><code>services.Scan(scan => scan
        //加载Startup这个类所在的程序集
        .FromAssemblyOf&lt;Startup>()
        // 表示要注册那些类，上面的代码还做了过滤，只留下了以 Service 结尾的类
        .AddClasses(classes => classes.Where(t => t.Name.EndsWith("Service", StringComparison.OrdinalIgnoreCase)))
        //表示将类型注册为提供其所有公共接口作为服务
        .AsImplementedInterfaces()
        //表示注册的生命周期为 Transient
        .WithTransientLifetime()
         );

</code></pre><div aria-hidden="true"><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br></div></div><h2 id="itransientdependency" tabindex="-1"> ITransientDependency</h2>
<p>新建一个空接口，当其他类继承此接口后，统一注入到DI中，以Transient的生命周期。</p>
<div><pre><code>namespace LinCms.Zero.Dependency
{
    public interface ITransientDependency
    {
    }
}
</code></pre><div aria-hidden="true"><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br></div></div><h2 id="接口" tabindex="-1"> 接口</h2>
<div><pre><code>public interface ICurrentUser
{
    int? Id { get; }

    int? GroupId { get; }

    bool? IsAdmin { get; }
}
</code></pre><div aria-hidden="true"><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br></div></div><h2 id="模拟实现" tabindex="-1"> 模拟实现</h2>
<div><pre><code>    public class CurrentUser : ICurrentUser, ITransientDependency
    {
     
        public int? Id => 1;
        public int? GroupId => 2;
        public bool? IsAdmin => true;
    }
</code></pre><div aria-hidden="true"><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br></div></div><p>扫描所有继承ITransientDependency的实现。</p>
<div><pre><code>   services.Scan(scan => scan
       // We start out with all types in the assembly of ITransientService
        .FromAssemblyOf&lt;ITransientDependency>()
        // AddClasses starts out with all public, non-abstract types in this assembly.
        // These types are then filtered by the delegate passed to the method.
        // In this case, we filter out only the classes that are assignable to ITransientService.
        .AddClasses(classes => classes.AssignableTo&lt;ITransientDependency>())
        // We then specify what type we want to register these classes as.
        // In this case, we want to register the types as all of its implemented interfaces.
        // So if a type implements 3 interfaces; A, B, C, we'd end up with three separate registrations.
        .AsImplementedInterfaces()
        // And lastly, we specify the lifetime of these registrations.
        .WithTransientLifetime()
         );

</code></pre><div aria-hidden="true"><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br></div></div><h2 id="如何使用" tabindex="-1"> 如何使用</h2>
<p>在其他类中使用此接口</p>
<div><pre><code>[ApiController]
[Route("cms/user")]
public class UserController : ControllerBase
{
    private readonly ICurrentUser _currentUser;

    public UserController(ICurrentUser currentUser)
    {
        _currentUser = currentUser;
    }

    [HttpGet]
    public int GetUser()
    {
        return _currentUser.Id;
    }
}
</code></pre><div aria-hidden="true"><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br></div></div><h2 id="统一注入" tabindex="-1"> 统一注入</h2>
<p>当然，我们可以统一注入，而非写二次servics.Scan</p>
<div><pre><code>services.Scan(scan => scan
            .FromAssemblyOf&lt;Startup>()
            .AddClasses(classes => classes.Where(t => t.Name.EndsWith("Service",StringComparison.OrdinalIgnoreCase)))
            .AsImplementedInterfaces()
            .WithTransientLifetime()
            .FromAssemblyOf&lt;ITransientDependency>()
            .AddClasses(classes => classes.AssignableTo&lt;ITransientDependency>())
            .AsImplementedInterfaces()
            .WithTransientLifetime()
      );
</code></pre><div aria-hidden="true"><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br></div></div>]]></content:encoded>
    </item>
    <item>
      <title>认证与授权</title>
      <link>https://igeekfan.cn/igeekfan-docs/dotnetcore/lin-cms/dynamic-authorization-in-aspnetcore.html</link>
      <guid>https://igeekfan.cn/igeekfan-docs/dotnetcore/lin-cms/dynamic-authorization-in-aspnetcore.html</guid>
      <source url="https://igeekfan.cn/igeekfan-docs/rss.xml">认证与授权</source>
      <pubDate>Fri, 08 May 2020 15:01:00 GMT</pubDate>
      <content:encoded><![CDATA[<h1 id="认证与授权" tabindex="-1"> 认证与授权</h1>
<p>主要就<strong>基于权限的授权</strong>的实现进行研究，实现方法级别的权限验证。</p>
<ul>
<li><a href="https://www.cnblogs.com/RainingNight/p/dynamic-authorization-in-asp-net-core.html" target="_blank" rel="noopener noreferrer">https://www.cnblogs.com/RainingNight/p/dynamic-authorization-in-asp-net-core.html</a></li>
</ul>
<h2 id="认证鉴权相关" tabindex="-1"> 认证鉴权相关</h2>
<p>IdentityServer4</p>
<ul>
<li><a href="https://blog.csdn.net/jasonsong2008/article/details/89226705" target="_blank" rel="noopener noreferrer">ASP.NET Core WebAPI JWT Bearer 认证失败返回自定义数据 Json</a></li>
<li><a href="https://www.cnblogs.com/stulzq/p/8119928.html" target="_blank" rel="noopener noreferrer">IdentityServer4 中文文档与实战</a></li>
</ul>
<h2 id="jwt" tabindex="-1"> JWT</h2>
<p>json web token</p>
]]></content:encoded>
    </item>
    <item>
      <title>CAP实现EventBus</title>
      <link>https://igeekfan.cn/igeekfan-docs/dotnetcore/lin-cms/rabbitmq.html</link>
      <guid>https://igeekfan.cn/igeekfan-docs/dotnetcore/lin-cms/rabbitmq.html</guid>
      <source url="https://igeekfan.cn/igeekfan-docs/rss.xml">CAP实现EventBus</source>
      <pubDate>Fri, 08 May 2020 15:01:00 GMT</pubDate>
      <content:encoded><![CDATA[<h1 id="cap实现eventbus" tabindex="-1"> CAP实现EventBus</h1>
<p>分布式事务一致性，使用的是 <a href="https://github.com/dotnetcore/cap" target="_blank" rel="noopener noreferrer">CAP</a>，那么我们在什么情况下使用它呢。</p>
<p>EventBus:事件总线，是一个基于观察者模块的事件发布/订阅框架，可以将一些复杂的，重复的操作，异步的操作，交给系统去处理，当前系统直接返回成功的操作。</p>
<p>简单的说就是解耦，</p>
<p>比如用户发布文章后，需要将消息推送给关注的用户，这时候，推送会浪费许多时间，本来这个操作与当前登录的用户没有关系，用户也只关注文章发布是否成功，。后续，将推送等操作，交给另一件事件去处理，这样速度更快，屏蔽了一些细节。就类似一种消息通知，我不关心后续是什么操作，只将自己的一些状态传递过去。</p>
<p>我们先来了解一下CAP中的EventBus，主要特点是发布订阅模式，内部使用RabbitMQ实现异构系统的消息同步，通过本地消息表对信息持久化，保证由EventBus发出的消息是可靠的，即高可用。</p>
<p>如果系统启动后在log/log200xxx.txt日志错误原因，RabbitMQ</p>
<div><pre><code>DotNetCore.CAP.BrokerConnectionException: Broker Unreachable
 ---> RabbitMQ.Client.Exceptions.BrokerUnreachableException: None of the specified endpoints were reachable
 ---> RabbitMQ.Client.Exceptions.OperationInterruptedException: The AMQP operation was interrupted: AMQP close-reason, initiated by Peer, code=530, text="- to NOT_ALLOWED access vhost '/admin' refused for user 'admin'", classId=10, methodId=40, cause=
   at RabbitMQ.Client.Impl.SimpleBlockingRpcContinuation.GetReply(TimeSpan timeout)
   at RabbitMQ.Client.Impl.ModelBase.ConnectionOpen(String virtualHost, String capabilities, Boolean insist)
   at RabbitMQ.Client.Framing.Impl.Connection.Open(Boolean insist)
   at RabbitMQ.Client.Framing.Impl.Connection..ctor(IConnectionFactory factory, Boolean insist, IFrameHandler frameHandler, String clientProvidedName)
   at RabbitMQ.Client.Framing.Impl.AutorecoveringConnection.Init(IFrameHandler fh)
   at RabbitMQ.Client.Framing.Impl.AutorecoveringConnection.Init(IEndpointResolver endpoints)
   at RabbitMQ.Client.ConnectionFactory.CreateConnection(IEndpointResolver endpointResolver, String clientProvidedName)
   --- End of inner exception stack trace ---
   at RabbitMQ.Client.ConnectionFactory.CreateConnection(IEndpointResolver endpointResolver, String clientProvidedName)
   at RabbitMQ.Client.ConnectionFactory.CreateConnection(String clientProvidedName)
   at DotNetCore.CAP.RabbitMQ.ConnectionChannelPool.&lt;>c__DisplayClass19_0.&lt;CreateConnection>b__1()
   at DotNetCore.CAP.RabbitMQ.ConnectionChannelPool.GetConnection()
   at DotNetCore.CAP.RabbitMQ.RabbitMQConsumerClient.Connect()
   at DotNetCore.CAP.RabbitMQ.RabbitMQConsumerClientFactory.Create(String groupId)
   --- End of inner exception stack trace ---
   at DotNetCore.CAP.RabbitMQ.RabbitMQConsumerClientFactory.Create(String groupId)
   at DotNetCore.CAP.Internal.ConsumerRegister.&lt;>c__DisplayClass17_0.&lt;Start>b__0()
2020-04-26 15:59:54.280 +08:00 [DBG] Transport connection checking...
2020-04-26 15:59:54.281 +08:00 [WRN] Transport connection is unhealthy, reconnection...
2020-04-26 15:59:54.467 +08:00 [ERR] Broker Unreachable
</code></pre><div aria-hidden="true"><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br></div></div><h2 id="安装下载" tabindex="-1"> 安装下载</h2>
<p>我们就需要安装rabbitmq了后，配置好用户，密码，virtual_hosts，因为rabbimq是erlang写的，所以
前提要安装erlang,官网下载比百度网盘还慢，也可自行去官网下载。</p>
<p>erlang 安装包 链接：https://pan.baidu.com/s/1T1_dI7iPMpEgiP8QC5tlaw
提取码：86jm</p>
<p>rabbitmq 安装包  链接：https://pan.baidu.com/s/1wD22_gKFX2LW9oOx69rnCA
提取码：ohea</p>
<h2 id="配置rabbitmq" tabindex="-1"> 配置RabbitMQ</h2>
<blockquote>
<p>服务开启后，管理地址：http://localhost:15672/</p>
</blockquote>
<ul>
<li>帐号：guest 密码 : guest</li>
</ul>
<p>如果遇到RabbitmMQ安装后，web管理端口http://localhost:15672/ 无法访问的解决</p>
<p>先进入rabbitMQ安装目录下的sbin目录,在目录下shift+右键打开命令行</p>
<p>使用rabbitmq-plugins.bat enable rabbitmq_management开启网页管理界面,然后重启rabbitMQ</p>
<p>1.<a href="https://blog.csdn.net/sxf359/article/details/78239382" target="_blank" rel="noopener noreferrer">https://blog.csdn.net/sxf359/article/details/78239382</a></p>
<p>2.<img src="https://note.youdao.com/yws/api/personal/file/7FA20220D5454DF9B0788B33E3A41FED?method=download&amp;shareKey=c2e5f279b574304e3bd777a75a4e3045" alt="示例" loading="lazy"></p>
<ol start="3">
<li>此命令执行要先定位到rabbitmq的安装目录下的sbin文件夹下。</li>
</ol>
<div><pre><code> rabbitmq-plugins enable rabbitmq_management
</code></pre><div aria-hidden="true"><span>1</span><br></div></div><h2 id="docker下安装rabbitmq" tabindex="-1"> docker下安装rabbitmq</h2>
<p>通过docker来安装rabbitmq,并启动
1.拉取镜像</p>
<div><pre><code><span>docker</span> pull rabbitmq:3.7.7-management
</code></pre><div aria-hidden="true"><span>1</span><br></div></div><p>2.创建和启动容器</p>
<div><pre><code>docker run -d --name rabbitmq3.7.7 -p 5672:5672 -p 15672:15672 -v `pwd`/data:/var/lib/rabbitmq --hostname myRabbit -e RABBITMQ_DEFAULT_VHOST=my_vhost  -e RABBITMQ_DEFAULT_USER=admin -e RABBITMQ_DEFAULT_PASS=admin df80af9ca0c9
</code></pre><div aria-hidden="true"><span>1</span><br></div></div><p>说明：</p>
<p>-d 后台运行容器；</p>
<p>--name 指定容器名；</p>
<p>-p 指定服务运行的端口（5672：应用访问端口；15672：控制台Web端口号）；</p>
<p>-v 映射目录或文件；</p>
<p>--hostname  主机名（RabbitMQ的一个重要注意事项是它根据所谓的 “节点名称” 存储数据，默认为主机名）；</p>
<p>-e 指定环境变量；（RABBITMQ_DEFAULT_VHOST：默认虚拟机名；RABBITMQ_DEFAULT_USER：默认的用户名；RABBITMQ_DEFAULT_PASS：默认用户名的密码）</p>
<p>其他，可查看正在运行的容器</p>
<div><pre><code>docker ps 
</code></pre><div aria-hidden="true"><span>1</span><br></div></div><p>打开浏览器，进入web管理端:http://Server-IP:15672，用户名密码都是admin</p>
<h2 id="开发配置项" tabindex="-1"> 开发配置项</h2>
<p>lin-cms-dotnetcore 中 appsettings.json中配置如下，默认guest,不太安全，所以需要我们稍微学习一下rabbitmq的工具的使用。</p>
<div><pre><code> "RabbitMQ": {
    "HostName": "localhost",
    "UserName": "admin",
    "Password": "123456",
    "Port": 5672,
    "VirtualHost": "/admin"
  }
</code></pre><div aria-hidden="true"><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br></div></div><ol>
<li>
<p>新增一个admin用户，配置这个账号的密码是123455(好像也不安全)，配置tag,这里我们选择management
<img src="https://pic.downk.cc/item/5ea54319c2a9a83be5d27c56.png" alt="" loading="lazy"></p>
</li>
<li>
<p>新建一个virtual hosts，啥意思就不BB了。
<img src="https://pic.downk.cc/item/5ea54392c2a9a83be5d2f596.png" alt="" loading="lazy"></p>
</li>
</ol>
<p>3.给admin这个用户配置virtual hosts</p>
<p>先选择第一个图中的admin用户。
<img src="https://pic.downk.cc/item/5ea5446ac2a9a83be5d3ab26.jpg" alt="" loading="lazy"></p>
<p>然后set permission选择virtual hosts /admin 点击set permission，万事大吉
<img src="https://pic.downk.cc/item/5ea5449bc2a9a83be5d3d674.jpg" alt="" loading="lazy"></p>
<p>重新启动项目，日志不会显示错误。</p>
<p><img src="https://pic.downk.cc/item/5ea545d8c2a9a83be5d4e4e4.jpg" alt="" loading="lazy"></p>
]]></content:encoded>
      <enclosure url="https://note.youdao.com/yws/api/personal/file/7FA20220D5454DF9B0788B33E3A41FED?method=download&shareKey=c2e5f279b574304e3bd777a75a4e3045" type="image/"/>
    </item>
    <item>
      <title>相关技术</title>
      <link>https://igeekfan.cn/igeekfan-docs/dotnetcore/lin-cms/technology.html</link>
      <guid>https://igeekfan.cn/igeekfan-docs/dotnetcore/lin-cms/technology.html</guid>
      <source url="https://igeekfan.cn/igeekfan-docs/rss.xml">相关技术</source>
      <pubDate>Fri, 08 May 2020 05:46:31 GMT</pubDate>
      <content:encoded><![CDATA[<h1 id="相关技术" tabindex="-1"> 相关技术</h1>
<ul>
<li>数据库相关：ORM:<a href="https://github.com/2881099/FreeSql" target="_blank" rel="noopener noreferrer">FreeSql</a>+DataBase:MySQL5.6</li>
<li>ASP.NET Core3.1+WebAPI+RESTful</li>
<li>简化对象映射：<a href="https://automapper.org/" target="_blank" rel="noopener noreferrer">AutoMapper</a></li>
<li>身份认证框架：<a href="https://github.com/IdentityServer/IdentityServer4" target="_blank" rel="noopener noreferrer">IdentityServer4</a></li>
<li>Json Web 令牌:JWT</li>
<li>文档 API：Swagger(<a href="https://github.com/domaindrivendev/Swashbuckle.AspNetCore" target="_blank" rel="noopener noreferrer">Swashbuckle.AspNetCore</a>)</li>
<li>序列化：Newtonsoft.Json</li>
<li>测试框架：Xunit</li>
<li>日志 NLog</li>
<li>依赖注入服务<a href="https://github.com/autofac/Autofac.Extensions.DependencyInjection" target="_blank" rel="noopener noreferrer">AutoFac</a></li>
<li>通用扩展方法 Z.ExtensionMethods</li>
<li>云存储：七牛云 <a href="https://github.com/Hello-Mango/MQiniu.Core" target="_blank" rel="noopener noreferrer">MQiniu.Core</a></li>
<li>分布式事务、EventBus：<a href="https://github.com/dotnetcore/CAP" target="_blank" rel="noopener noreferrer">DotNeteCore.CAP</a></li>
<li>GitHub 第三方授权登录<a href="https://github.com/aspnet-contrib/AspNet.Security.OAuth.Providers" target="_blank" rel="noopener noreferrer">AspNet.Security.OAuth.GitHub</a></li>
<li>QQ 第三方授权登录<a href="https://github.com/aspnet-contrib/AspNet.Security.OAuth.Providers" target="_blank" rel="noopener noreferrer">AspNet.Security.OAuth.QQ</a></li>
<li><a href="https://docs.docker.com/" target="_blank" rel="noopener noreferrer">Docker</a></li>
<li><a href="https://dev.azure.com/" target="_blank" rel="noopener noreferrer">Azure DevOps</a></li>
<li>健康检查<a href="https://github.com/xabaril/AspNetCore.Diagnostics.HealthChecks" target="_blank" rel="noopener noreferrer">AspNetCore.HealthChecks.UI.Client</a></li>
<li><a href="https://help.github.com/en/actions" target="_blank" rel="noopener noreferrer">GitHub Action</a></li>
</ul>
<h3 id="实践" tabindex="-1"> 实践</h3>
<ul>
<li>DDD(Domain-Driven Design)领域驱动设计</li>
<li>Logging（日志）</li>
<li>DevOps(CI/CD,自动化构建)</li>
<li>Database Migrations（数据库自动迁移)</li>
<li>Authentication(身份认证)</li>
<li>Authorization（授权）</li>
<li>Separation of Concerns（关注点分离）</li>
<li>Repository Pattern（仓储模式）</li>
<li>SOLID Principles（单一职责）</li>
<li>Clean Code（代码整洁之道）</li>
</ul>
<h3 id="分层结构-layers" tabindex="-1"> 分层结构（Layers）</h3>
<ul>
<li>identityserver4
<ul>
<li>LinCms.IdentityServer4:使用 id4 授权登录</li>
</ul>
</li>
<li>src
<ul>
<li>LinCms.Web：接口 API（ASP.NET Core)</li>
<li>LinCms.Application:应用服务</li>
<li>LinCms.Application.Contracts:DTO,数据传输对象，应用服务接口</li>
<li>LinCms.Infrastructure:基础设施，数据库持久性的操作</li>
<li>LinCms.Core:该应用的核心，实体类，通用操作类，AOP 扩展，分页对象，基础依赖对象接口，时间扩展方法，当前用户信息，异常类，值对象</li>
<li>LinCms.Plugins 使用单项目实现某个业务的扩展，不需要主要项目结构，可暂时忽略。</li>
</ul>
</li>
<li>test
<ul>
<li>LinCms.Test:对仓储，应用服务或工具类进行测试</li>
</ul>
</li>
</ul>
]]></content:encoded>
    </item>
    <item>
      <title>创建简单Hello World</title>
      <link>https://igeekfan.cn/igeekfan-docs/dotnetcore/examples/console-hello-world.html</link>
      <guid>https://igeekfan.cn/igeekfan-docs/dotnetcore/examples/console-hello-world.html</guid>
      <source url="https://igeekfan.cn/igeekfan-docs/rss.xml">创建简单Hello World</source>
      <pubDate>Wed, 15 Apr 2020 17:09:07 GMT</pubDate>
      <content:encoded><![CDATA[<h1 id="创建简单hello-world" tabindex="-1"> 创建简单Hello World</h1>
<h2 id="源码" tabindex="-1"> 源码</h2>
<p>代码托管在GitHub上 <a href="https://github.com/luoyunchong/dotnetcore-examples/tree/master/console-hello-world" target="_blank" rel="noopener noreferrer">https://github.com/luoyunchong/dotnetcore-examples/tree/master/console-hello-world</a></p>
<h2 id="相关阅读" tabindex="-1"> 相关阅读</h2>
<ul>
<li><a href="https://docs.microsoft.com/zh-cn/dotnet/core/tutorials/with-visual-studio-code" target="_blank" rel="noopener noreferrer">C# 和 Visual Studio Code 入门教程</a></li>
<li><a href="https://blog.csdn.net/qq_40346899/article/details/80955788" target="_blank" rel="noopener noreferrer">vscode调试运行c#详细操作过程</a></li>
<li><strong><a href="https://blog.csdn.net/qin_yu_2010/article/details/83978244" target="_blank" rel="noopener noreferrer">使用Visual Studio Code开发.NET Core看这篇就够了</a></strong> 强烈推荐。</li>
</ul>
<h2 id="开始" tabindex="-1"> 开始</h2>
<p>创建一个hello-word的console，会输出Hello World!</p>
<div><pre><code><span>mkdir</span> console-hello-world
<span>cd</span> console-hello-world
dotnet new console
dotnet run
</code></pre><div aria-hidden="true"><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br></div></div><p>console-hello-world.csproj</p>
<p><strong>OutputType</strong> 标记指定我们要生成的可执行文件，即控制台应用程序。</p>
<p><strong>TargetFramework</strong> 标记指定要定位的 .NET 实现代码。 在高级方案中，可以指定多个目标框架，并在单个操作中生成所有目标框架。</p>
<div><pre><code><span><span><span>&lt;</span>Project</span> <span>Sdk</span><span><span>=</span><span>"</span>Microsoft.NET.Sdk<span>"</span></span><span>></span></span>

  <span><span><span>&lt;</span>PropertyGroup</span><span>></span></span>
    <span><span><span>&lt;</span>OutputType</span><span>></span></span>Exe<span><span><span>&lt;/</span>OutputType</span><span>></span></span>
    <span><span><span>&lt;</span>TargetFramework</span><span>></span></span>netcoreapp3.0<span><span><span>&lt;/</span>TargetFramework</span><span>></span></span>
    <span><span><span>&lt;</span>RootNamespace</span><span>></span></span>console_hello_world<span><span><span>&lt;/</span>RootNamespace</span><span>></span></span>
  <span><span><span>&lt;/</span>PropertyGroup</span><span>></span></span>

<span><span><span>&lt;/</span>Project</span><span>></span></span>

</code></pre><div aria-hidden="true"><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br></div></div><p>在 console-hello-world/bin/Debug/netcoreapp3.0中生成了console-hello-world.dll</p>
<div><pre><code>cd console-hello-world #要先在console-hello-world目录中
dotnet bin/Debug/netcoreapp3.0/console-hello-world.dll
Hello World
</code></pre><div aria-hidden="true"><span>1</span><br><span>2</span><br><span>3</span><br></div></div><p>修改main函数</p>
<div><pre><code><span>using</span> <span>System</span><span>;</span>

<span>namespace</span> <span>console_hello_world</span>
<span>{</span>
    <span>class</span> <span>Program</span>
    <span>{</span>
        <span>static</span> <span><span>void</span></span> <span>Main</span><span>(</span><span><span>string</span><span>[</span><span>]</span></span> args<span>)</span>
        <span>{</span>
            <span>if</span> <span>(</span>args<span>.</span>Length <span>></span> <span>0</span><span>)</span>
            <span>{</span>
                Console<span>.</span><span>WriteLine</span><span>(</span><span><span>$"Hello </span><span><span>{</span><span>args<span>[</span><span>0</span><span>]</span></span><span>}</span></span><span>!"</span></span><span>)</span><span>;</span>
            <span>}</span>
            <span>else</span>
            <span>{</span>
                Console<span>.</span><span>WriteLine</span><span>(</span><span>"Hello!"</span><span>)</span><span>;</span>
            <span>}</span>
        <span>}</span>
    <span>}</span>
<span>}</span>
</code></pre><div aria-hidden="true"><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br></div></div><div><pre><code>$ dotnet run -- John
Hello John!
</code></pre><div aria-hidden="true"><span>1</span><br><span>2</span><br></div></div>]]></content:encoded>
    </item>
    <item>
      <title>.NET Core 简单测试项目</title>
      <link>https://igeekfan.cn/igeekfan-docs/dotnetcore/examples/console-news-types.html</link>
      <guid>https://igeekfan.cn/igeekfan-docs/dotnetcore/examples/console-news-types.html</guid>
      <source url="https://igeekfan.cn/igeekfan-docs/rss.xml">.NET Core 简单测试项目</source>
      <pubDate>Wed, 15 Apr 2020 17:09:07 GMT</pubDate>
      <content:encoded><![CDATA[<h1 id="net-core-简单测试项目" tabindex="-1"> .NET Core 简单测试项目</h1>
<p>使用PowerShell的dotnet cli命令行创建控制台项目，测试项目，测试项目引用控制台项目。</p>
<h2 id="源码" tabindex="-1"> 源码</h2>
<p>代码托管在GitHub上 <a href="https://github.com/luoyunchong/dotnetcore-examples/tree/master/console-news-types" target="_blank" rel="noopener noreferrer">https://github.com/luoyunchong/dotnetcore-examples/tree/master/console-news-types</a></p>
<h2 id="相关参考" tabindex="-1"> 相关参考</h2>
<p>code :<a href="https://github.com/dotnet/samples/blob/master/core/console-apps/NewTypesMsBuild/README.md" target="_blank" rel="noopener noreferrer">https://github.com/dotnet/samples/blob/master/core/console-apps/NewTypesMsBuild/README.md</a></p>
<p>docs: <a href="https://docs.microsoft.com/zh-cn/dotnet/core/tutorials/testing-with-cli" target="_blank" rel="noopener noreferrer">https://docs.microsoft.com/zh-cn/dotnet/core/tutorials/testing-with-cli</a></p>
<p>dotnet-add-reference 使用文档 <a href="https://docs.microsoft.com/zh-cn/dotnet/core/tools/dotnet-add-reference" target="_blank" rel="noopener noreferrer">https://docs.microsoft.com/zh-cn/dotnet/core/tools/dotnet-add-reference</a></p>
<p>总结如下命令行</p>
<div><pre><code>PS dotnetcore-examples&gt; mkdir console-news-types
PS dotnetcore-examples&gt; cd .\console-news-types\ 
PS dotnetcore-examples\console-news-types&gt; mkdir src

PS dotnetcore-examples\console-news-types&gt; mkdir test
PS dotnetcore-examples\console-news-types&gt; ls
Mode                 LastWriteTime         Length Name
----                 -------------         ------ ----
d----           2019/6/27    20:51                src
d----           2019/6/27    20:51                test

PS dotnetcore-examples\console-news-types&gt; cd .\src\
PS dotnetcore-examples\console-news-types\src&gt; dotnet new console -n NewTypes
PS dotnetcore-examples\console-news-types\src&gt; cd ..\test\  
PS dotnetcore-examples\console-news-types\test&gt; dotnet new xunit -n NewTypesTests 
PS dotnetcore-examples\console-news-types\test&gt; cd .\NewTypesTests\
PS dotnetcore-examples\console-news-types\test\NewTypesTests&gt; dotnet add reference ../../src/NewTypes/NewTypes.csproj
#Reference `..\..\src\NewTypes\NewTypes.csproj` added to the project.
</code></pre><div aria-hidden="true"><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br></div></div><p>其他的代码就看上面的二个链接，把代码复制进去，代码很简单，一个接口，二个实现，main函数调用，测试项目引用控制台项目，</p>
<p>先cd 到src\NewTypes目录中，执行 <strong>dotnet run</strong></p>
<div><pre><code>PS dotnetcore-examples\console-news-types\src\NewTypes&gt; dotnet run
Woof!
Meow!
</code></pre><div aria-hidden="true"><span>1</span><br><span>2</span><br><span>3</span><br></div></div><p>先cd 到test\NewTypesTests目录中，执行 <strong>dotnet test</strong>，看好代码，测试类 Assert.Equal() 是成功的，如果是Assert.NotEqual() 则Failure</p>
<div><pre><code>PS dotnetcore-examples\console-news-types\test\NewTypesTests&gt; dotnet test
dotnetcore-examples\console-news-types\test\NewTypesTests\bin\Debug\netcoreapp3.0\NewTypesTests.dll 的测试运行(.NETCoreApp,Version=v3.0)
Microsoft (R) 测试执行命令行工具版本 16.0.1
版权所有 (C) Microsoft Corporation。保留所有权利。

正在启动测试执行，请稍候...

总测试: 2。已通过: 2。失败: 0。已跳过: 0。
测试运行成功。
测试执行时间: 1.5134 秒
</code></pre><div aria-hidden="true"><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br></div></div>]]></content:encoded>
    </item>
    <item>
      <title>RESTful+FreeSql+AutoMapper</title>
      <link>https://igeekfan.cn/igeekfan-docs/dotnetcore/examples/freesql-sample-blog-restful-use-automapper.html</link>
      <guid>https://igeekfan.cn/igeekfan-docs/dotnetcore/examples/freesql-sample-blog-restful-use-automapper.html</guid>
      <source url="https://igeekfan.cn/igeekfan-docs/rss.xml">RESTful+FreeSql+AutoMapper</source>
      <description> RESTful+FreeSql+AutoMapper
 文章概述
本文使用ASP .NET Core的WEB API，构建一个RESTful风格的接口，使用Freesql访问MySQL数据库，实现二个表的简单博客，并集成AutoMapper。
接上一篇


FreeSql在ASP.NTE Core WebApi中如何使用的教程


项目源码 https://github.com/luoyunchong/dotnetcore-examples/tree/master/aspnetcore-freesql


</description>
      <pubDate>Wed, 15 Apr 2020 17:09:07 GMT</pubDate>
      <content:encoded><![CDATA[<h1 id="restful-freesql-automapper" tabindex="-1"> RESTful+FreeSql+AutoMapper</h1>
<h2 id="文章概述" tabindex="-1"> 文章概述</h2>
<p>本文使用ASP .NET Core的WEB API，构建一个RESTful风格的接口，使用Freesql访问MySQL数据库，实现二个表的简单博客，并集成AutoMapper。</p>
<p>接上一篇</p>
<ul>
<li>
<p><a href="http://blog.igeekfan.cn/2019/06/30/re-start/FreeSql-aspnetcore-how-to-use/" target="_blank" rel="noopener noreferrer">FreeSql在ASP.NTE Core WebApi中如何使用的教程</a></p>
</li>
<li>
<p>项目源码 <a href="https://github.com/luoyunchong/dotnetcore-examples/tree/master/aspnetcore-freesql" target="_blank" rel="noopener noreferrer">https://github.com/luoyunchong/dotnetcore-examples/tree/master/aspnetcore-freesql</a></p>
</li>
</ul>

<h2 id="dto作用" tabindex="-1"> Dto作用</h2>
<p>当我们使用RESTful提供接口时，比如创建一个博客，修改一下博客内容时，他们的参数是有区别的。良好的设计应该是</p>
<p>创建一个博客</p>
<div><pre><code>POST /api/blog
data<span>:</span>
<span>{</span>
  <span>"title"</span><span>:</span> <span>"string"</span><span>,</span>
  <span>"content"</span><span>:</span> <span>"string"</span>
<span>}</span>
</code></pre><div aria-hidden="true"><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br></div></div><p>修改一个博客内容</p>
<div><pre><code>PUT /api/blog
data<span>:</span>
<span>{</span>
  <span>"blogId"</span><span>:</span><span>"int"</span><span>,</span>
  <span>"title"</span><span>:</span> <span>"string"</span><span>,</span>
  <span>"content"</span><span>:</span> <span>"string"</span>
<span>}</span>
</code></pre><div aria-hidden="true"><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br></div></div><p>但一个blog 实体如下</p>
<div><pre><code>    <span>public</span> <span>class</span> <span>Blog</span>
    <span>{</span>
        <span>[</span><span><span>Column</span><span><span>(</span>IsIdentity <span>=</span> <span>true</span><span>,</span> IsPrimary <span>=</span> <span>true</span><span>)</span></span></span><span>]</span>
        <span>public</span> <span><span>int</span></span> BlogId <span>{</span> <span>get</span><span>;</span> <span>set</span><span>;</span> <span>}</span>
        <span>public</span> <span><span>string</span></span> Title <span>{</span> <span>get</span><span>;</span> <span>set</span><span>;</span> <span>}</span>
        <span>public</span> <span><span>string</span></span> Content <span>{</span> <span>get</span><span>;</span> <span>set</span><span>;</span> <span>}</span>
        <span>public</span> <span>DateTime</span> CreateTime <span>{</span> <span>get</span><span>;</span> <span>set</span><span>;</span> <span>}</span>
        <span>public</span> <span>virtual</span> <span>List<span>&lt;</span>Post<span>></span></span> Posts <span>{</span> <span>get</span><span>;</span> <span>set</span><span>;</span> <span>}</span>
    <span>}</span>
</code></pre><div aria-hidden="true"><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br></div></div><p>如果我们以Blog作为controllers中的参数时</p>
<div><pre><code>       <span>// POST api/blog</span>
        <span>[</span>HttpPost<span>]</span>
        <span>public</span> <span><span>void</span></span> <span>Post</span><span>(</span><span>[</span><span><span>FromBody</span></span><span>]</span> <span>Blog</span> blog<span>)</span>
        <span>{</span>
            blog<span>.</span>CreateTime<span>=</span>DateTime<span>.</span>Now<span>;</span>
            _fsql<span>.</span><span><span>Insert</span><span><span>&lt;</span>Blog<span>></span></span></span><span>(</span>blog<span>)</span><span>.</span><span>ExecuteAffrows</span><span>(</span><span>)</span><span>;</span>
        <span>}</span>
</code></pre><div aria-hidden="true"><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br></div></div><p>这时修改swagger显示的默认参数是</p>
<div><pre><code><span>{</span>
  <span>"blogId"</span><span>:</span> <span>0</span><span>,</span>
  <span>"title"</span><span>:</span> <span>"string"</span><span>,</span>
  <span>"content"</span><span>:</span> <span>"string"</span><span>,</span>
  <span>"createTime"</span><span>:</span> <span>"2019-06-30T07:33:05.524Z"</span><span>,</span>
  <span>"posts"</span><span>:</span> <span>[</span>
    <span>{</span>
      <span>"postId"</span><span>:</span> <span>0</span><span>,</span>
      <span>"replyContent"</span><span>:</span> <span>"string"</span><span>,</span>
      <span>"blogId"</span><span>:</span> <span>0</span><span>,</span>
      <span>"replyTime"</span><span>:</span> <span>"2019-06-30T07:33:05.524Z"</span>
    <span>}</span>
  <span>]</span>
<span>}</span>
</code></pre><div aria-hidden="true"><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br></div></div><p>如果我们不传递createTime，会出现异常，应该createTime是DateTime，不能为null，只有DateTime?才能为null,有?为可空类型。</p>
<p>所以我们应该为POST方式传递过来时，新建一个实体类，我们称之为DTO(Data Transfer Object)，即数据传输对象，因为createTime即使传递，后端为他赋了值，前台传了也无效。有了DTO，这样可让前端清楚他们应该传递的参数，而不会出现没有作用的参数。</p>
<p>在根目录创建Models/Blogs文件夹，在Blogs文件夹中创建</p>
<h3 id="createblogdto-cs" tabindex="-1"> CreateBlogDto.cs</h3>
<div><pre><code><span>namespace</span> <span>RESTful<span>.</span>FreeSql<span>.</span>Models<span>.</span>Blogs</span>
<span>{</span>
    <span>public</span> <span>class</span> <span>CreateBlogDto</span>
    <span>{</span>
        <span>public</span> <span><span>string</span></span> Title <span>{</span> <span>get</span><span>;</span> <span>set</span><span>;</span> <span>}</span>
        <span>public</span> <span><span>string</span></span> Content <span>{</span> <span>get</span><span>;</span> <span>set</span><span>;</span> <span>}</span>

    <span>}</span>
<span>}</span>

</code></pre><div aria-hidden="true"><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br></div></div><h3 id="updateblogdto-cs" tabindex="-1"> UpdateBlogDto.cs</h3>
<div><pre><code><span>namespace</span> <span>RESTful<span>.</span>FreeSql<span>.</span>Models<span>.</span>Blogs</span>
<span>{</span>
    <span>public</span> <span>class</span> <span>UpdateBlogDto</span>
    <span>{</span>
        <span>public</span> <span><span>int</span></span> BlogId <span>{</span> <span>get</span><span>;</span> <span>set</span><span>;</span> <span>}</span>
        <span>public</span> <span><span>string</span></span> Title <span>{</span> <span>get</span><span>;</span> <span>set</span><span>;</span> <span>}</span>
        <span>public</span> <span><span>string</span></span> Content <span>{</span> <span>get</span><span>;</span> <span>set</span><span>;</span> <span>}</span>
    <span>}</span>
<span>}</span>


</code></pre><div aria-hidden="true"><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br></div></div><p>有了Dto后，我们会发现了新的问题，往数据库插入时，往往使用了一些ORM,他们只支持原本的实体类，如Blog，Post。但不支持CreateBlogDto、UpdateBlogDto,我们可以手动，将一个类的值，赋值给另一个类。
如</p>
<div><pre><code>    <span>CreateBlogDto</span> createBlogDto <span>=</span> <span>new</span> <span>CreateBlogDto</span><span>(</span><span>)</span>
    <span>{</span>
        Title <span>=</span> <span>"我是title"</span><span>,</span>
        Content <span>=</span> <span>"我是content"</span>
    <span>}</span><span>;</span>

    <span>Blog</span> newBlog<span>=</span><span>new</span> <span>Blog</span><span>(</span><span>)</span>
    <span>{</span>
        Title <span>=</span> createBlogDto<span>.</span>Title<span>,</span>
        Content <span>=</span> createBlogDto<span>.</span>Content
    <span>}</span><span>;</span>
</code></pre><div aria-hidden="true"><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br></div></div><p>现在只是非常简单的二个属性，我们还能忍受，但如果是十个属性、而且有着大量的类与类之间的转换呢。这时修改AutoMapper就闪亮登场了。</p>
<h2 id="automapper" tabindex="-1"> AutoMapper</h2>
<blockquote>
<p>作用：A convention-based object-object mapper.</p>
</blockquote>
<p>我们是在ASP .NET Core下使用AutoMapper <a href="https://automapper.readthedocs.io/en/latest/Dependency-injection.html" target="_blank" rel="noopener noreferrer">官网介绍，如何依赖注入中使用</a></p>
<h3 id="setup" tabindex="-1"> Setup</h3>
<p>先cd到dotnetcore-examples\aspnetcore-freesql\RESTful.FreeSql目录</p>
<div><pre><code>PS &gt; dotnet add package AutoMapper
PS &gt; dotnet add package AutoMapper.Extensions.Microsoft.DependencyInjection --version 6.1.1
</code></pre><div aria-hidden="true"><span>1</span><br><span>2</span><br></div></div><p>在StartUp.cs中的ConfigureServices配置如下</p>
<div><pre><code>   public void ConfigureServices(IServiceCollection services)
    {
        // .... Ignore code before this
        
        //AddAutoMapper会去找继承Profile的类，
        services.AddAutoMapper(AppDomain.CurrentDomain.GetAssemblies());

        // .... Ignore code after this
    }
</code></pre><div aria-hidden="true"><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br></div></div><h3 id="adding-profiles" tabindex="-1"> Adding Profiles</h3>
<p>AutoMapper/BlogProfile.cs</p>
<div><pre><code><span>using</span> <span>AutoMapper</span><span>;</span>
<span>using</span> <span>RESTful<span>.</span>FreeSql<span>.</span>Domain</span><span>;</span>
<span>using</span> <span>RESTful<span>.</span>FreeSql<span>.</span>Models<span>.</span>Blogs</span><span>;</span>

<span>namespace</span> <span>RESTful<span>.</span>FreeSql<span>.</span>AutoMapper</span>
<span>{</span>
    <span>public</span> <span>class</span> <span>BlogProfile</span> <span>:</span> <span><span>Profile</span></span>
    <span>{</span>
        <span>public</span> <span>BlogProfile</span><span>(</span><span>)</span> 
        <span>{</span>
            <span><span>CreateMap</span><span><span>&lt;</span>CreateBlogDto<span>,</span> Blog<span>></span></span></span><span>(</span><span>)</span><span>;</span>
            <span><span>CreateMap</span><span><span>&lt;</span>UpdateBlogDto<span>,</span> Blog<span>></span></span></span><span>(</span><span>)</span><span>;</span>
        <span>}</span>
    <span>}</span>
<span>}</span>
</code></pre><div aria-hidden="true"><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br></div></div><p>AutoMapper/BlogProfile.cs</p>
<div><pre><code><span>using</span> <span>AutoMapper</span><span>;</span>
<span>using</span> <span>RESTful<span>.</span>FreeSql<span>.</span>Domain</span><span>;</span>
<span>using</span> <span>RESTful<span>.</span>FreeSql<span>.</span>Models<span>.</span>Blogs</span><span>;</span>

<span>namespace</span> <span>RESTful<span>.</span>FreeSql<span>.</span>AutoMapper</span>
<span>{</span>
    <span>public</span> <span>class</span> <span>PostProfile</span> <span>:</span> <span><span>Profile</span></span>
    <span>{</span>
        <span>public</span> <span>PostProfile</span><span>(</span><span>)</span>
        <span>{</span>
            <span><span>CreateMap</span><span><span>&lt;</span>CreatePostDto<span>,</span>Post<span>></span></span></span><span>(</span><span>)</span><span>;</span>
        <span>}</span>
    <span>}</span>
<span>}</span>
</code></pre><div aria-hidden="true"><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br></div></div><p>Models/Posts/SearchPostDto.cs根据博客id，得到分页的评论时，集成分页类</p>
<div><pre><code><span>using</span> <span>RESTful<span>.</span>FreeSql<span>.</span>Web</span><span>;</span>

<span>namespace</span> <span>RESTful<span>.</span>FreeSql<span>.</span>Models<span>.</span>Posts</span>
<span>{</span>
    <span>public</span> <span>class</span> <span>SearchPostDto</span><span>:</span><span><span>PageDto</span></span>
    <span>{</span>
        <span>public</span> <span><span>int</span></span> BlogId <span>{</span> <span>get</span><span>;</span> <span>set</span><span>;</span> <span>}</span>
    <span>}</span>
<span>}</span>

</code></pre><div aria-hidden="true"><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br></div></div><p>Controlers/BlogController.cs文件中，注入IMapper,</p>
<div><pre><code><span>using</span> <span>AutoMapper</span><span>;</span>
<span>using</span> <span>Microsoft<span>.</span>AspNetCore<span>.</span>Mvc</span><span>;</span>
<span>using</span> <span>System</span><span>;</span>
<span>using</span> <span>System<span>.</span>Collections<span>.</span>Generic</span><span>;</span>
<span>using</span> <span>RESTful<span>.</span>FreeSql<span>.</span>Domain</span><span>;</span>
<span>using</span> <span>RESTful<span>.</span>FreeSql<span>.</span>Models<span>.</span>Blogs</span><span>;</span>
<span>using</span> <span>RESTful<span>.</span>FreeSql<span>.</span>Web</span><span>;</span>

<span>namespace</span> <span>RESTful<span>.</span>FreeSql<span>.</span>Controllers</span>
<span>{</span>
    <span>[</span><span><span>Route</span><span><span>(</span><span>"api/[controller]"</span><span>)</span></span></span><span>]</span>
    <span>[</span><span><span>ApiController</span></span><span>]</span>
    <span>public</span> <span>class</span> <span>BlogController</span> <span>:</span> <span><span>ControllerBase</span></span>
    <span>{</span>
        <span>// GET api/Blog</span>

        <span>private</span> <span>readonly</span> <span>IFreeSql</span> _fsql<span>;</span>
        <span>private</span> <span>readonly</span> <span>IMapper</span> _mapper<span>;</span>
        <span>public</span> <span>BlogController</span><span>(</span><span>IFreeSql</span> fsql<span>,</span> <span>IMapper</span> mapper<span>)</span>
        <span>{</span>
            _fsql <span>=</span> fsql<span>;</span>
            _mapper <span>=</span> mapper<span>;</span>
        <span>}</span>

        <span>/// <span><span><span>&lt;</span>summary</span><span>></span></span></span>
        <span>/// 博客列表页 </span>
        <span>/// <span><span><span>&lt;/</span>summary</span><span>></span></span></span>
        <span>/// <span><span><span>&lt;</span>param</span> <span>name</span><span><span>=</span><span>"</span>pageDto<span>"</span></span><span>></span></span>分页参数<span><span><span>&lt;/</span>param</span><span>></span></span></span>
        <span>/// <span><span><span>&lt;</span>returns</span><span>></span></span><span><span><span>&lt;/</span>returns</span><span>></span></span></span>
        <span>[</span>HttpGet<span>]</span>
        <span>public</span> <span>ActionResult<span>&lt;</span>PagedResultDto<span>&lt;</span>Blog<span>></span><span>></span></span> <span>Get</span><span>(</span><span>[</span><span><span>FromQuery</span></span><span>]</span><span>PageDto</span> pageDto<span>)</span>
        <span>{</span>
            <span>List<span>&lt;</span>Blog<span>></span></span> blogs <span>=</span> _fsql<span>.</span><span><span>Select</span><span><span>&lt;</span>Blog<span>></span></span></span><span>(</span><span>)</span><span>.</span><span>OrderByDescending</span><span>(</span>r <span>=></span> r<span>.</span>CreateTime<span>)</span><span>.</span><span>Page</span><span>(</span>pageDto<span>.</span>PageNumber<span>,</span> pageDto<span>.</span>PageSize<span>)</span><span>.</span><span>ToList</span><span>(</span><span>)</span><span>;</span>
            <span><span>long</span></span> count <span>=</span> _fsql<span>.</span><span><span>Select</span><span><span>&lt;</span>Blog<span>></span></span></span><span>(</span><span>)</span><span>.</span><span>Count</span><span>(</span><span>)</span><span>;</span>
            <span>return</span> <span>new</span> <span>PagedResultDto<span>&lt;</span>Blog<span>></span></span><span>(</span>count<span>,</span> blogs<span>)</span><span>;</span>
        <span>}</span>

        <span>// GET api/blog/5</span>
        <span>[</span><span>HttpGet</span><span>(</span><span>"{id}"</span><span>)</span><span>]</span>
        <span>public</span> <span>ActionResult<span>&lt;</span>Blog<span>></span></span> <span>Get</span><span>(</span><span><span>int</span></span> id<span>)</span>
        <span>{</span>
            <span>// eg.1 return _fsql.Select&lt;Blog>().Where(a => a.Id == id).ToOne();</span>
            <span>// eg.2</span>
            <span>return</span> _fsql<span>.</span><span><span>Select</span><span><span>&lt;</span>Blog<span>></span></span></span><span>(</span>id<span>)</span><span>.</span><span>ToOne</span><span>(</span><span>)</span><span>;</span>
        <span>}</span>

        <span>// POST api/blog</span>
        <span>[</span>HttpPost<span>]</span>
        <span>public</span> <span><span>void</span></span> <span>Post</span><span>(</span><span>[</span><span><span>FromBody</span></span><span>]</span> <span>CreateBlogDto</span> createBlogDto<span>)</span>
        <span>{</span>
            <span>Blog</span> blog <span>=</span> _mapper<span>.</span><span><span>Map</span><span><span>&lt;</span>Blog<span>></span></span></span><span>(</span>createBlogDto<span>)</span><span>;</span>
            blog<span>.</span>CreateTime <span>=</span> DateTime<span>.</span>Now<span>;</span>
            _fsql<span>.</span><span><span>Insert</span><span><span>&lt;</span>Blog<span>></span></span></span><span>(</span>blog<span>)</span><span>.</span><span>ExecuteAffrows</span><span>(</span><span>)</span><span>;</span>
        <span>}</span>

        <span>// PUT api/blog</span>
        <span>[</span>HttpPut<span>]</span>
        <span>public</span> <span><span>void</span></span> <span>Put</span><span>(</span><span>[</span><span><span>FromBody</span></span><span>]</span> <span>UpdateBlogDto</span> updateBlogDto<span>)</span>
        <span>{</span>

            <span>//eg.1 更新指定列</span>
            <span>//_fsql.Update&lt;Blog>(updateBlogDto.BlogId).Set(a => new Blog()</span>
            <span>//{</span>
            <span>//    Title = updateBlogDto.Title,</span>
            <span>//    Content = updateBlogDto.Content</span>
            <span>//}).ExecuteAffrows();</span>

            <span>//eg.2将这个实体更新到数据库中。当更新时，会把其他列的值，如CreateTime也更新掉。</span>
            <span>//使用IgnoreColumns可忽略某一些列。</span>

            <span>Blog</span> blog <span>=</span> _mapper<span>.</span><span><span>Map</span><span><span>&lt;</span>Blog<span>></span></span></span><span>(</span>updateBlogDto<span>)</span><span>;</span>
            _fsql<span>.</span><span><span>Update</span><span><span>&lt;</span>Blog<span>></span></span></span><span>(</span><span>)</span><span>.</span><span>SetSource</span><span>(</span>blog<span>)</span><span>.</span><span>IgnoreColumns</span><span>(</span>r <span>=></span> r<span>.</span>CreateTime<span>)</span><span>.</span><span>ExecuteAffrows</span><span>(</span><span>)</span><span>;</span>
        <span>}</span>

        <span>// DELETE api/blog/5</span>
        <span>[</span><span>HttpDelete</span><span>(</span><span>"{id}"</span><span>)</span><span>]</span>
        <span>public</span> <span><span>void</span></span> <span>Delete</span><span>(</span><span><span>int</span></span> id<span>)</span>
        <span>{</span>
            _fsql<span>.</span><span><span>Delete</span><span><span>&lt;</span>Blog<span>></span></span></span><span>(</span><span>new</span> <span>{</span> BlogId <span>=</span> id <span>}</span><span>)</span><span>.</span><span>ExecuteAffrows</span><span>(</span><span>)</span><span>;</span>
        <span>}</span>
    <span>}</span>
<span>}</span>
</code></pre><div aria-hidden="true"><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br><span>24</span><br><span>25</span><br><span>26</span><br><span>27</span><br><span>28</span><br><span>29</span><br><span>30</span><br><span>31</span><br><span>32</span><br><span>33</span><br><span>34</span><br><span>35</span><br><span>36</span><br><span>37</span><br><span>38</span><br><span>39</span><br><span>40</span><br><span>41</span><br><span>42</span><br><span>43</span><br><span>44</span><br><span>45</span><br><span>46</span><br><span>47</span><br><span>48</span><br><span>49</span><br><span>50</span><br><span>51</span><br><span>52</span><br><span>53</span><br><span>54</span><br><span>55</span><br><span>56</span><br><span>57</span><br><span>58</span><br><span>59</span><br><span>60</span><br><span>61</span><br><span>62</span><br><span>63</span><br><span>64</span><br><span>65</span><br><span>66</span><br><span>67</span><br><span>68</span><br><span>69</span><br><span>70</span><br><span>71</span><br><span>72</span><br><span>73</span><br><span>74</span><br><span>75</span><br><span>76</span><br><span>77</span><br><span>78</span><br><span>79</span><br><span>80</span><br><span>81</span><br><span>82</span><br></div></div><p>Controlers/BlogController.cs文件中，注入IMapper,</p>
<div><pre><code><span>using</span> <span>FreeSql</span><span>;</span>
<span>using</span> <span>Microsoft<span>.</span>AspNetCore<span>.</span>Mvc</span><span>;</span>
<span>using</span> <span>System</span><span>;</span>
<span>using</span> <span>System<span>.</span>Collections<span>.</span>Generic</span><span>;</span>
<span>using</span> <span>System<span>.</span>Threading<span>.</span>Tasks</span><span>;</span>
<span>using</span> <span>AutoMapper</span><span>;</span>
<span>using</span> <span>RESTful<span>.</span>FreeSql<span>.</span>Domain</span><span>;</span>
<span>using</span> <span>RESTful<span>.</span>FreeSql<span>.</span>Models<span>.</span>Posts</span><span>;</span>
<span>using</span> <span>RESTful<span>.</span>FreeSql<span>.</span>Web</span><span>;</span>

<span>namespace</span> <span>RESTful<span>.</span>FreeSql<span>.</span>Controllers</span>
<span>{</span>
    <span>[</span><span><span>Route</span><span><span>(</span><span>"api/[controller]"</span><span>)</span></span></span><span>]</span>
    <span>[</span><span><span>ApiController</span></span><span>]</span>
    <span>public</span> <span>class</span> <span>PostController</span> <span>:</span> <span><span>ControllerBase</span></span>
    <span>{</span>
        <span>// GET: api/Post</span>
        <span>private</span> <span>readonly</span> <span>IFreeSql</span> _fsql<span>;</span>
        <span>private</span> <span>readonly</span> <span>IMapper</span> _mapper<span>;</span>
        <span>public</span> <span>PostController</span><span>(</span><span>IFreeSql</span> fsql<span>,</span> <span>IMapper</span> mapper<span>)</span>
        <span>{</span>
            _fsql <span>=</span> fsql<span>;</span>
            _mapper <span>=</span> mapper<span>;</span>
        <span>}</span>

        <span>/// <span><span><span>&lt;</span>summary</span><span>></span></span></span>
        <span>/// 根据博客id、分页条件查询评论信息</span>
        <span>/// <span><span><span>&lt;/</span>summary</span><span>></span></span></span>
        <span>/// <span><span><span>&lt;</span>param</span> <span>name</span><span><span>=</span><span>"</span>searchPostDto<span>"</span></span><span>></span></span><span><span><span>&lt;/</span>param</span><span>></span></span></span>
        <span>/// <span><span><span>&lt;</span>returns</span><span>></span></span><span><span><span>&lt;/</span>returns</span><span>></span></span></span>
        <span>[</span>HttpGet<span>]</span>
        <span>public</span> <span>PagedResultDto<span>&lt;</span>Post<span>></span></span> <span>Get</span><span>(</span><span>SearchPostDto</span> searchPostDto<span>)</span>
        <span>{</span>
            <span>ISelect<span>&lt;</span>Post<span>></span></span> selectPost <span>=</span> _fsql
                <span>.</span><span><span>Select</span><span><span>&lt;</span>Post<span>></span></span></span><span>(</span><span>)</span>
                <span>.</span><span>Where</span><span>(</span>r <span>=></span> r<span>.</span>BlogId <span>==</span> searchPostDto<span>.</span>BlogId<span>)</span><span>;</span>

            <span>List<span>&lt;</span>Post<span>></span></span> posts <span>=</span> selectPost<span>.</span><span>OrderByDescending</span><span>(</span>r <span>=></span> r<span>.</span>ReplyTime<span>)</span>
                <span>.</span><span>Page</span><span>(</span>searchPostDto<span>.</span>PageNumber<span>,</span> searchPostDto<span>.</span>PageSize<span>)</span>
                <span>.</span><span>ToList</span><span>(</span><span>)</span><span>;</span>

            <span><span>long</span></span> total <span>=</span> selectPost<span>.</span><span>Count</span><span>(</span><span>)</span><span>;</span>

            <span>return</span> <span>new</span> <span>PagedResultDto<span>&lt;</span>Post<span>></span></span><span>(</span>total<span>,</span> posts<span>)</span><span>;</span>
        <span>}</span>

        <span>// GET: api/Post/5</span>
        <span>[</span><span>HttpGet</span><span>(</span><span>"{id}"</span><span>,</span> Name <span>=</span> <span>"Get"</span><span>)</span><span>]</span>
        <span>public</span> <span>Post</span> <span>Get</span><span>(</span><span><span>int</span></span> id<span>)</span>
        <span>{</span>
            <span>return</span> _fsql<span>.</span><span><span>Select</span><span><span>&lt;</span>Post<span>></span></span></span><span>(</span><span>)</span><span>.</span><span>Where</span><span>(</span>a <span>=></span> a<span>.</span>PostId <span>==</span> id<span>)</span><span>.</span><span>ToOne</span><span>(</span><span>)</span><span>;</span>
        <span>}</span>

        <span>// POST: api/Post</span>
        <span>[</span>HttpPost<span>]</span>
        <span>public</span> <span><span>void</span></span> <span>Post</span><span>(</span><span>[</span><span><span>FromBody</span></span><span>]</span> <span>CreatePostDto</span> createPostDto<span>)</span>
        <span>{</span>
            <span>Post</span> post <span>=</span> _mapper<span>.</span><span><span>Map</span><span><span>&lt;</span>Post<span>></span></span></span><span>(</span>createPostDto<span>)</span><span>;</span>
            post<span>.</span>ReplyTime <span>=</span> DateTime<span>.</span>Now<span>;</span>
            _fsql<span>.</span><span>Insert</span><span>(</span>post<span>)</span><span>.</span><span>ExecuteAffrows</span><span>(</span><span>)</span><span>;</span>
        <span>}</span>


        <span>// DELETE: api/Post/</span>
        <span>[</span><span><span>HttpDelete</span><span><span>(</span><span>"{id}"</span><span>)</span></span></span><span>]</span>
        <span>public</span> <span>async</span> <span>Task</span> <span>DeleteAsync</span><span>(</span><span><span>int</span></span> id<span>)</span>
        <span>{</span>
            <span>await</span> _fsql<span>.</span><span><span>Delete</span><span><span>&lt;</span>Post<span>></span></span></span><span>(</span><span>new</span> <span>Post</span> <span>{</span> PostId <span>=</span> id <span>}</span><span>)</span><span>.</span><span>ExecuteAffrowsAsync</span><span>(</span><span>)</span><span>;</span>
        <span>}</span>
    <span>}</span>
<span>}</span>

</code></pre><div aria-hidden="true"><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br><span>24</span><br><span>25</span><br><span>26</span><br><span>27</span><br><span>28</span><br><span>29</span><br><span>30</span><br><span>31</span><br><span>32</span><br><span>33</span><br><span>34</span><br><span>35</span><br><span>36</span><br><span>37</span><br><span>38</span><br><span>39</span><br><span>40</span><br><span>41</span><br><span>42</span><br><span>43</span><br><span>44</span><br><span>45</span><br><span>46</span><br><span>47</span><br><span>48</span><br><span>49</span><br><span>50</span><br><span>51</span><br><span>52</span><br><span>53</span><br><span>54</span><br><span>55</span><br><span>56</span><br><span>57</span><br><span>58</span><br><span>59</span><br><span>60</span><br><span>61</span><br><span>62</span><br><span>63</span><br><span>64</span><br><span>65</span><br><span>66</span><br><span>67</span><br><span>68</span><br><span>69</span><br><span>70</span><br><span>71</span><br><span>72</span><br></div></div><h3 id="参考" tabindex="-1"> 参考</h3>
<ul>
<li>建议大家先看官网 <a href="http://automapper.org/" target="_blank" rel="noopener noreferrer">http://automapper.org/</a></li>
<li>开源地址 <a href="https://github.com/AutoMapper/AutoMapper" target="_blank" rel="noopener noreferrer">https://github.com/AutoMapper/AutoMapper</a></li>
<li>Getting-started 文档 <a href="https://automapper.readthedocs.io/en/latest/Getting-started.html#what-is-automapper" target="_blank" rel="noopener noreferrer">https://automapper.readthedocs.io/en/latest/Getting-started.html#what-is-automapper</a></li>
</ul>
]]></content:encoded>
    </item>
    <item>
      <title>IdentityServer4</title>
      <link>https://igeekfan.cn/igeekfan-docs/dotnetcore/examples/identityserver4.html</link>
      <guid>https://igeekfan.cn/igeekfan-docs/dotnetcore/examples/identityserver4.html</guid>
      <source url="https://igeekfan.cn/igeekfan-docs/rss.xml">IdentityServer4</source>
      <pubDate>Wed, 15 Apr 2020 17:09:07 GMT</pubDate>
      <content:encoded><![CDATA[<h1 id="identityserver4" tabindex="-1"> IdentityServer4</h1>
<h2 id="写的一些identityserver4的示例" tabindex="-1"> 写的一些IdentityServer4的示例</h2>
<p>IdentityServer4 实现单点登录授权token验证</p>
<h2 id="源码" tabindex="-1"> 源码</h2>
<p>代码托管在GitHub上 <a href="https://github.com/luoyunchong/dotnetcore-examples/tree/master/aspnetcore-identityserver4" target="_blank" rel="noopener noreferrer">https://github.com/luoyunchong/dotnetcore-examples/tree/master/aspnetcore-identityserver4</a></p>
<h2 id="参考" tabindex="-1"> 参考</h2>
<ul>
<li><a href="https://www.cnblogs.com/edisonchou/p/identityserver4_foundation_and_quickstart_01.html" target="_blank" rel="noopener noreferrer">.NET Core微服务之基于IdentityServer建立授权与验证服务</a></li>
</ul>
]]></content:encoded>
    </item>
    <item>
      <title>ImCore 即时通讯</title>
      <link>https://igeekfan.cn/igeekfan-docs/dotnetcore/examples/imcore-chat.html</link>
      <guid>https://igeekfan.cn/igeekfan-docs/dotnetcore/examples/imcore-chat.html</guid>
      <source url="https://igeekfan.cn/igeekfan-docs/rss.xml">ImCore 即时通讯</source>
      <pubDate>Wed, 15 Apr 2020 17:09:07 GMT</pubDate>
      <content:encoded><![CDATA[<h1 id="imcore-即时通讯" tabindex="-1"> ImCore 即时通讯</h1>
<h2 id="简介" tabindex="-1"> 简介</h2>
<p>利用 webSocket 协议实现简易、高性能、集群即时通讯组件，支持点对点通讯、群聊通讯、上线下线事件消息等众多实用性功能。</p>
<h2 id="开源地址" tabindex="-1"> 开源地址</h2>
<p><a href="https://github.com/2881099/im" target="_blank" rel="noopener noreferrer">https://github.com/2881099/im</a></p>
<h2 id="示例" tabindex="-1"> 示例</h2>
<p><a href="https://github.com/luoyunchong/dotnetcore-examples/tree/master/dotnet-core-im" target="_blank" rel="noopener noreferrer">https://github.com/luoyunchong/dotnetcore-examples/tree/master/dotnet-core-im</a></p>
<h2 id="演示效果" tabindex="-1"> 演示效果</h2>
<p><img src="https://ae01.alicdn.com/kf/Hf8b31f05dbb94f8da565fce29f78aa78Y.png" alt="https://ae01.alicdn.com/kf/Hf8b31f05dbb94f8da565fce29f78aa78Y.png" loading="lazy"></p>
]]></content:encoded>
      <enclosure url="https://ae01.alicdn.com/kf/Hf8b31f05dbb94f8da565fce29f78aa78Y.png" type="image/png"/>
    </item>
    <item>
      <title>认证鉴权状态</title>
      <link>https://igeekfan.cn/igeekfan-docs/dotnetcore/lin-cms/identityserver4-jwt.html</link>
      <guid>https://igeekfan.cn/igeekfan-docs/dotnetcore/lin-cms/identityserver4-jwt.html</guid>
      <source url="https://igeekfan.cn/igeekfan-docs/rss.xml">认证鉴权状态</source>
      <pubDate>Wed, 15 Apr 2020 17:09:07 GMT</pubDate>
      <content:encoded><![CDATA[<h1 id="认证鉴权状态" tabindex="-1"> 认证鉴权状态</h1>
<p>认证分为以下情况：当前角色为管理员，该分组配置了权限，该分组未分配某一方法的权限.</p>
<p>状态码（StatusCode):401 UnAuthorized</p>
<table>
<thead>
<tr>
<th>StatusCode</th>
<th>含义</th>
</tr>
</thead>
<tbody>
<tr>
<td>401 UnAuthorized</td>
<td>未授权、无权限、未登录</td>
</tr>
<tr>
<td>422  UNPROCESSABLE ENTITY</td>
<td>令牌失效</td>
</tr>
<tr>
<td>200</td>
<td>访问正常</td>
</tr>
</tbody>
</table>
<ol>
<li>未登录，不带access_token，直接请求需要登录的接口、管理员接口结果一样。</li>
</ol>
<p>返回结果应为：状态码：401 UNAUTHORIZED</p>
<div><pre><code>{
    "error_code": 10000,
    "msg": "认证失败，请检查请求头或者重新登陆",
    "request": "GET  /cms/admin/authority"
}
</code></pre><div aria-hidden="true"><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br></div></div><ol start="2">
<li>携带access_token，但非超级管理员(admin字段为2),访问的方法为角色为超管才有权限的方法。</li>
</ol>
<div><pre><code>[LinCmsAuthorize(Roles = LinGroup.Administrator)]
</code></pre><div aria-hidden="true"><span>1</span><br></div></div><p>返回结果应为：：状态码：401 UNAUTHORIZED</p>
<div><pre><code>{
    "error_code": 10000,
    "msg": "只有超级管理员可操作",
    "request": "GET  /cms/admin/authority"
}
</code></pre><div aria-hidden="true"><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br></div></div><ol start="3">
<li>携带access_token ，访问只需要登录的接口（/cms/user/auths）</li>
</ol>
<p>控制器或方法上指定 <strong>[Authorize]</strong> 或 <strong>[LinCmsAuthorize]</strong> 特性标签时，必须登录才能访问，否则返回第一种结果。</p>
<p>返回结果应为：状态码：200</p>
<div><pre><code>{
    "active": 1,
    "admin": 1,
    "auths": [
        {
            "信息": [
                {
                    "auth": "查看lin的信息",
                    "module": "信息"
                }
            ]
        }
    ],
    "avatar": null,
    "create_time": 1564372600000,
    "email": "acs@acs.com",
    "group_id": 54,
    "id": 112,
    "nickname": "alan",
    "update_time": 1564487059000
}
</code></pre><div aria-hidden="true"><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br></div></div><ol start="4">
<li>携带access_token，但此用户无访问此方法的权限（即该用户的组别未配置此权限）。</li>
</ol>
<p>返回结果应为：状态码：401 UNAUTHORIZED</p>
<div><pre><code>{
    "error_code": 10000,
    "msg": "权限不够，请联系超级管理员获得权限",
    "request": "GET  /cms/log/search"
}
</code></pre><div aria-hidden="true"><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br></div></div><ol start="5">
<li>携带过期的access_token值
返回结果应为：状态码：401 UNAUTHORIZED</li>
</ol>
<div><pre><code>{
    "error_code": 10050,
    "msg": "令牌过期",
    "request": "GET  /cms/admin/users"
}
</code></pre><div aria-hidden="true"><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br></div></div><ol start="6">
<li>携带不正常的access_token值，后台无法下正常解析出用户信息
返回结果应为：状态码：422 UNPROCESSABLE ENTITY</li>
</ol>
<div><pre><code>{
    "error_code": 10040,
    "msg": "令牌失效",
    "request": "GET  /cms/admin/users"
}
</code></pre><div aria-hidden="true"><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br></div></div>]]></content:encoded>
    </item>
    <item>
      <title>产品设计</title>
      <link>https://igeekfan.cn/igeekfan-docs/dotnetcore/lin-cms/production-design.html</link>
      <guid>https://igeekfan.cn/igeekfan-docs/dotnetcore/lin-cms/production-design.html</guid>
      <source url="https://igeekfan.cn/igeekfan-docs/rss.xml">产品设计</source>
      <pubDate>Wed, 15 Apr 2020 17:09:07 GMT</pubDate>
      <content:encoded><![CDATA[<h1 id="产品设计" tabindex="-1"> 产品设计</h1>
<h2 id="产品设计-评论模块的设计" tabindex="-1"> 产品设计-评论模块的设计</h2>
<h3 id="_1-主题式" tabindex="-1"> 1.主题式</h3>
<p>将评论分为二级，第一级采用时间倒序，二级按照时间正序，有助于理解上下文关系。</p>
<p>用户操作：</p>
<ul>
<li><input type="checkbox" checked="checked" disabled="disabled" id="task-item-0"><label for="task-item-0"> 评论随笔(内容支持超链接、emoji)</label></li>
<li><input type="checkbox" checked="checked" disabled="disabled" id="task-item-1"><label for="task-item-1">  点赞评论/取消点赞</label></li>
<li><input type="checkbox" checked="checked" disabled="disabled" id="task-item-2"><label for="task-item-2">  回复评论</label></li>
<li><input type="checkbox" checked="checked" disabled="disabled" id="task-item-3"><label for="task-item-3">  删除自己的评论</label></li>
</ul>
<p>运营操作：</p>
<ul>
<li><input type="checkbox" checked="checked" disabled="disabled" id="task-item-4"><label for="task-item-4">  审核通过/拉黑评论</label></li>
<li><input type="checkbox" checked="checked" disabled="disabled" id="task-item-5"><label for="task-item-5">  删除任何评论</label></li>
<li><input type="checkbox" checked="checked" disabled="disabled" id="task-item-6"><label for="task-item-6">  拉黑后的显示逻辑。（保留当前区块、显示内容为：该评论因违规被拉黑）</label></li>
<li>删除：（如果是二级评论，直接软删除，如果是一级评论，软删除子评论和当前评论-需要提前提醒用户）
交互设计</li>
<li>评论的字数长度（500）、emoji。</li>
<li>点赞交互-动画、消息通知/推送</li>
<li>评论区域元素，需要有明确可点击的区域，会跳转到哪个地方。</li>
</ul>
<h3 id="优化" tabindex="-1"> 优化</h3>
<ul>
<li>精选评论</li>
</ul>
<h2 id="排行榜见解" tabindex="-1"> 排行榜见解</h2>
<p>排行榜从心理学上分析，主要从四个方面影响着您：<strong>寻找权威 、参与比较 、关注主流 、自我确认。</strong></p>
<p>如何设计一个简单的排行榜呢。。</p>
<p>在一个博客随笔中，我们设计一个3天、七天（周榜）、30天（月榜）、全部的榜单。以浏览量（权重1）、点赞量（20）、评论量（30)。权重可自己定义。</p>
<p>1.默认取最新的随笔</p>
<p>前台传create_time时，使用如下sql</p>
<div><pre><code>select * from `blog_article` order by create_time desc;
</code></pre><div aria-hidden="true"><span>1</span><br></div></div><p>2.传排序方式为最近n天的热榜时。</p>
<p>参数：THREE_DAYS_HOTTEST（三天）、WEEKLY_HOTTEST(七天）、MONTHLY_HOTTEST（一个月）、HOTTEST（全部）</p>
<p>mysql 查询当前日期时间前三天数据</p>
<div><pre><code>select date_sub(now() ,interval 3 day);
</code></pre><div aria-hidden="true"><span>1</span><br></div></div><p>根据权重查询</p>
<div><pre><code>select * from `blog_article` a 
where a.`create_time`>(select date_sub(now() ,interval 3 day))
order by (a.`view_hits` + a.`likes_quantity` * 20 + a.`comment_quantity` * 30) DESC, a.`create_time` DESC

</code></pre><div aria-hidden="true"><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br></div></div><h2 id="创作者中心" tabindex="-1"> 创作者中心</h2>
<h3 id="用户主页" tabindex="-1"> 用户主页</h3>
<p>统计值：阅读总数，点赞总数，关注者总数</p>
<h3 id="个人设置" tabindex="-1"> 个人设置</h3>
<p>用户信息、密码修改</p>
<h2 id="更多参考" tabindex="-1"> 更多参考</h2>
<ul>
<li><a href="http://www.woshipm.com/pd/1255548.html" target="_blank" rel="noopener noreferrer">万字长文深度分析：产品排行榜的设计和玩法</a></li>
<li><a href="https://zhuanlan.zhihu.com/p/52322777" target="_blank" rel="noopener noreferrer">想知道谁是你的最佳用户？基于Redis实现排行榜周期榜与最近N期榜</a></li>
</ul>
]]></content:encoded>
    </item>
    <item>
      <title>全局敏感词处理</title>
      <link>https://igeekfan.cn/igeekfan-docs/dotnetcore/lin-cms/stopwords.html</link>
      <guid>https://igeekfan.cn/igeekfan-docs/dotnetcore/lin-cms/stopwords.html</guid>
      <source url="https://igeekfan.cn/igeekfan-docs/rss.xml">全局敏感词处理</source>
      <pubDate>Wed, 15 Apr 2020 17:09:07 GMT</pubDate>
      <content:encoded><![CDATA[<h1 id="全局敏感词处理" tabindex="-1"> 全局敏感词处理</h1>
<p>基于ToolGood.Words类库，配合敏感字的文本文件，写的API接口。</p>
<ul>
<li><a href="https://github.com/luoyunchong/dotnetcore-examples/tree/master/aspnetcore-stopwords" target="_blank" rel="noopener noreferrer">https://github.com/luoyunchong/dotnetcore-examples/tree/master/aspnetcore-stopwords</a></li>
</ul>
<p>一共二种方式</p>
<h2 id="_1-toolgood-words" tabindex="-1"> 1.ToolGood.Words</h2>
<p>类库配合敏感库</p>
<ul>
<li><a href="https://github.com/toolgood/ToolGood.Words" target="_blank" rel="noopener noreferrer">ToolGood.Words</a></li>
</ul>
<p>简单用法</p>
<div><pre><code>[Fact]
public void IssuesTest_17()
{
    var illegalWordsSearch = new IllegalWordsSearch();
    string s = "中国|zg人|abc";
    illegalWordsSearch.SetKeywords(s.Split('|'));
    var str = illegalWordsSearch.Replace("我是中美国人厉害中国完美ａｂｃddb好的", '*');

    Assert.Equal("我是中美国人厉害**完美***ddb好的", str);
}
</code></pre><div aria-hidden="true"><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br></div></div><p>配合敏感库文本文件，写的工具类</p>
<p>二个文件放到wwwroot/_Illegal目录下，通过ReplaceStopWords方法调用即可对</p>
<ul>
<li><a href="https://github.com/toolgood/ToolGood.Words/blob/master/csharp/ToolGood.Words.Test/_Illegal/IllegalKeywords.txt" target="_blank" rel="noopener noreferrer">https://github.com/toolgood/ToolGood.Words/blob/master/csharp/ToolGood.Words.Test/_Illegal/IllegalKeywords.txt</a></li>
<li><a href="https://github.com/toolgood/ToolGood.Words/blob/master/csharp/ToolGood.Words.Test/_Illegal/IllegalUrls.txt" target="_blank" rel="noopener noreferrer">https://github.com/toolgood/ToolGood.Words/blob/master/csharp/ToolGood.Words.Test/_Illegal/IllegalUrls.txt</a></li>
</ul>
<div><pre><code>public class ToolGoodUtils
{
    //敏感库只要这二个文件存在即可
    //本地敏感库缓存-https://github.com/toolgood/ToolGood.Words/tree/master/csharp/ToolGood.Words.Test/_Illegal
    //因为需要上传至github并同步gitee,安全起见，所以未上传至git，需要自行下载并复制
    private const string KeywordsPath = "wwwroot/_Illegal/IllegalKeywords.txt";
    private const string UrlsPath = "wwwroot/_Illegal/IllegalUrls.txt";

    private const string InfoPath = "wwwroot/_Illegal/IllegalInfo.txt";
    private const string BitPath = "wwwroot/_Illegal/IllegalBit.iws";

    private static IllegalWordsSearch _search;
    /// &lt;summary>
    /// 本地敏感库,文件修改后，重新创建缓存Bit
    /// &lt;/summary>
    /// &lt;returns>&lt;/returns>
    public static IllegalWordsSearch GetIllegalWordsSearch()
    {
        if (_search == null)
        {
            string ipath = Path.GetFullPath(InfoPath);
            if (File.Exists(ipath) == false)
            {
                _search = CreateIllegalWordsSearch();
            }
            else
            {
                var texts = File.ReadAllText(ipath).Split('|');
                if (new FileInfo(Path.GetFullPath(KeywordsPath)).LastWriteTime.ToString("yyyy-MM-dd HH:mm:ss") !=
                    texts[0] ||
                    new FileInfo(Path.GetFullPath(UrlsPath)).LastWriteTime.ToString("yyyy-MM-dd HH:mm:ss") !=
                    texts[1]
                )
                {
                    _search = CreateIllegalWordsSearch();
                }
                else
                {
                    var s = new IllegalWordsSearch();
                    s.Load(Path.GetFullPath(BitPath));
                    _search = s;
                }
            }
        }
        return _search;
    }

    private static IllegalWordsSearch CreateIllegalWordsSearch()
    {
        string[] words1 = File.ReadAllLines(Path.GetFullPath(KeywordsPath), Encoding.UTF8);
        string[] words2 = File.ReadAllLines(Path.GetFullPath(UrlsPath), Encoding.UTF8);
        var words = new List&lt;string>();
        foreach (var item in words1)
        {
            words.Add(item.Trim());
        }
        foreach (var item in words2)
        {
            words.Add(item.Trim());
        }

        var search = new IllegalWordsSearch();
        search.SetKeywords(words);

        search.Save(Path.GetFullPath(BitPath));

        var text = new FileInfo(Path.GetFullPath(KeywordsPath)).LastWriteTime.ToString("yyyy-MM-dd HH:mm:ss") + "|"+ new FileInfo(Path.GetFullPath(UrlsPath)).LastWriteTime.ToString("yyyy-MM-dd HH:mm:ss");
        File.WriteAllText(Path.GetFullPath(InfoPath), text);

        return search;
    }
}
</code></pre><div aria-hidden="true"><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br><span>24</span><br><span>25</span><br><span>26</span><br><span>27</span><br><span>28</span><br><span>29</span><br><span>30</span><br><span>31</span><br><span>32</span><br><span>33</span><br><span>34</span><br><span>35</span><br><span>36</span><br><span>37</span><br><span>38</span><br><span>39</span><br><span>40</span><br><span>41</span><br><span>42</span><br><span>43</span><br><span>44</span><br><span>45</span><br><span>46</span><br><span>47</span><br><span>48</span><br><span>49</span><br><span>50</span><br><span>51</span><br><span>52</span><br><span>53</span><br><span>54</span><br><span>55</span><br><span>56</span><br><span>57</span><br><span>58</span><br><span>59</span><br><span>60</span><br><span>61</span><br><span>62</span><br><span>63</span><br><span>64</span><br><span>65</span><br><span>66</span><br><span>67</span><br><span>68</span><br><span>69</span><br><span>70</span><br><span>71</span><br><span>72</span><br></div></div><h2 id="_2-循环使用replace" tabindex="-1"> 2. 循环使用Replace</h2>
<p>方案：通过维护敏感库，循环replace
大佬分享给我的，稍微改成了从文件中获取敏感字。</p>
<div><pre><code>public static class StopWords
{

    static readonly ConcurrentDictionary&lt;string, bool> FunNlpDataSensitive = new ConcurrentDictionary&lt;string, bool>();
    static readonly ConcurrentDictionary&lt;int, string> ReplaceNewValue = new ConcurrentDictionary&lt;int, string>();

    private const string KeywordsPath = "wwwroot/_Illegal/IllegalKeywords.txt";
    private const string UrlsPath = "wwwroot/_Illegal/IllegalUrls.txt";


    static StopWords()
    {
        LoadDataFromFile();
    }

    public static void LoadDataFromFile()
    {
        string words1 = File.ReadAllText(Path.GetFullPath(KeywordsPath), Encoding.UTF8);
        string words2 = File.ReadAllText(Path.GetFullPath(UrlsPath), Encoding.UTF8);
        LoadDataFromText(words1);
        LoadDataFromText(words2);
    }


    public static void LoadDataFromText(string text)
    {
        int oldcount = FunNlpDataSensitive.Count;
        foreach (string wd in text.Split('\n'))
        {
            string keykey = wd.Trim().Trim('\r', '\n').Trim();
            if (string.IsNullOrEmpty(keykey)) continue;
            FunNlpDataSensitive.TryAdd(keykey, true);
            if (ReplaceNewValue.ContainsKey(keykey.Length) == false)
                ReplaceNewValue.TryAdd(keykey.Length, "".PadRight(keykey.Length, '*'));
        }
        Console.WriteLine($"敏感词加载完毕，增加数量：{FunNlpDataSensitive.Count - oldcount}");
    }


    /// &lt;summary>
    /// 替换所有敏感词为 *
    /// &lt;/summary>
    /// &lt;param name="that">&lt;/param>
    /// &lt;returns>&lt;/returns>
    public static string ReplaceStopWords(this string that)
    {
        foreach (var wd in FunNlpDataSensitive.Keys)
            that = that.Replace(wd, ReplaceNewValue.TryGetValue(wd.Length, out var tryval) ? tryval : "".PadRight(wd.Length, '*'));
        return that;
    }
}
</code></pre><div aria-hidden="true"><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br><span>24</span><br><span>25</span><br><span>26</span><br><span>27</span><br><span>28</span><br><span>29</span><br><span>30</span><br><span>31</span><br><span>32</span><br><span>33</span><br><span>34</span><br><span>35</span><br><span>36</span><br><span>37</span><br><span>38</span><br><span>39</span><br><span>40</span><br><span>41</span><br><span>42</span><br><span>43</span><br><span>44</span><br><span>45</span><br><span>46</span><br><span>47</span><br><span>48</span><br><span>49</span><br><span>50</span><br><span>51</span><br></div></div><h2 id="freesql全局处理敏感词" tabindex="-1"> FreeSql全局处理敏感词</h2>
<p>使用FreeSql这个ORM时，全局处理string类型的值，进行敏感词处理。代码在StartUp.cs的构造函数中。</p>
<div><pre><code>//敏感词处理
IllegalWordsSearch illegalWords = ToolGoodUtils.GetIllegalWordsSearch();

Fsql.Aop.AuditValue += (s, e) =>
{
    if (e.Column.CsType == typeof(string) &amp;&amp; e.Value != null)
    {
        string oldVal = (string)e.Value;
        string newVal = illegalWords.Replace(oldVal);
        //第二种处理敏感词的方式
        //string newVal = oldVal.ReplaceStopWords();
        if (newVal != oldVal)
        {
            e.Value = newVal;
        }
    }
};
</code></pre><div aria-hidden="true"><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br></div></div>]]></content:encoded>
    </item>
    <item>
      <title>Newtonsoft.Json基础问题</title>
      <link>https://igeekfan.cn/igeekfan-docs/dotnetcore/lin-cms/newtonsoft-json-question.html</link>
      <guid>https://igeekfan.cn/igeekfan-docs/dotnetcore/lin-cms/newtonsoft-json-question.html</guid>
      <source url="https://igeekfan.cn/igeekfan-docs/rss.xml">Newtonsoft.Json基础问题</source>
      <pubDate>Wed, 15 Apr 2020 16:23:14 GMT</pubDate>
      <content:encoded><![CDATA[<h1 id="newtonsoft-json基础问题" tabindex="-1"> Newtonsoft.Json基础问题</h1>
<p>它是.NET下的一个序列化、反序化的基础类库，更基础的用法还是看别人的吧，这里只说一些遇到的问题。</p>
<h2 id="设置下划线" tabindex="-1"> 设置下划线</h2>
<p>ContractResolver  默认是小驼峰，我想改成下划线方式，遇到了一些问题，dictionary的键未格式化</p>
<p>in controller 创建一个控制器</p>
<div><pre><code><span>[</span><span><span>HttpGet</span><span><span>(</span><span>"getDictionary"</span><span>)</span></span></span><span>]</span>
<span>public</span> <span>IDictionary<span>&lt;</span><span>string</span><span>,</span> <span>string</span><span>></span></span> <span>GetDictionary</span><span>(</span><span>)</span>
<span>{</span>
    <span>IDictionary<span>&lt;</span><span>string</span><span>,</span> <span>string</span><span>></span></span> dics <span>=</span> <span>new</span> <span>Dictionary<span>&lt;</span><span>string</span><span>,</span> <span>string</span><span>></span></span><span>(</span><span>)</span><span>;</span>

    dics<span>.</span><span>Add</span><span>(</span><span>"Key"</span><span>,</span> <span>"Value"</span><span>)</span><span>;</span>
    dics<span>.</span><span>Add</span><span>(</span><span>"KeyTest"</span><span>,</span> <span>"Value_Test"</span><span>)</span><span>;</span>
    <span>return</span> dics<span>;</span>
<span>}</span>
</code></pre><div aria-hidden="true"><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br></div></div><p>In Startup.cs</p>
<div><pre><code>services
<span>.</span><span>AddMvc</span><span>(</span><span>)</span>
<span>.</span><span>SetCompatibilityVersion</span><span>(</span>CompatibilityVersion<span>.</span>Version_2_2<span>)</span>
<span>.</span><span>AddJsonOptions</span><span>(</span>opt <span>=></span>
<span>{</span>
    
    <span>// 设置下划线方式，首字母是小写</span>
    opt<span>.</span>SerializerSettings<span>.</span>ContractResolver <span>=</span> <span>new</span> <span>DefaultContractResolver</span><span>(</span><span>)</span>
    <span>{</span>
        NamingStrategy <span>=</span> <span>new</span> <span>SnakeCaseNamingStrategy</span><span>(</span><span>)</span>
    <span>}</span><span>;</span>
<span>}</span><span>)</span><span>;</span>
</code></pre><div aria-hidden="true"><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br></div></div><p>此时运行后，得到的是Key,而不是key，我想他的键都变成下划线方式的小写</p>
<div><pre><code><span>{</span>
  <span>"Key"</span><span>:</span> <span>"Value"</span><span>,</span>
  <span>"KeyTest"</span><span>:</span> <span>"Value_Test"</span>
<span>}</span>
</code></pre><div aria-hidden="true"><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br></div></div><p>其他测试，增加多级，测试正常</p>
<div><pre><code><span>[</span><span><span>HttpGet</span><span><span>(</span><span>"get"</span><span>)</span></span></span><span>]</span>
<span>public</span> <span><span>dynamic</span></span> <span>Get</span><span>(</span><span>)</span>
<span>{</span>
 <span>return</span> <span>new</span> <span>{</span>
            Content <span>=</span> <span>new</span> <span>{</span>
                Url<span>=</span>Request<span>.</span>Path<span>.</span>Value<span>,</span>
                NewUrlTest<span>=</span><span>"test in new url test"</span>
            <span>}</span>
        <span>}</span><span>;</span>
<span>}</span>
</code></pre><div aria-hidden="true"><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br></div></div><p>此时运行后，满足要求，多层结构也不会影响</p>
<div><pre><code><span>{</span>
  <span>"content"</span><span>:</span> <span>{</span>
    <span>"url"</span><span>:</span> <span>"/test/get"</span><span>,</span>
    <span>"new_url_test"</span><span>:</span> <span>"test in new url test"</span>
  <span>}</span>
<span>}</span>

</code></pre><div aria-hidden="true"><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br></div></div><p>看了Newtonsoft.Json的github，并在in this repository 搜索Dictionary，看issues中的配置项如下即可满足dictionary的键也转小写,
ProcessDictionaryKeys 功能：A flag indicating whether dictionary keys should be processed. Defaults to false.</p>
<div><pre><code>services
<span>.</span><span>AddMvc</span><span>(</span><span>)</span>
<span>.</span><span>SetCompatibilityVersion</span><span>(</span>CompatibilityVersion<span>.</span>Version_2_2<span>)</span>
<span>.</span><span>AddJsonOptions</span><span>(</span>opt <span>=></span>
<span>{</span>
    
    <span>// 设置下划线方式，首字母是小写</span>
    opt<span>.</span>SerializerSettings<span>.</span>ContractResolver <span>=</span> <span>new</span> <span>DefaultContractResolver</span><span>(</span><span>)</span>
    <span>{</span>
        NamingStrategy <span>=</span> <span>new</span> <span>SnakeCaseNamingStrategy</span>
        <span>{</span>
            ProcessDictionaryKeys <span>=</span> <span>true</span>
        <span>}</span>
    <span>}</span><span>;</span>
<span>}</span><span>)</span><span>;</span>
</code></pre><div aria-hidden="true"><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br></div></div><div><pre><code><span>{</span>
  <span>"key"</span><span>:</span> <span>"Value"</span><span>,</span>
  <span>"key_test"</span><span>:</span> <span>"Value_Test"</span>
<span>}</span>
</code></pre><div aria-hidden="true"><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br></div></div><h2 id="实现时间戳" tabindex="-1"> 实现时间戳</h2>
<p>前台要的格式为  <strong>1562904163734</strong>,只有一个数字，我搜索了一下，也没找到相关的文档，本身这个类库有一些时间戳，不过他们都包含特殊字符，如/Date(1562904163734)/,好像类似这样，他好像在逗我，为啥他要加Date，怕是有毒吧。看到
他有Converters属性可配置，即配置自己的序列化返回格式。</p>
<div><pre><code>services<span>.</span><span>AddMvc</span><span>(</span><span>)</span>
<span>.</span><span>SetCompatibilityVersion</span><span>(</span>CompatibilityVersion<span>.</span>Version_2_2<span>)</span>
<span>.</span><span>AddJsonOptions</span><span>(</span>opt <span>=></span>
<span>{</span>
    <span>//opt.SerializerSettings.DateFormatString = "yyyy-MM-dd HH:MM:ss";</span>
    <span>//设置时间戳格式</span>
    opt<span>.</span>SerializerSettings<span>.</span>Converters <span>=</span> <span>new</span> <span>List<span>&lt;</span>JsonConverter<span>></span></span><span>(</span><span>)</span>
    <span>{</span>
        <span>new</span> <span>LinCmsTimeConverter</span><span>(</span><span>)</span>
    <span>}</span><span>;</span>
<span>}</span><span>)</span><span>;</span>
</code></pre><div aria-hidden="true"><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br></div></div><p>这里的时间戳是毫秒级别</p>
<div><pre><code><span>/// <span><span><span>&lt;</span>summary</span><span>></span></span></span>
<span>/// 配合LinCMS中的时间戳 后台只返回 1562904163734</span>
<span>/// <span><span><span>&lt;/</span>summary</span><span>></span></span></span>
<span>public</span> <span>class</span> <span>LinCmsTimeConverter</span> <span>:</span> <span><span>DateTimeConverterBase</span></span>
<span>{</span>
    <span>public</span> <span>override</span> <span><span>void</span></span> <span>WriteJson</span><span>(</span><span>JsonWriter</span> writer<span>,</span> <span><span>object</span></span> <span>value</span><span>,</span> <span>JsonSerializer</span> serializer<span>)</span>
    <span>{</span>
        <span><span>double</span></span> javaScriptTicks <span>=</span> <span>0</span><span>;</span>
        <span>if</span> <span>(</span><span>value</span> <span>is</span> <span>DateTime</span> dateTime<span>)</span>
        <span>{</span>
            javaScriptTicks <span>=</span> <span>ConvertDateTimeInt</span><span>(</span>dateTime<span>)</span><span>;</span>
        <span>}</span>
        <span>else</span>
        <span>{</span>
            <span>if</span> <span>(</span><span>!</span><span>(</span><span>value</span> <span>is</span> <span>DateTimeOffset</span> dateTimeOffset<span>)</span><span>)</span>
                <span>throw</span> <span>new</span> <span>JsonSerializationException</span><span>(</span><span>"Expected date object value."</span><span>)</span><span>;</span>
            javaScriptTicks <span>=</span> <span>ConvertDateTimeInt</span><span>(</span>dateTimeOffset<span>.</span><span>ToUniversalTime</span><span>(</span><span>)</span><span>.</span>UtcDateTime<span>)</span><span>;</span>

        <span>}</span>
        writer<span>.</span><span>WriteValue</span><span>(</span>javaScriptTicks<span>)</span><span>;</span>
    <span>}</span>

    <span>public</span> <span>override</span> <span><span>object</span></span> <span>ReadJson</span><span>(</span><span>JsonReader</span> reader<span>,</span> <span>Type</span> objectType<span>,</span> <span><span>object</span></span> existingValue<span>,</span> <span>JsonSerializer</span> serializer<span>)</span>
    <span>{</span>
        <span>return</span> <span>ConvertIntDateTime</span><span>(</span><span>double</span><span>.</span><span>Parse</span><span>(</span>reader<span>.</span>Value<span>.</span><span>ToString</span><span>(</span><span>)</span><span>)</span><span>)</span><span>;</span>
    <span>}</span>
    
    <span>/// <span><span><span>&lt;</span>summary</span><span>></span></span></span>
    <span>/// 日期转换为时间戳（时间戳单位毫秒）</span>
    <span>/// <span><span><span>&lt;/</span>summary</span><span>></span></span></span>
    <span>/// <span><span><span>&lt;</span>param</span> <span>name</span><span><span>=</span><span>"</span>TimeStamp<span>"</span></span><span>></span></span><span><span><span>&lt;/</span>param</span><span>></span></span></span>
    <span>/// <span><span><span>&lt;</span>returns</span><span>></span></span><span><span><span>&lt;/</span>returns</span><span>></span></span> </span>
    <span>public</span> <span>static</span> <span>DateTime</span> <span>ConvertIntDateTime</span><span>(</span><span><span>double</span></span> milliseconds<span>)</span>
    <span>{</span>
        <span>return</span> <span>new</span> <span>DateTime</span><span>(</span><span>1970</span><span>,</span> <span>1</span><span>,</span> <span>1</span><span>)</span><span>.</span><span>AddMilliseconds</span><span>(</span>milliseconds<span>)</span><span>;</span>
    <span>}</span>


    <span>public</span> <span>static</span> <span><span>double</span></span> <span>ConvertDateTimeInt</span><span>(</span><span>DateTime</span> aDt<span>)</span>
    <span>{</span>
        <span>return</span> <span>(</span>aDt <span>-</span> <span>new</span> <span>DateTime</span><span>(</span><span>1970</span><span>,</span> <span>1</span><span>,</span> <span>1</span><span>)</span><span>)</span><span>.</span>TotalMilliseconds<span>;</span>
    <span>}</span>
<span>}</span>
</code></pre><div aria-hidden="true"><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br><span>24</span><br><span>25</span><br><span>26</span><br><span>27</span><br><span>28</span><br><span>29</span><br><span>30</span><br><span>31</span><br><span>32</span><br><span>33</span><br><span>34</span><br><span>35</span><br><span>36</span><br><span>37</span><br><span>38</span><br><span>39</span><br><span>40</span><br><span>41</span><br><span>42</span><br><span>43</span><br></div></div><h2 id="参考" tabindex="-1"> 参考</h2>
<ul>
<li><a href="https://github.com/JamesNK/Newtonsoft.Json/issues/2088" target="_blank" rel="noopener noreferrer">https://github.com/JamesNK/Newtonsoft.Json/issues/2088</a></li>
<li><a href="https://www.newtonsoft.com/json/help/html/P_Newtonsoft_Json_Serialization_NamingStrategy_ProcessDictionaryKeys.htm" target="_blank" rel="noopener noreferrer">https://www.newtonsoft.com/json/help/html/P_Newtonsoft_Json_Serialization_NamingStrategy_ProcessDictionaryKeys.htm</a></li>
<li><a href="https://blog.csdn.net/yw1688/article/details/38492583" target="_blank" rel="noopener noreferrer">https://blog.csdn.net/yw1688/article/details/38492583</a></li>
<li><a href="https://www.jianshu.com/p/c53b1a2a121d" target="_blank" rel="noopener noreferrer">https://www.jianshu.com/p/c53b1a2a121d</a></li>
</ul>
]]></content:encoded>
    </item>
    <item>
      <title>About</title>
      <link>https://igeekfan.cn/igeekfan-docs/about/</link>
      <guid>https://igeekfan.cn/igeekfan-docs/about/</guid>
      <source url="https://igeekfan.cn/igeekfan-docs/rss.xml">About</source>
      <pubDate>Fri, 28 Feb 2020 11:10:31 GMT</pubDate>
      <content:encoded><![CDATA[<h1 id="about" tabindex="-1"> About</h1>
<h2 id="欢迎" tabindex="-1"> 欢迎</h2>
<p>👋 你好，我是 <code>IGeekFan</code> ，我会写<code>c#</code>，会写一点点<code>javascript</code>。</p>
<p><img src="https://img.shields.io/badge/OS-Win11-informational?style=flat&amp;logo=&lt;LOGO_NAME&gt;&amp;logoColor=white&amp;color=2bbc8a" alt="" loading="lazy">
<img src="https://img.shields.io/badge/OS-MAC-informational?style=flat&amp;logo=&lt;LOGO_NAME&gt;&amp;logoColor=white&amp;color=fff5e8" alt="" loading="lazy">
<img src="https://img.shields.io/badge/Editor-VisualStudio2022-informational?style=flat&amp;logo=&lt;LOGO_NAME&gt;&amp;logoColor=white&amp;color=80ccff" alt="" loading="lazy">
<img src="https://img.shields.io/badge/Editor-VisualStudioCode-informational?style=flat&amp;logo=&lt;LOGO_NAME&gt;&amp;logoColor=white&amp;color=424a53" alt="" loading="lazy">
<img src="https://img.shields.io/badge/Editor-VisualStudioForMAC-informational?style=flat&amp;logo=&lt;LOGO_NAME&gt;&amp;logoColor=white&amp;color=80ccff" alt="" loading="lazy">
<img src="https://img.shields.io/badge/Code-Csharp-informational?style=flat&amp;logo=&lt;LOGO_NAME&gt;&amp;logoColor=white&amp;color=FD8C73" alt="" loading="lazy">
<img src="https://img.shields.io/badge/Code-JavaScript-informational?style=flat&amp;logo=&lt;LOGO_NAME&gt;&amp;logoColor=white&amp;color=0969da" alt="" loading="lazy">
<img src="https://img.shields.io/badge/Code-Vue-informational?style=flat&amp;logo=&lt;LOGO_NAME&gt;&amp;logoColor=white&amp;color=b6e3ff" alt="" loading="lazy">
<img src="https://img.shields.io/badge/Code-Python-informational?style=flat&amp;logo=&lt;LOGO_NAME&gt;&amp;logoColor=white&amp;color=2bbc8a" alt="" loading="lazy">
<img src="https://img.shields.io/badge/Code-Go-informational?style=flat&amp;logo=&lt;LOGO_NAME&gt;&amp;logoColor=white&amp;color=80ccff" alt="" loading="lazy">
<img src="https://img.shields.io/badge/Tools-Docker-informational?style=flat&amp;logo=&lt;LOGO_NAME&gt;&amp;logoColor=white&amp;color=eac54f" alt="" loading="lazy">
<img src="https://img.shields.io/badge/Tools-AzureDevops-informational?style=flat&amp;logo=&lt;LOGO_NAME&gt;&amp;logoColor=white&amp;color=ffddb0" alt="" loading="lazy">
<img src="https://img.shields.io/badge/Shell-PowerShell-informational?style=flat&amp;logo=&lt;LOGO_NAME&gt;&amp;logoColor=white&amp;color=f79939" alt="" loading="lazy">
<img src="https://img.shields.io/badge/FrameWork-ASPNETCore-informational?style=flat&amp;logo=&lt;LOGO_NAME&gt;&amp;logoColor=white&amp;color=d8b9ff" alt="" loading="lazy">
<img src="https://img.shields.io/badge/FrameWork-ABP-informational?style=flat&amp;logo=&lt;LOGO_NAME&gt;&amp;logoColor=white&amp;color=ffadda" alt="" loading="lazy"></p>
<h2 id="推荐项目" tabindex="-1"> 推荐项目</h2>
<a href="https://github.com/luoyunchong/freekit">
  <img align="center" src="https://github-readme-stats.vercel.app/api/pin/?username=luoyunchong&repo=freekit&title_color=fff&icon_color=f9f9f9&text_color=9f9f9f&bg_color=151515" />
</a>
<a href="https://github.com/luoyunchong/igeekfan-docs">
  <img align="center" src="https://github-readme-stats.vercel.app/api/pin/?username=luoyunchong&repo=igeekfan-docs&title_color=fff&icon_color=f9f9f9&text_color=9f9f9f&bg_color=151515" />
</a>
<h2 id="联系我-💬" tabindex="-1"> 联系我 💬</h2>
<ul>
<li><a href="https://github.com/luoyunchong" target="_blank" rel="noopener noreferrer">https://github.com/luoyunchong</a></li>
<li><a href="https://www.cnblogs.com/igeekfan" target="_blank" rel="noopener noreferrer">https://www.cnblogs.com/igeekfan</a></li>
<li><a href="mailto:luoyunchong@foxmail.com">luoyunchong@foxmail.com</a></li>
</ul>
<p><img src="https://github-readme-stats.vercel.app/api?username=luoyunchong&amp;show_icons=true&amp;theme=radical" alt="Anurag's github stats" loading="lazy">
<img src="https://github-readme-stats.vercel.app/api/top-langs/?username=luoyunchong&amp;theme=dark&amp;layout=compact" alt="Most Used Languages" loading="lazy"></p>
<h2 id="欢迎加入-qq-群" tabindex="-1"> 欢迎加入 QQ 群</h2>
<img  width="258" height="300" src="/images/qq.png">
<h2 id="欢迎微信关注-dotnet-搬砖队" tabindex="-1"> 欢迎微信关注 dotNET 搬砖队</h2>
<p>微信搜索：dotNET 搬砖队</p>
<img src="/images/wechat.png">
]]></content:encoded>
      <enclosure url="https://img.shields.io/badge/OS-Win11-informational?style=flat&logo=<LOGO_NAME>&logoColor=white&color=2bbc8a" type="image/"/>
    </item>
    <item>
      <title>ColorUI</title>
      <link>https://igeekfan.cn/igeekfan-docs/colorui/docs/</link>
      <guid>https://igeekfan.cn/igeekfan-docs/colorui/docs/</guid>
      <source url="https://igeekfan.cn/igeekfan-docs/rss.xml">ColorUI</source>
      <pubDate>Fri, 28 Feb 2020 11:10:31 GMT</pubDate>
      <content:encoded><![CDATA[<h1 id="colorui" tabindex="-1"> ColorUI</h1>
<h2 id="github" tabindex="-1"> github</h2>
<ul>
<li><a href="https://github.com/weilanwl/ColorUI" target="_blank" rel="noopener noreferrer">https://github.com/weilanwl/ColorUI</a></li>
</ul>
<h2 id="特点" tabindex="-1"> 特点</h2>
<p>*　这是一个css库，相比其他vant-weapp、mpvue都是不一样的,非组件化，主要定位我觉得是美化主题，非组件化，支持uni-app、mpvue，可结合vant-weapp一起使用。</p>
<h2 id="该文档作用" tabindex="-1"> 该文档作用</h2>
<p>很简单，官方还没出文档，使用起来，需要开发者自行去看main.css，打开手机看小程序的demo,然后再去找项目源码，我觉得太麻烦，不知道其他人的感受如何。</p>
]]></content:encoded>
    </item>
    <item>
      <title>Button 按钮</title>
      <link>https://igeekfan.cn/igeekfan-docs/colorui/docs/button.html</link>
      <guid>https://igeekfan.cn/igeekfan-docs/colorui/docs/button.html</guid>
      <source url="https://igeekfan.cn/igeekfan-docs/rss.xml">Button 按钮</source>
      <pubDate>Fri, 28 Feb 2020 11:10:31 GMT</pubDate>
      <content:encoded><![CDATA[<h1 id="button-按钮" tabindex="-1"> Button 按钮</h1>
<div><pre><code>&lt;button>默认&lt;/button>
&lt;button>圆角&lt;/button>
&lt;button>
	&lt;text>&lt;/text>
&lt;/button>
</code></pre><div aria-hidden="true"><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br></div></div><div><pre><code>.cu-btn 
.cu-btn::after
.cu-btn:not([class*="bg-"]) 
.cu-btn[class*="line"] 
.cu-btn[class*="line"]::after
.cu-btn.round[class*="line"]::after 
.cu-btn[class*="lines"]::after 
.cu-btn[class*="bg-"]::after 
.cu-btn.sm 
.cu-btn.lg 
.cu-btn.cuIcon.sm 
.cu-btn.cuIcon 
button.cuIcon.lg 
.cu-btn.shadow-blur::before 
.cu-btn.button-hover 
.block 
.cu-btn.block 
.cu-btn[disabled] 
</code></pre><div aria-hidden="true"><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br></div></div><div><pre><code>.cu-bar.btn-group
.cu-bar.btn-group button
.cu-bar.btn-group button
</code></pre><div aria-hidden="true"><span>1</span><br><span>2</span><br><span>3</span><br></div></div>]]></content:encoded>
    </item>
    <item>
      <title>Text 文本</title>
      <link>https://igeekfan.cn/igeekfan-docs/colorui/docs/text.html</link>
      <guid>https://igeekfan.cn/igeekfan-docs/colorui/docs/text.html</guid>
      <source url="https://igeekfan.cn/igeekfan-docs/rss.xml">Text 文本</source>
      <pubDate>Fri, 28 Feb 2020 11:10:31 GMT</pubDate>
      <content:encoded><![CDATA[<h1 id="text-文本" tabindex="-1"> Text 文本</h1>
<div><pre><code>.text-xs 
.text-sm 
.text-df 
.text-lg 
.text-xl 
.text-xxl 
.text-sl 
.text-xsl 
.text-Abc 
.text-ABC 
.text-abc 
.text-price::before 
.text-cut 
.text-bold 
.text-center 
.text-content 
.text-left 
.text-right
.text-red
.line-red
.lines-red 
.text-orange
.line-orange
.lines-orange
.text-yellow
.line-yellow
.lines-yellow 
.text-olive
.line-olive
.lines-olive
.text-green
.line-green
.lines-green 
.text-cyan
.line-cyan
.lines-cyan 
.text-blue
.line-blue
.lines-blue 
.text-purple
.line-purple
.lines-purple 
.text-mauve
.line-mauve
.lines-mauve 
.text-pink
.line-pink
.lines-pink 
.text-brown
.line-brown
.lines-brown
.text-grey
.line-grey
.lines-grey 
.text-gray
.line-gray
.lines-gray
.text-black
.line-black
.lines-black 
.text-white
.line-white
.lines-white
</code></pre><div aria-hidden="true"><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br><span>24</span><br><span>25</span><br><span>26</span><br><span>27</span><br><span>28</span><br><span>29</span><br><span>30</span><br><span>31</span><br><span>32</span><br><span>33</span><br><span>34</span><br><span>35</span><br><span>36</span><br><span>37</span><br><span>38</span><br><span>39</span><br><span>40</span><br><span>41</span><br><span>42</span><br><span>43</span><br><span>44</span><br><span>45</span><br><span>46</span><br><span>47</span><br><span>48</span><br><span>49</span><br><span>50</span><br><span>51</span><br><span>52</span><br><span>53</span><br><span>54</span><br><span>55</span><br><span>56</span><br><span>57</span><br><span>58</span><br><span>59</span><br><span>60</span><br><span>61</span><br><span>62</span><br><span>63</span><br></div></div>]]></content:encoded>
    </item>
    <item>
      <title>创建简单Hello World</title>
      <link>https://igeekfan.cn/igeekfan-docs/dotnetcore/examples/Console-Hello-World.html</link>
      <guid>https://igeekfan.cn/igeekfan-docs/dotnetcore/examples/Console-Hello-World.html</guid>
      <source url="https://igeekfan.cn/igeekfan-docs/rss.xml">创建简单Hello World</source>
      <pubDate>Fri, 28 Feb 2020 11:10:31 GMT</pubDate>
      <content:encoded><![CDATA[<h1 id="创建简单hello-world" tabindex="-1"> 创建简单Hello World</h1>
<h2 id="源码" tabindex="-1"> 源码</h2>
<p>代码托管在GitHub上 <a href="https://github.com/luoyunchong/dotnetcore-examples/tree/master/console-hello-world" target="_blank" rel="noopener noreferrer">https://github.com/luoyunchong/dotnetcore-examples/tree/master/console-hello-world</a></p>
<h2 id="相关阅读" tabindex="-1"> 相关阅读</h2>
<ul>
<li><a href="https://docs.microsoft.com/zh-cn/dotnet/core/tutorials/with-visual-studio-code" target="_blank" rel="noopener noreferrer">C# 和 Visual Studio Code 入门教程</a></li>
<li><a href="https://blog.csdn.net/qq_40346899/article/details/80955788" target="_blank" rel="noopener noreferrer">vscode调试运行c#详细操作过程</a></li>
<li><strong><a href="https://blog.csdn.net/qin_yu_2010/article/details/83978244" target="_blank" rel="noopener noreferrer">使用Visual Studio Code开发.NET Core看这篇就够了</a></strong> 强烈推荐。</li>
</ul>
<h2 id="开始" tabindex="-1"> 开始</h2>
<p>创建一个hello-word的console，会输出Hello World!</p>
<div><pre><code><span>mkdir</span> console-hello-world
<span>cd</span> console-hello-world
dotnet new console
dotnet run
</code></pre><div aria-hidden="true"><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br></div></div><p>console-hello-world.csproj</p>
<p><strong>OutputType</strong> 标记指定我们要生成的可执行文件，即控制台应用程序。</p>
<p><strong>TargetFramework</strong> 标记指定要定位的 .NET 实现代码。 在高级方案中，可以指定多个目标框架，并在单个操作中生成所有目标框架。</p>
<div><pre><code><span><span><span>&lt;</span>Project</span> <span>Sdk</span><span><span>=</span><span>"</span>Microsoft.NET.Sdk<span>"</span></span><span>></span></span>

  <span><span><span>&lt;</span>PropertyGroup</span><span>></span></span>
    <span><span><span>&lt;</span>OutputType</span><span>></span></span>Exe<span><span><span>&lt;/</span>OutputType</span><span>></span></span>
    <span><span><span>&lt;</span>TargetFramework</span><span>></span></span>netcoreapp3.0<span><span><span>&lt;/</span>TargetFramework</span><span>></span></span>
    <span><span><span>&lt;</span>RootNamespace</span><span>></span></span>console_hello_world<span><span><span>&lt;/</span>RootNamespace</span><span>></span></span>
  <span><span><span>&lt;/</span>PropertyGroup</span><span>></span></span>

<span><span><span>&lt;/</span>Project</span><span>></span></span>

</code></pre><div aria-hidden="true"><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br></div></div><p>在 console-hello-world/bin/Debug/netcoreapp3.0中生成了console-hello-world.dll</p>
<div><pre><code>cd console-hello-world #要先在console-hello-world目录中
dotnet bin/Debug/netcoreapp3.0/console-hello-world.dll
Hello World
</code></pre><div aria-hidden="true"><span>1</span><br><span>2</span><br><span>3</span><br></div></div><p>修改main函数</p>
<div><pre><code><span>using</span> <span>System</span><span>;</span>

<span>namespace</span> <span>console_hello_world</span>
<span>{</span>
    <span>class</span> <span>Program</span>
    <span>{</span>
        <span>static</span> <span><span>void</span></span> <span>Main</span><span>(</span><span><span>string</span><span>[</span><span>]</span></span> args<span>)</span>
        <span>{</span>
            <span>if</span> <span>(</span>args<span>.</span>Length <span>></span> <span>0</span><span>)</span>
            <span>{</span>
                Console<span>.</span><span>WriteLine</span><span>(</span><span><span>$"Hello </span><span><span>{</span><span>args<span>[</span><span>0</span><span>]</span></span><span>}</span></span><span>!"</span></span><span>)</span><span>;</span>
            <span>}</span>
            <span>else</span>
            <span>{</span>
                Console<span>.</span><span>WriteLine</span><span>(</span><span>"Hello!"</span><span>)</span><span>;</span>
            <span>}</span>
        <span>}</span>
    <span>}</span>
<span>}</span>
</code></pre><div aria-hidden="true"><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br></div></div><div><pre><code>$ dotnet run -- John
Hello John!
</code></pre><div aria-hidden="true"><span>1</span><br><span>2</span><br></div></div>]]></content:encoded>
    </item>
    <item>
      <title>.NET Core 简单测试项目</title>
      <link>https://igeekfan.cn/igeekfan-docs/dotnetcore/examples/Console-News-Types.html</link>
      <guid>https://igeekfan.cn/igeekfan-docs/dotnetcore/examples/Console-News-Types.html</guid>
      <source url="https://igeekfan.cn/igeekfan-docs/rss.xml">.NET Core 简单测试项目</source>
      <pubDate>Fri, 28 Feb 2020 11:10:31 GMT</pubDate>
      <content:encoded><![CDATA[<h1 id="net-core-简单测试项目" tabindex="-1"> .NET Core 简单测试项目</h1>
<p>使用PowerShell的dotnet cli命令行创建控制台项目，测试项目，测试项目引用控制台项目。</p>
<h2 id="源码" tabindex="-1"> 源码</h2>
<p>代码托管在GitHub上 <a href="https://github.com/luoyunchong/dotnetcore-examples/tree/master/console-news-types" target="_blank" rel="noopener noreferrer">https://github.com/luoyunchong/dotnetcore-examples/tree/master/console-news-types</a></p>
<h2 id="相关参考" tabindex="-1"> 相关参考</h2>
<p>code :<a href="https://github.com/dotnet/samples/blob/master/core/console-apps/NewTypesMsBuild/README.md" target="_blank" rel="noopener noreferrer">https://github.com/dotnet/samples/blob/master/core/console-apps/NewTypesMsBuild/README.md</a></p>
<p>docs: <a href="https://docs.microsoft.com/zh-cn/dotnet/core/tutorials/testing-with-cli" target="_blank" rel="noopener noreferrer">https://docs.microsoft.com/zh-cn/dotnet/core/tutorials/testing-with-cli</a></p>
<p>dotnet-add-reference 使用文档 <a href="https://docs.microsoft.com/zh-cn/dotnet/core/tools/dotnet-add-reference" target="_blank" rel="noopener noreferrer">https://docs.microsoft.com/zh-cn/dotnet/core/tools/dotnet-add-reference</a></p>
<p>总结如下命令行</p>
<div><pre><code>PS dotnetcore-examples&gt; mkdir console-news-types
PS dotnetcore-examples&gt; cd .\console-news-types\ 
PS dotnetcore-examples\console-news-types&gt; mkdir src

PS dotnetcore-examples\console-news-types&gt; mkdir test
PS dotnetcore-examples\console-news-types&gt; ls
Mode                 LastWriteTime         Length Name
----                 -------------         ------ ----
d----           2019/6/27    20:51                src
d----           2019/6/27    20:51                test

PS dotnetcore-examples\console-news-types&gt; cd .\src\
PS dotnetcore-examples\console-news-types\src&gt; dotnet new console -n NewTypes
PS dotnetcore-examples\console-news-types\src&gt; cd ..\test\  
PS dotnetcore-examples\console-news-types\test&gt; dotnet new xunit -n NewTypesTests 
PS dotnetcore-examples\console-news-types\test&gt; cd .\NewTypesTests\
PS dotnetcore-examples\console-news-types\test\NewTypesTests&gt; dotnet add reference ../../src/NewTypes/NewTypes.csproj
#Reference `..\..\src\NewTypes\NewTypes.csproj` added to the project.
</code></pre><div aria-hidden="true"><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br></div></div><p>其他的代码就看上面的二个链接，把代码复制进去，代码很简单，一个接口，二个实现，main函数调用，测试项目引用控制台项目，</p>
<p>先cd 到src\NewTypes目录中，执行 <strong>dotnet run</strong></p>
<div><pre><code>PS dotnetcore-examples\console-news-types\src\NewTypes&gt; dotnet run
Woof!
Meow!
</code></pre><div aria-hidden="true"><span>1</span><br><span>2</span><br><span>3</span><br></div></div><p>先cd 到test\NewTypesTests目录中，执行 <strong>dotnet test</strong>，看好代码，测试类 Assert.Equal() 是成功的，如果是Assert.NotEqual() 则Failure</p>
<div><pre><code>PS dotnetcore-examples\console-news-types\test\NewTypesTests&gt; dotnet test
dotnetcore-examples\console-news-types\test\NewTypesTests\bin\Debug\netcoreapp3.0\NewTypesTests.dll 的测试运行(.NETCoreApp,Version=v3.0)
Microsoft (R) 测试执行命令行工具版本 16.0.1
版权所有 (C) Microsoft Corporation。保留所有权利。

正在启动测试执行，请稍候...

总测试: 2。已通过: 2。失败: 0。已跳过: 0。
测试运行成功。
测试执行时间: 1.5134 秒
</code></pre><div aria-hidden="true"><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br></div></div>]]></content:encoded>
    </item>
    <item>
      <title>RESTful+FreeSql+AutoMapper</title>
      <link>https://igeekfan.cn/igeekfan-docs/dotnetcore/examples/FreeSql-sample-blog-RESTful-use-automapper.html</link>
      <guid>https://igeekfan.cn/igeekfan-docs/dotnetcore/examples/FreeSql-sample-blog-RESTful-use-automapper.html</guid>
      <source url="https://igeekfan.cn/igeekfan-docs/rss.xml">RESTful+FreeSql+AutoMapper</source>
      <description> RESTful+FreeSql+AutoMapper
 文章概述
本文使用ASP .NET Core的WEB API，构建一个RESTful风格的接口，使用Freesql访问MySQL数据库，实现二个表的简单博客，并集成AutoMapper。
接上一篇


FreeSql在ASP.NTE Core WebApi中如何使用的教程


项目源码 https://github.com/luoyunchong/dotnetcore-examples/tree/master/aspnetcore-freesql


</description>
      <pubDate>Fri, 28 Feb 2020 11:10:31 GMT</pubDate>
      <content:encoded><![CDATA[<h1 id="restful-freesql-automapper" tabindex="-1"> RESTful+FreeSql+AutoMapper</h1>
<h2 id="文章概述" tabindex="-1"> 文章概述</h2>
<p>本文使用ASP .NET Core的WEB API，构建一个RESTful风格的接口，使用Freesql访问MySQL数据库，实现二个表的简单博客，并集成AutoMapper。</p>
<p>接上一篇</p>
<ul>
<li>
<p><a href="http://blog.igeekfan.cn/2019/06/30/re-start/FreeSql-aspnetcore-how-to-use/" target="_blank" rel="noopener noreferrer">FreeSql在ASP.NTE Core WebApi中如何使用的教程</a></p>
</li>
<li>
<p>项目源码 <a href="https://github.com/luoyunchong/dotnetcore-examples/tree/master/aspnetcore-freesql" target="_blank" rel="noopener noreferrer">https://github.com/luoyunchong/dotnetcore-examples/tree/master/aspnetcore-freesql</a></p>
</li>
</ul>

<h2 id="dto作用" tabindex="-1"> Dto作用</h2>
<p>当我们使用RESTful提供接口时，比如创建一个博客，修改一下博客内容时，他们的参数是有区别的。良好的设计应该是</p>
<p>创建一个博客</p>
<div><pre><code>POST /api/blog
data<span>:</span>
<span>{</span>
  <span>"title"</span><span>:</span> <span>"string"</span><span>,</span>
  <span>"content"</span><span>:</span> <span>"string"</span>
<span>}</span>
</code></pre><div aria-hidden="true"><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br></div></div><p>修改一个博客内容</p>
<div><pre><code>PUT /api/blog
data<span>:</span>
<span>{</span>
  <span>"blogId"</span><span>:</span><span>"int"</span><span>,</span>
  <span>"title"</span><span>:</span> <span>"string"</span><span>,</span>
  <span>"content"</span><span>:</span> <span>"string"</span>
<span>}</span>
</code></pre><div aria-hidden="true"><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br></div></div><p>但一个blog 实体如下</p>
<div><pre><code>    <span>public</span> <span>class</span> <span>Blog</span>
    <span>{</span>
        <span>[</span><span><span>Column</span><span><span>(</span>IsIdentity <span>=</span> <span>true</span><span>,</span> IsPrimary <span>=</span> <span>true</span><span>)</span></span></span><span>]</span>
        <span>public</span> <span><span>int</span></span> BlogId <span>{</span> <span>get</span><span>;</span> <span>set</span><span>;</span> <span>}</span>
        <span>public</span> <span><span>string</span></span> Title <span>{</span> <span>get</span><span>;</span> <span>set</span><span>;</span> <span>}</span>
        <span>public</span> <span><span>string</span></span> Content <span>{</span> <span>get</span><span>;</span> <span>set</span><span>;</span> <span>}</span>
        <span>public</span> <span>DateTime</span> CreateTime <span>{</span> <span>get</span><span>;</span> <span>set</span><span>;</span> <span>}</span>
        <span>public</span> <span>virtual</span> <span>List<span>&lt;</span>Post<span>></span></span> Posts <span>{</span> <span>get</span><span>;</span> <span>set</span><span>;</span> <span>}</span>
    <span>}</span>
</code></pre><div aria-hidden="true"><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br></div></div><p>如果我们以Blog作为controllers中的参数时</p>
<div><pre><code>       <span>// POST api/blog</span>
        <span>[</span>HttpPost<span>]</span>
        <span>public</span> <span><span>void</span></span> <span>Post</span><span>(</span><span>[</span><span><span>FromBody</span></span><span>]</span> <span>Blog</span> blog<span>)</span>
        <span>{</span>
            blog<span>.</span>CreateTime<span>=</span>DateTime<span>.</span>Now<span>;</span>
            _fsql<span>.</span><span><span>Insert</span><span><span>&lt;</span>Blog<span>></span></span></span><span>(</span>blog<span>)</span><span>.</span><span>ExecuteAffrows</span><span>(</span><span>)</span><span>;</span>
        <span>}</span>
</code></pre><div aria-hidden="true"><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br></div></div><p>这时修改swagger显示的默认参数是</p>
<div><pre><code><span>{</span>
  <span>"blogId"</span><span>:</span> <span>0</span><span>,</span>
  <span>"title"</span><span>:</span> <span>"string"</span><span>,</span>
  <span>"content"</span><span>:</span> <span>"string"</span><span>,</span>
  <span>"createTime"</span><span>:</span> <span>"2019-06-30T07:33:05.524Z"</span><span>,</span>
  <span>"posts"</span><span>:</span> <span>[</span>
    <span>{</span>
      <span>"postId"</span><span>:</span> <span>0</span><span>,</span>
      <span>"replyContent"</span><span>:</span> <span>"string"</span><span>,</span>
      <span>"blogId"</span><span>:</span> <span>0</span><span>,</span>
      <span>"replyTime"</span><span>:</span> <span>"2019-06-30T07:33:05.524Z"</span>
    <span>}</span>
  <span>]</span>
<span>}</span>
</code></pre><div aria-hidden="true"><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br></div></div><p>如果我们不传递createTime，会出现异常，应该createTime是DateTime，不能为null，只有DateTime?才能为null,有?为可空类型。</p>
<p>所以我们应该为POST方式传递过来时，新建一个实体类，我们称之为DTO(Data Transfer Object)，即数据传输对象，因为createTime即使传递，后端为他赋了值，前台传了也无效。有了DTO，这样可让前端清楚他们应该传递的参数，而不会出现没有作用的参数。</p>
<p>在根目录创建Models/Blogs文件夹，在Blogs文件夹中创建</p>
<h3 id="createblogdto-cs" tabindex="-1"> CreateBlogDto.cs</h3>
<div><pre><code><span>namespace</span> <span>RESTful<span>.</span>FreeSql<span>.</span>Models<span>.</span>Blogs</span>
<span>{</span>
    <span>public</span> <span>class</span> <span>CreateBlogDto</span>
    <span>{</span>
        <span>public</span> <span><span>string</span></span> Title <span>{</span> <span>get</span><span>;</span> <span>set</span><span>;</span> <span>}</span>
        <span>public</span> <span><span>string</span></span> Content <span>{</span> <span>get</span><span>;</span> <span>set</span><span>;</span> <span>}</span>

    <span>}</span>
<span>}</span>

</code></pre><div aria-hidden="true"><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br></div></div><h3 id="updateblogdto-cs" tabindex="-1"> UpdateBlogDto.cs</h3>
<div><pre><code><span>namespace</span> <span>RESTful<span>.</span>FreeSql<span>.</span>Models<span>.</span>Blogs</span>
<span>{</span>
    <span>public</span> <span>class</span> <span>UpdateBlogDto</span>
    <span>{</span>
        <span>public</span> <span><span>int</span></span> BlogId <span>{</span> <span>get</span><span>;</span> <span>set</span><span>;</span> <span>}</span>
        <span>public</span> <span><span>string</span></span> Title <span>{</span> <span>get</span><span>;</span> <span>set</span><span>;</span> <span>}</span>
        <span>public</span> <span><span>string</span></span> Content <span>{</span> <span>get</span><span>;</span> <span>set</span><span>;</span> <span>}</span>
    <span>}</span>
<span>}</span>


</code></pre><div aria-hidden="true"><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br></div></div><p>有了Dto后，我们会发现了新的问题，往数据库插入时，往往使用了一些ORM,他们只支持原本的实体类，如Blog，Post。但不支持CreateBlogDto、UpdateBlogDto,我们可以手动，将一个类的值，赋值给另一个类。
如</p>
<div><pre><code>    <span>CreateBlogDto</span> createBlogDto <span>=</span> <span>new</span> <span>CreateBlogDto</span><span>(</span><span>)</span>
    <span>{</span>
        Title <span>=</span> <span>"我是title"</span><span>,</span>
        Content <span>=</span> <span>"我是content"</span>
    <span>}</span><span>;</span>

    <span>Blog</span> newBlog<span>=</span><span>new</span> <span>Blog</span><span>(</span><span>)</span>
    <span>{</span>
        Title <span>=</span> createBlogDto<span>.</span>Title<span>,</span>
        Content <span>=</span> createBlogDto<span>.</span>Content
    <span>}</span><span>;</span>
</code></pre><div aria-hidden="true"><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br></div></div><p>现在只是非常简单的二个属性，我们还能忍受，但如果是十个属性、而且有着大量的类与类之间的转换呢。这时修改AutoMapper就闪亮登场了。</p>
<h2 id="automapper" tabindex="-1"> AutoMapper</h2>
<blockquote>
<p>作用：A convention-based object-object mapper.</p>
</blockquote>
<p>我们是在ASP .NET Core下使用AutoMapper <a href="https://automapper.readthedocs.io/en/latest/Dependency-injection.html" target="_blank" rel="noopener noreferrer">官网介绍，如何依赖注入中使用</a></p>
<h3 id="setup" tabindex="-1"> Setup</h3>
<p>先cd到dotnetcore-examples\aspnetcore-freesql\RESTful.FreeSql目录</p>
<div><pre><code>PS &gt; dotnet add package AutoMapper
PS &gt; dotnet add package AutoMapper.Extensions.Microsoft.DependencyInjection --version 6.1.1
</code></pre><div aria-hidden="true"><span>1</span><br><span>2</span><br></div></div><p>在StartUp.cs中的ConfigureServices配置如下</p>
<div><pre><code>   public void ConfigureServices(IServiceCollection services)
    {
        // .... Ignore code before this
        
        //AddAutoMapper会去找继承Profile的类，
        services.AddAutoMapper(AppDomain.CurrentDomain.GetAssemblies());

        // .... Ignore code after this
    }
</code></pre><div aria-hidden="true"><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br></div></div><h3 id="adding-profiles" tabindex="-1"> Adding Profiles</h3>
<p>AutoMapper/BlogProfile.cs</p>
<div><pre><code><span>using</span> <span>AutoMapper</span><span>;</span>
<span>using</span> <span>RESTful<span>.</span>FreeSql<span>.</span>Domain</span><span>;</span>
<span>using</span> <span>RESTful<span>.</span>FreeSql<span>.</span>Models<span>.</span>Blogs</span><span>;</span>

<span>namespace</span> <span>RESTful<span>.</span>FreeSql<span>.</span>AutoMapper</span>
<span>{</span>
    <span>public</span> <span>class</span> <span>BlogProfile</span> <span>:</span> <span><span>Profile</span></span>
    <span>{</span>
        <span>public</span> <span>BlogProfile</span><span>(</span><span>)</span> 
        <span>{</span>
            <span><span>CreateMap</span><span><span>&lt;</span>CreateBlogDto<span>,</span> Blog<span>></span></span></span><span>(</span><span>)</span><span>;</span>
            <span><span>CreateMap</span><span><span>&lt;</span>UpdateBlogDto<span>,</span> Blog<span>></span></span></span><span>(</span><span>)</span><span>;</span>
        <span>}</span>
    <span>}</span>
<span>}</span>
</code></pre><div aria-hidden="true"><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br></div></div><p>AutoMapper/BlogProfile.cs</p>
<div><pre><code><span>using</span> <span>AutoMapper</span><span>;</span>
<span>using</span> <span>RESTful<span>.</span>FreeSql<span>.</span>Domain</span><span>;</span>
<span>using</span> <span>RESTful<span>.</span>FreeSql<span>.</span>Models<span>.</span>Blogs</span><span>;</span>

<span>namespace</span> <span>RESTful<span>.</span>FreeSql<span>.</span>AutoMapper</span>
<span>{</span>
    <span>public</span> <span>class</span> <span>PostProfile</span> <span>:</span> <span><span>Profile</span></span>
    <span>{</span>
        <span>public</span> <span>PostProfile</span><span>(</span><span>)</span>
        <span>{</span>
            <span><span>CreateMap</span><span><span>&lt;</span>CreatePostDto<span>,</span>Post<span>></span></span></span><span>(</span><span>)</span><span>;</span>
        <span>}</span>
    <span>}</span>
<span>}</span>
</code></pre><div aria-hidden="true"><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br></div></div><p>Models/Posts/SearchPostDto.cs根据博客id，得到分页的评论时，集成分页类</p>
<div><pre><code><span>using</span> <span>RESTful<span>.</span>FreeSql<span>.</span>Web</span><span>;</span>

<span>namespace</span> <span>RESTful<span>.</span>FreeSql<span>.</span>Models<span>.</span>Posts</span>
<span>{</span>
    <span>public</span> <span>class</span> <span>SearchPostDto</span><span>:</span><span><span>PageDto</span></span>
    <span>{</span>
        <span>public</span> <span><span>int</span></span> BlogId <span>{</span> <span>get</span><span>;</span> <span>set</span><span>;</span> <span>}</span>
    <span>}</span>
<span>}</span>

</code></pre><div aria-hidden="true"><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br></div></div><p>Controlers/BlogController.cs文件中，注入IMapper,</p>
<div><pre><code><span>using</span> <span>AutoMapper</span><span>;</span>
<span>using</span> <span>Microsoft<span>.</span>AspNetCore<span>.</span>Mvc</span><span>;</span>
<span>using</span> <span>System</span><span>;</span>
<span>using</span> <span>System<span>.</span>Collections<span>.</span>Generic</span><span>;</span>
<span>using</span> <span>RESTful<span>.</span>FreeSql<span>.</span>Domain</span><span>;</span>
<span>using</span> <span>RESTful<span>.</span>FreeSql<span>.</span>Models<span>.</span>Blogs</span><span>;</span>
<span>using</span> <span>RESTful<span>.</span>FreeSql<span>.</span>Web</span><span>;</span>

<span>namespace</span> <span>RESTful<span>.</span>FreeSql<span>.</span>Controllers</span>
<span>{</span>
    <span>[</span><span><span>Route</span><span><span>(</span><span>"api/[controller]"</span><span>)</span></span></span><span>]</span>
    <span>[</span><span><span>ApiController</span></span><span>]</span>
    <span>public</span> <span>class</span> <span>BlogController</span> <span>:</span> <span><span>ControllerBase</span></span>
    <span>{</span>
        <span>// GET api/Blog</span>

        <span>private</span> <span>readonly</span> <span>IFreeSql</span> _fsql<span>;</span>
        <span>private</span> <span>readonly</span> <span>IMapper</span> _mapper<span>;</span>
        <span>public</span> <span>BlogController</span><span>(</span><span>IFreeSql</span> fsql<span>,</span> <span>IMapper</span> mapper<span>)</span>
        <span>{</span>
            _fsql <span>=</span> fsql<span>;</span>
            _mapper <span>=</span> mapper<span>;</span>
        <span>}</span>

        <span>/// <span><span><span>&lt;</span>summary</span><span>></span></span></span>
        <span>/// 博客列表页 </span>
        <span>/// <span><span><span>&lt;/</span>summary</span><span>></span></span></span>
        <span>/// <span><span><span>&lt;</span>param</span> <span>name</span><span><span>=</span><span>"</span>pageDto<span>"</span></span><span>></span></span>分页参数<span><span><span>&lt;/</span>param</span><span>></span></span></span>
        <span>/// <span><span><span>&lt;</span>returns</span><span>></span></span><span><span><span>&lt;/</span>returns</span><span>></span></span></span>
        <span>[</span>HttpGet<span>]</span>
        <span>public</span> <span>ActionResult<span>&lt;</span>PagedResultDto<span>&lt;</span>Blog<span>></span><span>></span></span> <span>Get</span><span>(</span><span>[</span><span><span>FromQuery</span></span><span>]</span><span>PageDto</span> pageDto<span>)</span>
        <span>{</span>
            <span>List<span>&lt;</span>Blog<span>></span></span> blogs <span>=</span> _fsql<span>.</span><span><span>Select</span><span><span>&lt;</span>Blog<span>></span></span></span><span>(</span><span>)</span><span>.</span><span>OrderByDescending</span><span>(</span>r <span>=></span> r<span>.</span>CreateTime<span>)</span><span>.</span><span>Page</span><span>(</span>pageDto<span>.</span>PageNumber<span>,</span> pageDto<span>.</span>PageSize<span>)</span><span>.</span><span>ToList</span><span>(</span><span>)</span><span>;</span>
            <span><span>long</span></span> count <span>=</span> _fsql<span>.</span><span><span>Select</span><span><span>&lt;</span>Blog<span>></span></span></span><span>(</span><span>)</span><span>.</span><span>Count</span><span>(</span><span>)</span><span>;</span>
            <span>return</span> <span>new</span> <span>PagedResultDto<span>&lt;</span>Blog<span>></span></span><span>(</span>count<span>,</span> blogs<span>)</span><span>;</span>
        <span>}</span>

        <span>// GET api/blog/5</span>
        <span>[</span><span>HttpGet</span><span>(</span><span>"{id}"</span><span>)</span><span>]</span>
        <span>public</span> <span>ActionResult<span>&lt;</span>Blog<span>></span></span> <span>Get</span><span>(</span><span><span>int</span></span> id<span>)</span>
        <span>{</span>
            <span>// eg.1 return _fsql.Select&lt;Blog>().Where(a => a.Id == id).ToOne();</span>
            <span>// eg.2</span>
            <span>return</span> _fsql<span>.</span><span><span>Select</span><span><span>&lt;</span>Blog<span>></span></span></span><span>(</span>id<span>)</span><span>.</span><span>ToOne</span><span>(</span><span>)</span><span>;</span>
        <span>}</span>

        <span>// POST api/blog</span>
        <span>[</span>HttpPost<span>]</span>
        <span>public</span> <span><span>void</span></span> <span>Post</span><span>(</span><span>[</span><span><span>FromBody</span></span><span>]</span> <span>CreateBlogDto</span> createBlogDto<span>)</span>
        <span>{</span>
            <span>Blog</span> blog <span>=</span> _mapper<span>.</span><span><span>Map</span><span><span>&lt;</span>Blog<span>></span></span></span><span>(</span>createBlogDto<span>)</span><span>;</span>
            blog<span>.</span>CreateTime <span>=</span> DateTime<span>.</span>Now<span>;</span>
            _fsql<span>.</span><span><span>Insert</span><span><span>&lt;</span>Blog<span>></span></span></span><span>(</span>blog<span>)</span><span>.</span><span>ExecuteAffrows</span><span>(</span><span>)</span><span>;</span>
        <span>}</span>

        <span>// PUT api/blog</span>
        <span>[</span>HttpPut<span>]</span>
        <span>public</span> <span><span>void</span></span> <span>Put</span><span>(</span><span>[</span><span><span>FromBody</span></span><span>]</span> <span>UpdateBlogDto</span> updateBlogDto<span>)</span>
        <span>{</span>

            <span>//eg.1 更新指定列</span>
            <span>//_fsql.Update&lt;Blog>(updateBlogDto.BlogId).Set(a => new Blog()</span>
            <span>//{</span>
            <span>//    Title = updateBlogDto.Title,</span>
            <span>//    Content = updateBlogDto.Content</span>
            <span>//}).ExecuteAffrows();</span>

            <span>//eg.2将这个实体更新到数据库中。当更新时，会把其他列的值，如CreateTime也更新掉。</span>
            <span>//使用IgnoreColumns可忽略某一些列。</span>

            <span>Blog</span> blog <span>=</span> _mapper<span>.</span><span><span>Map</span><span><span>&lt;</span>Blog<span>></span></span></span><span>(</span>updateBlogDto<span>)</span><span>;</span>
            _fsql<span>.</span><span><span>Update</span><span><span>&lt;</span>Blog<span>></span></span></span><span>(</span><span>)</span><span>.</span><span>SetSource</span><span>(</span>blog<span>)</span><span>.</span><span>IgnoreColumns</span><span>(</span>r <span>=></span> r<span>.</span>CreateTime<span>)</span><span>.</span><span>ExecuteAffrows</span><span>(</span><span>)</span><span>;</span>
        <span>}</span>

        <span>// DELETE api/blog/5</span>
        <span>[</span><span>HttpDelete</span><span>(</span><span>"{id}"</span><span>)</span><span>]</span>
        <span>public</span> <span><span>void</span></span> <span>Delete</span><span>(</span><span><span>int</span></span> id<span>)</span>
        <span>{</span>
            _fsql<span>.</span><span><span>Delete</span><span><span>&lt;</span>Blog<span>></span></span></span><span>(</span><span>new</span> <span>{</span> BlogId <span>=</span> id <span>}</span><span>)</span><span>.</span><span>ExecuteAffrows</span><span>(</span><span>)</span><span>;</span>
        <span>}</span>
    <span>}</span>
<span>}</span>
</code></pre><div aria-hidden="true"><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br><span>24</span><br><span>25</span><br><span>26</span><br><span>27</span><br><span>28</span><br><span>29</span><br><span>30</span><br><span>31</span><br><span>32</span><br><span>33</span><br><span>34</span><br><span>35</span><br><span>36</span><br><span>37</span><br><span>38</span><br><span>39</span><br><span>40</span><br><span>41</span><br><span>42</span><br><span>43</span><br><span>44</span><br><span>45</span><br><span>46</span><br><span>47</span><br><span>48</span><br><span>49</span><br><span>50</span><br><span>51</span><br><span>52</span><br><span>53</span><br><span>54</span><br><span>55</span><br><span>56</span><br><span>57</span><br><span>58</span><br><span>59</span><br><span>60</span><br><span>61</span><br><span>62</span><br><span>63</span><br><span>64</span><br><span>65</span><br><span>66</span><br><span>67</span><br><span>68</span><br><span>69</span><br><span>70</span><br><span>71</span><br><span>72</span><br><span>73</span><br><span>74</span><br><span>75</span><br><span>76</span><br><span>77</span><br><span>78</span><br><span>79</span><br><span>80</span><br><span>81</span><br><span>82</span><br></div></div><p>Controlers/BlogController.cs文件中，注入IMapper,</p>
<div><pre><code><span>using</span> <span>FreeSql</span><span>;</span>
<span>using</span> <span>Microsoft<span>.</span>AspNetCore<span>.</span>Mvc</span><span>;</span>
<span>using</span> <span>System</span><span>;</span>
<span>using</span> <span>System<span>.</span>Collections<span>.</span>Generic</span><span>;</span>
<span>using</span> <span>System<span>.</span>Threading<span>.</span>Tasks</span><span>;</span>
<span>using</span> <span>AutoMapper</span><span>;</span>
<span>using</span> <span>RESTful<span>.</span>FreeSql<span>.</span>Domain</span><span>;</span>
<span>using</span> <span>RESTful<span>.</span>FreeSql<span>.</span>Models<span>.</span>Posts</span><span>;</span>
<span>using</span> <span>RESTful<span>.</span>FreeSql<span>.</span>Web</span><span>;</span>

<span>namespace</span> <span>RESTful<span>.</span>FreeSql<span>.</span>Controllers</span>
<span>{</span>
    <span>[</span><span><span>Route</span><span><span>(</span><span>"api/[controller]"</span><span>)</span></span></span><span>]</span>
    <span>[</span><span><span>ApiController</span></span><span>]</span>
    <span>public</span> <span>class</span> <span>PostController</span> <span>:</span> <span><span>ControllerBase</span></span>
    <span>{</span>
        <span>// GET: api/Post</span>
        <span>private</span> <span>readonly</span> <span>IFreeSql</span> _fsql<span>;</span>
        <span>private</span> <span>readonly</span> <span>IMapper</span> _mapper<span>;</span>
        <span>public</span> <span>PostController</span><span>(</span><span>IFreeSql</span> fsql<span>,</span> <span>IMapper</span> mapper<span>)</span>
        <span>{</span>
            _fsql <span>=</span> fsql<span>;</span>
            _mapper <span>=</span> mapper<span>;</span>
        <span>}</span>

        <span>/// <span><span><span>&lt;</span>summary</span><span>></span></span></span>
        <span>/// 根据博客id、分页条件查询评论信息</span>
        <span>/// <span><span><span>&lt;/</span>summary</span><span>></span></span></span>
        <span>/// <span><span><span>&lt;</span>param</span> <span>name</span><span><span>=</span><span>"</span>searchPostDto<span>"</span></span><span>></span></span><span><span><span>&lt;/</span>param</span><span>></span></span></span>
        <span>/// <span><span><span>&lt;</span>returns</span><span>></span></span><span><span><span>&lt;/</span>returns</span><span>></span></span></span>
        <span>[</span>HttpGet<span>]</span>
        <span>public</span> <span>PagedResultDto<span>&lt;</span>Post<span>></span></span> <span>Get</span><span>(</span><span>SearchPostDto</span> searchPostDto<span>)</span>
        <span>{</span>
            <span>ISelect<span>&lt;</span>Post<span>></span></span> selectPost <span>=</span> _fsql
                <span>.</span><span><span>Select</span><span><span>&lt;</span>Post<span>></span></span></span><span>(</span><span>)</span>
                <span>.</span><span>Where</span><span>(</span>r <span>=></span> r<span>.</span>BlogId <span>==</span> searchPostDto<span>.</span>BlogId<span>)</span><span>;</span>

            <span>List<span>&lt;</span>Post<span>></span></span> posts <span>=</span> selectPost<span>.</span><span>OrderByDescending</span><span>(</span>r <span>=></span> r<span>.</span>ReplyTime<span>)</span>
                <span>.</span><span>Page</span><span>(</span>searchPostDto<span>.</span>PageNumber<span>,</span> searchPostDto<span>.</span>PageSize<span>)</span>
                <span>.</span><span>ToList</span><span>(</span><span>)</span><span>;</span>

            <span><span>long</span></span> total <span>=</span> selectPost<span>.</span><span>Count</span><span>(</span><span>)</span><span>;</span>

            <span>return</span> <span>new</span> <span>PagedResultDto<span>&lt;</span>Post<span>></span></span><span>(</span>total<span>,</span> posts<span>)</span><span>;</span>
        <span>}</span>

        <span>// GET: api/Post/5</span>
        <span>[</span><span>HttpGet</span><span>(</span><span>"{id}"</span><span>,</span> Name <span>=</span> <span>"Get"</span><span>)</span><span>]</span>
        <span>public</span> <span>Post</span> <span>Get</span><span>(</span><span><span>int</span></span> id<span>)</span>
        <span>{</span>
            <span>return</span> _fsql<span>.</span><span><span>Select</span><span><span>&lt;</span>Post<span>></span></span></span><span>(</span><span>)</span><span>.</span><span>Where</span><span>(</span>a <span>=></span> a<span>.</span>PostId <span>==</span> id<span>)</span><span>.</span><span>ToOne</span><span>(</span><span>)</span><span>;</span>
        <span>}</span>

        <span>// POST: api/Post</span>
        <span>[</span>HttpPost<span>]</span>
        <span>public</span> <span><span>void</span></span> <span>Post</span><span>(</span><span>[</span><span><span>FromBody</span></span><span>]</span> <span>CreatePostDto</span> createPostDto<span>)</span>
        <span>{</span>
            <span>Post</span> post <span>=</span> _mapper<span>.</span><span><span>Map</span><span><span>&lt;</span>Post<span>></span></span></span><span>(</span>createPostDto<span>)</span><span>;</span>
            post<span>.</span>ReplyTime <span>=</span> DateTime<span>.</span>Now<span>;</span>
            _fsql<span>.</span><span>Insert</span><span>(</span>post<span>)</span><span>.</span><span>ExecuteAffrows</span><span>(</span><span>)</span><span>;</span>
        <span>}</span>


        <span>// DELETE: api/Post/</span>
        <span>[</span><span><span>HttpDelete</span><span><span>(</span><span>"{id}"</span><span>)</span></span></span><span>]</span>
        <span>public</span> <span>async</span> <span>Task</span> <span>DeleteAsync</span><span>(</span><span><span>int</span></span> id<span>)</span>
        <span>{</span>
            <span>await</span> _fsql<span>.</span><span><span>Delete</span><span><span>&lt;</span>Post<span>></span></span></span><span>(</span><span>new</span> <span>Post</span> <span>{</span> PostId <span>=</span> id <span>}</span><span>)</span><span>.</span><span>ExecuteAffrowsAsync</span><span>(</span><span>)</span><span>;</span>
        <span>}</span>
    <span>}</span>
<span>}</span>

</code></pre><div aria-hidden="true"><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br><span>24</span><br><span>25</span><br><span>26</span><br><span>27</span><br><span>28</span><br><span>29</span><br><span>30</span><br><span>31</span><br><span>32</span><br><span>33</span><br><span>34</span><br><span>35</span><br><span>36</span><br><span>37</span><br><span>38</span><br><span>39</span><br><span>40</span><br><span>41</span><br><span>42</span><br><span>43</span><br><span>44</span><br><span>45</span><br><span>46</span><br><span>47</span><br><span>48</span><br><span>49</span><br><span>50</span><br><span>51</span><br><span>52</span><br><span>53</span><br><span>54</span><br><span>55</span><br><span>56</span><br><span>57</span><br><span>58</span><br><span>59</span><br><span>60</span><br><span>61</span><br><span>62</span><br><span>63</span><br><span>64</span><br><span>65</span><br><span>66</span><br><span>67</span><br><span>68</span><br><span>69</span><br><span>70</span><br><span>71</span><br><span>72</span><br></div></div><h3 id="参考" tabindex="-1"> 参考</h3>
<ul>
<li>建议大家先看官网 <a href="http://automapper.org/" target="_blank" rel="noopener noreferrer">http://automapper.org/</a></li>
<li>开源地址 <a href="https://github.com/AutoMapper/AutoMapper" target="_blank" rel="noopener noreferrer">https://github.com/AutoMapper/AutoMapper</a></li>
<li>Getting-started 文档 <a href="https://automapper.readthedocs.io/en/latest/Getting-started.html#what-is-automapper" target="_blank" rel="noopener noreferrer">https://automapper.readthedocs.io/en/latest/Getting-started.html#what-is-automapper</a></li>
</ul>
]]></content:encoded>
    </item>
    <item>
      <title>IdentityServer4</title>
      <link>https://igeekfan.cn/igeekfan-docs/dotnetcore/examples/IdentityServer4.html</link>
      <guid>https://igeekfan.cn/igeekfan-docs/dotnetcore/examples/IdentityServer4.html</guid>
      <source url="https://igeekfan.cn/igeekfan-docs/rss.xml">IdentityServer4</source>
      <pubDate>Fri, 28 Feb 2020 11:10:31 GMT</pubDate>
      <content:encoded><![CDATA[<h1 id="identityserver4" tabindex="-1"> IdentityServer4</h1>
<h2 id="写的一些identityserver4的示例" tabindex="-1"> 写的一些IdentityServer4的示例</h2>
<p>IdentityServer4 实现单点登录授权token验证</p>
<h2 id="源码" tabindex="-1"> 源码</h2>
<p>代码托管在GitHub上 <a href="https://github.com/luoyunchong/dotnetcore-examples/tree/master/aspnetcore-identityserver4" target="_blank" rel="noopener noreferrer">https://github.com/luoyunchong/dotnetcore-examples/tree/master/aspnetcore-identityserver4</a></p>
<h2 id="参考" tabindex="-1"> 参考</h2>
<ul>
<li><a href="https://www.cnblogs.com/edisonchou/p/identityserver4_foundation_and_quickstart_01.html" target="_blank" rel="noopener noreferrer">.NET Core微服务之基于IdentityServer建立授权与验证服务</a></li>
</ul>
]]></content:encoded>
    </item>
    <item>
      <title>ImCore 即时通讯</title>
      <link>https://igeekfan.cn/igeekfan-docs/dotnetcore/examples/ImCore-Chat.html</link>
      <guid>https://igeekfan.cn/igeekfan-docs/dotnetcore/examples/ImCore-Chat.html</guid>
      <source url="https://igeekfan.cn/igeekfan-docs/rss.xml">ImCore 即时通讯</source>
      <pubDate>Fri, 28 Feb 2020 11:10:31 GMT</pubDate>
      <content:encoded><![CDATA[<h1 id="imcore-即时通讯" tabindex="-1"> ImCore 即时通讯</h1>
<h2 id="简介" tabindex="-1"> 简介</h2>
<p>利用 webSocket 协议实现简易、高性能、集群即时通讯组件，支持点对点通讯、群聊通讯、上线下线事件消息等众多实用性功能。</p>
<h2 id="开源地址" tabindex="-1"> 开源地址</h2>
<p><a href="https://github.com/2881099/im" target="_blank" rel="noopener noreferrer">https://github.com/2881099/im</a></p>
<h2 id="示例" tabindex="-1"> 示例</h2>
<p><a href="https://github.com/luoyunchong/dotnetcore-examples/tree/master/dotnet-core-im" target="_blank" rel="noopener noreferrer">https://github.com/luoyunchong/dotnetcore-examples/tree/master/dotnet-core-im</a></p>
<h2 id="演示效果" tabindex="-1"> 演示效果</h2>
<p><img src="https://ae01.alicdn.com/kf/Hf8b31f05dbb94f8da565fce29f78aa78Y.png" alt="https://ae01.alicdn.com/kf/Hf8b31f05dbb94f8da565fce29f78aa78Y.png" loading="lazy"></p>
]]></content:encoded>
      <enclosure url="https://ae01.alicdn.com/kf/Hf8b31f05dbb94f8da565fce29f78aa78Y.png" type="image/png"/>
    </item>
    <item>
      <title>.NET Core 学习示例文档</title>
      <link>https://igeekfan.cn/igeekfan-docs/dotnetcore/examples/</link>
      <guid>https://igeekfan.cn/igeekfan-docs/dotnetcore/examples/</guid>
      <source url="https://igeekfan.cn/igeekfan-docs/rss.xml">.NET Core 学习示例文档</source>
      <pubDate>Fri, 28 Feb 2020 11:10:31 GMT</pubDate>
      <content:encoded><![CDATA[<h1 id="net-core-学习示例文档" tabindex="-1"> .NET Core 学习示例文档</h1>
<p>浏览左侧导航菜单以深入了解文档.</p>
<p>.NET Core 学习示例文档主要是结合 ASP .NET Core，集成第三方类库的示例，运用基础组件，写好 Demo。</p>
<h2 id="源码" tabindex="-1"> 源码</h2>
<p>代码托管在 GitHub 上 <a href="https://github.com/luoyunchong/dotnetcore-examples" target="_blank" rel="noopener noreferrer">https://github.com/luoyunchong/dotnetcore-examples</a></p>
<h2 id="推荐阅读" tabindex="-1"> 推荐阅读</h2>
<ul>
<li>Microsoft Docs <a href="https://docs.microsoft.com/zh-cn" target="_blank" rel="noopener noreferrer">https://docs.microsoft.com/zh-cn</a>
其中包含如下
<ul>
<li>.NET Core 指南 https://docs.microsoft.com/zh-cn/dotnet/core/</li>
<li>ASP .NET 文档 https://docs.microsoft.com/zh-cn/aspnet/</li>
<li>.NET Core CLI 文档 https://docs.microsoft.com/zh-cn/dotnet/core/tools/?tabs=netcore2x</li>
</ul>
</li>
</ul>
<h2 id="本地环境说明" tabindex="-1"> 本地环境说明</h2>
<ul>
<li>Windows 10 (18922.rs_prerelease.190614-1427)</li>
<li>.NET Core 3.0.100-preview6-012264</li>
<li>Visual Studio Code 1.35.1、Microsoft Visual Studio 2019 16.1.3</li>
<li>PowerSheel</li>
<li>MySQL 5.7.25</li>
<li>Navicat Premium 12 <a href="http://blog.igeekfan.cn/2018/06/02/%E5%A4%A7%E5%90%8E%E7%AB%AF/Navicat%20Premium%2012%20%20%E7%A0%B4%E8%A7%A3%E7%89%88%E5%85%8D%E8%B4%B9%E4%B8%8B%E8%BD%BD/" target="_blank" rel="noopener noreferrer">欢迎下载</a></li>
</ul>
<h2 id="install" tabindex="-1"> Install</h2>
<p>本地开发选择 SDK 安装即可，还是安装 2.2 的吧，3.0（19.6.29）目前还没有发布稳定版本。</p>
<ul>
<li>安装这个 <strong>https://dotnet.microsoft.com/download/dotnet-core/2.2</strong></li>
<li>https://dotnet.microsoft.com/download/dotnet-core/3.0</li>
</ul>
<p>安装后，在 PowerShell 中任一目录查看安装后的版本</p>
<div><pre><code>PS C:\WINDOWS\system32&gt; dotnet --version
3.0.100-preview6-012264
# 本地安装了好几个.net core sdk版本
PS C:\WINDOWS\system32&gt; dotnet --list-sdks
2.1.700 [C:\Program Files\dotnet\sdk]
2.2.300 [C:\Program Files\dotnet\sdk]
3.0.100-preview6-012264 [C:\Program Files\dotnet\sdk]
</code></pre><div aria-hidden="true"><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br></div></div><h2 id="cli" tabindex="-1"> CLI</h2>
<p>全称：command-line interface，命令行界面，主要是 cmd、bash(sh 等等)、powershell 等。</p>
<blockquote>
<p>说明 <strong>所有命令行都在 windows10 自带的 powershell 中执行。</strong></p>
</blockquote>
<h3 id="指定-sdk-版本" tabindex="-1"> 指定 SDK 版本</h3>
<p>.NET Core 项目默认使用最新版本的 .NET Core，在根目录使用 PowerShell 中执行如下命令，</p>
<p>语法 ：dotnet new global.json --sdk-version &lt;SDK 版本号&gt;</p>
<div><pre><code>dotnet new globaljson --sdk-version 2.2.300
</code></pre><div aria-hidden="true"><span>1</span><br></div></div><p>参考</p>
<ul>
<li><a href="https://docs.microsoft.com/zh-cn/dotnet/core/tools/dotnet-new?tabs=netcore22" target="_blank" rel="noopener noreferrer">dotnet new 命令行</a></li>
<li><a href="https://docs.microsoft.com/zh-cn/dotnet/core/versions/selection?view=dotnet-plat-ext-2.1" target="_blank" rel="noopener noreferrer">选择要使用的 .NET Core 版本</a></li>
</ul>
<h2 id="net-core" tabindex="-1"> .NET Core</h2>
<p>.NET Core 是什么？ 官网说的太高大上了 https://docs.microsoft.com/zh-cn/dotnet/core/about</p>
<p>总结，.NET Core 包含如下</p>
<ul>
<li>二个 RunTime
<ul>
<li>.NET Core RunTime：基础类型系统 、垃圾回收、基元类型等，</li>
<li>ASP .NET RunTime ：提供 WEB、LOT 等应用程序的框架支持。</li>
</ul>
</li>
<li>.NET Core CLI 工具：各种命令行工具，创建项目、编译项目，发布项目等；</li>
<li>语言编译器：（支持 C#、F#、VB 等语言）</li>
<li>dotnet 工具：.NET Core 运行时和库的安装程序包</li>
</ul>
<p>三个发布包：</p>
<ul>
<li>.NET Core 运行时</li>
<li>ASP .NET Core 运行时</li>
<li>.NET Core SDK：包括上面二个内容，再加上 .NET CLI 工具等</li>
</ul>
<p>所以本地调试时，可直接安装最全的 SDK 即可。</p>
<h2 id="项目文档" tabindex="-1"> 项目文档</h2>
<p>目前 关于此项目的文档放到 docs 文件夹中，zh-Hans 为中文，这样可支持多语言，欢迎翻译 PR，之后会发布至</p>
<ul>
<li>文档官网 <a href="https://luoyunchong.github.io/vuepress-docs/" target="_blank" rel="noopener noreferrer">https://luoyunchong.github.io/vuepress-docs/</a></li>
</ul>
<p>将使用 abp vnext 下的 modules 的<a href="https://github.com/abpframework/abp/blob/dev/modules/docs/README.md" target="_blank" rel="noopener noreferrer">docs 模块</a>。不过 abp vnext 现在也不稳定，0.18.1，还是有各种问题，我还是写基础模块的使用文档吧，后期完善后，发布文档网站。</p>
<h2 id="说明" tabindex="-1"> 说明</h2>
<p>本项目也是我的学习记录，，用于测试不同类库集成的解决方案，所以用最基础的方案，<strong>命令行</strong>来创建项目，引用包，运行，测试等。让自己对 .net core 的原理结构了解地更加深入一些。</p>
<ul>
<li>采用的都是 Visual Studio Code/VS2019 +PowerShell 运行，关于如何采用 Visual Studio 2019 创建项目，引用包是非常简单的，不再说明。</li>
</ul>
]]></content:encoded>
    </item>
    <item>
      <title>认证鉴权状态</title>
      <link>https://igeekfan.cn/igeekfan-docs/dotnetcore/lin-cms/IdentityServer4-JWT.html</link>
      <guid>https://igeekfan.cn/igeekfan-docs/dotnetcore/lin-cms/IdentityServer4-JWT.html</guid>
      <source url="https://igeekfan.cn/igeekfan-docs/rss.xml">认证鉴权状态</source>
      <pubDate>Fri, 28 Feb 2020 11:10:31 GMT</pubDate>
      <content:encoded><![CDATA[<h1 id="认证鉴权状态" tabindex="-1"> 认证鉴权状态</h1>
<p>认证分为以下情况：当前角色为管理员，该分组配置了权限，该分组未分配某一方法的权限.</p>
<p>状态码（StatusCode):401 UnAuthorized</p>
<table>
<thead>
<tr>
<th>StatusCode</th>
<th>含义</th>
</tr>
</thead>
<tbody>
<tr>
<td>401 UnAuthorized</td>
<td>未授权、无权限、未登录</td>
</tr>
<tr>
<td>422  UNPROCESSABLE ENTITY</td>
<td>令牌失效</td>
</tr>
<tr>
<td>200</td>
<td>访问正常</td>
</tr>
</tbody>
</table>
<ol>
<li>未登录，不带access_token，直接请求需要登录的接口、管理员接口结果一样。</li>
</ol>
<p>返回结果应为：状态码：401 UNAUTHORIZED</p>
<div><pre><code>{
    "error_code": 10000,
    "msg": "认证失败，请检查请求头或者重新登陆",
    "request": "GET  /cms/admin/authority"
}
</code></pre><div aria-hidden="true"><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br></div></div><ol start="2">
<li>携带access_token，但非超级管理员(admin字段为2),访问的方法为角色为超管才有权限的方法。</li>
</ol>
<div><pre><code>[LinCmsAuthorize(Roles = LinGroup.Administrator)]
</code></pre><div aria-hidden="true"><span>1</span><br></div></div><p>返回结果应为：：状态码：401 UNAUTHORIZED</p>
<div><pre><code>{
    "error_code": 10000,
    "msg": "只有超级管理员可操作",
    "request": "GET  /cms/admin/authority"
}
</code></pre><div aria-hidden="true"><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br></div></div><ol start="3">
<li>携带access_token ，访问只需要登录的接口（/cms/user/auths）</li>
</ol>
<p>控制器或方法上指定 <strong>[Authorize]</strong> 或 <strong>[LinCmsAuthorize]</strong> 特性标签时，必须登录才能访问，否则返回第一种结果。</p>
<p>返回结果应为：状态码：200</p>
<div><pre><code>{
    "active": 1,
    "admin": 1,
    "auths": [
        {
            "信息": [
                {
                    "auth": "查看lin的信息",
                    "module": "信息"
                }
            ]
        }
    ],
    "avatar": null,
    "create_time": 1564372600000,
    "email": "acs@acs.com",
    "group_id": 54,
    "id": 112,
    "nickname": "alan",
    "update_time": 1564487059000
}
</code></pre><div aria-hidden="true"><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br></div></div><ol start="4">
<li>携带access_token，但此用户无访问此方法的权限（即该用户的组别未配置此权限）。</li>
</ol>
<p>返回结果应为：状态码：401 UNAUTHORIZED</p>
<div><pre><code>{
    "error_code": 10000,
    "msg": "权限不够，请联系超级管理员获得权限",
    "request": "GET  /cms/log/search"
}
</code></pre><div aria-hidden="true"><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br></div></div><ol start="5">
<li>携带过期的access_token值
返回结果应为：状态码：401 UNAUTHORIZED</li>
</ol>
<div><pre><code>{
    "error_code": 10050,
    "msg": "令牌过期",
    "request": "GET  /cms/admin/users"
}
</code></pre><div aria-hidden="true"><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br></div></div><ol start="6">
<li>携带不正常的access_token值，后台无法下正常解析出用户信息
返回结果应为：状态码：422 UNPROCESSABLE ENTITY</li>
</ol>
<div><pre><code>{
    "error_code": 10040,
    "msg": "令牌失效",
    "request": "GET  /cms/admin/users"
}
</code></pre><div aria-hidden="true"><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br></div></div>]]></content:encoded>
    </item>
    <item>
      <title>产品设计</title>
      <link>https://igeekfan.cn/igeekfan-docs/dotnetcore/lin-cms/Production-Design.html</link>
      <guid>https://igeekfan.cn/igeekfan-docs/dotnetcore/lin-cms/Production-Design.html</guid>
      <source url="https://igeekfan.cn/igeekfan-docs/rss.xml">产品设计</source>
      <pubDate>Fri, 28 Feb 2020 11:10:31 GMT</pubDate>
      <content:encoded><![CDATA[<h1 id="产品设计" tabindex="-1"> 产品设计</h1>
<h2 id="产品设计-评论模块的设计" tabindex="-1"> 产品设计-评论模块的设计</h2>
<h3 id="_1-主题式" tabindex="-1"> 1.主题式</h3>
<p>将评论分为二级，第一级采用时间倒序，二级按照时间正序，有助于理解上下文关系。</p>
<p>用户操作：</p>
<ul>
<li><input type="checkbox" checked="checked" disabled="disabled" id="task-item-0"><label for="task-item-0"> 评论随笔(内容支持超链接、emoji)</label></li>
<li><input type="checkbox" checked="checked" disabled="disabled" id="task-item-1"><label for="task-item-1">  点赞评论/取消点赞</label></li>
<li><input type="checkbox" checked="checked" disabled="disabled" id="task-item-2"><label for="task-item-2">  回复评论</label></li>
<li><input type="checkbox" checked="checked" disabled="disabled" id="task-item-3"><label for="task-item-3">  删除自己的评论</label></li>
</ul>
<p>运营操作：</p>
<ul>
<li><input type="checkbox" checked="checked" disabled="disabled" id="task-item-4"><label for="task-item-4">  审核通过/拉黑评论</label></li>
<li><input type="checkbox" checked="checked" disabled="disabled" id="task-item-5"><label for="task-item-5">  删除任何评论</label></li>
<li><input type="checkbox" checked="checked" disabled="disabled" id="task-item-6"><label for="task-item-6">  拉黑后的显示逻辑。（保留当前区块、显示内容为：该评论因违规被拉黑）</label></li>
<li>删除：（如果是二级评论，直接软删除，如果是一级评论，软删除子评论和当前评论-需要提前提醒用户）
交互设计</li>
<li>评论的字数长度（500）、emoji。</li>
<li>点赞交互-动画、消息通知/推送</li>
<li>评论区域元素，需要有明确可点击的区域，会跳转到哪个地方。</li>
</ul>
<h3 id="优化" tabindex="-1"> 优化</h3>
<ul>
<li>精选评论</li>
</ul>
<h2 id="排行榜见解" tabindex="-1"> 排行榜见解</h2>
<p>排行榜从心理学上分析，主要从四个方面影响着您：<strong>寻找权威 、参与比较 、关注主流 、自我确认。</strong></p>
<p>如何设计一个简单的排行榜呢。。</p>
<p>在一个博客随笔中，我们设计一个3天、七天（周榜）、30天（月榜）、全部的榜单。以浏览量（权重1）、点赞量（20）、评论量（30)。权重可自己定义。</p>
<p>1.默认取最新的随笔</p>
<p>前台传create_time时，使用如下sql</p>
<div><pre><code>select * from `blog_article` order by create_time desc;
</code></pre><div aria-hidden="true"><span>1</span><br></div></div><p>2.传排序方式为最近n天的热榜时。</p>
<p>参数：THREE_DAYS_HOTTEST（三天）、WEEKLY_HOTTEST(七天）、MONTHLY_HOTTEST（一个月）、HOTTEST（全部）</p>
<p>mysql 查询当前日期时间前三天数据</p>
<div><pre><code>select date_sub(now() ,interval 3 day);
</code></pre><div aria-hidden="true"><span>1</span><br></div></div><p>根据权重查询</p>
<div><pre><code>select * from `blog_article` a 
where a.`create_time`>(select date_sub(now() ,interval 3 day))
order by (a.`view_hits` + a.`likes_quantity` * 20 + a.`comment_quantity` * 30) DESC, a.`create_time` DESC

</code></pre><div aria-hidden="true"><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br></div></div><h2 id="创作者中心" tabindex="-1"> 创作者中心</h2>
<h3 id="用户主页" tabindex="-1"> 用户主页</h3>
<p>统计值：阅读总数，点赞总数，关注者总数</p>
<h3 id="个人设置" tabindex="-1"> 个人设置</h3>
<p>用户信息、密码修改</p>
<h2 id="更多参考" tabindex="-1"> 更多参考</h2>
<ul>
<li><a href="http://www.woshipm.com/pd/1255548.html" target="_blank" rel="noopener noreferrer">万字长文深度分析：产品排行榜的设计和玩法</a></li>
<li><a href="https://zhuanlan.zhihu.com/p/52322777" target="_blank" rel="noopener noreferrer">想知道谁是你的最佳用户？基于Redis实现排行榜周期榜与最近N期榜</a></li>
</ul>
]]></content:encoded>
    </item>
    <item>
      <title>Lin CMS By .NET</title>
      <link>https://igeekfan.cn/igeekfan-docs/dotnetcore/lin-cms/</link>
      <guid>https://igeekfan.cn/igeekfan-docs/dotnetcore/lin-cms/</guid>
      <source url="https://igeekfan.cn/igeekfan-docs/rss.xml">Lin CMS By .NET</source>
      <pubDate>Fri, 28 Feb 2020 11:10:31 GMT</pubDate>
      <content:encoded><![CDATA[<p></p>
<h1 id="lin-cms-by-net" tabindex="-1"> Lin CMS By .NET</h1>
<h1  align="center">
  <a href="http://doc.cms.7yue.pro/">
    <img width="200" src="https://consumerminiaclprd01.blob.core.chinacloudapi.cn/miniappbackground/sfgmember/lin/left-logo.png">
  </a>
  <h1>
  </h1>
</h1>
<p>😃 A simple and practical CMS implemented by <a href="https://docs.microsoft.com/zh-cn/aspnet/core/introduction-to-aspnet-core?view=aspnetcore-6.0" target="_blank" rel="noopener noreferrer">ASP.NET Core 6</a></p>
<p>本项目是完全出于个人喜爱，看到 Lin-cms 有了 python,node.js,社区也有人出了<a href="https://github.com/ChenJinchuang/lin-cms-tp5" target="_blank" rel="noopener noreferrer">lin-cms-tp5</a>的版本</p>
<p>本项目是 Lin CMS 后端的 <a href="https://docs.microsoft.com/zh-cn/dotnet/core/introduction" target="_blank" rel="noopener noreferrer">ASP.NET6</a> 的实现，通过 Vue.js 实现的前后端分离 CMS 平台，目前实现简约的权限管理系统、基础字典项管理、随笔专栏，评论点赞，消息通知，标签等仿掘金模块。</p>
<h2 id="什么是-lin-cms" tabindex="-1"> 什么是 Lin CMS？</h2>
<p>Lin-CMS 是林间有风团队经过大量项目实践所提炼出的一套<strong>内容管理系统框架</strong>。Lin-CMS 可以有效的帮助开发者提高 CMS 的开发效率, 需要前端？请访问<a href="https://github.com/TaleLin/lin-cms-vue" target="_blank" rel="noopener noreferrer"><strong>前端仓库</strong></a>。官方团队产品了解请访问<a href="https://github.com/TaleLin" target="_blank" rel="noopener noreferrer"><strong>TaleLin</strong></a></p>
<h2 id="开源地址" tabindex="-1"> 开源地址</h2>
<ul>
<li>后端接口 Gitee 链接 <a href="https://gitee.com/igeekfan/lin-cms-dotnetcore" target="_blank" rel="noopener noreferrer">https://gitee.com/igeekfan/lin-cms-dotnetcore</a></li>
<li>后端接口 GitHub 链接 <a href="https://github.com/luoyunchong/lin-cms-dotnetcore" target="_blank" rel="noopener noreferrer">https://github.com/luoyunchong/lin-cms-dotnetcore</a></li>
<li>适配管理端 UI <a href="https://github.com/luoyunchong/lin-cms-vue" target="_blank" rel="noopener noreferrer">https://github.com/luoyunchong/lin-cms-vue</a></li>
<li>适配用户端 UI <a href="https://github.com/luoyunchong/lin-cms-vvlog" target="_blank" rel="noopener noreferrer">https://github.com/luoyunchong/lin-cms-vvlog</a></li>
</ul>
<h2 id="线上文档地址-完善中" tabindex="-1"> 线上文档地址(完善中)</h2>
<ul>
<li><a href="https://luoyunchong.github.io/igeekfan-docs/dotnetcore/lin-cms/" target="_blank" rel="noopener noreferrer">https://luoyunchong.github.io/igeekfan-docs/dotnetcore/lin-cms/</a></li>
<li><a href="https://igeekfan.gitee.io/igeekfan-docs/dotnetcore/lin-cms/" target="_blank" rel="noopener noreferrer">https://igeekfan.gitee.io/igeekfan-docs/dotnetcore/lin-cms/</a></li>
</ul>
<h2 id="线上-demo" tabindex="-1"> 线上 Demo</h2>
<ul>
<li>本项目 swagger 地址 <a href="https://api.igeekfan.cn/swagger/index.html" target="_blank" rel="noopener noreferrer">https://api.igeekfan.cn/swagger/index.html</a></li>
<li>用户端 lin-cms-vvlog <a href="https://vvlog.baimocore.cn" target="_blank" rel="noopener noreferrer">https://vvlog.baimocore.cn</a>
<ul>
<li>普通用户：710277267@qq.com</li>
<li>密码：123qwe</li>
</ul>
</li>
<li>管理员 lin-cms-vue <a href="https://cms.baimocore.cn" target="_blank" rel="noopener noreferrer">https://cms.baimocore.cn/</a>
<ul>
<li>管理员： admin</li>
<li>密码：123qwe</li>
</ul>
</li>
</ul>
<h2 id="前端" tabindex="-1"> 前端</h2>
<ul>
<li>在原<a href="https://github.com/TaleLin/lin-cms-vue" target="_blank" rel="noopener noreferrer">开源项目</a>中增加了博客随笔、标签、随笔评论、关注用户、关注标签、技术频道（标签分类）、插件式功能（目前还没有）
，具体特点查看如下<a href="https://blog.igeekfan.cn/2019/11/24/lin-cms-dotnetcore/design/" target="_blank" rel="noopener noreferrer">lin-cms-dotnetcore 功能模块的设计</a>,开源地址见下方。</li>
</ul>
<h3 id="lin-cms-的特点" tabindex="-1"> Lin CMS 的特点</h3>
<p>Lin CMS 的构筑思想是有其自身特点的。下面我们阐述一些 Lin 的主要特点。</p>
<h3 id="lin-cms-是一个前后端分离的-cms-解决方案" tabindex="-1"> Lin CMS 是一个前后端分离的 CMS 解决方案</h3>
<p>这意味着，Lin 既提供后台的支撑，也有一套对应的前端系统，</p>
<p>首先，传统的网站开发更多的是采用服务端渲染的方式，需用使用一种模板语言在服务端完成页面渲染：比如 Razor 等模板技术。</p>
<p>服务端渲染的好处在于可以比较好的支持 SEO，但作为内部使用的 CMS 管理系统，SEO 并不重要。</p>
<p>但一个不可忽视的事实是，服务器渲染的页面到底是由前端开发者来完成，还是由服务器开发者来完成？其实都不太合适。现在已经没有多少前端开发者是了解这些服务端模板语言的，而服务器开发者本身是不太擅长开发页面的。那还是分开吧，前端用最熟悉的 Vue 写 JS 和 CSS，而服务器只关注自己的 API 即可。</p>
<p>其次，单页面应用程序的体验本身就要好于传统网站。</p>
<h3 id="框架本身已内置了-cms-常用的功能" tabindex="-1"> 框架本身已内置了 CMS 常用的功能</h3>
<p>Lin 已经内置了 CMS 中最为常见的需求：用户管理、权限管理、日志系统等。开发者只需要集中精力开发自己的 CMS 业务即可</p>
<p>更多关于 Lin CMS 的介绍请访问<a href="http://doc.cms.7yue.pro/" target="_blank" rel="noopener noreferrer">Lin CMS 线上文档</a></p>
<h2 id="所需基础" tabindex="-1"> 所需基础</h2>
<p>由于 Lin 采用的是前后端分离的架构，所以你至少需要熟悉 C# 和 Vue。</p>
<h3 id="后端-c" tabindex="-1"> 后端 C#</h3>
<p>该项目的 Lin 的服务端框架是基于<a href="https://docs.microsoft.com/zh-cn/dotnet/core/" target="_blank" rel="noopener noreferrer">.NET Core 3.1</a>构建的，所以如果你比较熟悉 Mvc、WebAPI、过滤器等概念，或者是 有.NET Framework 中 Mvc 开发经验，相信你一定很容易写出代码。</p>
<h3 id="相关技术" tabindex="-1"> 相关技术</h3>
<ul>
<li>数据库相关：ORM:<a href="https://github.com/2881099/FreeSql" target="_blank" rel="noopener noreferrer">FreeSql</a>+DataBase:MySQL5.6/MsSqlServer/Oracle/Sqlite/PostgreSQL</li>
<li>ASP.NET Core 6 +WebAPI+RESTful</li>
<li>简化对象映射：<a href="https://automapper.org/" target="_blank" rel="noopener noreferrer">AutoMapper</a></li>
<li>身份认证框架：<a href="https://github.com/IdentityServer/IdentityServer4" target="_blank" rel="noopener noreferrer">IdentityServer4</a></li>
<li>Json Web 令牌:JWT</li>
<li>文档 API：Swagger(<a href="https://github.com/domaindrivendev/Swashbuckle.AspNetCore" target="_blank" rel="noopener noreferrer">Swashbuckle.AspNetCore</a>)
<ul>
<li>RapiDoc(<a href="https://github.com/luoyunchong/IGeekFan.AspNetCore.RapiDoc" target="_blank" rel="noopener noreferrer">RapiDoc</a>)</li>
<li>Knife4jUI(<a href="https://github.com/luoyunchong/IGeekFan.AspNetCore.Knife4jUI" target="_blank" rel="noopener noreferrer">Knife4jUI</a>)</li>
</ul>
</li>
<li>序列化：Newtonsoft.Json</li>
<li>测试框架：Xunit</li>
<li>日志 <a href="https://github.com/serilog/serilog-aspnetcore" target="_blank" rel="noopener noreferrer">Serilog</a></li>
<li>依赖注入服务<a href="https://github.com/autofac/Autofac.Extensions.DependencyInjection" target="_blank" rel="noopener noreferrer">AutoFac</a></li>
<li>通用扩展方法 Z.ExtensionMethods</li>
<li>云存储：七牛云 <a href="https://github.com/Hello-Mango/MQiniu.Core" target="_blank" rel="noopener noreferrer">MQiniu.Core</a></li>
<li>分布式事务、EventBus：<a href="https://github.com/dotnetcore/CAP" target="_blank" rel="noopener noreferrer">DotNeteCore.CAP</a></li>
<li>GitHub 第三方授权登录<a href="https://github.com/aspnet-contrib/AspNet.Security.OAuth.Providers/tree/dev/src/AspNet.Security.OAuth.GitHub" target="_blank" rel="noopener noreferrer">AspNet.Security.OAuth.GitHub</a></li>
<li>QQ 第三方授权登录<a href="https://github.com/aspnet-contrib/AspNet.Security.OAuth.Providers/tree/dev/src/AspNet.Security.OAuth.QQ" target="_blank" rel="noopener noreferrer">AspNet.Security.OAuth.QQ</a></li>
<li>Gitee 第三方授权登录<a href="https://github.com/aspnet-contrib/AspNet.Security.OAuth.Providers/tree/dev/src/AspNet.Security.OAuth.Gitee" target="_blank" rel="noopener noreferrer">AspNet.Security.OAuth.Gitee</a></li>
<li><a href="https://docs.docker.com/" target="_blank" rel="noopener noreferrer">Docker</a></li>
<li><a href="https://dev.azure.com/" target="_blank" rel="noopener noreferrer">Azure DevOps</a></li>
<li>健康检查<a href="https://github.com/xabaril/AspNetCore.Diagnostics.HealthChecks" target="_blank" rel="noopener noreferrer">AspNetCore.HealthChecks.UI.Client</a></li>
<li><a href="https://help.github.com/en/actions" target="_blank" rel="noopener noreferrer">GitHub Action</a></li>
</ul>
<h3 id="实践" tabindex="-1"> 实践</h3>
<ul>
<li>DDD(Domain-Driven Design)领域驱动设计</li>
<li>Logging（日志）</li>
<li>DevOps(CI/CD,自动化构建)</li>
<li>Database Migrations（数据库自动迁移)</li>
<li>Authentication(身份认证)</li>
<li>Authorization（授权）</li>
<li>Separation of Concerns（关注点分离）</li>
<li>Repository Pattern（仓储模式）</li>
<li>SOLID Principles（单一职责）</li>
<li>Clean Code（代码整洁之道）</li>
</ul>
<h3 id="分层结构-layers" tabindex="-1"> 分层结构（Layers）</h3>
<ul>
<li>identityserver4
<ul>
<li>LinCms.IdentityServer4:使用 id4 授权登录</li>
</ul>
</li>
<li>src
<ul>
<li>LinCms.Web：接口 API（ASP.NET Core)</li>
<li>LinCms.Application:应用服务</li>
<li>LinCms.Application.Contracts:DTO,数据传输对象，应用服务接口</li>
<li>LinCms.Infrastructure:基础设施，数据库持久性的操作</li>
<li>LinCms.Core:该应用的核心，实体类，通用操作类，AOP 扩展，分页对象，基础依赖对象接口，时间扩展方法，当前用户信息，异常类，值对象</li>
<li>LinCms.Plugins 使用单项目实现某个业务的扩展，不是该项目的主要结构，可暂时忽略。</li>
<li>LinCms.Scaffolding <a href="https://igeekfan.gitee.io/igeekfan-docs/dotnetcore/lin-cms/lincms-scaffolding.html" target="_blank" rel="noopener noreferrer">代码生成器</a></li>
</ul>
</li>
<li>test
<ul>
<li>LinCms.Test:对仓储，应用服务或工具类进行测试</li>
</ul>
</li>
</ul>
<h3 id="前端-1" tabindex="-1"> 前端</h3>
<p>前端需要开发者比较熟悉 Vue 的，另外需要了解 ES6,axios,ElementUi、webpack、Vuex、Vue-Router 等等等</p>
<h2 id="更新日志" tabindex="-1"> 更新日志</h2>
<p><a href="https://github.com/luoyunchong/lin-cms-dotnetcore/wiki/%E6%9B%B4%E6%96%B0%E6%97%A5%E5%BF%97" target="_blank" rel="noopener noreferrer">https://github.com/luoyunchong/lin-cms-dotnetcore/wiki/%E6%9B%B4%E6%96%B0%E6%97%A5%E5%BF%97</a></p>
]]></content:encoded>
    </item>
    <item>
      <title>全局敏感词处理</title>
      <link>https://igeekfan.cn/igeekfan-docs/dotnetcore/lin-cms/StopWords.html</link>
      <guid>https://igeekfan.cn/igeekfan-docs/dotnetcore/lin-cms/StopWords.html</guid>
      <source url="https://igeekfan.cn/igeekfan-docs/rss.xml">全局敏感词处理</source>
      <pubDate>Fri, 28 Feb 2020 11:10:31 GMT</pubDate>
      <content:encoded><![CDATA[<h1 id="全局敏感词处理" tabindex="-1"> 全局敏感词处理</h1>
<p>基于ToolGood.Words类库，配合敏感字的文本文件，写的API接口。</p>
<ul>
<li><a href="https://github.com/luoyunchong/dotnetcore-examples/tree/master/aspnetcore-stopwords" target="_blank" rel="noopener noreferrer">https://github.com/luoyunchong/dotnetcore-examples/tree/master/aspnetcore-stopwords</a></li>
</ul>
<p>一共二种方式</p>
<h2 id="_1-toolgood-words" tabindex="-1"> 1.ToolGood.Words</h2>
<p>类库配合敏感库</p>
<ul>
<li><a href="https://github.com/toolgood/ToolGood.Words" target="_blank" rel="noopener noreferrer">ToolGood.Words</a></li>
</ul>
<p>简单用法</p>
<div><pre><code>[Fact]
public void IssuesTest_17()
{
    var illegalWordsSearch = new IllegalWordsSearch();
    string s = "中国|zg人|abc";
    illegalWordsSearch.SetKeywords(s.Split('|'));
    var str = illegalWordsSearch.Replace("我是中美国人厉害中国完美ａｂｃddb好的", '*');

    Assert.Equal("我是中美国人厉害**完美***ddb好的", str);
}
</code></pre><div aria-hidden="true"><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br></div></div><p>配合敏感库文本文件，写的工具类</p>
<p>二个文件放到wwwroot/_Illegal目录下，通过ReplaceStopWords方法调用即可对</p>
<ul>
<li><a href="https://github.com/toolgood/ToolGood.Words/blob/master/csharp/ToolGood.Words.Test/_Illegal/IllegalKeywords.txt" target="_blank" rel="noopener noreferrer">https://github.com/toolgood/ToolGood.Words/blob/master/csharp/ToolGood.Words.Test/_Illegal/IllegalKeywords.txt</a></li>
<li><a href="https://github.com/toolgood/ToolGood.Words/blob/master/csharp/ToolGood.Words.Test/_Illegal/IllegalUrls.txt" target="_blank" rel="noopener noreferrer">https://github.com/toolgood/ToolGood.Words/blob/master/csharp/ToolGood.Words.Test/_Illegal/IllegalUrls.txt</a></li>
</ul>
<div><pre><code>public class ToolGoodUtils
{
    //敏感库只要这二个文件存在即可
    //本地敏感库缓存-https://github.com/toolgood/ToolGood.Words/tree/master/csharp/ToolGood.Words.Test/_Illegal
    //因为需要上传至github并同步gitee,安全起见，所以未上传至git，需要自行下载并复制
    private const string KeywordsPath = "wwwroot/_Illegal/IllegalKeywords.txt";
    private const string UrlsPath = "wwwroot/_Illegal/IllegalUrls.txt";

    private const string InfoPath = "wwwroot/_Illegal/IllegalInfo.txt";
    private const string BitPath = "wwwroot/_Illegal/IllegalBit.iws";

    private static IllegalWordsSearch _search;
    /// &lt;summary>
    /// 本地敏感库,文件修改后，重新创建缓存Bit
    /// &lt;/summary>
    /// &lt;returns>&lt;/returns>
    public static IllegalWordsSearch GetIllegalWordsSearch()
    {
        if (_search == null)
        {
            string ipath = Path.GetFullPath(InfoPath);
            if (File.Exists(ipath) == false)
            {
                _search = CreateIllegalWordsSearch();
            }
            else
            {
                var texts = File.ReadAllText(ipath).Split('|');
                if (new FileInfo(Path.GetFullPath(KeywordsPath)).LastWriteTime.ToString("yyyy-MM-dd HH:mm:ss") !=
                    texts[0] ||
                    new FileInfo(Path.GetFullPath(UrlsPath)).LastWriteTime.ToString("yyyy-MM-dd HH:mm:ss") !=
                    texts[1]
                )
                {
                    _search = CreateIllegalWordsSearch();
                }
                else
                {
                    var s = new IllegalWordsSearch();
                    s.Load(Path.GetFullPath(BitPath));
                    _search = s;
                }
            }
        }
        return _search;
    }

    private static IllegalWordsSearch CreateIllegalWordsSearch()
    {
        string[] words1 = File.ReadAllLines(Path.GetFullPath(KeywordsPath), Encoding.UTF8);
        string[] words2 = File.ReadAllLines(Path.GetFullPath(UrlsPath), Encoding.UTF8);
        var words = new List&lt;string>();
        foreach (var item in words1)
        {
            words.Add(item.Trim());
        }
        foreach (var item in words2)
        {
            words.Add(item.Trim());
        }

        var search = new IllegalWordsSearch();
        search.SetKeywords(words);

        search.Save(Path.GetFullPath(BitPath));

        var text = new FileInfo(Path.GetFullPath(KeywordsPath)).LastWriteTime.ToString("yyyy-MM-dd HH:mm:ss") + "|"+ new FileInfo(Path.GetFullPath(UrlsPath)).LastWriteTime.ToString("yyyy-MM-dd HH:mm:ss");
        File.WriteAllText(Path.GetFullPath(InfoPath), text);

        return search;
    }
}
</code></pre><div aria-hidden="true"><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br><span>24</span><br><span>25</span><br><span>26</span><br><span>27</span><br><span>28</span><br><span>29</span><br><span>30</span><br><span>31</span><br><span>32</span><br><span>33</span><br><span>34</span><br><span>35</span><br><span>36</span><br><span>37</span><br><span>38</span><br><span>39</span><br><span>40</span><br><span>41</span><br><span>42</span><br><span>43</span><br><span>44</span><br><span>45</span><br><span>46</span><br><span>47</span><br><span>48</span><br><span>49</span><br><span>50</span><br><span>51</span><br><span>52</span><br><span>53</span><br><span>54</span><br><span>55</span><br><span>56</span><br><span>57</span><br><span>58</span><br><span>59</span><br><span>60</span><br><span>61</span><br><span>62</span><br><span>63</span><br><span>64</span><br><span>65</span><br><span>66</span><br><span>67</span><br><span>68</span><br><span>69</span><br><span>70</span><br><span>71</span><br><span>72</span><br></div></div><h2 id="_2-循环使用replace" tabindex="-1"> 2. 循环使用Replace</h2>
<p>方案：通过维护敏感库，循环replace
大佬分享给我的，稍微改成了从文件中获取敏感字。</p>
<div><pre><code>public static class StopWords
{

    static readonly ConcurrentDictionary&lt;string, bool> FunNlpDataSensitive = new ConcurrentDictionary&lt;string, bool>();
    static readonly ConcurrentDictionary&lt;int, string> ReplaceNewValue = new ConcurrentDictionary&lt;int, string>();

    private const string KeywordsPath = "wwwroot/_Illegal/IllegalKeywords.txt";
    private const string UrlsPath = "wwwroot/_Illegal/IllegalUrls.txt";


    static StopWords()
    {
        LoadDataFromFile();
    }

    public static void LoadDataFromFile()
    {
        string words1 = File.ReadAllText(Path.GetFullPath(KeywordsPath), Encoding.UTF8);
        string words2 = File.ReadAllText(Path.GetFullPath(UrlsPath), Encoding.UTF8);
        LoadDataFromText(words1);
        LoadDataFromText(words2);
    }


    public static void LoadDataFromText(string text)
    {
        int oldcount = FunNlpDataSensitive.Count;
        foreach (string wd in text.Split('\n'))
        {
            string keykey = wd.Trim().Trim('\r', '\n').Trim();
            if (string.IsNullOrEmpty(keykey)) continue;
            FunNlpDataSensitive.TryAdd(keykey, true);
            if (ReplaceNewValue.ContainsKey(keykey.Length) == false)
                ReplaceNewValue.TryAdd(keykey.Length, "".PadRight(keykey.Length, '*'));
        }
        Console.WriteLine($"敏感词加载完毕，增加数量：{FunNlpDataSensitive.Count - oldcount}");
    }


    /// &lt;summary>
    /// 替换所有敏感词为 *
    /// &lt;/summary>
    /// &lt;param name="that">&lt;/param>
    /// &lt;returns>&lt;/returns>
    public static string ReplaceStopWords(this string that)
    {
        foreach (var wd in FunNlpDataSensitive.Keys)
            that = that.Replace(wd, ReplaceNewValue.TryGetValue(wd.Length, out var tryval) ? tryval : "".PadRight(wd.Length, '*'));
        return that;
    }
}
</code></pre><div aria-hidden="true"><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br><span>24</span><br><span>25</span><br><span>26</span><br><span>27</span><br><span>28</span><br><span>29</span><br><span>30</span><br><span>31</span><br><span>32</span><br><span>33</span><br><span>34</span><br><span>35</span><br><span>36</span><br><span>37</span><br><span>38</span><br><span>39</span><br><span>40</span><br><span>41</span><br><span>42</span><br><span>43</span><br><span>44</span><br><span>45</span><br><span>46</span><br><span>47</span><br><span>48</span><br><span>49</span><br><span>50</span><br><span>51</span><br></div></div><h2 id="freesql全局处理敏感词" tabindex="-1"> FreeSql全局处理敏感词</h2>
<p>使用FreeSql这个ORM时，全局处理string类型的值，进行敏感词处理。代码在StartUp.cs的构造函数中。</p>
<div><pre><code>//敏感词处理
IllegalWordsSearch illegalWords = ToolGoodUtils.GetIllegalWordsSearch();

Fsql.Aop.AuditValue += (s, e) =>
{
    if (e.Column.CsType == typeof(string) &amp;&amp; e.Value != null)
    {
        string oldVal = (string)e.Value;
        string newVal = illegalWords.Replace(oldVal);
        //第二种处理敏感词的方式
        //string newVal = oldVal.ReplaceStopWords();
        if (newVal != oldVal)
        {
            e.Value = newVal;
        }
    }
};
</code></pre><div aria-hidden="true"><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br></div></div>]]></content:encoded>
    </item>
    <item>
      <title>开发起步</title>
      <link>https://igeekfan.cn/igeekfan-docs/dotnetcore/lin-cms/dev-start.html</link>
      <guid>https://igeekfan.cn/igeekfan-docs/dotnetcore/lin-cms/dev-start.html</guid>
      <source url="https://igeekfan.cn/igeekfan-docs/rss.xml">开发起步</source>
      <pubDate>Fri, 28 Feb 2020 11:10:31 GMT</pubDate>
      <content:encoded><![CDATA[<h1 id="开发起步" tabindex="-1"> 开发起步</h1>
<h2 id="项目结构" tabindex="-1"> 项目结构</h2>
<ul>
<li>framework
<ul>
<li>IGeekFan.Localization.FreeSql：使用FreeSql存储本地化数据</li>
</ul>
</li>
<li>identityserver4
<ul>
<li>LinCms.IdentityServer4:使用id4授权登录</li>
</ul>
</li>
<li>src
<ul>
<li>LinCms.Web：接口API（ASP.NET Core)、中间件，权限验证</li>
<li>LinCms.Application:应用服务</li>
<li>LinCms.Application.Contracts:DTO,数据传输对象,应用服务接口</li>
<li>LinCms.Infrastructure:基础设施，数据库持久性的操作，仓储接口的实现</li>
<li>LinCms.Core:该应用的核心，实体类，通用操作类，AOP扩展，分页对象，基础依赖对象接口，时间扩展方法，当前用户信息，异常类，值对象，仓储接口</li>
<li>LinCms.Plugins 使用单项目实现某个业务的扩展，不需要主要项目结构，可暂时忽略。</li>
</ul>
</li>
<li>test
<ul>
<li>LinCms.Test:对仓储，应用服务或工具类进行测试</li>
</ul>
</li>
</ul>
<div><pre><code>├─framework
│  └─src
│      └─IGeekFan.Localization.FreeSql
├─identityserver4
│  └─LinCms.IdentityServer4
│      ├─Controllers
│      ├─IdentityServer4
├─src
│  ├─LinCms.Application
│  │  ├─Cms
│  │  │  ├─Admin
│  │  │  ├─Files
│  │  │  ├─Groups
│  │  │  ├─Logs
│  │  │  ├─Permissions
│  │  │  ├─Settings
│  │  │  └─Users
│  ├─LinCms.Application.Contracts
│  │  ├─Cms
│  │  │  ├─Account
│  │  │  ├─Admins
│  │  │  │  └─Dtos
│  │  │  ├─Files
│  │  │  │  └─Dtos
│  │  │  ├─Groups
│  │  │  │  └─Dtos
│  │  │  ├─Logs
│  │  │  │  └─Dtos
│  │  │  ├─Permissions
│  │  │  │  └─Dtos
│  │  │  ├─Settings
│  │  │  │  └─Dtos
│  │  │  └─Users
│  │  │      └─Dtos
│  ├─LinCms.Core
│  │  ├─Aop
│  │  ├─Common
│  │  ├─Data
│  │  │  └─Enums
│  │  ├─Dependency
│  │  ├─Entities
│  │  │  └─Settings
│  │  ├─Exceptions
│  │  ├─Extensions
│  │  ├─IRepositories
│  │  ├─LinCms
│  │  │  └─Core
│  │  ├─Middleware
│  │  └─Security
│  ├─LinCms.Infrastructure
│  │  └─Repositories
│  ├─LinCms.Plugins
│  │  └─Poem
│  │      ├─AutoMapper
│  │      ├─Controllers
│  │      └─Models
│  └─LinCms.Web
│      ├─Configs
│      ├─Controllers
│      │  ├─Cms
│      ├─Data
│      │  └─Authorization
│      ├─Properties
│      ├─SnakeCaseQuery
│      ├─Uow
│      ├─Utils
│      └─wwwroot
└─test
    └─LinCms.Test
        ├─Controller
        │  ├─Cms
        ├─Properties
        ├─Service
        │  └─Cms
        └─Utils
</code></pre><div aria-hidden="true"><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br><span>24</span><br><span>25</span><br><span>26</span><br><span>27</span><br><span>28</span><br><span>29</span><br><span>30</span><br><span>31</span><br><span>32</span><br><span>33</span><br><span>34</span><br><span>35</span><br><span>36</span><br><span>37</span><br><span>38</span><br><span>39</span><br><span>40</span><br><span>41</span><br><span>42</span><br><span>43</span><br><span>44</span><br><span>45</span><br><span>46</span><br><span>47</span><br><span>48</span><br><span>49</span><br><span>50</span><br><span>51</span><br><span>52</span><br><span>53</span><br><span>54</span><br><span>55</span><br><span>56</span><br><span>57</span><br><span>58</span><br><span>59</span><br><span>60</span><br><span>61</span><br><span>62</span><br><span>63</span><br><span>64</span><br><span>65</span><br><span>66</span><br><span>67</span><br><span>68</span><br><span>69</span><br><span>70</span><br><span>71</span><br><span>72</span><br><span>73</span><br><span>74</span><br><span>75</span><br></div></div><h2 id="相关技术" tabindex="-1"> 相关技术</h2>
<h3 id="freesql" tabindex="-1"> FreeSql</h3>
<ul>
<li>
<p><a href="/dotnetcore/examples/freesql-in-aspnetcore-webapi-how-to-use.html" target="_blank" rel="noopener noreferrer">主要在介绍FreeSql在ASP.NTE Core WebApi中如何使用的过程，完成一个最简单的博客系统的后端接口</a></p>
</li>
<li>
<p><a href="/dotnetcore/examples/freesql-sample-blog-restful-use-automapper.html" target="_blank" rel="noopener noreferrer">本文使用ASP .NET Core的WEB API，构建一个RESTful风格的接口，使用Freesql访问MySQL数据库，实现二个表的简单博客，并集成AutoMapper。</a></p>
</li>
</ul>
<h3 id="identityserver4" tabindex="-1"> IdentityServer4</h3>
<ul>
<li><a href="/dotnetcore/examples/IdentityServer4.html" target="_blank" rel="noopener noreferrer">IdentityServer4 在本项目中的应用</a></li>
</ul>
]]></content:encoded>
    </item>
    <item>
      <title>后端准备</title>
      <link>https://igeekfan.cn/igeekfan-docs/dotnetcore/lin-cms/dotnetcore-start.html</link>
      <guid>https://igeekfan.cn/igeekfan-docs/dotnetcore/lin-cms/dotnetcore-start.html</guid>
      <source url="https://igeekfan.cn/igeekfan-docs/rss.xml">后端准备</source>
      <pubDate>Fri, 28 Feb 2020 11:10:31 GMT</pubDate>
      <content:encoded><![CDATA[<h1 id="后端准备" tabindex="-1"> 后端准备</h1>
<h2 id="server-端必备环境" tabindex="-1"> Server 端必备环境</h2>
<ul>
<li>安装软件开发包 <a href="https://dotnet.microsoft.com/zh-cn/download/dotnet/6.0" target="_blank" rel="noopener noreferrer">.NET SDK 6.0</a></li>
<li>安装开发工具 <a href="https://visualstudio.microsoft.com/zh-hans/vs/" target="_blank" rel="noopener noreferrer">Visual Studio 2022</a> 或 <a href="https://www.jetbrains.com/rider/" target="_blank" rel="noopener noreferrer">Rider</a></li>
<li>安装 MySQL（version 5.7+)</li>
<li>Redis 4.0.14.2 for Windows <a href="https://github.com/tporadowski/redis/releases" target="_blank" rel="noopener noreferrer">https://github.com/tporadowski/redis/releases</a></li>
</ul>
<h2 id="获取工程项目" tabindex="-1"> 获取工程项目</h2>
<div><pre><code><span>git</span> clone https://github.com/luoyunchong/lin-cms-dotnetcore.git
</code></pre><div aria-hidden="true"><span>1</span><br></div></div><h2 id="数据库配置" tabindex="-1"> 数据库配置</h2>
<p>文件位置<code>src/LinCms.Web/appsettings.json</code>，当数据库中存储表情包是，<code>Charset</code>为<code>utf8mb4</code></p>
<p><strong>请务必根据自己的实际情况修改此配置项</strong>，<code>DefaultDB</code>为 0 时，代表使用<code>MySQL</code>，<code>DefaultDB</code>为 1 时，代表使用<code>SqlServer</code>,以此类推。</p>
<div><pre><code> <span>"ConnectionStrings"</span><span>:</span> <span>{</span>
    <span>"DefaultDB"</span><span>:</span> <span>"0"</span><span>,</span>
    <span>"DataType"</span><span>:</span> <span>{</span>
      <span>"MySql"</span><span>:</span> <span>0</span><span>,</span>
      <span>"SqlServer"</span><span>:</span> <span>1</span><span>,</span>
      <span>"PostgreSQL"</span><span>:</span> <span>2</span><span>,</span>
      <span>"Oracle"</span><span>:</span> <span>3</span><span>,</span>
      <span>"Sqlite"</span><span>:</span> <span>4</span>
    <span>}</span><span>,</span>
    <span>"MySql"</span><span>:</span> <span>"Data Source=localhost;Port=3306;User ID=root;Password=root;Initial Catalog=lincms;Charset=utf8mb4;SslMode=none;Max pool size=1;Connection LifeTime=20"</span><span>,</span>
    <span>"SqlServer"</span><span>:</span> <span>"Data Source=.;User ID=sa;Password=123456;Integrated Security=True;Initial Catalog=LinCMS;Pooling=true;Min Pool Size=1"</span><span>,</span>
    <span>"PostgreSQL"</span><span>:</span> <span>"Host=localhost;Port=5432;Username=postgres;Password=123456; Database=lincms;Pooling=true;Minimum Pool Size=1"</span><span>,</span>
    <span>"Oracle"</span><span>:</span> <span>null</span><span>,</span>
    <span>"Sqlite"</span><span>:</span> <span>"Data Source=|DataDirectory|\\lincms.db; Attachs=lincms.db; Pooling=true;Min Pool Size=1"</span><span>,</span>
    <span>"CsRedis"</span><span>:</span> <span>"127.0.0.1:6379,password=,defaultDatabase=0"</span>
  <span>}</span><span>,</span>
</code></pre><div aria-hidden="true"><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br></div></div><p><code>LinCms.IdentityServer4</code> 项目不是必须的，需要需要运行，需要修改数据库配置项</p>
<p><code>identityserver4/LinCms.IdentityServer4/appsettings.json</code> 数据库配置、同<code>LinCms.Web</code>中的配置项相同</p>
<div><pre><code>  <span>"ConnectionStrings"</span><span>:</span> <span>{</span>
    <span>"DefaultDB"</span><span>:</span> <span>"0"</span><span>,</span>
    <span>"DataType"</span><span>:</span> <span>{</span>
      <span>"MySql"</span><span>:</span> <span>0</span><span>,</span>
      <span>"SqlServer"</span><span>:</span> <span>1</span><span>,</span>
      <span>"PostgreSQL"</span><span>:</span> <span>2</span><span>,</span>
      <span>"Oracle"</span><span>:</span> <span>3</span><span>,</span>
      <span>"Sqlite"</span><span>:</span> <span>4</span>
    <span>}</span><span>,</span>
    <span>"MySql"</span><span>:</span> <span>"Data Source=localhost;Port=3308;User ID=root;Password=root;Initial Catalog=lincms;Charset=utf8mb4;SslMode=none;Max pool size=1;Connection LifeTime=20"</span><span>,</span>
    <span>"SqlServer"</span><span>:</span> <span>"Data Source=.;User ID=sa;Password=123456;Integrated Security=True;Initial Catalog=LinCMS;Pooling=true;Min Pool Size=1"</span><span>,</span>
    <span>"Sqlite"</span><span>:</span> <span>"Data Source=|DataDirectory|\\lincms.db; Attachs=lincms.db; Pooling=true;Min Pool Size=1"</span>
  <span>}</span><span>,</span>
</code></pre><div aria-hidden="true"><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br></div></div><p>其中 MariaDB（看做 MySql）,通过<code>Serilog</code>记录日志，需要配置相应的链接串。</p>
<div><pre><code><span>{</span>
        <span>"Name"</span><span>:</span> <span>"MariaDB"</span><span>,</span>
        <span>"Args"</span><span>:</span> <span>{</span>
          <span>"connectionString"</span><span>:</span> <span>"Data Source=localhost;Port=3306;User ID=root;Password=root;Initial Catalog=lincms;Charset=utf8mb4;SslMode=none;Max pool size=1;Connection LifeTime=20"</span><span>,</span>
        <span>}</span>
</code></pre><div aria-hidden="true"><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br></div></div><h2 id="数据迁移" tabindex="-1"> 数据迁移</h2>
<p>该项目使用<a href="https://github.com/2881099/FreeSql" target="_blank" rel="noopener noreferrer">FreeSql</a>，默认自动迁移数据表结构，会自动根据配置项创建数据库，初始化种子数据</p>
<p>默认会创建用户<code>admin</code>，密码<code>123qwe</code></p>
<h2 id="visual-studio-2022-运行项目" tabindex="-1"> visual studio 2022 运行项目</h2>
<p>双击 lin-cms-dotnetcore.sln，使用 vs2022 打开项目。右键解决方案，点击生成解决方案。</p>
<p>由于将 identityserver4 单独拆成了一个项目，所以需要同时启动二个项目，<strong>右键解决方案，属性。</strong>,选择多个启动项目，勾选二个项目同时启动。如下图所示。</p>
<p><img src="https://pic.downk.cc/item/5e83fd74504f4bcb04cf5474.png" alt="" loading="lazy"></p>
<p>这时候会打开二个网页 https://localhost:5001/swagger/index.html，即可看到 swagger 页面。</p>
<p><img src="https://pic.downk.cc/item/5e83ffd1504f4bcb04d0f039.jpg" alt="" loading="lazy"></p>
<p>会打开浏览器，访问<a href="https://localhosst:5001/swagger/index.html" target="_blank" rel="noopener noreferrer">https://localhosst:5001/swagger/index.html</a>，会看到 swagger 的文档。
访问<a href="https://localhosst:5001/swagger/index.html" target="_blank" rel="noopener noreferrer">https://localhosst:5003/swagger/index.html</a> 是 ids4 的接口文档，什么也看不到。</p>
<p>LinCms.Web 运行效果：
<img src="https://ae01.alicdn.com/kf/He52bc4d3708242d2995419bb584e1f53Q.jpg" alt="" loading="lazy"></p>
<h2 id="部署" tabindex="-1"> 部署</h2>
<ul>
<li><a href="https://blog.igeekfan.cn/2022/06/09/dotnetcore/ASP.NET-Core-Deploy-To-Ubuntu" target="_blank" rel="noopener noreferrer">部署至 Linux(Ubuntu16.06)</a></li>
<li><a href="https://blog.igeekfan.cn/2022/06/09/dotnetcore/ASP.NET-Core-Deploy-To-Docker-Ubuntu/" target="_blank" rel="noopener noreferrer">部署至 Linux(Ubuntu16.06)下的 Docker</a></li>
</ul>
<h2 id="部署前准备" tabindex="-1"> 部署前准备</h2>
<p>因为该项目基于 IdentityServer4,实现的授权认证服务，</p>
<p>开发阶段使用<code>AddDeveloperSigningCredential()</code>方法即可完成签名认证，但是在生产环境，我们必须使用<code>AddSigningCredential()</code>方法并且使用 OpenSSL 生成自己的签名证书</p>
<p>Startup.cs</p>
<div><pre><code>            services.AddIdentityServer()
#if  DEBUG
                .AddDeveloperSigningCredential()
#endif
#if !DEBUG
                .AddSigningCredential(new X509Certificate2(Path.Combine(AppContext.BaseDirectory,
                        Configuration["Certificates:Path"]),
                    Configuration["Certificates:Password"]))
#endif
                .AddInMemoryIdentityResources(InMemoryConfiguration.GetIdentityResources())
                .AddInMemoryApiResources(InMemoryConfiguration.GetApis())
                .AddInMemoryClients(InMemoryConfiguration.GetClients())
                .AddProfileService&lt;LinCmsProfileService>()
                .AddResourceOwnerValidator&lt;LinCmsResourceOwnerPasswordValidator>();
</code></pre><div aria-hidden="true"><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br></div></div><p>appsettings.Production.json</p>
<div><pre><code>{
    "Certificates":
    {
        "Path":"ids4.pfx",
        "Password":"123qwe"
    }
}
</code></pre><div aria-hidden="true"><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br></div></div><h3 id="使用-openssl-生成证书" tabindex="-1"> 使用 OpenSSL 生成证书</h3>
<p>官网下载并安装 OpenSSL <a href="https://slproweb.com/products/Win32OpenSSL.html" target="_blank" rel="noopener noreferrer">OpenSSL 官网</a></p>
<p>下载 Win64 OpenSSL v1.1.1b 版本</p>
<p>在 OpenSSL 的 bin 文件夹，以管理员身份打开 CMD 执行以下命令：</p>
<div><pre><code>openssl req -newkey rsa:2048 -nodes -keyout ids4.key -x509 -days 365 -out ids4.cer
</code></pre><div aria-hidden="true"><span>1</span><br></div></div><p>下面将生成的证书和 Key 封装成一个文件，以便 IdentityServer 可以使用它们去正确地签名 tokens</p>
<div><pre><code>openssl pkcs12 -export -in ids4.cer -inkey ids4.key -out ids4.pfx
</code></pre><div aria-hidden="true"><span>1</span><br></div></div><h5 id="注-在生成的过程中会让我们输入-export-password" tabindex="-1"> (注：在生成的过程中会让我们输入 Export Password)</h5>
<p>这个 密码与 appsettings.Production.json 配置项相同。</p>
<p>发布时，把 ids4.pfx，放到项目根目录</p>
<h2 id="参考" tabindex="-1"> 参考</h2>
<ul>
<li><a href="https://www.cnblogs.com/guolianyu/p/9872661.html" target="_blank" rel="noopener noreferrer">IdentityServer4 之 JWT 签名(RSA 加密证书)及验签</a></li>
</ul>
]]></content:encoded>
      <enclosure url="https://pic.downk.cc/item/5e83fd74504f4bcb04cf5474.png" type="image/png"/>
    </item>
    <item>
      <title>code</title>
      <link>https://igeekfan.cn/igeekfan-docs/dotnetcore/lin-cms/error-code.html</link>
      <guid>https://igeekfan.cn/igeekfan-docs/dotnetcore/lin-cms/error-code.html</guid>
      <source url="https://igeekfan.cn/igeekfan-docs/rss.xml">code</source>
      <pubDate>Fri, 28 Feb 2020 11:10:31 GMT</pubDate>
      <content:encoded><![CDATA[<h1 id="code" tabindex="-1"> code</h1>
<h2 id="核心库内置已使用状态码" tabindex="-1"> 核心库内置已使用状态码</h2>
<p>0 成功</p>
<p>999 服务器未知错误</p>
<p>9999 失败</p>
<p>10000 认证失败</p>
<p>10020 资源不存在</p>
<p>10030 参数错误</p>
<p>10040 令牌失效</p>
<p>10050 令牌过期</p>
<p>10060 字段重复</p>
<p>10070 禁止操作</p>
<p>10080 请求方法不允许</p>
<p>10100 refresh token 获取失败</p>
<p>10110 文件体积过大</p>
<p>10120 文件数量过多</p>
<p>10130 文件扩展名不符合规范</p>
<p>10140 请求过于频繁，请稍后重试</p>
]]></content:encoded>
    </item>
    <item>
      <title>功能模块的设计</title>
      <link>https://igeekfan.cn/igeekfan-docs/dotnetcore/lin-cms/pm-design-modules.html</link>
      <guid>https://igeekfan.cn/igeekfan-docs/dotnetcore/lin-cms/pm-design-modules.html</guid>
      <source url="https://igeekfan.cn/igeekfan-docs/rss.xml">功能模块的设计</source>
      <category>lin-cms-dotnetcore</category>
      <pubDate>Sun, 24 Nov 2019 12:44:22 GMT</pubDate>
      <content:encoded><![CDATA[<h1 id="功能模块的设计" tabindex="-1"> 功能模块的设计</h1>
<h2 id="基础权限模块" tabindex="-1"> 基础权限模块</h2>
<ul>
<li>用户信息：邮件、用户名（唯一）、昵称、头像、分组、是否激活、手机号、是否是Admin、个性签名
<ul>
<li><input type="checkbox" checked="checked" disabled="disabled" id="task-item-0"><label for="task-item-0"> 注册/登录</label></li>
<li><input type="checkbox" checked="checked" disabled="disabled" id="task-item-1"><label for="task-item-1"> 上传头像</label></li>
<li><input type="checkbox" checked="checked" disabled="disabled" id="task-item-2"><label for="task-item-2"> 修改密码</label></li>
<li><input type="checkbox" checked="checked" disabled="disabled" id="task-item-3"><label for="task-item-3"> 用户基本信息修改</label></li>
<li><input type="checkbox" checked="checked" disabled="disabled" id="task-item-4"><label for="task-item-4"> 用户增删改，配置分组</label></li>
</ul>
</li>
<li>绑定第三方账号
<ul>
<li><input type="checkbox" checked="checked" disabled="disabled" id="task-item-5"><label for="task-item-5"> GitHub登录</label></li>
<li><input type="checkbox"  disabled="disabled" id="task-item-6"><label for="task-item-6"> QQ 登录</label></li>
</ul>
</li>
<li>分组信息：是否静态分组（无法删除，无法修改分组编码）、名称可以修改
<ul>
<li><input type="checkbox" checked="checked" disabled="disabled" id="task-item-7"><label for="task-item-7"> 分组增删改</label></li>
<li><input type="checkbox" checked="checked" disabled="disabled" id="task-item-8"><label for="task-item-8"> 组别配置权限</label></li>
</ul>
</li>
<li>文件管理
<ul>
<li><input type="checkbox" checked="checked" disabled="disabled" id="task-item-9"><label for="task-item-9"> 本地文件上传</label></li>
<li><input type="checkbox" checked="checked" disabled="disabled" id="task-item-10"><label for="task-item-10"> 七牛云存储</label></li>
<li><input type="checkbox"  disabled="disabled" id="task-item-11"><label for="task-item-11"> 文件去重，秒传</label></li>
</ul>
</li>
<li>系统日志：请求方法、路径、http返回码、时间、用户昵称、用户id、访问哪个权限、 日志信息
<ul>
<li><input type="checkbox" checked="checked" disabled="disabled" id="task-item-12"><label for="task-item-12"> 记录系统请求的日志</label></li>
<li><input type="checkbox"  disabled="disabled" id="task-item-13"><label for="task-item-13"> 异常日志</label></li>
</ul>
</li>
<li>设置管理：name(键）,value(值),provider_name(提供名),provider_key（提供者值）
<ul>
<li><input type="checkbox" checked="checked" disabled="disabled" id="task-item-14"><label for="task-item-14"> 设置新增修改删除</label></li>
<li><input type="checkbox" checked="checked" disabled="disabled" id="task-item-15"><label for="task-item-15"> 所有设置</label></li>
</ul>
</li>
</ul>
<p>比如存某用户选择的是markdown还是富文本。</p>
<div><pre><code>name="Article.Editor",
value="markdown" 或 "富文本"，
provider_name为"User",
provider_key为用户Id
</code></pre><div aria-hidden="true"><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br></div></div><p>或存储七牛云的某一个配置</p>
<div><pre><code>name="Qiniu.AK",
value="asfadsfadf23rft66S4XM2GIK7FGmj7czuYkcAyNGDAc" ，
provider_name为"Qiniu"或自己定义的字符串
provider_key为空
</code></pre><div aria-hidden="true"><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br></div></div><h2 id="cms-管理员维护模块" tabindex="-1"> cms 管理员维护模块</h2>
<ul>
<li>标签管理：名称、图片，是否启用/禁用，排序、文章数量、用户关注数量。
<ul>
<li><input type="checkbox" checked="checked" disabled="disabled" id="task-item-16"><label for="task-item-16"> 标签增删改</label></li>
<li><input type="checkbox" checked="checked" disabled="disabled" id="task-item-17"><label for="task-item-17"> 标签列表，禁用</label></li>
</ul>
</li>
<li>技术频道：封面图、名称、是否启用/禁用、排序、编码、备注描述、下属标签.一个技术频道对应多个标签
<ul>
<li><input type="checkbox" checked="checked" disabled="disabled" id="task-item-18"><label for="task-item-18"> 技术频道增删改</label></li>
<li><input type="checkbox" checked="checked" disabled="disabled" id="task-item-19"><label for="task-item-19"> 列表、禁用</label></li>
</ul>
</li>
<li>随笔管理：
<ul>
<li><input type="checkbox" checked="checked" disabled="disabled" id="task-item-20"><label for="task-item-20"> 审核随笔/拉黑</label></li>
</ul>
</li>
<li>评论管理
<ul>
<li><input type="checkbox" checked="checked" disabled="disabled" id="task-item-21"><label for="task-item-21"> 后台审核通过/拉黑</label></li>
<li><input type="checkbox" checked="checked" disabled="disabled" id="task-item-22"><label for="task-item-22"> 管理员删除评论</label></li>
</ul>
</li>
<li>字典管理
<ul>
<li><input type="checkbox" checked="checked" disabled="disabled" id="task-item-23"><label for="task-item-23"> 字典类别管理</label></li>
<li><input type="checkbox" checked="checked" disabled="disabled" id="task-item-24"><label for="task-item-24"> 字典管理：如随笔类型（原创、转载、翻译）</label></li>
</ul>
</li>
</ul>
<h2 id="cms-用户端模块" tabindex="-1"> cms 用户端模块</h2>
<ul>
<li>
<p>技术频道</p>
<ul>
<li><input type="checkbox" checked="checked" disabled="disabled" id="task-item-25"><label for="task-item-25"> 首页展示技术频道</label></li>
<li><input type="checkbox" checked="checked" disabled="disabled" id="task-item-26"><label for="task-item-26"> 选择技术频道后，可再根据标签查询文章</label></li>
</ul>
</li>
<li>
<p>分类专栏管理:发布随笔时可选择单个分类。</p>
<ul>
<li><input type="checkbox" checked="checked" disabled="disabled" id="task-item-27"><label for="task-item-27"> 分类增删改(随笔数量、图片、名称、排序)</label></li>
<li><input type="checkbox" checked="checked" disabled="disabled" id="task-item-28"><label for="task-item-28"> 分类列表，仅查看、编辑自己创建的分类专栏</label></li>
</ul>
</li>
<li>
<p>标签：统计每个标签下多少个文章、多少人关注</p>
<ul>
<li><input type="checkbox" checked="checked" disabled="disabled" id="task-item-29"><label for="task-item-29"> 标签列表</label></li>
<li><input type="checkbox" checked="checked" disabled="disabled" id="task-item-30"><label for="task-item-30"> 无限加载</label></li>
<li><input type="checkbox" checked="checked" disabled="disabled" id="task-item-31"><label for="task-item-31"> 最新/最热 根据标签名称模糊查询</label></li>
<li><input type="checkbox" checked="checked" disabled="disabled" id="task-item-32"><label for="task-item-32"> 已关注的标签</label></li>
<li><input type="checkbox" checked="checked" disabled="disabled" id="task-item-33"><label for="task-item-33"> 热门标签</label></li>
</ul>
</li>
<li>
<p>随笔</p>
<ul>
<li><input type="checkbox" checked="checked" disabled="disabled" id="task-item-34"><label for="task-item-34"> 支持markdown，增删改（仅自己的随笔）,修正分类专栏中的随笔数量</label></li>
<li><input type="checkbox" checked="checked" disabled="disabled" id="task-item-35"><label for="task-item-35"> 列表无限加载，按标签查询随笔</label></li>
<li><input type="checkbox" checked="checked" disabled="disabled" id="task-item-36"><label for="task-item-36"> 点赞随笔</label></li>
<li>随笔详情页
<ul>
<li><input type="checkbox" checked="checked" disabled="disabled" id="task-item-37"><label for="task-item-37"> 支持目录导航（滚动时，固定至顶部位置），展示字数统计、预计阅读时长；</label></li>
<li><input type="checkbox" checked="checked" disabled="disabled" id="task-item-38"><label for="task-item-38"> 作者介绍：头像，昵称，签名，随笔数；</label></li>
<li><input type="checkbox" checked="checked" disabled="disabled" id="task-item-39"><label for="task-item-39"> 展示文章类型：原创、转载、翻译</label></li>
<li><input type="checkbox"  disabled="disabled" id="task-item-40"><label for="task-item-40">  相关文章</label></li>
<li><input type="checkbox"  disabled="disabled" id="task-item-41"><label for="task-item-41">  推荐文章</label></li>
</ul>
</li>
</ul>
</li>
<li>
<p>评论</p>
<ul>
<li><input type="checkbox"  disabled="disabled" id="task-item-42"><label for="task-item-42"> 用户关闭评论时，无法对随笔进行评论</label></li>
<li><input type="checkbox"  disabled="disabled" id="task-item-43"><label for="task-item-43"> 评论随笔(内容支持超链接、emoji)</label></li>
<li><input type="checkbox" checked="checked" disabled="disabled" id="task-item-44"><label for="task-item-44"> 删除自己的评论</label></li>
<li><input type="checkbox" checked="checked" disabled="disabled" id="task-item-45"><label for="task-item-45"> 点赞评论</label></li>
<li><input type="checkbox" checked="checked" disabled="disabled" id="task-item-46"><label for="task-item-46"> 回复评论</label></li>
</ul>
</li>
<li>
<p>关注</p>
<ul>
<li><input type="checkbox" checked="checked" disabled="disabled" id="task-item-47"><label for="task-item-47"> 关注/取消关注用户</label></li>
<li><input type="checkbox" checked="checked" disabled="disabled" id="task-item-48"><label for="task-item-48"> 关注/取消关注标签</label></li>
</ul>
</li>
<li>
<p>个人主页</p>
<ul>
<li>随笔
<ul>
<li><input type="checkbox" checked="checked" disabled="disabled" id="task-item-49"><label for="task-item-49"> 用户专栏分类展示</label></li>
<li><input type="checkbox" checked="checked" disabled="disabled" id="task-item-50"><label for="task-item-50"> 最新发布的随笔</label></li>
</ul>
</li>
<li>关注
<ul>
<li><input type="checkbox" checked="checked" disabled="disabled" id="task-item-51"><label for="task-item-51"> 关注的人</label></li>
<li><input type="checkbox" checked="checked" disabled="disabled" id="task-item-52"><label for="task-item-52"> 粉丝</label></li>
<li><input type="checkbox" checked="checked" disabled="disabled" id="task-item-53"><label for="task-item-53"> 关注的标签</label></li>
</ul>
</li>
</ul>
</li>
<li>
<p>设置</p>
<ul>
<li>个人主页设置
<ul>
<li><input type="checkbox" checked="checked" disabled="disabled" id="task-item-54"><label for="task-item-54"> 个人资料更新</label></li>
</ul>
</li>
<li>安全设置
<ul>
<li><input type="checkbox" checked="checked" disabled="disabled" id="task-item-55"><label for="task-item-55"> 密码修改</label></li>
</ul>
</li>
<li>博客设置
<ul>
<li><input type="checkbox" checked="checked" disabled="disabled" id="task-item-56"><label for="task-item-56"> 默认编辑器设置(markdown/富文本)</label></li>
</ul>
</li>
</ul>
</li>
<li>
<p>消息</p>
<ul>
<li><input type="checkbox" checked="checked" disabled="disabled" id="task-item-57"><label for="task-item-57"> 点赞随笔、点赞评论</label></li>
<li><input type="checkbox" checked="checked" disabled="disabled" id="task-item-58"><label for="task-item-58"> 评论随笔、回复评论</label></li>
<li><input type="checkbox" checked="checked" disabled="disabled" id="task-item-59"><label for="task-item-59"> 用户关注</label></li>
</ul>
</li>
</ul>
<h2 id="评论模块" tabindex="-1"> 评论模块</h2>
<h3 id="主题式" tabindex="-1"> 主题式</h3>
<p>将评论分为二级，第一级采用时间倒序，二级按照时间正序，有助于理解上下文关系。</p>
<p>用户操作：</p>
<ul>
<li>评论随笔(内容支持超链接、emoji)</li>
<li>点赞评论/取消点赞</li>
<li>回复评论</li>
<li>删除自己的评论</li>
</ul>
<p>运营操作：</p>
<ul>
<li>审核通过/拉黑评论</li>
<li>删除任何评论</li>
<li>拉黑后的显示逻辑。（保留当前区块、显示内容为：该评论因违规被拉黑）</li>
<li>删除：（如果是二级评论，直接软删除，如果是一级评论，软删除子评论和当前评论-需要提前提醒用户）
交互设计</li>
<li>评论的字数长度（500）、emoji。</li>
<li>点赞交互-动画、消息通知/推送</li>
<li>评论区域元素，需要有明确可点击的区域，会跳转到哪个地方。</li>
</ul>
<h3 id="优化" tabindex="-1"> 优化</h3>
<ul>
<li>精选评论</li>
</ul>
<h3 id="脑图分享" tabindex="-1"> 脑图分享</h3>
<p><a href="http://naotu.baidu.com/file/6532431a2e1f0c37c93c5ffd1dd5b49c?token=87690a9bc64fbae1" target="_blank" rel="noopener noreferrer">http://naotu.baidu.com/file/6532431a2e1f0c37c93c5ffd1dd5b49c?token=87690a9bc64fbae1</a></p>
<h3 id="分组" tabindex="-1"> 分组</h3>
<p>分为三种</p>
<div><pre><code>id  name        info
1	Admin	    系统管理员
2	CmsAdmin	内容管理员
3	User	    普通用户
</code></pre><div aria-hidden="true"><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br></div></div><h3 id="审计日志" tabindex="-1"> 审计日志</h3>
<p>大多数表存在如下8个字段，用于记录行的变化状态，is_deleted为软删除，执行删除操作时，将其状态置为true，默认实体类继承 <strong>FullAduitEntity</strong>  即可拥有以下8个字段。该设计参考ABP中的实现。FullAduitEntity为泛型，默认id为long类型，FullAduitEntity&lt;Guid&gt;,即可改变主键类型，默认LinUser表主键long，保持<strong>create_user_id</strong>,<strong>delete_user_id</strong>,<strong>update_user_id</strong>都与LinUser的主键相同</p>
<div><pre><code>
id	                bigint
create_user_id  	bigint
create_time	        datetime
is_deleted	        bit
delete_user_id  	bigint
delete_time	        datetime
update_user_id	    bigint
update_time	        datetime


</code></pre><div aria-hidden="true"><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br></div></div><h2 id="_0-3-0版本权限功能升级" tabindex="-1"> 0.3.0版本权限功能升级</h2>
<p>为支持一个用户多个分组，一个分组多个权限，一个用户可分多种授权登录方式，根据lin-cms-springboot项目功能模块升级，介绍如下：</p>
<ol>
<li>lin_permission  权限表，本系统通过反射在系统初次启动时，启动异步任务，将不存在的权限新增到此表中。</li>
<li>lin_group_permission  分组权限表，用于分组与权限表的关联</li>
<li>lin_user_group  用户分组表。用于用户和分组表的关联。可配置一个用户属于多个分组。</li>
<li>lin_user_identity 用户授权信息表，用于存储不同登录类型的用户信息，如手机号、邮件、用户名、第三方应用（微信、QQ、GitHub）的登录</li>
</ol>
<h2 id="lin-cms-开源地址分享" tabindex="-1"> lin-cms 开源地址分享</h2>
<ul>
<li>后端接口 <a href="https://github.com/luoyunchong/lin-cms-dotnetcore" target="_blank" rel="noopener noreferrer">https://github.com/luoyunchong/lin-cms-dotnetcore</a></li>
<li>管理后台UI <a href="https://github.com/luoyunchong/lin-cms-vue" target="_blank" rel="noopener noreferrer">https://github.com/luoyunchong/lin-cms-vue</a></li>
<li>前端UI<a href="https://github.com/luoyunchong/lin-cms-vvlog" target="_blank" rel="noopener noreferrer">https://github.com/luoyunchong/lin-cms-vvlog</a></li>
</ul>
]]></content:encoded>
    </item>
    <item>
      <title>GitHub第三方授权登录</title>
      <link>https://igeekfan.cn/igeekfan-docs/dotnetcore/lin-cms/spa-github-login.html</link>
      <guid>https://igeekfan.cn/igeekfan-docs/dotnetcore/lin-cms/spa-github-login.html</guid>
      <source url="https://igeekfan.cn/igeekfan-docs/rss.xml">GitHub第三方授权登录</source>
      <category>lin-cms-dotnetcore</category>
      <pubDate>Fri, 28 Feb 2020 11:10:31 GMT</pubDate>
      <content:encoded><![CDATA[<p>使用 SPA+.NET Core3.1 实现 GitHub 第三方授权登录 类似使用 AspNet.Security.OAuth.GitHub，前端使用如下：VUE+Vue-Router+axios</p>
<h2 id="aspnet-security-oauth-github" tabindex="-1"> AspNet.Security.OAuth.GitHub</h2>
<ul>
<li>GitHub <a href="https://github.com/aspnet-contrib/AspNet.Security.OAuth.Providers" target="_blank" rel="noopener noreferrer">https://github.com/aspnet-contrib/AspNet.Security.OAuth.Providers</a></li>
</ul>
<h2 id="github-授权登录" tabindex="-1"> GitHub 授权登录</h2>
<p>什么配置的过程不说了。。有一推。</p>
<ul>
<li><a href="https://www.jianshu.com/p/78d186aeb526" target="_blank" rel="noopener noreferrer">GitHub 第三方登录</a></li>
<li><a href="https://juejin.im/post/5dfb04cee51d45583a66c2f3" target="_blank" rel="noopener noreferrer">给你的网站添加第三方登录以及短信验证功能</a></li>
</ul>
<p>下面为示例</p>
<div><pre><code>client_id:0be6b05fc717bfc4fb67
client_secret:xxxxxxxxxxxxxxx
</code></pre><div aria-hidden="true"><span>1</span><br><span>2</span><br></div></div><p>Get</p>
<div><pre><code>https://github.com/login/oauth/authorize?client_id=0be6b05fc717bfc4fb67&amp;redirect_uri=https://localhost:5001/signin-github
</code></pre><div aria-hidden="true"><span>1</span><br></div></div><p>会重定向到</p>
<p><a href="https://localhost:5001/signin-github?code=07537a84d12bbae08361" target="_blank" rel="noopener noreferrer">https://localhost:5001/signin-github?code=07537a84d12bbae08361</a></p>
<p>这个 code 放到下面的请求中，获取 access_token
POST 方式（PostMan 去请求）</p>
<div><pre><code>https://github.com/login/oauth/access_token?client_id=0be6b05fc717bfc4fb67&amp;client_secret=xxxxxxxxxxxxxxx&amp;code=07537a84d12bbae08361
</code></pre><div aria-hidden="true"><span>1</span><br></div></div><p>Get 方式</p>
<div><pre><code>https://api.github.com/user?access_token=787506afa3271d077b98f18af56d7cfdc8db43b4
</code></pre><div aria-hidden="true"><span>1</span><br></div></div><p>然后就能获取用户信息</p>
<div><pre><code><span>{</span>
  <span>"login"</span><span>:</span> <span>"luoyunchong"</span><span>,</span>
  <span>"id"</span><span>:</span> <span>18613266</span><span>,</span>
  <span>"node_id"</span><span>:</span> <span>"MDQ6VXNlcjE4NjEzMjY2"</span><span>,</span>
  <span>"avatar_url"</span><span>:</span> <span>"https://avatars1.githubusercontent.com/u/18613266?v=4"</span><span>,</span>
  <span>"gravatar_id"</span><span>:</span> <span>""</span><span>,</span>
  <span>"url"</span><span>:</span> <span>"https://api.github.com/users/luoyunchong"</span><span>,</span>
  <span>"html_url"</span><span>:</span> <span>"https://github.com/luoyunchong"</span><span>,</span>
  <span>"followers_url"</span><span>:</span> <span>"https://api.github.com/users/luoyunchong/followers"</span><span>,</span>
  <span>"following_url"</span><span>:</span> <span>"https://api.github.com/users/luoyunchong/following{/other_user}"</span><span>,</span>
  <span>"gists_url"</span><span>:</span> <span>"https://api.github.com/users/luoyunchong/gists{/gist_id}"</span><span>,</span>
  <span>"starred_url"</span><span>:</span> <span>"https://api.github.com/users/luoyunchong/starred{/owner}{/repo}"</span><span>,</span>
  <span>"subscriptions_url"</span><span>:</span> <span>"https://api.github.com/users/luoyunchong/subscriptions"</span><span>,</span>
  <span>"organizations_url"</span><span>:</span> <span>"https://api.github.com/users/luoyunchong/orgs"</span><span>,</span>
  <span>"repos_url"</span><span>:</span> <span>"https://api.github.com/users/luoyunchong/repos"</span><span>,</span>
  <span>"events_url"</span><span>:</span> <span>"https://api.github.com/users/luoyunchong/events{/privacy}"</span><span>,</span>
  <span>"received_events_url"</span><span>:</span> <span>"https://api.github.com/users/luoyunchong/received_events"</span><span>,</span>
  <span>"type"</span><span>:</span> <span>"User"</span><span>,</span>
  <span>"site_admin"</span><span>:</span> <span>false</span><span>,</span>
  <span>"name"</span><span>:</span> <span>"IGeekFan"</span><span>,</span>
  <span>"company"</span><span>:</span> <span>null</span><span>,</span>
  <span>"blog"</span><span>:</span> <span>"https://igeekfan.cn"</span><span>,</span>
  <span>"location"</span><span>:</span> <span>null</span><span>,</span>
  <span>"email"</span><span>:</span> <span>"luoyunchong@foxmail.com"</span><span>,</span>
  <span>"hireable"</span><span>:</span> <span>null</span><span>,</span>
  <span>"bio"</span><span>:</span> <span>"学习之路漫漫无期。"</span><span>,</span>
  <span>"public_repos"</span><span>:</span> <span>14</span><span>,</span>
  <span>"public_gists"</span><span>:</span> <span>0</span><span>,</span>
  <span>"followers"</span><span>:</span> <span>16</span><span>,</span>
  <span>"following"</span><span>:</span> <span>11</span><span>,</span>
  <span>"created_at"</span><span>:</span> <span>"2016-04-22T10:33:44Z"</span><span>,</span>
  <span>"updated_at"</span><span>:</span> <span>"2019-12-21T14:49:33Z"</span>
<span>}</span>
</code></pre><div aria-hidden="true"><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br><span>24</span><br><span>25</span><br><span>26</span><br><span>27</span><br><span>28</span><br><span>29</span><br><span>30</span><br><span>31</span><br><span>32</span><br><span>33</span><br></div></div><h2 id="net-core3-1" tabindex="-1"> .NET Core3.1</h2>
<p>以下代码为主要代码，完整代码看下面的 DEMO 链接。</p>
<p>使用 WebApi 时，看了一些项目，全是基于 MVC 结构的，都不是我想要的。看了一些博客上面介绍 ,步骤都是千篇一律，都是配合前后端分离的。</p>
<ul>
<li>前端运行在:http://localhost:8081</li>
<li>后端运行在:https://localhost:5001</li>
</ul>
<h3 id="前后端分离的-spa-配合第三方授权登录流程如下" tabindex="-1"> 前后端分离的 SPA 配合第三方授权登录流程如下</h3>
<p>本地测试时，gitHub 回调地址设置 http(s)😕/ip:端口/signin-github</p>
<ul>
<li>如: https://localhost:5001/signin-github。</li>
</ul>
<h4 id="_1-上面这个明明填写的后端的地址-那后端怎么把结果通知前端呢" tabindex="-1"> 1. 上面这个明明填写的后端的地址，那后端怎么把结果通知前端呢？</h4>
<p>前端请求<strong>https://localhost:5001/signin?provider=GitHub&amp;redirectUrl=http://localhost:8080/login-result</strong></p>
<ul>
<li>提供参数 provider 为 GitHub，</li>
<li>redirectUrl 为 GitHub 授权登录后，回调 signin-github 后，后端再去重定向的地址，这里填前端的一个路由。</li>
</ul>
<h4 id="_2-后端只提供了-signin-signin-callback-路由-没有-signin-github-那-github-上配置的路由是怎么回调回来呢" tabindex="-1"> 2. 后端只提供了 signin，signin-callback 路由，没有 signin-github，那 github 上配置的路由是怎么回调回来呢？</h4>
<p><a href="https://docs.microsoft.com/zh-cn/aspnet/core/security/authentication/social/google-logins?view=aspnetcore-3.1" target="_blank" rel="noopener noreferrer">google-登录，微软文档</a>，其中有一个<strong>更改默认回调 URI</strong>,通过 AddGitHub 中的 CallbackPath 属性配置。</p>
<p>介绍了回调地址应配置 signin-google,所以这里应该是 signin-github，他是可以配置的，不需要自己写程序处理 signin-google 这个路由，内部有中间件已经处理了。</p>
<h4 id="_3-回调到-signin-github-后-后端怎么处理-才能让前端刷新。获取登录后的信息呢。" tabindex="-1"> 3. 回调到 signin-github 后，后端怎么处理，才能让前端刷新。获取登录后的信息呢。</h4>
<p>具体上面的根据 code 获取 access_token，根据 access_token 获取用户的信息的过程，这些处理的过程，都不需要我们自己处理。我们可以用直接获取用户信息。</p>
<p>一个方法 SignIn,只要<strong>return Challenge(properties, provider);</strong>，</p>
<ul>
<li>provider 为 GitHub，</li>
<li>properties var properties = new AuthenticationProperties { RedirectUri = url };</li>
</ul>
<p>这个 url 为另一个获取用户信息的路由，只要拼接好地址即可。</p>
<div><pre><code>var authenticateResult = await _contextAccessor.HttpContext.AuthenticateAsync(provider);
string email = authenticateResult.Principal.FindFirst(ClaimTypes.Email)?.Value;
string name = authenticateResult.Principal.FindFirst(ClaimTypes.Name)?.Value;
</code></pre><div aria-hidden="true"><span>1</span><br><span>2</span><br><span>3</span><br></div></div><p>需要注入</p>
<div><pre><code>private readonly IHttpContextAccessor _contextAccessor;
public AuthenticationController( IHttpContextAccessor contextAccessor)
{
    _contextAccessor = contextAccessor;
}
</code></pre><div aria-hidden="true"><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br></div></div><h3 id="代码部署-简化" tabindex="-1"> 代码部署（简化）</h3>
<p>打开 NuGet 包管理,安装包</p>
<div><pre><code>Install-Package AspNet.Security.OAuth.GitHub
</code></pre><div aria-hidden="true"><span>1</span><br></div></div><p>appSettings.json</p>
<div><pre><code>"Authentication": {
    "GitHub": {
      "ClientId": "0be6b05fc717bfc4fb67",
      "ClientSecret": "xxxxxxxxxxxxxxx"
    }
}
</code></pre><div aria-hidden="true"><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br></div></div><p>add 扩展方法</p>
<div><pre><code>public static class JwtConfiguration
{
    public static void AddJwtConfiguration(this IServiceCollection services, IConfiguration configuration)
    {

        services.AddAuthentication(opts =>
            {
                opts.DefaultScheme = CookieAuthenticationDefaults.AuthenticationScheme;
                opts.DefaultAuthenticateScheme = JwtBearerDefaults.AuthenticationScheme;
            }).AddCookie(options =>
        {
            options.LoginPath = "/signin";
            options.LogoutPath = "/signout";
        }).AddGitHub(options =>
        {
            options.ClientId = configuration["Authentication:GitHub:ClientId"];
            options.ClientSecret = configuration["Authentication:GitHub:ClientSecret"];
        });
    }
}
</code></pre><div aria-hidden="true"><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br></div></div><p>默认情况下，如头像，email，是没有获取的。</p>
<div><pre><code>.AddGitHub(options =>
{
    options.ClientId = configuration["Authentication:GitHub:ClientId"];
    options.ClientSecret = configuration["Authentication:GitHub:ClientSecret"];
    //options.CallbackPath = new PathString("~/signin-github");//与GitHub上的回调地址相同，默认即是/signin-github
    options.Scope.Add("user:email");
    //authenticateResult.Principal.FindFirst(LinConsts.Claims.AvatarUrl)?.Value;  得到GitHub头像
    options.ClaimActions.MapJsonKey(LinConsts.Claims.AvatarUrl, "avatar_url");
    options.ClaimActions.MapJsonKey(LinConsts.Claims.BIO, "bio");
    options.ClaimActions.MapJsonKey(LinConsts.Claims.BlogAddress, "blog");
});

#其中LinConsts类为静态常量
public static class LinConsts
{
    public static class Claims
    {
        public const string BIO = "urn:github:bio";
        public const string AvatarUrl = "urn:github:avatar_url";
        public const string BlogAddress = "urn:github:blog";
    }
}
</code></pre><div aria-hidden="true"><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br></div></div><p>startup.cs</p>
<p>ConfigureServices 中配置此服务</p>
<div><pre><code>    services.AddSingleton&lt;IHttpContextAccessor, HttpContextAccessor>();
    services.AddJwtConfiguration(Configuration);
</code></pre><div aria-hidden="true"><span>1</span><br><span>2</span><br></div></div><p>创建 AuthenticationController.cs
增加 SignIn，用于处理用户授权成功后，重定回 signin-callback,并将参数带回。</p>
<div><pre><code>        private readonly IHttpContextAccessor _contextAccessor;
        private readonly IConfiguration _configuration;

        public AuthenticationController(IHttpContextAccessor contextAccessor, IConfiguration configuration)
        {
            _contextAccessor = contextAccessor;
            _configuration = configuration;
        }

        [HttpGet("~/signin")]
        public async Task&lt;IActionResult> SignIn(string provider, string redirectUrl)
        {
            var request = _contextAccessor.HttpContext.Request;
            var url =
                $"{request.Scheme}://{request.Host}{request.PathBase}{request.Path}-callback?provider={provider}&amp;redirectUrl={redirectUrl}";
            var properties = new AuthenticationProperties { RedirectUri = url };
            properties.Items["LoginProviderKey"] = provider;
            return Challenge(properties, provider);

        }
</code></pre><div aria-hidden="true"><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br></div></div><p>在 signin 方法中，用户点击授权后（第一次），会根据其传递的 URL，重定向到这个地址，signin-callback,参数也会一同携带。provider 为 GitHub,redirectUrl 为：http://localhost:8081/login-result.</p>
<div><pre><code>[HttpGet("~/signin-callback")]
public async Task&lt;IActionResult> Home(string provider = null, string redirectUrl = "")
{
    var authenticateResult = await _contextAccessor.HttpContext.AuthenticateAsync(provider);
    if (!authenticateResult.Succeeded) return Redirect(redirectUrl);
    var openIdClaim = authenticateResult.Principal.FindFirst(ClaimTypes.NameIdentifier);
    if (openIdClaim == null || string.IsNullOrWhiteSpace(openIdClaim.Value))
        return Redirect(redirectUrl);

    //TODO 记录授权成功后的信息

    string email = authenticateResult.Principal.FindFirst(ClaimTypes.Email)?.Value;
    string name = authenticateResult.Principal.FindFirst(ClaimTypes.Name)?.Value;
    string gitHubName = authenticateResult.Principal.FindFirst(GitHubAuthenticationConstants.Claims.Name)?.Value;
    string gitHubUrl = authenticateResult.Principal.FindFirst(GitHubAuthenticationConstants.Claims.Url)?.Value;
    //startup 中 AddGitHub配置项  options.ClaimActions.MapJsonKey(LinConsts.Claims.AvatarUrl, "avatar_url");
    string avatarUrl = authenticateResult.Principal.FindFirst(LinConsts.Claims.AvatarUrl)?.Value;

    return Redirect($"{redirectUrl}?openId={openIdClaim.Value}");
}
</code></pre><div aria-hidden="true"><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br></div></div><p>这时候我们能获取用户信息了。那么前端怎么办呢。我们写个方法，获取用户信息，看看效果。</p>
<ul>
<li>浏览器直接打开能得到 github 的 id。</li>
<li>axios GET 请求 https://localhost:5001/OpenId 得到 null</li>
</ul>
<div><pre><code>[HttpGet("~/OpenId")]
public async Task&lt;string> OpenId(string provider = null)
{
   var authenticateResult = await _contextAccessor.HttpContext.AuthenticateAsync(provider);
   if (!authenticateResult.Succeeded) return null;
   var openIdClaim = authenticateResult.Principal.FindFirst(ClaimTypes.NameIdentifier);
   return openIdClaim?.Value;
}
</code></pre><div aria-hidden="true"><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br></div></div><p>我记得之前传 Token 时，后台是可以这样获取的。</p>
<div><pre><code>[HttpGet("~/GetOpenIdByToken")]
public string GetOpenIdByToken()
{
    return User.FindFirst(ClaimTypes.NameIdentifier)?.Value;
}
</code></pre><div aria-hidden="true"><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br></div></div><p>LoginResult.vue 在 created 生命周期中。都是得到 null</p>
<div><pre><code>axios({
  methods: "get",
  url: "https://localhost:5001/OpenId?provider=GitHub"
})
  .then(function(response) {
    // handle success
    console.log(response);
  })

axios({
  methods: "get",
  url: "https://localhost:5001/GetOpenIdByToken"
})
  .then(function(response) {
    // handle success
    console.log(response);
  })
</code></pre><div aria-hidden="true"><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br></div></div><h3 id="为什么呢" tabindex="-1"> 为什么呢？？？</h3>
<p>因为前后端分离，不是基于 Cookies 的。http 是无状态的。每次请求无法区分用户的。我们可以根据当前的 ClaimsPrincipal，根据 JWT 生成相应的 Token，axios 请求时，放到 headers 中。</p>
<p>安装包</p>
<div><pre><code>Install-Package Microsoft.AspNetCore.Authentication.JwtBearer
</code></pre><div aria-hidden="true"><span>1</span><br></div></div><p>AppSettings.json 配置改成</p>
<div><pre><code>"Authentication": {
"JwtBearer": {
  "SecurityKey": "JWTStudyWebsite_DI20DXU3",
  "Issuer": "JWTStudy",
  "Audience": "JWTStudyWebsite"
},
"GitHub": {
  "ClientId": "0be6b05fc717bfc4fb67",
  "ClientSecret": "xxxxxxxxxxxxxxx"
}
}
</code></pre><div aria-hidden="true"><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br></div></div><p>在 signin-callback 路由中，得到 authenticateResult.Principal，其中默认包含了(id,login,name,url)，授权得到 eamil，另外 MapJsonKey 扩展了以下字段（avatar_url、bio、blog)</p>
<div><pre><code><span><span>var</span></span> authenticateResult <span>=</span> <span>await</span> _contextAccessor<span>.</span>HttpContext<span>.</span><span>AuthenticateAsync</span><span>(</span>provider<span>)</span><span>;</span>
<span><span>string</span></span> token <span>=</span> <span>this</span><span>.</span><span>CreateToken</span><span>(</span>authenticateResult<span>.</span>Principal<span>)</span><span>;</span>
</code></pre><div aria-hidden="true"><span>1</span><br><span>2</span><br></div></div><p>根据 ClaimsPrincipal 值生成 token 值。</p>
<div><pre><code><span>private</span> <span><span>string</span></span> <span>CreateToken</span><span>(</span><span>ClaimsPrincipal</span> claimsPrincipal<span>)</span>
<span>{</span>

    <span><span>var</span></span> handler <span>=</span> <span>new</span> <span>JwtSecurityTokenHandler</span><span>(</span><span>)</span><span>;</span>
    <span><span>var</span></span> key <span>=</span> <span>new</span> <span>SymmetricSecurityKey</span><span>(</span>
        Encoding<span>.</span>UTF8<span>.</span><span>GetBytes</span><span>(</span>_configuration<span>[</span><span>"Authentication:JwtBearer:SecurityKey"</span><span>]</span><span>)</span><span>)</span><span>;</span>
    <span><span>var</span></span> credentials <span>=</span> <span>new</span> <span>SigningCredentials</span><span>(</span>key<span>,</span> SecurityAlgorithms<span>.</span>HmacSha256<span>)</span><span>;</span>
    <span><span>var</span></span> token <span>=</span> <span>new</span> <span>JwtSecurityToken</span><span>(</span>
        _configuration<span>[</span><span>"Authentication:JwtBearer:Issuer"</span><span>]</span><span>,</span>
        _configuration<span>[</span><span>"Authentication:JwtBearer:Audience"</span><span>]</span><span>,</span>
        claimsPrincipal<span>.</span>Claims<span>,</span>
        <span>expires</span><span>:</span> DateTime<span>.</span>Now<span>.</span><span>AddMinutes</span><span>(</span><span>30</span><span>)</span><span>,</span>
        <span>signingCredentials</span><span>:</span> credentials
    <span>)</span><span>;</span>

    <span>return</span> handler<span>.</span><span>WriteToken</span><span>(</span>token<span>)</span><span>;</span>
<span>}</span>
</code></pre><div aria-hidden="true"><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br></div></div><p>这里的 claimsPrincipal 是什么呢。简单的说就是一个存有 github 授权信息的对象，可以解析出对应的 Clamis，这里其实就是用了 Clamis 的属性值。</p>
<table>
<thead>
<tr>
<th>Claim</th>
<th>ClaimsIdentity</th>
<th>ClaimsPrincipal</th>
</tr>
</thead>
<tbody>
<tr>
<td>id、name,url,email,avatar_url 等</td>
<td>由多组 Claim 组成，这里可指 GitHub 授权登录后得到的那个对象。</td>
<td>ClaimsIdentity 的持有者</td>
</tr>
</tbody>
</table>
<p>具体 Jwt 的生成与配置项。这里不详细说明。可以看这个示例（.NET Core2.2）<a href="https://github.com/luoyunchong/BasicTemplate" target="_blank" rel="noopener noreferrer">https://github.com/luoyunchong/BasicTemplate</a></p>
<p>AddJwtConfiguration 改成如下内容</p>
<div><pre><code><span>public</span> <span>static</span> <span><span>void</span></span> <span>AddJwtConfiguration</span><span>(</span><span>this</span> <span>IServiceCollection</span> services<span>,</span> <span>IConfiguration</span> configuration<span>)</span>
<span>{</span>

    services<span>.</span><span>AddAuthentication</span><span>(</span>opts <span>=></span>
        <span>{</span>
            opts<span>.</span>DefaultScheme <span>=</span> CookieAuthenticationDefaults<span>.</span>AuthenticationScheme<span>;</span>
            opts<span>.</span>DefaultAuthenticateScheme <span>=</span> JwtBearerDefaults<span>.</span>AuthenticationScheme<span>;</span>
        <span>}</span><span>)</span><span>.</span><span>AddCookie</span><span>(</span>options <span>=></span>
    <span>{</span>
        options<span>.</span>LoginPath <span>=</span> <span>"/signin"</span><span>;</span>
        options<span>.</span>LogoutPath <span>=</span> <span>"/signout"</span><span>;</span>
    <span>}</span><span>)</span><span>.</span><span>AddJwtBearer</span><span>(</span>JwtBearerDefaults<span>.</span>AuthenticationScheme<span>,</span> options <span>=></span>
    <span>{</span>
        options<span>.</span>Audience <span>=</span> configuration<span>[</span><span>"Authentication:JwtBearer:Audience"</span><span>]</span><span>;</span>

        options<span>.</span>TokenValidationParameters <span>=</span> <span>new</span> <span>TokenValidationParameters</span>
        <span>{</span>
            <span>// The signing key must match!</span>
            ValidateIssuerSigningKey <span>=</span> <span>true</span><span>,</span>
            IssuerSigningKey <span>=</span> <span>new</span> <span>SymmetricSecurityKey</span><span>(</span>
                Encoding<span>.</span>ASCII<span>.</span><span>GetBytes</span><span>(</span>configuration<span>[</span><span>"Authentication:JwtBearer:SecurityKey"</span><span>]</span><span>)</span><span>)</span><span>,</span>

            <span>// Validate the JWT Issuer (iss) claim</span>
            ValidateIssuer <span>=</span> <span>true</span><span>,</span>
            ValidIssuer <span>=</span> configuration<span>[</span><span>"Authentication:JwtBearer:Issuer"</span><span>]</span><span>,</span>

            <span>// Validate the JWT Audience (aud) claim</span>
            ValidateAudience <span>=</span> <span>true</span><span>,</span>
            ValidAudience <span>=</span> configuration<span>[</span><span>"Authentication:JwtBearer:Audience"</span><span>]</span><span>,</span>

            <span>// Validate the token expiry</span>
            ValidateLifetime <span>=</span> <span>true</span><span>,</span>

            <span>// If you want to allow a certain amount of clock drift, set that here</span>
            <span>//ClockSkew = TimeSpan.Zero</span>
        <span>}</span><span>;</span>
    <span>}</span><span>)</span><span>.</span><span>AddGitHub</span><span>(</span>options <span>=></span>
    <span>{</span>
        options<span>.</span>ClientId <span>=</span> configuration<span>[</span><span>"Authentication:GitHub:ClientId"</span><span>]</span><span>;</span>
        options<span>.</span>ClientSecret <span>=</span> configuration<span>[</span><span>"Authentication:GitHub:ClientSecret"</span><span>]</span><span>;</span>
        <span>//options.CallbackPath = new PathString("~/signin-github");//与GitHub上的回调地址相同，默认即是/signin-github</span>
        options<span>.</span>Scope<span>.</span><span>Add</span><span>(</span><span>"user:email"</span><span>)</span><span>;</span>
        <span>//authenticateResult.Principal.FindFirst(LinConsts.Claims.AvatarUrl)?.Value;  得到GitHub头像</span>
        options<span>.</span>ClaimActions<span>.</span><span>MapJsonKey</span><span>(</span>LinConsts<span>.</span>Claims<span>.</span>AvatarUrl<span>,</span> <span>"avatar_url"</span><span>)</span><span>;</span>
        options<span>.</span>ClaimActions<span>.</span><span>MapJsonKey</span><span>(</span>LinConsts<span>.</span>Claims<span>.</span>BIO<span>,</span> <span>"bio"</span><span>)</span><span>;</span>
        options<span>.</span>ClaimActions<span>.</span><span>MapJsonKey</span><span>(</span>LinConsts<span>.</span>Claims<span>.</span>BlogAddress<span>,</span> <span>"blog"</span><span>)</span><span>;</span>
    <span>}</span><span>)</span><span>;</span>
<span>}</span>
</code></pre><div aria-hidden="true"><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br><span>24</span><br><span>25</span><br><span>26</span><br><span>27</span><br><span>28</span><br><span>29</span><br><span>30</span><br><span>31</span><br><span>32</span><br><span>33</span><br><span>34</span><br><span>35</span><br><span>36</span><br><span>37</span><br><span>38</span><br><span>39</span><br><span>40</span><br><span>41</span><br><span>42</span><br><span>43</span><br><span>44</span><br><span>45</span><br><span>46</span><br><span>47</span><br><span>48</span><br></div></div><p><a href="https://github.com/luoyunchong/dotnetcore-examples/blob/master/aspnetcore-oatuth2/spa-vue-oauth2/src/components/LoginResult.vue" target="_blank" rel="noopener noreferrer">前端 LoginResult.vue 代码</a></p>
<p>前端运行</p>
<div><pre><code><span>yarn</span> <span>install</span>
<span>yarn</span> serve
</code></pre><div aria-hidden="true"><span>1</span><br><span>2</span><br></div></div><p>点击 GitHub 登录</p>
<p>GetOpenIdByToken 根据生成的 token 值，解析出了用户 id,这样前端在 login-result 这个组件中，把 token 保存好，并重定向自己的主页，获取用户所有信息即可。</p>
<div><pre><code>data: 18613266
status: 200
config: {url: "https://localhost:5001/GetOpenIdByToken"}
</code></pre><div aria-hidden="true"><span>1</span><br><span>2</span><br><span>3</span><br></div></div><p>OpenId?provider=GitHub 则得不到数据，只能浏览器直接请求 https://localhost:5001/OpenId?provider=GitHub，才能到 github 的 id。这个适应于前后端不分离，或者属于之前我们经常使用 MVC 结构，同一域名下，同一端口，基于 Cookies 登录的判断。</p>
<h2 id="参考" tabindex="-1"> 参考</h2>
<ul>
<li><a href="https://www.cnblogs.com/rsls/p/10522649.html" target="_blank" rel="noopener noreferrer">.net Core2.2 WebApi 通过 OAuth2.0 实现微信登录</a></li>
<li><a href="https://blog.csdn.net/weixin_30414305/article/details/101389325" target="_blank" rel="noopener noreferrer">AspNetCore3.0 和 JWT</a></li>
<li><a href="http://www.woshipm.com/pd/509712.html" target="_blank" rel="noopener noreferrer">用户系统设计：第三方授权、账号绑定及解绑（下）</a></li>
</ul>
<h2 id="demo-示例" tabindex="-1"> Demo 示例</h2>
<ul>
<li>GitHub <a href="https://github.com/luoyunchong/dotnetcore-examples/blob/master/aspnetcore-oatuth2" target="_blank" rel="noopener noreferrer">https://github.com/luoyunchong/dotnetcore-examples/blob/master/aspnetcore-oatuth2</a></li>
</ul>
]]></content:encoded>
    </item>
    <item>
      <title>前端准备</title>
      <link>https://igeekfan.cn/igeekfan-docs/dotnetcore/lin-cms/vue-start.html</link>
      <guid>https://igeekfan.cn/igeekfan-docs/dotnetcore/lin-cms/vue-start.html</guid>
      <source url="https://igeekfan.cn/igeekfan-docs/rss.xml">前端准备</source>
      <pubDate>Fri, 28 Feb 2020 11:10:31 GMT</pubDate>
      <content:encoded><![CDATA[<h1 id="前端准备" tabindex="-1"> 前端准备</h1>
<h2 id="开源地址" tabindex="-1"> 开源地址</h2>
<ul>
<li>管理端 UI <a href="https://github.com/luoyunchong/lin-cms-vue" target="_blank" rel="noopener noreferrer">https://github.com/luoyunchong/lin-cms-vue</a></li>
<li>用户端 UI <a href="https://github.com/luoyunchong/lin-cms-vvlog" target="_blank" rel="noopener noreferrer">https://github.com/luoyunchong/lin-cms-vvlog</a></li>
</ul>
<h2 id="博客模块线上地址" tabindex="-1"> 博客模块线上地址</h2>
<ul>
<li>本项目 swagger 地址 <a href="https://api.igeekfan.cn/swagger/index.html" target="_blank" rel="noopener noreferrer">https://api.igeekfan.cn/swagger/index.html</a></li>
<li>用户端 lin-cms-vvlog <a href="https://vvlog.baimocore.cn" target="_blank" rel="noopener noreferrer">https://vvlog.baimocore.cn</a>
<ul>
<li>普通用户：710277267@qq.com</li>
<li>密码：123qwe</li>
</ul>
</li>
<li>管理员 lin-cms-vue <a href="https://cms.baimocore.cn" target="_blank" rel="noopener noreferrer">https://cms.baimocore.cn/</a>
<ul>
<li>管理员： admin</li>
<li>密码：123qwe</li>
</ul>
</li>
</ul>
<h2 id="快速上手" tabindex="-1"> 快速上手</h2>
<p>开发必备</p>
<ul>
<li><a href="https://nodejs.org/en/" target="_blank" rel="noopener noreferrer">Node.js 10+</a> 版本即可，我须安装 12.7</li>
<li><a href="https://yarnpkg.com/zh-Hant/docs/install#windows-stable" target="_blank" rel="noopener noreferrer">yarn</a></li>
</ul>
<p>如果以下命令有问题，请删除 yarn.lock，node_modules 文件夹后，重新执行 yarn，yarn serve</p>
<div><pre><code># clone the project
git clone https://github.com/luoyunchong/lin-cms-vue.git

# install dependency
yarn

# develop
yarn serve

# deploy
yarn deploy
</code></pre><div aria-hidden="true"><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br></div></div><h2 id="deploy-发布" tabindex="-1"> deploy 发布</h2>
<p>scp2 方便快速发布，一行命令就能快速发布成功。</p>
<p>必备条件：（参数）</p>
<ul>
<li>一台 linux 的服务器，ip</li>
<li>用户名</li>
<li>密码</li>
<li>端口：默认是 22</li>
<li>发布的地址。这里放到/var/www/lin-cms-vue 目录中。</li>
</ul>
<h2 id="步骤" tabindex="-1"> 步骤</h2>
<p>根目录新建 deploy 目录，创建 index.js 文件。</p>
<div><pre><code>'use strict'
// 引入scp2模块
var client = require('scp2');
const ora = require('ora')
const chalk = require('chalk')
const spinner = ora('正在发布到生产服务器...')
spinner.start()
client.scp('dist/', {
    "host": "",
    "username": "",
    "password": "",
    "port": "22",
    "path": "/var/www/lin-cms-vue"
}, function (err) {
    spinner.stop()
    if (!err) {
        console.log("npm run build-scp2: scp2工具上传完毕,远端服务路径：/var/www/lin-cms-vue")
    } else {
        console.log("err", err)
    }
})
</code></pre><div aria-hidden="true"><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br></div></div><p>快速发布，需要安装 scp2</p>
<div><pre><code>cnpm install scp2
</code></pre><div aria-hidden="true"><span>1</span><br></div></div><p>package.json 中增加</p>
<div><pre><code>  "scripts": {
    "deploy": "yarn build:production &amp;&amp; node ./deploy",
}
</code></pre><div aria-hidden="true"><span>1</span><br><span>2</span><br><span>3</span><br></div></div><div><pre><code>yarn deploy
</code></pre><div aria-hidden="true"><span>1</span><br></div></div><h2 id="nginx-配置" tabindex="-1"> nginx 配置</h2>
<ul>
<li>vue 使用 history 的配置</li>
</ul>
<div><pre><code>server {
    listen 8080;
    root /var/www/lin-cms-vue;

   charset utf-8;
   location / {
       try_files $uri $uri/ /index.html;

     }

    error_page   500 502 503 504  /50x.html;
    location = /50x.html {
        root   html;
    }

}
</code></pre><div aria-hidden="true"><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br></div></div><h2 id="配置项" tabindex="-1"> 配置项</h2>
<ol>
<li>
<p>配置 api 地址： 打开配置文件 src/config/index.js 配置 baseUrl ，本地开发阶段配置本地虚拟域名(https://localhost:5001/)，线上部署生产域名。</p>
</li>
<li>
<p>用户名：<strong>admin</strong> 密码 <strong>123qwe</strong></p>
</li>
</ol>
]]></content:encoded>
    </item>
  </channel>
</rss>